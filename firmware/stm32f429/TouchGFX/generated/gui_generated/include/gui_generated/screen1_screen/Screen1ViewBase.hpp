/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/TiledImage.hpp>
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/containers/ScrollableContainer.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>

#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
    virtual void setupScreen();
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void on_change_R(int value)
    {
        // Override and implement this function in Screen1
    }

    virtual void on_change_G(int value)
    {
        // Override and implement this function in Screen1
    }

    virtual void on_change_B(int value)
    {
        // Override and implement this function in Screen1
    }

    virtual void on_change_V(int value)
    {
        // Override and implement this function in Screen1
    }

    virtual void on_enter_screen()
    {
        // Override and implement this function in Screen1
    }

    virtual void on_click_clear_button()
    {
        // Override and implement this function in Screen1
    }

    virtual void on_click_mode()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::TiledImage background;
    touchgfx::SwipeContainer mainPage;
    touchgfx::Container logPanel;
    touchgfx::TextArea logTitle;
    touchgfx::BoxWithBorder boxWithBorder1;
    touchgfx::ScrollableContainer scrollableContainer1;
    touchgfx::TextAreaWithOneWildcard logContent;
    touchgfx::ButtonWithLabel clearButton;

    touchgfx::Container controlPanel;
    touchgfx::TextArea contolTitle;
    touchgfx::Slider vibSlider;
    touchgfx::Slider blueSlider;
    touchgfx::Slider greenSlider;
    touchgfx::Slider redSlider;
    touchgfx::TextArea vibText;
    touchgfx::TextArea blueText;
    touchgfx::TextArea greenText;
    touchgfx::TextArea redText;

    touchgfx::Container statusPanel;
    touchgfx::ToggleButton autoModeButton;
    touchgfx::TextArea statusTitle;
    touchgfx::TextArea ambiText;
    touchgfx::TextArea humiText;
    touchgfx::TextArea tempText;
    touchgfx::TextArea modeText;
    touchgfx::BoxProgress ambiBgBar;
    touchgfx::BoxProgress humiBgBar;
    touchgfx::BoxProgress tempBgBar;
    touchgfx::TextAreaWithOneWildcard ambiVal;
    touchgfx::TextAreaWithOneWildcard humiVal;
    touchgfx::TextAreaWithOneWildcard tempVal;


    /*
     * Wildcard Buffers
     */
    static const uint16_t LOGCONTENT_SIZE = 32768;
    touchgfx::Unicode::UnicodeChar logContentBuffer[LOGCONTENT_SIZE];
    static const uint16_t AMBIVAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar ambiValBuffer[AMBIVAL_SIZE];
    static const uint16_t HUMIVAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar humiValBuffer[HUMIVAL_SIZE];
    static const uint16_t TEMPVAL_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tempValBuffer[TEMPVAL_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<Screen1ViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // SCREEN1VIEWBASE_HPP
