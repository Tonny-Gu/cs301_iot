
cs301_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021bfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000471c  08021dac  08021dac  00031dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000a246  080264c8  080264c8  000364c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 0004d448  08030710  08030710  00040710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000148  0807db58  0807db58  0008db58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0807dca0  0807dca0  000900cc  2**0
                  CONTENTS
  7 .ARM          00000008  0807dca0  0807dca0  0008dca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0807dca8  0807dca8  000900cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   0000000c  0807dca8  0807dca8  0008dca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0807dcb4  0807dcb4  0008dcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000000cc  20000000  0807dcbc  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0001a9b4  200000cc  0807dd88  000900cc  2**2
                  ALLOC
 13 ._user_heap_stack 00006000  2001aa80  0807dd88  0009aa80  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  000900cc  2**0
                  CONTENTS, READONLY
 15 .debug_info   000a3252  00000000  00000000  000900fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00017757  00000000  00000000  0013334e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00005fb8  00000000  00000000  0014aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00005928  00000000  00000000  00150a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00036274  00000000  00000000  00156388  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00049ab6  00000000  00000000  0018c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0010c1bf  00000000  00000000  001d60b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  002e2271  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001a6a0  00000000  00000000  002e236c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08021d94 	.word	0x08021d94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	08021d94 	.word	0x08021d94

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b972 	b.w	8000d88 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9e08      	ldr	r6, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4688      	mov	r8, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14b      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4615      	mov	r5, r2
 8000ace:	d967      	bls.n	8000ba0 <__udivmoddi4+0xe4>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0720 	rsb	r7, r2, #32
 8000ada:	fa01 f302 	lsl.w	r3, r1, r2
 8000ade:	fa20 f707 	lsr.w	r7, r0, r7
 8000ae2:	4095      	lsls	r5, r2
 8000ae4:	ea47 0803 	orr.w	r8, r7, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aee:	0c23      	lsrs	r3, r4, #16
 8000af0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000af4:	fa1f fc85 	uxth.w	ip, r5
 8000af8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000afc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b00:	fb07 f10c 	mul.w	r1, r7, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d909      	bls.n	8000b1c <__udivmoddi4+0x60>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b0e:	f080 811b 	bcs.w	8000d48 <__udivmoddi4+0x28c>
 8000b12:	4299      	cmp	r1, r3
 8000b14:	f240 8118 	bls.w	8000d48 <__udivmoddi4+0x28c>
 8000b18:	3f02      	subs	r7, #2
 8000b1a:	442b      	add	r3, r5
 8000b1c:	1a5b      	subs	r3, r3, r1
 8000b1e:	b2a4      	uxth	r4, r4
 8000b20:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b24:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b30:	45a4      	cmp	ip, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x8c>
 8000b34:	192c      	adds	r4, r5, r4
 8000b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3a:	f080 8107 	bcs.w	8000d4c <__udivmoddi4+0x290>
 8000b3e:	45a4      	cmp	ip, r4
 8000b40:	f240 8104 	bls.w	8000d4c <__udivmoddi4+0x290>
 8000b44:	3802      	subs	r0, #2
 8000b46:	442c      	add	r4, r5
 8000b48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b4c:	eba4 040c 	sub.w	r4, r4, ip
 8000b50:	2700      	movs	r7, #0
 8000b52:	b11e      	cbz	r6, 8000b5c <__udivmoddi4+0xa0>
 8000b54:	40d4      	lsrs	r4, r2
 8000b56:	2300      	movs	r3, #0
 8000b58:	e9c6 4300 	strd	r4, r3, [r6]
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d909      	bls.n	8000b7a <__udivmoddi4+0xbe>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	f000 80eb 	beq.w	8000d42 <__udivmoddi4+0x286>
 8000b6c:	2700      	movs	r7, #0
 8000b6e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b72:	4638      	mov	r0, r7
 8000b74:	4639      	mov	r1, r7
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f783 	clz	r7, r3
 8000b7e:	2f00      	cmp	r7, #0
 8000b80:	d147      	bne.n	8000c12 <__udivmoddi4+0x156>
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd0>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fa 	bhi.w	8000d80 <__udivmoddi4+0x2c4>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e0      	beq.n	8000b5c <__udivmoddi4+0xa0>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7dd      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xe8>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 808f 	bne.w	8000ccc <__udivmoddi4+0x210>
 8000bae:	1b49      	subs	r1, r1, r5
 8000bb0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb4:	fa1f f885 	uxth.w	r8, r5
 8000bb8:	2701      	movs	r7, #1
 8000bba:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bc4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x124>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x122>
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	f200 80cd 	bhi.w	8000d78 <__udivmoddi4+0x2bc>
 8000bde:	4684      	mov	ip, r0
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	b2a3      	uxth	r3, r4
 8000be4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000be8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bf0:	fb08 f800 	mul.w	r8, r8, r0
 8000bf4:	45a0      	cmp	r8, r4
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x14c>
 8000bf8:	192c      	adds	r4, r5, r4
 8000bfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x14a>
 8000c00:	45a0      	cmp	r8, r4
 8000c02:	f200 80b6 	bhi.w	8000d72 <__udivmoddi4+0x2b6>
 8000c06:	4618      	mov	r0, r3
 8000c08:	eba4 0408 	sub.w	r4, r4, r8
 8000c0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c10:	e79f      	b.n	8000b52 <__udivmoddi4+0x96>
 8000c12:	f1c7 0c20 	rsb	ip, r7, #32
 8000c16:	40bb      	lsls	r3, r7
 8000c18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c20:	fa01 f407 	lsl.w	r4, r1, r7
 8000c24:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c28:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c30:	4325      	orrs	r5, r4
 8000c32:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c36:	0c2c      	lsrs	r4, r5, #16
 8000c38:	fb08 3319 	mls	r3, r8, r9, r3
 8000c3c:	fa1f fa8e 	uxth.w	sl, lr
 8000c40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c44:	fb09 f40a 	mul.w	r4, r9, sl
 8000c48:	429c      	cmp	r4, r3
 8000c4a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c4e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c52:	d90b      	bls.n	8000c6c <__udivmoddi4+0x1b0>
 8000c54:	eb1e 0303 	adds.w	r3, lr, r3
 8000c58:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c5c:	f080 8087 	bcs.w	8000d6e <__udivmoddi4+0x2b2>
 8000c60:	429c      	cmp	r4, r3
 8000c62:	f240 8084 	bls.w	8000d6e <__udivmoddi4+0x2b2>
 8000c66:	f1a9 0902 	sub.w	r9, r9, #2
 8000c6a:	4473      	add	r3, lr
 8000c6c:	1b1b      	subs	r3, r3, r4
 8000c6e:	b2ad      	uxth	r5, r5
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c80:	45a2      	cmp	sl, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x1da>
 8000c84:	eb1e 0404 	adds.w	r4, lr, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	d26b      	bcs.n	8000d66 <__udivmoddi4+0x2aa>
 8000c8e:	45a2      	cmp	sl, r4
 8000c90:	d969      	bls.n	8000d66 <__udivmoddi4+0x2aa>
 8000c92:	3802      	subs	r0, #2
 8000c94:	4474      	add	r4, lr
 8000c96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c9a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c9e:	eba4 040a 	sub.w	r4, r4, sl
 8000ca2:	454c      	cmp	r4, r9
 8000ca4:	46c2      	mov	sl, r8
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	d354      	bcc.n	8000d54 <__udivmoddi4+0x298>
 8000caa:	d051      	beq.n	8000d50 <__udivmoddi4+0x294>
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d069      	beq.n	8000d84 <__udivmoddi4+0x2c8>
 8000cb0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cb4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cbc:	40fd      	lsrs	r5, r7
 8000cbe:	40fc      	lsrs	r4, r7
 8000cc0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cc4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e747      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000ccc:	f1c2 0320 	rsb	r3, r2, #32
 8000cd0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cd4:	4095      	lsls	r5, r2
 8000cd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cda:	fa21 f303 	lsr.w	r3, r1, r3
 8000cde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce2:	4338      	orrs	r0, r7
 8000ce4:	0c01      	lsrs	r1, r0, #16
 8000ce6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cea:	fa1f f885 	uxth.w	r8, r5
 8000cee:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb07 f308 	mul.w	r3, r7, r8
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	fa04 f402 	lsl.w	r4, r4, r2
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x256>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d08:	d22f      	bcs.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d92d      	bls.n	8000d6a <__udivmoddi4+0x2ae>
 8000d0e:	3f02      	subs	r7, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1acb      	subs	r3, r1, r3
 8000d14:	b281      	uxth	r1, r0
 8000d16:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d22:	fb00 f308 	mul.w	r3, r0, r8
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d907      	bls.n	8000d3a <__udivmoddi4+0x27e>
 8000d2a:	1869      	adds	r1, r5, r1
 8000d2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d30:	d217      	bcs.n	8000d62 <__udivmoddi4+0x2a6>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d915      	bls.n	8000d62 <__udivmoddi4+0x2a6>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4429      	add	r1, r5
 8000d3a:	1ac9      	subs	r1, r1, r3
 8000d3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d40:	e73b      	b.n	8000bba <__udivmoddi4+0xfe>
 8000d42:	4637      	mov	r7, r6
 8000d44:	4630      	mov	r0, r6
 8000d46:	e709      	b.n	8000b5c <__udivmoddi4+0xa0>
 8000d48:	4607      	mov	r7, r0
 8000d4a:	e6e7      	b.n	8000b1c <__udivmoddi4+0x60>
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	e6fb      	b.n	8000b48 <__udivmoddi4+0x8c>
 8000d50:	4541      	cmp	r1, r8
 8000d52:	d2ab      	bcs.n	8000cac <__udivmoddi4+0x1f0>
 8000d54:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d58:	eb69 020e 	sbc.w	r2, r9, lr
 8000d5c:	3801      	subs	r0, #1
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7a4      	b.n	8000cac <__udivmoddi4+0x1f0>
 8000d62:	4660      	mov	r0, ip
 8000d64:	e7e9      	b.n	8000d3a <__udivmoddi4+0x27e>
 8000d66:	4618      	mov	r0, r3
 8000d68:	e795      	b.n	8000c96 <__udivmoddi4+0x1da>
 8000d6a:	4667      	mov	r7, ip
 8000d6c:	e7d1      	b.n	8000d12 <__udivmoddi4+0x256>
 8000d6e:	4681      	mov	r9, r0
 8000d70:	e77c      	b.n	8000c6c <__udivmoddi4+0x1b0>
 8000d72:	3802      	subs	r0, #2
 8000d74:	442c      	add	r4, r5
 8000d76:	e747      	b.n	8000c08 <__udivmoddi4+0x14c>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	442b      	add	r3, r5
 8000d7e:	e72f      	b.n	8000be0 <__udivmoddi4+0x124>
 8000d80:	4638      	mov	r0, r7
 8000d82:	e708      	b.n	8000b96 <__udivmoddi4+0xda>
 8000d84:	4637      	mov	r7, r6
 8000d86:	e6e9      	b.n	8000b5c <__udivmoddi4+0xa0>

08000d88 <__aeabi_idiv0>:
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop

08000d8c <_Z13get_env_statev>:

char debug_log_buf[ DEBUG_LOG_BUF_SIZE ];
uint16_t debug_log_size;

Env_State get_env_state()
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
	return _dev_env;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <_Z13get_env_statev+0x28>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	88ba      	ldrh	r2, [r7, #4]
 8000d9c:	f362 030f 	bfi	r3, r2, #0, #16
 8000da0:	88fa      	ldrh	r2, [r7, #6]
 8000da2:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	200000fc 	.word	0x200000fc

08000db8 <_Z15get_motor_statev>:

Motor_State get_motor_state()
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
	return _dev_motor;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <_Z15get_motor_statev+0x14>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200000f8 	.word	0x200000f8

08000dd0 <_Z13get_led_statev>:

LED_State get_led_state()
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	return _dev_led;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_Z13get_led_statev+0x20>)
 8000ddc:	6810      	ldr	r0, [r2, #0]
 8000dde:	6018      	str	r0, [r3, #0]
 8000de0:	8892      	ldrh	r2, [r2, #4]
 8000de2:	809a      	strh	r2, [r3, #4]
}
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	200000e8 	.word	0x200000e8

08000df4 <_Z14get_node_statev>:

Node_State get_node_state()
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
	return _dev_self;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_Z14get_node_statev+0x28>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	2300      	movs	r3, #0
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	f362 030f 	bfi	r3, r2, #0, #16
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000100 	.word	0x20000100

08000e20 <_Z9set_motor11Motor_State>:

void set_motor(Motor_State state)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	80b8      	strh	r0, [r7, #4]
	_dev_motor = state;
 8000e28:	4a0c      	ldr	r2, [pc, #48]	; (8000e5c <_Z9set_motor11Motor_State+0x3c>)
 8000e2a:	88bb      	ldrh	r3, [r7, #4]
 8000e2c:	8013      	strh	r3, [r2, #0]

	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2e:	2360      	movs	r3, #96	; 0x60
 8000e30:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]

	sConfigOC.Pulse = state.speed;
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3);
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2208      	movs	r2, #8
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <_Z9set_motor11Motor_State+0x40>)
 8000e48:	f007 f868 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000e4c:	2108      	movs	r1, #8
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <_Z9set_motor11Motor_State+0x40>)
 8000e50:	f006 ff1e 	bl	8007c90 <HAL_TIM_PWM_Start>
}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	; 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200000f8 	.word	0x200000f8
 8000e60:	20000894 	.word	0x20000894

08000e64 <_Z7set_led9LED_State>:

void set_led(LED_State state)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	e883 0003 	stmia.w	r3, {r0, r1}
	_dev_led = state;
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <_Z7set_led9LED_State+0x7c>)
 8000e72:	463a      	mov	r2, r7
 8000e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e78:	6018      	str	r0, [r3, #0]
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	8019      	strh	r1, [r3, #0]

	TIM_OC_InitTypeDef sConfigOC;

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	; 0x60
 8000e80:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e82:	2302      	movs	r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]

	sConfigOC.Pulse = state.r;
 8000e8a:	883b      	ldrh	r3, [r7, #0]
 8000e8c:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <_Z7set_led9LED_State+0x80>)
 8000e98:	f007 f840 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <_Z7set_led9LED_State+0x80>)
 8000ea0:	f006 fef6 	bl	8007c90 <HAL_TIM_PWM_Start>

	sConfigOC.Pulse = state.g;
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2204      	movs	r2, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <_Z7set_led9LED_State+0x84>)
 8000eb2:	f007 f833 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <_Z7set_led9LED_State+0x84>)
 8000eba:	f006 fee9 	bl	8007c90 <HAL_TIM_PWM_Start>

	sConfigOC.Pulse = state.b;
 8000ebe:	88bb      	ldrh	r3, [r7, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
	HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4808      	ldr	r0, [pc, #32]	; (8000eec <_Z7set_led9LED_State+0x88>)
 8000ecc:	f007 f826 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <_Z7set_led9LED_State+0x88>)
 8000ed4:	f006 fedc 	bl	8007c90 <HAL_TIM_PWM_Start>
}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	; 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000e8 	.word	0x200000e8
 8000ee4:	20000894 	.word	0x20000894
 8000ee8:	200008d4 	.word	0x200008d4
 8000eec:	20000854 	.word	0x20000854

08000ef0 <_Z11turn_led_onv>:

void turn_led_on()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	set_led(_dev_led_default);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <_Z11turn_led_onv+0x14>)
 8000ef6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000efa:	f7ff ffb3 	bl	8000e64 <_Z7set_led9LED_State>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200000f0 	.word	0x200000f0

08000f08 <_Z12turn_led_offv>:

void turn_led_off()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	const LED_State led_off = {0, 0, 0};
 8000f0e:	2300      	movs	r3, #0
 8000f10:	803b      	strh	r3, [r7, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	807b      	strh	r3, [r7, #2]
 8000f16:	2300      	movs	r3, #0
 8000f18:	80bb      	strh	r3, [r7, #4]
	set_led(led_off);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f20:	f7ff ffa0 	bl	8000e64 <_Z7set_led9LED_State>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_Z8set_node10Node_State>:
{
	_dev_env = state;
}

void set_node(Node_State state)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	_dev_self = state;
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <_Z8set_node10Node_State+0x1c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000100 	.word	0x20000100

08000f4c <_Z11debug_printPKcz>:

void debug_print(const char* szFormat, ...)
{
 8000f4c:	b40f      	push	{r0, r1, r2, r3}
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, szFormat);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	607b      	str	r3, [r7, #4]
	vsnprintf(&debug_log_buf[ debug_log_size ], DEBUG_LOG_BUF_SIZE-debug_log_size-1, szFormat, args);
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <_Z11debug_printPKcz+0x5c>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <_Z11debug_printPKcz+0x60>)
 8000f62:	18d0      	adds	r0, r2, r3
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <_Z11debug_printPKcz+0x5c>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8000f6c:	3303      	adds	r3, #3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	f020 f9b6 	bl	80212e4 <vsniprintf>
	debug_log_size = debug_log_size + strlen(&debug_log_buf[ debug_log_size ]);
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <_Z11debug_printPKcz+0x5c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <_Z11debug_printPKcz+0x60>)
 8000f80:	4413      	add	r3, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff f934 	bl	80001f0 <strlen>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <_Z11debug_printPKcz+0x5c>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	4413      	add	r3, r2
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <_Z11debug_printPKcz+0x5c>)
 8000f96:	801a      	strh	r2, [r3, #0]
	va_end(args);
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fa2:	b004      	add	sp, #16
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000544 	.word	0x20000544
 8000fac:	20000144 	.word	0x20000144

08000fb0 <_Z17get_debug_log_bufv>:

char* get_debug_log_buf()
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
	return debug_log_buf;
 8000fb4:	4b02      	ldr	r3, [pc, #8]	; (8000fc0 <_Z17get_debug_log_bufv+0x10>)
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20000144 	.word	0x20000144

08000fc4 <_Z19clear_debug_log_bufv>:

void clear_debug_log_buf()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	memset(debug_log_buf, 0, sizeof(debug_log_buf));
 8000fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <_Z19clear_debug_log_bufv+0x1c>)
 8000fd0:	f01f fd8f 	bl	8020af2 <memset>
	debug_log_size = 0;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <_Z19clear_debug_log_bufv+0x20>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	801a      	strh	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000144 	.word	0x20000144
 8000fe4:	20000544 	.word	0x20000544

08000fe8 <_Z12exec_spi_cmdPh>:

uint8_t exec_spi_cmd(uint8_t cmd[])
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	uint8_t rel = cmd[4];
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
	switch(cmd[0])
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	3b11      	subs	r3, #17
 8000ffc:	2b11      	cmp	r3, #17
 8000ffe:	d85c      	bhi.n	80010ba <_Z12exec_spi_cmdPh+0xd2>
 8001000:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <_Z12exec_spi_cmdPh+0x20>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001051 	.word	0x08001051
 800100c:	08001067 	.word	0x08001067
 8001010:	080010bb 	.word	0x080010bb
 8001014:	080010bb 	.word	0x080010bb
 8001018:	080010bb 	.word	0x080010bb
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010bb 	.word	0x080010bb
 8001024:	080010bb 	.word	0x080010bb
 8001028:	080010bb 	.word	0x080010bb
 800102c:	080010bb 	.word	0x080010bb
 8001030:	080010bb 	.word	0x080010bb
 8001034:	080010bb 	.word	0x080010bb
 8001038:	080010bb 	.word	0x080010bb
 800103c:	080010bb 	.word	0x080010bb
 8001040:	080010bb 	.word	0x080010bb
 8001044:	080010bb 	.word	0x080010bb
 8001048:	08001091 	.word	0x08001091
 800104c:	080010a5 	.word	0x080010a5
	{
	case 0x11:
		*((uint8_t*)_dev_reg_table[ cmd[1] ]) = cmd[3];
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3301      	adds	r3, #1
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <_Z12exec_spi_cmdPh+0xe4>)
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	78d2      	ldrb	r2, [r2, #3]
 8001062:	701a      	strb	r2, [r3, #0]
		// debug_print("SPI: write r%d = %d\n", cmd[1], cmd[3]);
		break;
 8001064:	e02c      	b.n	80010c0 <_Z12exec_spi_cmdPh+0xd8>
	case 0x12:
		*((uint16_t*)_dev_reg_table[ cmd[1] ]) = (cmd[2]<<8) | cmd[3];
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3302      	adds	r3, #2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3303      	adds	r3, #3
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3301      	adds	r3, #1
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_Z12exec_spi_cmdPh+0xe4>)
 8001086:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800108a:	b292      	uxth	r2, r2
 800108c:	801a      	strh	r2, [r3, #0]
		// debug_print("SPI: write r%d = %d\n", cmd[1], (cmd[2]<<8) | cmd[3]);
		break;
 800108e:	e017      	b.n	80010c0 <_Z12exec_spi_cmdPh+0xd8>
	case 0x21:
		rel = *((uint8_t*)_dev_reg_table[ cmd[1] ]);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3301      	adds	r3, #1
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <_Z12exec_spi_cmdPh+0xe4>)
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	73fb      	strb	r3, [r7, #15]
		break;
 80010a2:	e00d      	b.n	80010c0 <_Z12exec_spi_cmdPh+0xd8>
	case 0x22:
		rel = *((uint16_t*)_dev_reg_table[ cmd[1] ]) >> 8;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <_Z12exec_spi_cmdPh+0xe4>)
 80010ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	121b      	asrs	r3, r3, #8
 80010b6:	73fb      	strb	r3, [r7, #15]
		break;
 80010b8:	e002      	b.n	80010c0 <_Z12exec_spi_cmdPh+0xd8>
	default: debug_print("SPI: undef cmd\n");
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <_Z12exec_spi_cmdPh+0xe8>)
 80010bc:	f7ff ff46 	bl	8000f4c <_Z11debug_printPKcz>
	}
	return rel;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000104 	.word	0x20000104
 80010d0:	08021dac 	.word	0x08021dac

080010d4 <_Z14reg_table_initv>:

void reg_table_init()
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
	_dev_reg_table[0] = (void*)&_dev_self.ambi_throttle;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <_Z14reg_table_initv+0x5c>)
 80010da:	4a16      	ldr	r2, [pc, #88]	; (8001134 <_Z14reg_table_initv+0x60>)
 80010dc:	601a      	str	r2, [r3, #0]
	_dev_reg_table[1] = (void*)&_dev_led.r;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <_Z14reg_table_initv+0x5c>)
 80010e0:	4a15      	ldr	r2, [pc, #84]	; (8001138 <_Z14reg_table_initv+0x64>)
 80010e2:	605a      	str	r2, [r3, #4]
	_dev_reg_table[2] = (void*)&_dev_led.g;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <_Z14reg_table_initv+0x5c>)
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <_Z14reg_table_initv+0x68>)
 80010e8:	609a      	str	r2, [r3, #8]
	_dev_reg_table[3] = (void*)&_dev_led.b;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_Z14reg_table_initv+0x5c>)
 80010ec:	4a14      	ldr	r2, [pc, #80]	; (8001140 <_Z14reg_table_initv+0x6c>)
 80010ee:	60da      	str	r2, [r3, #12]
	_dev_reg_table[4] = (void*)&_dev_motor.speed;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <_Z14reg_table_initv+0x5c>)
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_Z14reg_table_initv+0x70>)
 80010f4:	611a      	str	r2, [r3, #16]
	_dev_reg_table[5] = (void*)&_dev_env.temp;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <_Z14reg_table_initv+0x5c>)
 80010f8:	4a13      	ldr	r2, [pc, #76]	; (8001148 <_Z14reg_table_initv+0x74>)
 80010fa:	615a      	str	r2, [r3, #20]
	_dev_reg_table[6] = (void*)&_dev_env.humi;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <_Z14reg_table_initv+0x5c>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <_Z14reg_table_initv+0x78>)
 8001100:	619a      	str	r2, [r3, #24]
	_dev_reg_table[7] = (void*)&_dev_env.ambi;
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <_Z14reg_table_initv+0x5c>)
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_Z14reg_table_initv+0x7c>)
 8001106:	61da      	str	r2, [r3, #28]
	_dev_reg_table[8] = (void*)&_dev_led_default.r;
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <_Z14reg_table_initv+0x5c>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <_Z14reg_table_initv+0x80>)
 800110c:	621a      	str	r2, [r3, #32]
	_dev_reg_table[9] = (void*)&_dev_led_default.g;
 800110e:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_Z14reg_table_initv+0x5c>)
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <_Z14reg_table_initv+0x84>)
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
	_dev_reg_table[10] = (void*)&_dev_led_default.b;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <_Z14reg_table_initv+0x5c>)
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <_Z14reg_table_initv+0x88>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28
	_dev_reg_table[11] = (void*)&_dev_self.auto_mode;
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <_Z14reg_table_initv+0x5c>)
 800111c:	4a10      	ldr	r2, [pc, #64]	; (8001160 <_Z14reg_table_initv+0x8c>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
	_dev_reg_table[12] = (void*)&_dev_self.ambi_throttle;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <_Z14reg_table_initv+0x5c>)
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <_Z14reg_table_initv+0x60>)
 8001124:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	20000104 	.word	0x20000104
 8001134:	20000102 	.word	0x20000102
 8001138:	200000e8 	.word	0x200000e8
 800113c:	200000ea 	.word	0x200000ea
 8001140:	200000ec 	.word	0x200000ec
 8001144:	200000f8 	.word	0x200000f8
 8001148:	200000fc 	.word	0x200000fc
 800114c:	200000fd 	.word	0x200000fd
 8001150:	200000fe 	.word	0x200000fe
 8001154:	200000f0 	.word	0x200000f0
 8001158:	200000f2 	.word	0x200000f2
 800115c:	200000f4 	.word	0x200000f4
 8001160:	20000100 	.word	0x20000100

08001164 <_Z11devmgr_initv>:

void devmgr_init()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
	clear_debug_log_buf();
 8001168:	f7ff ff2c 	bl	8000fc4 <_Z19clear_debug_log_bufv>
	reg_table_init();
 800116c:	f7ff ffb2 	bl	80010d4 <_Z14reg_table_initv>
	memset(&_dev_led, 0, sizeof(LED_State));
 8001170:	2206      	movs	r2, #6
 8001172:	2100      	movs	r1, #0
 8001174:	4811      	ldr	r0, [pc, #68]	; (80011bc <_Z11devmgr_initv+0x58>)
 8001176:	f01f fcbc 	bl	8020af2 <memset>
	memset(&_dev_led_default, 0, sizeof(LED_State));
 800117a:	2206      	movs	r2, #6
 800117c:	2100      	movs	r1, #0
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <_Z11devmgr_initv+0x5c>)
 8001180:	f01f fcb7 	bl	8020af2 <memset>
	memset(&_dev_self, 0, sizeof(Node_State));
 8001184:	2204      	movs	r2, #4
 8001186:	2100      	movs	r1, #0
 8001188:	480e      	ldr	r0, [pc, #56]	; (80011c4 <_Z11devmgr_initv+0x60>)
 800118a:	f01f fcb2 	bl	8020af2 <memset>
	memset(&_dev_env, 0, sizeof(Env_State));
 800118e:	2204      	movs	r2, #4
 8001190:	2100      	movs	r1, #0
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <_Z11devmgr_initv+0x64>)
 8001194:	f01f fcad 	bl	8020af2 <memset>
	memset(&_dev_motor, 0, sizeof(Motor_State));
 8001198:	2202      	movs	r2, #2
 800119a:	2100      	movs	r1, #0
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <_Z11devmgr_initv+0x68>)
 800119e:	f01f fca8 	bl	8020af2 <memset>
	_dev_self.ambi_throttle = 950;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_Z11devmgr_initv+0x60>)
 80011a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80011a8:	805a      	strh	r2, [r3, #2]
	_dev_led_default.b = 100;
 80011aa:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <_Z11devmgr_initv+0x5c>)
 80011ac:	2264      	movs	r2, #100	; 0x64
 80011ae:	809a      	strh	r2, [r3, #4]
	debug_print("Hello World!\n");
 80011b0:	4807      	ldr	r0, [pc, #28]	; (80011d0 <_Z11devmgr_initv+0x6c>)
 80011b2:	f7ff fecb 	bl	8000f4c <_Z11debug_printPKcz>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000e8 	.word	0x200000e8
 80011c0:	200000f0 	.word	0x200000f0
 80011c4:	20000100 	.word	0x20000100
 80011c8:	200000fc 	.word	0x200000fc
 80011cc:	200000f8 	.word	0x200000f8
 80011d0:	08021dbc 	.word	0x08021dbc

080011d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4a07      	ldr	r2, [pc, #28]	; (8001200 <vApplicationGetIdleTaskMemory+0x2c>)
 80011e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	4a06      	ldr	r2, [pc, #24]	; (8001204 <vApplicationGetIdleTaskMemory+0x30>)
 80011ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000548 	.word	0x20000548
 8001204:	200005a0 	.word	0x200005a0

08001208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120e:	f002 f97b 	bl	8003508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001212:	f000 f839 	bl	8001288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001216:	f000 faeb 	bl	80017f0 <_ZL12MX_GPIO_Initv>
  MX_CRC_Init();
 800121a:	f000 f8d3 	bl	80013c4 <_ZL11MX_CRC_Initv>
  MX_I2C3_Init();
 800121e:	f000 f8e9 	bl	80013f4 <_ZL12MX_I2C3_Initv>
  MX_USART1_UART_Init();
 8001222:	f000 fab7 	bl	8001794 <_ZL19MX_USART1_UART_Initv>
  MX_TIM2_Init();
 8001226:	f000 f96d 	bl	8001504 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800122a:	f000 f9d3 	bl	80015d4 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 800122e:	f000 fa49 	bl	80016c4 <_ZL12MX_TIM4_Initv>
  MX_SPI4_Init();
 8001232:	f000 f92f 	bl	8001494 <_ZL12MX_SPI4_Initv>
  /* USER CODE BEGIN 2 */

  devmgr_init();
 8001236:	f7ff ff95 	bl	8001164 <_Z11devmgr_initv>
  spi4_init();
 800123a:	f000 fc07 	bl	8001a4c <_Z9spi4_initv>
  HAL_SPI_Receive_IT(&hspi4, spi4_buf, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	490d      	ldr	r1, [pc, #52]	; (8001278 <main+0x70>)
 8001242:	480e      	ldr	r0, [pc, #56]	; (800127c <main+0x74>)
 8001244:	f005 ff58 	bl	80070f8 <HAL_SPI_Receive_IT>

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 8001248:	f015 ff0d 	bl	8017066 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 800124c:	f015 ff7e 	bl	801714c <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <main+0x78>)
 8001252:	1d3c      	adds	r4, r7, #4
 8001254:	461d      	mov	r5, r3
 8001256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800125a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800125e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00f fda3 	bl	8010db2 <osThreadCreate>
 800126c:	4602      	mov	r2, r0
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <main+0x7c>)
 8001270:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001272:	f00f fd97 	bl	8010da4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001276:	e7fe      	b.n	8001276 <main+0x6e>
 8001278:	20000958 	.word	0x20000958
 800127c:	200007fc 	.word	0x200007fc
 8001280:	08021dd8 	.word	0x08021dd8
 8001284:	20000954 	.word	0x20000954

08001288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b0a0      	sub	sp, #128	; 0x80
 800128c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001292:	2230      	movs	r2, #48	; 0x30
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f01f fc2b 	bl	8020af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800129c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2230      	movs	r2, #48	; 0x30
 80012b2:	2100      	movs	r1, #0
 80012b4:	4618      	mov	r0, r3
 80012b6:	f01f fc1c 	bl	8020af2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <SystemClock_Config+0x134>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a3e      	ldr	r2, [pc, #248]	; (80013bc <SystemClock_Config+0x134>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b3c      	ldr	r3, [pc, #240]	; (80013bc <SystemClock_Config+0x134>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <SystemClock_Config+0x138>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <SystemClock_Config+0x138>)
 80012e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <SystemClock_Config+0x138>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f2:	2301      	movs	r3, #1
 80012f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001300:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001304:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001306:	2304      	movs	r3, #4
 8001308:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800130a:	23b4      	movs	r3, #180	; 0xb4
 800130c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800130e:	2302      	movs	r3, #2
 8001310:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001312:	2303      	movs	r3, #3
 8001314:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001316:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fe5a 	bl	8005fd4 <HAL_RCC_OscConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001330:	f000 fc5e 	bl	8001bf0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001334:	f004 fdfe 	bl	8005f34 <HAL_PWREx_EnableOverDrive>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf14      	ite	ne
 800133e:	2301      	movne	r3, #1
 8001340:	2300      	moveq	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001348:	f000 fc52 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134c:	230f      	movs	r3, #15
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2302      	movs	r3, #2
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001354:	2300      	movs	r3, #0
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001358:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800135c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001364:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001368:	2105      	movs	r1, #5
 800136a:	4618      	mov	r0, r3
 800136c:	f005 f8a2 	bl	80064b4 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001380:	f000 fc36 	bl	8001bf0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001384:	2308      	movs	r3, #8
 8001386:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001388:	2332      	movs	r3, #50	; 0x32
 800138a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800138c:	2302      	movs	r3, #2
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4618      	mov	r0, r3
 800139c:	f005 faae 	bl	80068fc <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2301      	movne	r3, #1
 80013a8:	2300      	moveq	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 80013b0:	f000 fc1e 	bl	8001bf0 <Error_Handler>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3780      	adds	r7, #128	; 0x80
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000

080013c4 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <_ZL11MX_CRC_Initv+0x28>)
 80013ca:	4a09      	ldr	r2, [pc, #36]	; (80013f0 <_ZL11MX_CRC_Initv+0x2c>)
 80013cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013ce:	4807      	ldr	r0, [pc, #28]	; (80013ec <_ZL11MX_CRC_Initv+0x28>)
 80013d0:	f002 fa10 	bl	80037f4 <HAL_CRC_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	bf14      	ite	ne
 80013da:	2301      	movne	r3, #1
 80013dc:	2300      	moveq	r3, #0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80013e4:	f000 fc04 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	200007a0 	.word	0x200007a0
 80013f0:	40023000 	.word	0x40023000

080013f4 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 80013fa:	4a24      	ldr	r2, [pc, #144]	; (800148c <_ZL12MX_I2C3_Initv+0x98>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013fe:	4b22      	ldr	r3, [pc, #136]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 8001400:	4a23      	ldr	r2, [pc, #140]	; (8001490 <_ZL12MX_I2C3_Initv+0x9c>)
 8001402:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 8001412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001416:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800141e:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001430:	4815      	ldr	r0, [pc, #84]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 8001432:	f003 f8e3 	bl	80045fc <HAL_I2C_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8001446:	f000 fbd3 	bl	8001bf0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	480e      	ldr	r0, [pc, #56]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 800144e:	f004 f8c2 	bl	80055d6 <HAL_I2CEx_ConfigAnalogFilter>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 8001462:	f000 fbc5 	bl	8001bf0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001466:	2100      	movs	r1, #0
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <_ZL12MX_I2C3_Initv+0x94>)
 800146a:	f004 f8f0 	bl	800564e <HAL_I2CEx_ConfigDigitalFilter>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 800147e:	f000 fbb7 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200007a8 	.word	0x200007a8
 800148c:	40005c00 	.word	0x40005c00
 8001490:	000186a0 	.word	0x000186a0

08001494 <_ZL12MX_SPI4_Initv>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 800149a:	4a19      	ldr	r2, [pc, #100]	; (8001500 <_ZL12MX_SPI4_Initv+0x6c>)
 800149c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014c2:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014d8:	220a      	movs	r2, #10
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <_ZL12MX_SPI4_Initv+0x68>)
 80014de:	f005 fc4a 	bl	8006d76 <HAL_SPI_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf14      	ite	ne
 80014e8:	2301      	movne	r3, #1
 80014ea:	2300      	moveq	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <_ZL12MX_SPI4_Initv+0x62>
  {
    Error_Handler();
 80014f2:	f000 fb7d 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200007fc 	.word	0x200007fc
 8001500:	40013400 	.word	0x40013400

08001504 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8001528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800152c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 800153c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001540:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800154e:	4820      	ldr	r0, [pc, #128]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8001550:	f006 fb72 	bl	8007c38 <HAL_TIM_PWM_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001564:	f000 fb44 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	4619      	mov	r1, r3
 8001576:	4816      	ldr	r0, [pc, #88]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 8001578:	f007 f986 	bl	8008888 <HAL_TIMEx_MasterConfigSynchronization>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	bf14      	ite	ne
 8001582:	2301      	movne	r3, #1
 8001584:	2300      	moveq	r3, #0
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 800158c:	f000 fb30 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001590:	2360      	movs	r3, #96	; 0x60
 8001592:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2204      	movs	r2, #4
 80015a4:	4619      	mov	r1, r3
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 80015a8:	f006 fcb8 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	bf14      	ite	ne
 80015b2:	2301      	movne	r3, #1
 80015b4:	2300      	moveq	r3, #0
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80015bc:	f000 fb18 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <_ZL12MX_TIM2_Initv+0xcc>)
 80015c2:	f000 fd25 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000854 	.word	0x20000854

080015d4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	f107 0320 	add.w	r3, r7, #32
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 80015f8:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <_ZL12MX_TIM3_Initv+0xec>)
 80015fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 8001608:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 800160a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800161c:	4827      	ldr	r0, [pc, #156]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 800161e:	f006 fb0b 	bl	8007c38 <HAL_TIM_PWM_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8001632:	f000 fadd 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	4619      	mov	r1, r3
 8001644:	481d      	ldr	r0, [pc, #116]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 8001646:	f007 f91f 	bl	8008888 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800165a:	f000 fac9 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165e:	2360      	movs	r3, #96	; 0x60
 8001660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 8001676:	f006 fc51 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800168a:	f000 fab1 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	4809      	ldr	r0, [pc, #36]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 8001696:	f006 fc41 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80016aa:	f000 faa1 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ae:	4803      	ldr	r0, [pc, #12]	; (80016bc <_ZL12MX_TIM3_Initv+0xe8>)
 80016b0:	f000 fcae 	bl	8002010 <HAL_TIM_MspPostInit>

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000894 	.word	0x20000894
 80016c0:	40000400 	.word	0x40000400

080016c4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 80016e8:	4a29      	ldr	r2, [pc, #164]	; (8001790 <_ZL12MX_TIM4_Initv+0xcc>)
 80016ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b26      	ldr	r3, [pc, #152]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 80016fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b21      	ldr	r3, [pc, #132]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800170c:	481f      	ldr	r0, [pc, #124]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 800170e:	f006 fa93 	bl	8007c38 <HAL_TIM_PWM_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_ZL12MX_TIM4_Initv+0x62>
  {
    Error_Handler();
 8001722:	f000 fa65 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	4619      	mov	r1, r3
 8001734:	4815      	ldr	r0, [pc, #84]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 8001736:	f007 f8a7 	bl	8008888 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf14      	ite	ne
 8001740:	2301      	movne	r3, #1
 8001742:	2300      	moveq	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <_ZL12MX_TIM4_Initv+0x8a>
  {
    Error_Handler();
 800174a:	f000 fa51 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174e:	2360      	movs	r3, #96	; 0x60
 8001750:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2204      	movs	r2, #4
 8001762:	4619      	mov	r1, r3
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 8001766:	f006 fbd9 	bl	8007f1c <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <_ZL12MX_TIM4_Initv+0xba>
  {
    Error_Handler();
 800177a:	f000 fa39 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <_ZL12MX_TIM4_Initv+0xc8>)
 8001780:	f000 fc46 	bl	8002010 <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	; 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200008d4 	.word	0x200008d4
 8001790:	40000800 	.word	0x40000800

08001794 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 800179a:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_ZL19MX_USART1_UART_Initv+0x58>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <_ZL19MX_USART1_UART_Initv+0x54>)
 80017cc:	f007 f8ec 	bl	80089a8 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bf14      	ite	ne
 80017d6:	2301      	movne	r3, #1
 80017d8:	2300      	moveq	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 80017e0:	f000 fa06 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000914 	.word	0x20000914
 80017ec:	40011000 	.word	0x40011000

080017f0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
 800180a:	4b89      	ldr	r3, [pc, #548]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a88      	ldr	r2, [pc, #544]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001810:	f043 0310 	orr.w	r3, r3, #16
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b86      	ldr	r3, [pc, #536]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0310 	and.w	r3, r3, #16
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	4b82      	ldr	r3, [pc, #520]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a81      	ldr	r2, [pc, #516]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b7f      	ldr	r3, [pc, #508]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
 8001842:	4b7b      	ldr	r3, [pc, #492]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a7a      	ldr	r2, [pc, #488]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b78      	ldr	r3, [pc, #480]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a73      	ldr	r2, [pc, #460]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b71      	ldr	r3, [pc, #452]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a6c      	ldr	r2, [pc, #432]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 80018b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <_ZL12MX_GPIO_Initv+0x240>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2116      	movs	r1, #22
 80018ea:	4852      	ldr	r0, [pc, #328]	; (8001a34 <_ZL12MX_GPIO_Initv+0x244>)
 80018ec:	f002 fe6c 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	4850      	ldr	r0, [pc, #320]	; (8001a38 <_ZL12MX_GPIO_Initv+0x248>)
 80018f6:	f002 fe67 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001900:	484e      	ldr	r0, [pc, #312]	; (8001a3c <_ZL12MX_GPIO_Initv+0x24c>)
 8001902:	f002 fe61 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800190c:	484c      	ldr	r0, [pc, #304]	; (8001a40 <_ZL12MX_GPIO_Initv+0x250>)
 800190e:	f002 fe5b 	bl	80045c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001912:	2316      	movs	r3, #22
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4842      	ldr	r0, [pc, #264]	; (8001a34 <_ZL12MX_GPIO_Initv+0x244>)
 800192a:	f002 fb99 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800192e:	f248 0307 	movw	r3, #32775	; 0x8007
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <_ZL12MX_GPIO_Initv+0x254>)
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	483d      	ldr	r0, [pc, #244]	; (8001a38 <_ZL12MX_GPIO_Initv+0x248>)
 8001944:	f002 fb8c 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	4836      	ldr	r0, [pc, #216]	; (8001a38 <_ZL12MX_GPIO_Initv+0x248>)
 8001960:	f002 fb7e 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001964:	2320      	movs	r3, #32
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <_ZL12MX_GPIO_Initv+0x254>)
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	482f      	ldr	r0, [pc, #188]	; (8001a34 <_ZL12MX_GPIO_Initv+0x244>)
 8001978:	f002 fb72 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800197c:	2304      	movs	r3, #4
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	482e      	ldr	r0, [pc, #184]	; (8001a48 <_ZL12MX_GPIO_Initv+0x258>)
 8001990:	f002 fb66 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_HS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin;
 8001994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80019a6:	230c      	movs	r3, #12
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_ID_GPIO_Port, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4825      	ldr	r0, [pc, #148]	; (8001a48 <_ZL12MX_GPIO_Initv+0x258>)
 80019b2:	f002 fb55 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80019b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	481f      	ldr	r0, [pc, #124]	; (8001a48 <_ZL12MX_GPIO_Initv+0x258>)
 80019cc:	f002 fb48 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80019d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	4815      	ldr	r0, [pc, #84]	; (8001a3c <_ZL12MX_GPIO_Initv+0x24c>)
 80019e6:	f002 fb3b 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80019ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	480e      	ldr	r0, [pc, #56]	; (8001a3c <_ZL12MX_GPIO_Initv+0x24c>)
 8001a04:	f002 fb2c 	bl	8004060 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a08:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <_ZL12MX_GPIO_Initv+0x250>)
 8001a22:	f002 fb1d 	bl	8004060 <HAL_GPIO_Init>

}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020c00 	.word	0x40020c00
 8001a40:	40021800 	.word	0x40021800
 8001a44:	10120000 	.word	0x10120000
 8001a48:	40020400 	.word	0x40020400

08001a4c <_Z9spi4_initv>:

/* USER CODE BEGIN 4 */
void spi4_init()
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	debug_print("SPI: Init\n");
 8001a50:	4807      	ldr	r0, [pc, #28]	; (8001a70 <_Z9spi4_initv+0x24>)
 8001a52:	f7ff fa7b 	bl	8000f4c <_Z11debug_printPKcz>
	spi4_buf_size = 0;
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <_Z9spi4_initv+0x28>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	spi4_tx_val = 0;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <_Z9spi4_initv+0x2c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
	memset(spi4_buf, 0, sizeof(spi4_buf));
 8001a62:	2205      	movs	r2, #5
 8001a64:	2100      	movs	r1, #0
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <_Z9spi4_initv+0x30>)
 8001a68:	f01f f843 	bl	8020af2 <memset>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	08021df4 	.word	0x08021df4
 8001a74:	2000095d 	.word	0x2000095d
 8001a78:	2000095e 	.word	0x2000095e
 8001a7c:	20000958 	.word	0x20000958

08001a80 <_Z24spi4_buf_data_is_corruptv>:

inline int spi4_buf_data_is_corrupt() {
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af02      	add	r7, sp, #8
	uint8_t x, tmp = spi4_buf[0];
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	71bb      	strb	r3, [r7, #6]
	for(x=1; x<4; ++x) {
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d809      	bhi.n	8001aaa <_Z24spi4_buf_data_is_corruptv+0x2a>
		tmp ^= spi4_buf[x];
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4a19      	ldr	r2, [pc, #100]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001a9a:	5cd2      	ldrb	r2, [r2, r3]
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	4053      	eors	r3, r2
 8001aa0:	71bb      	strb	r3, [r7, #6]
	for(x=1; x<4; ++x) {
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	e7f2      	b.n	8001a90 <_Z24spi4_buf_data_is_corruptv+0x10>
	}
	if(tmp != spi4_buf[4] && spi4_buf[0]!=0xEE)
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001aac:	791b      	ldrb	r3, [r3, #4]
 8001aae:	79ba      	ldrb	r2, [r7, #6]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d018      	beq.n	8001ae6 <_Z24spi4_buf_data_is_corruptv+0x66>
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2bee      	cmp	r3, #238	; 0xee
 8001aba:	d014      	beq.n	8001ae6 <_Z24spi4_buf_data_is_corruptv+0x66>
	{
		debug_print("SPI: Corrupt. Msg: %d %d %d %d %d\n", spi4_buf[0], spi4_buf[1], spi4_buf[2], spi4_buf[3], spi4_buf[4]);
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001ac4:	785b      	ldrb	r3, [r3, #1]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001aca:	789b      	ldrb	r3, [r3, #2]
 8001acc:	461c      	mov	r4, r3
 8001ace:	4b0c      	ldr	r3, [pc, #48]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001ad0:	78db      	ldrb	r3, [r3, #3]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	9200      	str	r2, [sp, #0]
 8001adc:	4623      	mov	r3, r4
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <_Z24spi4_buf_data_is_corruptv+0x84>)
 8001ae2:	f7ff fa33 	bl	8000f4c <_Z11debug_printPKcz>
	}
	return tmp != spi4_buf[4];
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <_Z24spi4_buf_data_is_corruptv+0x80>)
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	79ba      	ldrb	r2, [r7, #6]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	bf14      	ite	ne
 8001af0:	2301      	movne	r3, #1
 8001af2:	2300      	moveq	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000958 	.word	0x20000958
 8001b04:	08021e00 	.word	0x08021e00

08001b08 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi4)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a24      	ldr	r2, [pc, #144]	; (8001ba4 <HAL_SPI_RxCpltCallback+0x9c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d141      	bne.n	8001b9c <HAL_SPI_RxCpltCallback+0x94>
	{
		spi4_buf_size++;
 8001b18:	4b23      	ldr	r3, [pc, #140]	; (8001ba8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	4b21      	ldr	r3, [pc, #132]	; (8001ba8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b22:	701a      	strb	r2, [r3, #0]
		if(spi4_buf_size == 5) {
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d117      	bne.n	8001b5c <HAL_SPI_RxCpltCallback+0x54>
			if(!spi4_buf_data_is_corrupt()) spi4_tx_val = exec_spi_cmd(spi4_buf);
 8001b2c:	f7ff ffa8 	bl	8001a80 <_Z24spi4_buf_data_is_corruptv>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_SPI_RxCpltCallback+0x48>
 8001b40:	481a      	ldr	r0, [pc, #104]	; (8001bac <HAL_SPI_RxCpltCallback+0xa4>)
 8001b42:	f7ff fa51 	bl	8000fe8 <_Z12exec_spi_cmdPh>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	e002      	b.n	8001b56 <HAL_SPI_RxCpltCallback+0x4e>
			else spi4_tx_val = 0;
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	701a      	strb	r2, [r3, #0]
			spi4_buf_size = 0;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
		}
		if(spi4_buf[0] == 0xEE) {
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_SPI_RxCpltCallback+0xa4>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2bee      	cmp	r3, #238	; 0xee
 8001b62:	d106      	bne.n	8001b72 <HAL_SPI_RxCpltCallback+0x6a>
			// spi4_init();
			spi4_buf_size = 0;
 8001b64:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
			spi4_tx_val = 0xEE;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001b6c:	22ee      	movs	r2, #238	; 0xee
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	e006      	b.n	8001b80 <HAL_SPI_RxCpltCallback+0x78>
		}
		else if(spi4_buf[0]==0xFF) spi4_buf_size = 0;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_SPI_RxCpltCallback+0xa4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2bff      	cmp	r3, #255	; 0xff
 8001b78:	d102      	bne.n	8001b80 <HAL_SPI_RxCpltCallback+0x78>
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
		SPI4->DR = spi4_tx_val;// HAL_SPI_Transmit(&hspi4, &rel, 1, 16);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_SPI_RxCpltCallback+0xac>)
 8001b86:	60da      	str	r2, [r3, #12]
		HAL_SPI_Receive_IT(&hspi4, &spi4_buf[spi4_buf_size], 1);
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_SPI_RxCpltCallback+0xa4>)
 8001b90:	4413      	add	r3, r2
 8001b92:	2201      	movs	r2, #1
 8001b94:	4619      	mov	r1, r3
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <HAL_SPI_RxCpltCallback+0x9c>)
 8001b98:	f005 faae 	bl	80070f8 <HAL_SPI_Receive_IT>
	}
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200007fc 	.word	0x200007fc
 8001ba8:	2000095d 	.word	0x2000095d
 8001bac:	20000958 	.word	0x20000958
 8001bb0:	2000095e 	.word	0x2000095e
 8001bb4:	40013400 	.word	0x40013400

08001bb8 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
/* Graphic application */
  GRAPHICS_MainTask();
 8001bc0:	f015 faca 	bl	8017158 <_Z17GRAPHICS_MainTaskv>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f00f f940 	bl	8010e4a <osDelay>
 8001bca:	e7fb      	b.n	8001bc4 <_Z16StartDefaultTaskPKv+0xc>

08001bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bde:	f001 fcb5 	bl	800354c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40001000 	.word	0x40001000

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_MspInit+0x54>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <HAL_MspInit+0x54>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_MspInit+0x54>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_MspInit+0x54>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <HAL_MspInit+0x54>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_MspInit+0x54>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	210f      	movs	r1, #15
 8001c42:	f06f 0001 	mvn.w	r0, #1
 8001c46:	f001 fd9d 	bl	8003784 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	; (8001c94 <HAL_CRC_MspInit+0x3c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10d      	bne.n	8001c86 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_CRC_MspInit+0x40>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_CRC_MspInit+0x40>)
 8001c74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_CRC_MspInit+0x40>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023000 	.word	0x40023000
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <HAL_I2C_MspInit+0xc4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d14b      	bne.n	8001d56 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	4b28      	ldr	r3, [pc, #160]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	4a27      	ldr	r2, [pc, #156]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cce:	4b25      	ldr	r3, [pc, #148]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b21      	ldr	r3, [pc, #132]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4815      	ldr	r0, [pc, #84]	; (8001d68 <HAL_I2C_MspInit+0xcc>)
 8001d14:	f002 f9a4 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1e:	2312      	movs	r3, #18
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <HAL_I2C_MspInit+0xd0>)
 8001d36:	f002 f993 	bl	8004060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001d44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d48:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_I2C_MspInit+0xc8>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d56:	bf00      	nop
 8001d58:	3728      	adds	r7, #40	; 0x28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40005c00 	.word	0x40005c00
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020800 	.word	0x40020800
 8001d6c:	40020000 	.word	0x40020000

08001d70 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	; (8001dac <HAL_I2C_MspDeInit+0x3c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10f      	bne.n	8001da2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_I2C_MspDeInit+0x40>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_I2C_MspDeInit+0x40>)
 8001d88:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d8c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8001d8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d92:	4808      	ldr	r0, [pc, #32]	; (8001db4 <HAL_I2C_MspDeInit+0x44>)
 8001d94:	f002 fb0e 	bl	80043b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8001d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_I2C_MspDeInit+0x48>)
 8001d9e:	f002 fb09 	bl	80043b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40005c00 	.word	0x40005c00
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020000 	.word	0x40020000

08001dbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a36      	ldr	r2, [pc, #216]	; (8001eb4 <HAL_SPI_MspInit+0xf8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d134      	bne.n	8001e48 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a34      	ldr	r2, [pc, #208]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e04:	f043 0310 	orr.w	r3, r3, #16
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697b      	ldr	r3, [r7, #20]
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e16:	2374      	movs	r3, #116	; 0x74
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e26:	2305      	movs	r3, #5
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4822      	ldr	r0, [pc, #136]	; (8001ebc <HAL_SPI_MspInit+0x100>)
 8001e32:	f002 f915 	bl	8004060 <HAL_GPIO_Init>

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2105      	movs	r1, #5
 8001e3a:	2054      	movs	r0, #84	; 0x54
 8001e3c:	f001 fca2 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001e40:	2054      	movs	r0, #84	; 0x54
 8001e42:	f001 fcbb 	bl	80037bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001e46:	e031      	b.n	8001eac <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI5)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <HAL_SPI_MspInit+0x104>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12c      	bne.n	8001eac <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a10      	ldr	r2, [pc, #64]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <HAL_SPI_MspInit+0xfc>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001e8a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e9c:	2305      	movs	r3, #5
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <HAL_SPI_MspInit+0x108>)
 8001ea8:	f002 f8da 	bl	8004060 <HAL_GPIO_Init>
}
 8001eac:	bf00      	nop
 8001eae:	3730      	adds	r7, #48	; 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40013400 	.word	0x40013400
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40015000 	.word	0x40015000
 8001ec4:	40021400 	.word	0x40021400

08001ec8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI4)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_SPI_MspDeInit+0x58>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <HAL_SPI_MspDeInit+0x5c>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_SPI_MspDeInit+0x5c>)
 8001ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI 
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8001ee6:	2174      	movs	r1, #116	; 0x74
 8001ee8:	480f      	ldr	r0, [pc, #60]	; (8001f28 <HAL_SPI_MspDeInit+0x60>)
 8001eea:	f002 fa63 	bl	80043b4 <HAL_GPIO_DeInit>

    /* SPI4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI4_IRQn);
 8001eee:	2054      	movs	r0, #84	; 0x54
 8001ef0:	f001 fc72 	bl	80037d8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001ef4:	e00f      	b.n	8001f16 <HAL_SPI_MspDeInit+0x4e>
  else if(hspi->Instance==SPI5)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <HAL_SPI_MspDeInit+0x64>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d10a      	bne.n	8001f16 <HAL_SPI_MspDeInit+0x4e>
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_SPI_MspDeInit+0x5c>)
 8001f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f04:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_SPI_MspDeInit+0x5c>)
 8001f06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f0a:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001f0c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001f10:	4807      	ldr	r0, [pc, #28]	; (8001f30 <HAL_SPI_MspDeInit+0x68>)
 8001f12:	f002 fa4f 	bl	80043b4 <HAL_GPIO_DeInit>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40013400 	.word	0x40013400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40015000 	.word	0x40015000
 8001f30:	40021400 	.word	0x40021400

08001f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <HAL_TIM_Base_MspInit+0x3c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10d      	bne.n	8001f62 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_TIM_Base_MspInit+0x40>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_TIM_Base_MspInit+0x40>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <HAL_TIM_Base_MspInit+0x40>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40023800 	.word	0x40023800

08001f78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001fa6:	e026      	b.n	8001ff6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a16      	ldr	r2, [pc, #88]	; (8002008 <HAL_TIM_PWM_MspInit+0x90>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fbc:	f043 0302 	orr.w	r3, r3, #2
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	693b      	ldr	r3, [r7, #16]
}
 8001fce:	e012      	b.n	8001ff6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_TIM_PWM_MspInit+0x94>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_TIM_PWM_MspInit+0x8c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	bf00      	nop
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800

08002010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002030:	d11e      	bne.n	8002070 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a42      	ldr	r2, [pc, #264]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration    
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800204e:	2308      	movs	r3, #8
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800205e:	2301      	movs	r3, #1
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	4837      	ldr	r0, [pc, #220]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 800206a:	f001 fff9 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800206e:	e065      	b.n	800213c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a35      	ldr	r2, [pc, #212]	; (800214c <HAL_TIM_MspPostInit+0x13c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d13d      	bne.n	80020f6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a30      	ldr	r2, [pc, #192]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b2e      	ldr	r3, [pc, #184]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b2a      	ldr	r3, [pc, #168]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a29      	ldr	r2, [pc, #164]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b27      	ldr	r3, [pc, #156]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c4:	2302      	movs	r3, #2
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	4619      	mov	r1, r3
 80020ce:	4820      	ldr	r0, [pc, #128]	; (8002150 <HAL_TIM_MspPostInit+0x140>)
 80020d0:	f001 ffc6 	bl	8004060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020d4:	2310      	movs	r3, #16
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020e4:	2302      	movs	r3, #2
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4816      	ldr	r0, [pc, #88]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 80020f0:	f001 ffb6 	bl	8004060 <HAL_GPIO_Init>
}
 80020f4:	e022      	b.n	800213c <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_TIM_MspPostInit+0x144>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d11d      	bne.n	800213c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 800210a:	f043 0302 	orr.w	r3, r3, #2
 800210e:	6313      	str	r3, [r2, #48]	; 0x30
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_TIM_MspPostInit+0x134>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800212c:	2302      	movs	r3, #2
 800212e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	4619      	mov	r1, r3
 8002136:	4804      	ldr	r0, [pc, #16]	; (8002148 <HAL_TIM_MspPostInit+0x138>)
 8002138:	f001 ff92 	bl	8004060 <HAL_GPIO_Init>
}
 800213c:	bf00      	nop
 800213e:	3730      	adds	r7, #48	; 0x30
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40023800 	.word	0x40023800
 8002148:	40020400 	.word	0x40020400
 800214c:	40000400 	.word	0x40000400
 8002150:	40020800 	.word	0x40020800
 8002154:	40000800 	.word	0x40000800

08002158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	; 0x28
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	; (80021dc <HAL_UART_MspInit+0x84>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d12c      	bne.n	80021d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_UART_MspInit+0x88>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_UART_MspInit+0x88>)
 8002184:	f043 0310 	orr.w	r3, r3, #16
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <HAL_UART_MspInit+0x88>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_UART_MspInit+0x88>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_UART_MspInit+0x88>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_UART_MspInit+0x88>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80021b2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80021b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021bc:	2301      	movs	r3, #1
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021c4:	2307      	movs	r3, #7
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	4619      	mov	r1, r3
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <HAL_UART_MspInit+0x8c>)
 80021d0:	f001 ff46 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021d4:	bf00      	nop
 80021d6:	3728      	adds	r7, #40	; 0x28
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000

080021e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08c      	sub	sp, #48	; 0x30
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80021f8:	2200      	movs	r2, #0
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	2036      	movs	r0, #54	; 0x36
 80021fe:	f001 fac1 	bl	8003784 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8002202:	2036      	movs	r0, #54	; 0x36
 8002204:	f001 fada 	bl	80037bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002208:	2300      	movs	r3, #0
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_InitTick+0xa4>)
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	4a1e      	ldr	r2, [pc, #120]	; (800228c <HAL_InitTick+0xa4>)
 8002212:	f043 0310 	orr.w	r3, r3, #16
 8002216:	6413      	str	r3, [r2, #64]	; 0x40
 8002218:	4b1c      	ldr	r3, [pc, #112]	; (800228c <HAL_InitTick+0xa4>)
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f004 fb32 	bl	8006898 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002234:	f004 fb08 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8002238:	4603      	mov	r3, r0
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <HAL_InitTick+0xa8>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	3b01      	subs	r3, #1
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_InitTick+0xac>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <HAL_InitTick+0xb0>)
 8002250:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_InitTick+0xac>)
 8002254:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002258:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800225a:	4a0e      	ldr	r2, [pc, #56]	; (8002294 <HAL_InitTick+0xac>)
 800225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_InitTick+0xac>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_InitTick+0xac>)
 8002268:	2200      	movs	r2, #0
 800226a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800226c:	4809      	ldr	r0, [pc, #36]	; (8002294 <HAL_InitTick+0xac>)
 800226e:	f005 fc70 	bl	8007b52 <HAL_TIM_Base_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <HAL_InitTick+0xac>)
 800227a:	f005 fcb9 	bl	8007bf0 <HAL_TIM_Base_Start_IT>
 800227e:	4603      	mov	r3, r0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3730      	adds	r7, #48	; 0x30
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800
 8002290:	431bde83 	.word	0x431bde83
 8002294:	2001a9e4 	.word	0x2001a9e4
 8002298:	40001000 	.word	0x40001000

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <MemManage_Handler+0x4>

080022b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM6_DAC_IRQHandler+0x10>)
 80022d6:	f005 fd19 	bl	8007d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	2001a9e4 	.word	0x2001a9e4

080022e4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <SPI4_IRQHandler+0x10>)
 80022ea:	f005 f82f 	bl	800734c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200007fc 	.word	0x200007fc

080022f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <LTDC_IRQHandler+0x10>)
 80022fe:	f003 facd 	bl	800589c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2001a728 	.word	0x2001a728

0800230c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <DMA2D_IRQHandler+0x10>)
 8002312:	f001 fc66 	bl	8003be2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2001a7d0 	.word	0x2001a7d0

08002320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
	return 1;
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_kill>:

int _kill(int pid, int sig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800233a:	f01e fb83 	bl	8020a44 <__errno>
 800233e:	4602      	mov	r2, r0
 8002340:	2316      	movs	r3, #22
 8002342:	6013      	str	r3, [r2, #0]
	return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_exit>:

void _exit (int status)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffe7 	bl	8002330 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002362:	e7fe      	b.n	8002362 <_exit+0x12>

08002364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e00a      	b.n	800238c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002376:	f3af 8000 	nop.w
 800237a:	4601      	mov	r1, r0
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	60ba      	str	r2, [r7, #8]
 8002382:	b2ca      	uxtb	r2, r1
 8002384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf0      	blt.n	8002376 <_read+0x12>
	}

return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e009      	b.n	80023c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	60ba      	str	r2, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dbf1      	blt.n	80023b0 <_write+0x12>
	}
	return len;
 80023cc:	687b      	ldr	r3, [r7, #4]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_close>:

int _close(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_isatty>:

int _isatty(int file)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
	return 1;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
	return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <_sbrk+0x50>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <_sbrk+0x16>
		heap_end = &end;
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <_sbrk+0x50>)
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <_sbrk+0x54>)
 8002454:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <_sbrk+0x50>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <_sbrk+0x50>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	466a      	mov	r2, sp
 8002466:	4293      	cmp	r3, r2
 8002468:	d907      	bls.n	800247a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800246a:	f01e faeb 	bl	8020a44 <__errno>
 800246e:	4602      	mov	r2, r0
 8002470:	230c      	movs	r3, #12
 8002472:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	e006      	b.n	8002488 <_sbrk+0x48>
	}

	heap_end += incr;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <_sbrk+0x50>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a03      	ldr	r2, [pc, #12]	; (8002490 <_sbrk+0x50>)
 8002484:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000960 	.word	0x20000960
 8002494:	2001aa80 	.word	0x2001aa80

08002498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <SystemInit+0x28>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <SystemInit+0x28>)
 80024a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SystemInit+0x28>)
 80024ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024b2:	609a      	str	r2, [r3, #8]
#endif
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024ca:	e003      	b.n	80024d4 <LoopCopyDataInit>

080024cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024d2:	3104      	adds	r1, #4

080024d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024d4:	480b      	ldr	r0, [pc, #44]	; (8002504 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024dc:	d3f6      	bcc.n	80024cc <CopyDataInit>
  ldr  r2, =_sbss
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024e0:	e002      	b.n	80024e8 <LoopFillZerobss>

080024e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024e4:	f842 3b04 	str.w	r3, [r2], #4

080024e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024ec:	d3f9      	bcc.n	80024e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024ee:	f7ff ffd3 	bl	8002498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f01e fabf 	bl	8020a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7fe fe87 	bl	8001208 <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80024fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002500:	0807dcbc 	.word	0x0807dcbc
  ldr  r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002508:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 800250c:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 8002510:	2001aa80 	.word	0x2001aa80

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>

08002516 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800251a:	f000 fded 	bl	80030f8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800251e:	20ca      	movs	r0, #202	; 0xca
 8002520:	f000 f943 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002524:	20c3      	movs	r0, #195	; 0xc3
 8002526:	f000 f94d 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800252a:	2008      	movs	r0, #8
 800252c:	f000 f94a 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002530:	2050      	movs	r0, #80	; 0x50
 8002532:	f000 f947 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002536:	20cf      	movs	r0, #207	; 0xcf
 8002538:	f000 f937 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800253c:	2000      	movs	r0, #0
 800253e:	f000 f941 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002542:	20c1      	movs	r0, #193	; 0xc1
 8002544:	f000 f93e 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002548:	2030      	movs	r0, #48	; 0x30
 800254a:	f000 f93b 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800254e:	20ed      	movs	r0, #237	; 0xed
 8002550:	f000 f92b 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002554:	2064      	movs	r0, #100	; 0x64
 8002556:	f000 f935 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800255a:	2003      	movs	r0, #3
 800255c:	f000 f932 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002560:	2012      	movs	r0, #18
 8002562:	f000 f92f 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002566:	2081      	movs	r0, #129	; 0x81
 8002568:	f000 f92c 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800256c:	20e8      	movs	r0, #232	; 0xe8
 800256e:	f000 f91c 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002572:	2085      	movs	r0, #133	; 0x85
 8002574:	f000 f926 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 f923 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800257e:	2078      	movs	r0, #120	; 0x78
 8002580:	f000 f920 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002584:	20cb      	movs	r0, #203	; 0xcb
 8002586:	f000 f910 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800258a:	2039      	movs	r0, #57	; 0x39
 800258c:	f000 f91a 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002590:	202c      	movs	r0, #44	; 0x2c
 8002592:	f000 f917 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f000 f914 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800259c:	2034      	movs	r0, #52	; 0x34
 800259e:	f000 f911 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80025a2:	2002      	movs	r0, #2
 80025a4:	f000 f90e 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80025a8:	20f7      	movs	r0, #247	; 0xf7
 80025aa:	f000 f8fe 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80025ae:	2020      	movs	r0, #32
 80025b0:	f000 f908 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80025b4:	20ea      	movs	r0, #234	; 0xea
 80025b6:	f000 f8f8 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f000 f902 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80025c0:	2000      	movs	r0, #0
 80025c2:	f000 f8ff 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80025c6:	20b1      	movs	r0, #177	; 0xb1
 80025c8:	f000 f8ef 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80025cc:	2000      	movs	r0, #0
 80025ce:	f000 f8f9 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80025d2:	201b      	movs	r0, #27
 80025d4:	f000 f8f6 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80025d8:	20b6      	movs	r0, #182	; 0xb6
 80025da:	f000 f8e6 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80025de:	200a      	movs	r0, #10
 80025e0:	f000 f8f0 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80025e4:	20a2      	movs	r0, #162	; 0xa2
 80025e6:	f000 f8ed 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80025ea:	20c0      	movs	r0, #192	; 0xc0
 80025ec:	f000 f8dd 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80025f0:	2010      	movs	r0, #16
 80025f2:	f000 f8e7 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80025f6:	20c1      	movs	r0, #193	; 0xc1
 80025f8:	f000 f8d7 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80025fc:	2010      	movs	r0, #16
 80025fe:	f000 f8e1 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002602:	20c5      	movs	r0, #197	; 0xc5
 8002604:	f000 f8d1 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002608:	2045      	movs	r0, #69	; 0x45
 800260a:	f000 f8db 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800260e:	2015      	movs	r0, #21
 8002610:	f000 f8d8 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002614:	20c7      	movs	r0, #199	; 0xc7
 8002616:	f000 f8c8 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800261a:	2090      	movs	r0, #144	; 0x90
 800261c:	f000 f8d2 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002620:	2036      	movs	r0, #54	; 0x36
 8002622:	f000 f8c2 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002626:	20c8      	movs	r0, #200	; 0xc8
 8002628:	f000 f8cc 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800262c:	20f2      	movs	r0, #242	; 0xf2
 800262e:	f000 f8bc 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f000 f8c6 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002638:	20b0      	movs	r0, #176	; 0xb0
 800263a:	f000 f8b6 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800263e:	20c2      	movs	r0, #194	; 0xc2
 8002640:	f000 f8c0 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002644:	20b6      	movs	r0, #182	; 0xb6
 8002646:	f000 f8b0 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800264a:	200a      	movs	r0, #10
 800264c:	f000 f8ba 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002650:	20a7      	movs	r0, #167	; 0xa7
 8002652:	f000 f8b7 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002656:	2027      	movs	r0, #39	; 0x27
 8002658:	f000 f8b4 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800265c:	2004      	movs	r0, #4
 800265e:	f000 f8b1 	bl	80027c4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002662:	202a      	movs	r0, #42	; 0x2a
 8002664:	f000 f8a1 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f000 f8ab 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800266e:	2000      	movs	r0, #0
 8002670:	f000 f8a8 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f000 f8a5 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800267a:	20ef      	movs	r0, #239	; 0xef
 800267c:	f000 f8a2 	bl	80027c4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002680:	202b      	movs	r0, #43	; 0x2b
 8002682:	f000 f892 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f89c 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f000 f899 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002692:	2001      	movs	r0, #1
 8002694:	f000 f896 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002698:	203f      	movs	r0, #63	; 0x3f
 800269a:	f000 f893 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800269e:	20f6      	movs	r0, #246	; 0xf6
 80026a0:	f000 f883 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f000 f88d 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f88a 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80026b0:	2006      	movs	r0, #6
 80026b2:	f000 f887 	bl	80027c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80026b6:	202c      	movs	r0, #44	; 0x2c
 80026b8:	f000 f877 	bl	80027aa <ili9341_WriteReg>
  LCD_Delay(200);
 80026bc:	20c8      	movs	r0, #200	; 0xc8
 80026be:	f000 fdd7 	bl	8003270 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80026c2:	2026      	movs	r0, #38	; 0x26
 80026c4:	f000 f871 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f000 f87b 	bl	80027c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80026ce:	20e0      	movs	r0, #224	; 0xe0
 80026d0:	f000 f86b 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80026d4:	200f      	movs	r0, #15
 80026d6:	f000 f875 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80026da:	2029      	movs	r0, #41	; 0x29
 80026dc:	f000 f872 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80026e0:	2024      	movs	r0, #36	; 0x24
 80026e2:	f000 f86f 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80026e6:	200c      	movs	r0, #12
 80026e8:	f000 f86c 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80026ec:	200e      	movs	r0, #14
 80026ee:	f000 f869 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80026f2:	2009      	movs	r0, #9
 80026f4:	f000 f866 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80026f8:	204e      	movs	r0, #78	; 0x4e
 80026fa:	f000 f863 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80026fe:	2078      	movs	r0, #120	; 0x78
 8002700:	f000 f860 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002704:	203c      	movs	r0, #60	; 0x3c
 8002706:	f000 f85d 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800270a:	2009      	movs	r0, #9
 800270c:	f000 f85a 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002710:	2013      	movs	r0, #19
 8002712:	f000 f857 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002716:	2005      	movs	r0, #5
 8002718:	f000 f854 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800271c:	2017      	movs	r0, #23
 800271e:	f000 f851 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002722:	2011      	movs	r0, #17
 8002724:	f000 f84e 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f000 f84b 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800272e:	20e1      	movs	r0, #225	; 0xe1
 8002730:	f000 f83b 	bl	80027aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f000 f845 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800273a:	2016      	movs	r0, #22
 800273c:	f000 f842 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002740:	201b      	movs	r0, #27
 8002742:	f000 f83f 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002746:	2004      	movs	r0, #4
 8002748:	f000 f83c 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800274c:	2011      	movs	r0, #17
 800274e:	f000 f839 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002752:	2007      	movs	r0, #7
 8002754:	f000 f836 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002758:	2031      	movs	r0, #49	; 0x31
 800275a:	f000 f833 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800275e:	2033      	movs	r0, #51	; 0x33
 8002760:	f000 f830 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002764:	2042      	movs	r0, #66	; 0x42
 8002766:	f000 f82d 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800276a:	2005      	movs	r0, #5
 800276c:	f000 f82a 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002770:	200c      	movs	r0, #12
 8002772:	f000 f827 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002776:	200a      	movs	r0, #10
 8002778:	f000 f824 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800277c:	2028      	movs	r0, #40	; 0x28
 800277e:	f000 f821 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002782:	202f      	movs	r0, #47	; 0x2f
 8002784:	f000 f81e 	bl	80027c4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002788:	200f      	movs	r0, #15
 800278a:	f000 f81b 	bl	80027c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800278e:	2011      	movs	r0, #17
 8002790:	f000 f80b 	bl	80027aa <ili9341_WriteReg>
  LCD_Delay(200);
 8002794:	20c8      	movs	r0, #200	; 0xc8
 8002796:	f000 fd6b 	bl	8003270 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800279a:	2029      	movs	r0, #41	; 0x29
 800279c:	f000 f805 	bl	80027aa <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80027a0:	202c      	movs	r0, #44	; 0x2c
 80027a2:	f000 f802 	bl	80027aa <ili9341_WriteReg>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}

080027aa <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 fd38 	bl	800322c <LCD_IO_WriteReg>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fd09 	bl	80031e8 <LCD_IO_WriteData>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fa59 	bl	8002ca4 <stmpe811_GetInstance>
 80027f2:	4603      	mov	r3, r0
 80027f4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2bff      	cmp	r3, #255	; 0xff
 80027fa:	d112      	bne.n	8002822 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f000 fa51 	bl	8002ca4 <stmpe811_GetInstance>
 8002802:	4603      	mov	r3, r0
 8002804:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002806:	7bbb      	ldrb	r3, [r7, #14]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d80a      	bhi.n	8002822 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	88fa      	ldrh	r2, [r7, #6]
 8002810:	b2d1      	uxtb	r1, r2
 8002812:	4a06      	ldr	r2, [pc, #24]	; (800282c <stmpe811_Init+0x4c>)
 8002814:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002816:	f000 fd36 	bl	8003286 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 f807 	bl	8002830 <stmpe811_Reset>
    }
  }
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000964 	.word	0x20000964

08002830 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2202      	movs	r2, #2
 8002840:	2103      	movs	r1, #3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fd2b 	bl	800329e <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002848:	200a      	movs	r0, #10
 800284a:	f000 fd65 	bl	8003318 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2200      	movs	r2, #0
 8002854:	2103      	movs	r1, #3
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fd21 	bl	800329e <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 800285c:	2002      	movs	r0, #2
 800285e:	f000 fd5b 	bl	8003318 <IOE_Delay>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 800286a:	b590      	push	{r4, r7, lr}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002874:	f000 fd07 	bl	8003286 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fd20 	bl	80032c4 <IOE_Read>
 8002884:	4603      	mov	r3, r0
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2101      	movs	r1, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fd17 	bl	80032c4 <IOE_Read>
 8002896:	4603      	mov	r3, r0
 8002898:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800289a:	4323      	orrs	r3, r4
 800289c:	b21b      	sxth	r3, r3
 800289e:	b29b      	uxth	r3, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}

080028a8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2109      	movs	r1, #9
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fd01 	bl	80032c4 <IOE_Read>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	2109      	movs	r1, #9
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fce1 	bl	800329e <IOE_Write>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2109      	movs	r1, #9
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fce3 	bl	80032c4 <IOE_Read>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	2109      	movs	r1, #9
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fcc3 	bl	800329e <IOE_Write>
    
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	460a      	mov	r2, r1
 800292a:	80fb      	strh	r3, [r7, #6]
 800292c:	4613      	mov	r3, r2
 800292e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002934:	88fb      	ldrh	r3, [r7, #6]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	210a      	movs	r1, #10
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fcc2 	bl	80032c4 <IOE_Read>
 8002940:	4603      	mov	r3, r0
 8002942:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	797b      	ldrb	r3, [r7, #5]
 8002948:	4313      	orrs	r3, r2
 800294a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	210a      	movs	r1, #10
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fca2 	bl	800329e <IOE_Write>
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	460a      	mov	r2, r1
 800296c:	80fb      	strh	r3, [r7, #6]
 800296e:	4613      	mov	r3, r2
 8002970:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	210a      	movs	r1, #10
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fca1 	bl	80032c4 <IOE_Read>
 8002982:	4603      	mov	r3, r0
 8002984:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002986:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800298a:	43db      	mvns	r3, r3
 800298c:	b25a      	sxtb	r2, r3
 800298e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002992:	4013      	ands	r3, r2
 8002994:	b25b      	sxtb	r3, r3
 8002996:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	210a      	movs	r1, #10
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fc7c 	bl	800329e <IOE_Write>
}
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	460a      	mov	r2, r1
 80029b8:	80fb      	strh	r3, [r7, #6]
 80029ba:	4613      	mov	r3, r2
 80029bc:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	210b      	movs	r1, #11
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 fc7d 	bl	80032c4 <IOE_Read>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	4013      	ands	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	80fb      	strh	r3, [r7, #6]
 80029e8:	4613      	mov	r3, r2
 80029ea:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	797a      	ldrb	r2, [r7, #5]
 80029f2:	210b      	movs	r1, #11
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fc52 	bl	800329e <IOE_Write>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	6039      	str	r1, [r7, #0]
 8002a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2117      	movs	r1, #23
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 fc53 	bl	80032c4 <IOE_Read>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b25b      	sxtb	r3, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	b25a      	sxtb	r2, r3
 8002a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	2117      	movs	r1, #23
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fc2e 	bl	800329e <IOE_Write>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2104      	movs	r1, #4
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fc32 	bl	80032c4 <IOE_Read>
 8002a60:	4603      	mov	r3, r0
 8002a62:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	f023 0304 	bic.w	r3, r3, #4
 8002a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	2104      	movs	r1, #4
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fc12 	bl	800329e <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	21f0      	movs	r1, #240	; 0xf0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff ffbf 	bl	8002a02 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	2104      	movs	r1, #4
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fc02 	bl	800329e <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2249      	movs	r2, #73	; 0x49
 8002aa0:	2120      	movs	r1, #32
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fbfb 	bl	800329e <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f000 fc35 	bl	8003318 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	2121      	movs	r1, #33	; 0x21
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fbf1 	bl	800329e <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	229a      	movs	r2, #154	; 0x9a
 8002ac2:	2141      	movs	r1, #65	; 0x41
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fbea 	bl	800329e <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2201      	movs	r2, #1
 8002ad0:	214a      	movs	r1, #74	; 0x4a
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fbe3 	bl	800329e <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2201      	movs	r2, #1
 8002ade:	214b      	movs	r1, #75	; 0x4b
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fbdc 	bl	800329e <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2200      	movs	r2, #0
 8002aec:	214b      	movs	r1, #75	; 0x4b
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fbd5 	bl	800329e <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2201      	movs	r2, #1
 8002afa:	2156      	movs	r1, #86	; 0x56
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fbce 	bl	800329e <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2201      	movs	r2, #1
 8002b08:	2158      	movs	r1, #88	; 0x58
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fbc7 	bl	800329e <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002b10:	88fb      	ldrh	r3, [r7, #6]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2201      	movs	r2, #1
 8002b16:	2140      	movs	r1, #64	; 0x40
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fbc0 	bl	800329e <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	22ff      	movs	r2, #255	; 0xff
 8002b24:	210b      	movs	r1, #11
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fbb9 	bl	800329e <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002b2c:	2002      	movs	r0, #2
 8002b2e:	f000 fbf3 	bl	8003318 <IOE_Delay>
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2140      	movs	r1, #64	; 0x40
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fbb8 	bl	80032c4 <IOE_Read>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	bf0c      	ite	eq
 8002b5e:	2301      	moveq	r3, #1
 8002b60:	2300      	movne	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002b66:	7bbb      	ldrb	r3, [r7, #14]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	214c      	movs	r1, #76	; 0x4c
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fba6 	bl	80032c4 <IOE_Read>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e00d      	b.n	8002ba0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2201      	movs	r2, #1
 8002b8a:	214b      	movs	r1, #75	; 0x4b
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fb86 	bl	800329e <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2200      	movs	r2, #0
 8002b98:	214b      	movs	r1, #75	; 0x4b
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fb7f 	bl	800329e <IOE_Write>
  }
  
  return ret;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b086      	sub	sp, #24
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002bb8:	89fb      	ldrh	r3, [r7, #14]
 8002bba:	b2d8      	uxtb	r0, r3
 8002bbc:	f107 0210 	add.w	r2, r7, #16
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	21d7      	movs	r1, #215	; 0xd7
 8002bc4:	f000 fb91 	bl	80032ea <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002bc8:	7c3b      	ldrb	r3, [r7, #16]
 8002bca:	061a      	lsls	r2, r3, #24
 8002bcc:	7c7b      	ldrb	r3, [r7, #17]
 8002bce:	041b      	lsls	r3, r3, #16
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	7cbb      	ldrb	r3, [r7, #18]
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	7cfa      	ldrb	r2, [r7, #19]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	0d1b      	lsrs	r3, r3, #20
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002bf8:	89fb      	ldrh	r3, [r7, #14]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	214b      	movs	r1, #75	; 0x4b
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fb4c 	bl	800329e <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002c06:	89fb      	ldrh	r3, [r7, #14]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	214b      	movs	r1, #75	; 0x4b
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fb45 	bl	800329e <IOE_Write>
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002c26:	f000 fb34 	bl	8003292 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	211f      	movs	r1, #31
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fe76 	bl	8002920 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fe36 	bl	80028a8 <stmpe811_EnableGlobalIT>
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fe47 	bl	80028e4 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	211f      	movs	r1, #31
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fe81 	bl	8002962 <stmpe811_DisableITSource>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	211f      	movs	r1, #31
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fe99 	bl	80029ae <stmpe811_ReadGITStatus>
 8002c7c:	4603      	mov	r3, r0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	211f      	movs	r1, #31
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fea1 	bl	80029dc <stmpe811_ClearGlobalIT>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e00b      	b.n	8002cd0 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <stmpe811_GetInstance+0x40>)
 8002cbc:	5cd3      	ldrb	r3, [r2, r3]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d101      	bne.n	8002cca <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002cc6:	7bfb      	ldrb	r3, [r7, #15]
 8002cc8:	e006      	b.n	8002cd8 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d9f0      	bls.n	8002cb8 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002cd6:	23ff      	movs	r3, #255	; 0xff
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	20000964 	.word	0x20000964

08002ce8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a33      	ldr	r2, [pc, #204]	; (8002dc4 <I2Cx_MspInit+0xdc>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d15f      	bne.n	8002dba <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a31      	ldr	r2, [pc, #196]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b2b      	ldr	r3, [pc, #172]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a2a      	ldr	r2, [pc, #168]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002d38:	2312      	movs	r3, #18
 8002d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002d40:	2302      	movs	r3, #2
 8002d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002d44:	2304      	movs	r3, #4
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	481f      	ldr	r0, [pc, #124]	; (8002dcc <I2Cx_MspInit+0xe4>)
 8002d50:	f001 f986 	bl	8004060 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d58:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	4619      	mov	r1, r3
 8002d60:	481b      	ldr	r0, [pc, #108]	; (8002dd0 <I2Cx_MspInit+0xe8>)
 8002d62:	f001 f97d 	bl	8004060 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60bb      	str	r3, [r7, #8]
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a16      	ldr	r2, [pc, #88]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7e:	60bb      	str	r3, [r7, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d8c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <I2Cx_MspInit+0xe0>)
 8002d94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d98:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	2048      	movs	r0, #72	; 0x48
 8002da0:	f000 fcf0 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002da4:	2048      	movs	r0, #72	; 0x48
 8002da6:	f000 fd09 	bl	80037bc <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	210f      	movs	r1, #15
 8002dae:	2049      	movs	r0, #73	; 0x49
 8002db0:	f000 fce8 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002db4:	2049      	movs	r0, #73	; 0x49
 8002db6:	f000 fd01 	bl	80037bc <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	; 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40005c00 	.word	0x40005c00
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	40020800 	.word	0x40020800

08002dd4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002dd8:	4814      	ldr	r0, [pc, #80]	; (8002e2c <I2Cx_Init+0x58>)
 8002dda:	f002 f897 	bl	8004f0c <HAL_I2C_GetState>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d121      	bne.n	8002e28 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <I2Cx_Init+0x58>)
 8002de6:	4a12      	ldr	r2, [pc, #72]	; (8002e30 <I2Cx_Init+0x5c>)
 8002de8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <I2Cx_Init+0x58>)
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <I2Cx_Init+0x60>)
 8002dee:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <I2Cx_Init+0x58>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <I2Cx_Init+0x58>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <I2Cx_Init+0x58>)
 8002dfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e02:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <I2Cx_Init+0x58>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002e0a:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <I2Cx_Init+0x58>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <I2Cx_Init+0x58>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <I2Cx_Init+0x58>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002e1c:	4803      	ldr	r0, [pc, #12]	; (8002e2c <I2Cx_Init+0x58>)
 8002e1e:	f7ff ff63 	bl	8002ce8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002e22:	4802      	ldr	r0, [pc, #8]	; (8002e2c <I2Cx_Init+0x58>)
 8002e24:	f001 fbea 	bl	80045fc <HAL_I2C_Init>
  }
}
 8002e28:	bf00      	nop
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	2001aa24 	.word	0x2001aa24
 8002e30:	40005c00 	.word	0x40005c00
 8002e34:	000186a0 	.word	0x000186a0

08002e38 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <I2Cx_ITConfig+0x58>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <I2Cx_ITConfig+0x58>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b10      	ldr	r3, [pc, #64]	; (8002e90 <I2Cx_ITConfig+0x58>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	603b      	str	r3, [r7, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002e64:	2300      	movs	r3, #0
 8002e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <I2Cx_ITConfig+0x5c>)
 8002e6a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4809      	ldr	r0, [pc, #36]	; (8002e98 <I2Cx_ITConfig+0x60>)
 8002e72:	f001 f8f5 	bl	8004060 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002e76:	2200      	movs	r2, #0
 8002e78:	210f      	movs	r1, #15
 8002e7a:	2028      	movs	r0, #40	; 0x28
 8002e7c:	f000 fc82 	bl	8003784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002e80:	2028      	movs	r0, #40	; 0x28
 8002e82:	f000 fc9b 	bl	80037bc <HAL_NVIC_EnableIRQ>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800
 8002e94:	10210000 	.word	0x10210000
 8002e98:	40020000 	.word	0x40020000

08002e9c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af04      	add	r7, sp, #16
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	71bb      	strb	r3, [r7, #6]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	b299      	uxth	r1, r3
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <I2Cx_WriteData+0x4c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	1d7b      	adds	r3, r7, #5
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	4808      	ldr	r0, [pc, #32]	; (8002eec <I2Cx_WriteData+0x50>)
 8002ecc:	f001 fcfe 	bl	80048cc <HAL_I2C_Mem_Write>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002eda:	f000 f863 	bl	8002fa4 <I2Cx_Error>
  }        
}
 8002ede:	bf00      	nop
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	2000002c 	.word	0x2000002c
 8002eec:	2001aa24 	.word	0x2001aa24

08002ef0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	460a      	mov	r2, r1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	b299      	uxth	r1, r3
 8002f0c:	79bb      	ldrb	r3, [r7, #6]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <I2Cx_ReadData+0x50>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	2301      	movs	r3, #1
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	f107 030e 	add.w	r3, r7, #14
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2301      	movs	r3, #1
 8002f22:	4808      	ldr	r0, [pc, #32]	; (8002f44 <I2Cx_ReadData+0x54>)
 8002f24:	f001 fdcc 	bl	8004ac0 <HAL_I2C_Mem_Read>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f32:	f000 f837 	bl	8002fa4 <I2Cx_Error>
  
  }
  return value;
 8002f36:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	2000002c 	.word	0x2000002c
 8002f44:	2001aa24 	.word	0x2001aa24

08002f48 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af04      	add	r7, sp, #16
 8002f4e:	603a      	str	r2, [r7, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
 8002f56:	460b      	mov	r3, r1
 8002f58:	71bb      	strb	r3, [r7, #6]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	b299      	uxth	r1, r3
 8002f66:	79bb      	ldrb	r3, [r7, #6]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <I2Cx_ReadBuffer+0x54>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	9302      	str	r3, [sp, #8]
 8002f70:	88bb      	ldrh	r3, [r7, #4]
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	4809      	ldr	r0, [pc, #36]	; (8002fa0 <I2Cx_ReadBuffer+0x58>)
 8002f7c:	f001 fda0 	bl	8004ac0 <HAL_I2C_Mem_Read>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e002      	b.n	8002f94 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002f8e:	f000 f809 	bl	8002fa4 <I2Cx_Error>

    return 1;
 8002f92:	2301      	movs	r3, #1
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	2000002c 	.word	0x2000002c
 8002fa0:	2001aa24 	.word	0x2001aa24

08002fa4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002fa8:	4803      	ldr	r0, [pc, #12]	; (8002fb8 <I2Cx_Error+0x14>)
 8002faa:	f001 fc5f 	bl	800486c <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002fae:	f7ff ff11 	bl	8002dd4 <I2Cx_Init>
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2001aa24 	.word	0x2001aa24

08002fbc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002fc0:	4819      	ldr	r0, [pc, #100]	; (8003028 <SPIx_Init+0x6c>)
 8002fc2:	f004 fad7 	bl	8007574 <HAL_SPI_GetState>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d12b      	bne.n	8003024 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002fcc:	4b16      	ldr	r3, [pc, #88]	; (8003028 <SPIx_Init+0x6c>)
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <SPIx_Init+0x70>)
 8002fd0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <SPIx_Init+0x6c>)
 8002fd4:	2218      	movs	r2, #24
 8002fd6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	; (8003028 <SPIx_Init+0x6c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <SPIx_Init+0x6c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002fe4:	4b10      	ldr	r3, [pc, #64]	; (8003028 <SPIx_Init+0x6c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002fea:	4b0f      	ldr	r3, [pc, #60]	; (8003028 <SPIx_Init+0x6c>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002ff0:	4b0d      	ldr	r3, [pc, #52]	; (8003028 <SPIx_Init+0x6c>)
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002ff6:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <SPIx_Init+0x6c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <SPIx_Init+0x6c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <SPIx_Init+0x6c>)
 8003004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003008:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <SPIx_Init+0x6c>)
 800300c:	2200      	movs	r2, #0
 800300e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SPIx_Init+0x6c>)
 8003012:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003016:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003018:	4803      	ldr	r0, [pc, #12]	; (8003028 <SPIx_Init+0x6c>)
 800301a:	f000 f833 	bl	8003084 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800301e:	4802      	ldr	r0, [pc, #8]	; (8003028 <SPIx_Init+0x6c>)
 8003020:	f003 fea9 	bl	8006d76 <HAL_SPI_Init>
  } 
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000968 	.word	0x20000968
 800302c:	40015000 	.word	0x40015000

08003030 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <SPIx_Write+0x34>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	1db9      	adds	r1, r7, #6
 8003044:	2201      	movs	r2, #1
 8003046:	4808      	ldr	r0, [pc, #32]	; (8003068 <SPIx_Write+0x38>)
 8003048:	f003 ff21 	bl	8006e8e <HAL_SPI_Transmit>
 800304c:	4603      	mov	r3, r0
 800304e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003056:	f000 f809 	bl	800306c <SPIx_Error>
  }
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000030 	.word	0x20000030
 8003068:	20000968 	.word	0x20000968

0800306c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003070:	4803      	ldr	r0, [pc, #12]	; (8003080 <SPIx_Error+0x14>)
 8003072:	f003 fee4 	bl	8006e3e <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003076:	f7ff ffa1 	bl	8002fbc <SPIx_Init>
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000968 	.word	0x20000968

08003084 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	4b17      	ldr	r3, [pc, #92]	; (80030f0 <SPIx_MspInit+0x6c>)
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	4a16      	ldr	r2, [pc, #88]	; (80030f0 <SPIx_MspInit+0x6c>)
 8003096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800309a:	6453      	str	r3, [r2, #68]	; 0x44
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <SPIx_MspInit+0x6c>)
 800309e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <SPIx_MspInit+0x6c>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4a0f      	ldr	r2, [pc, #60]	; (80030f0 <SPIx_MspInit+0x6c>)
 80030b2:	f043 0320 	orr.w	r3, r3, #32
 80030b6:	6313      	str	r3, [r2, #48]	; 0x30
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <SPIx_MspInit+0x6c>)
 80030ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80030c4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80030c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80030d2:	2301      	movs	r3, #1
 80030d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80030d6:	2305      	movs	r3, #5
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4804      	ldr	r0, [pc, #16]	; (80030f4 <SPIx_MspInit+0x70>)
 80030e2:	f000 ffbd 	bl	8004060 <HAL_GPIO_Init>
}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40021400 	.word	0x40021400

080030f8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80030fe:	4b36      	ldr	r3, [pc, #216]	; (80031d8 <LCD_IO_Init+0xe0>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d164      	bne.n	80031d0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <LCD_IO_Init+0xe0>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800310c:	2300      	movs	r3, #0
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <LCD_IO_Init+0xe4>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4a31      	ldr	r2, [pc, #196]	; (80031dc <LCD_IO_Init+0xe4>)
 8003116:	f043 0308 	orr.w	r3, r3, #8
 800311a:	6313      	str	r3, [r2, #48]	; 0x30
 800311c:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <LCD_IO_Init+0xe4>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800312c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800312e:	2301      	movs	r3, #1
 8003130:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003136:	2302      	movs	r3, #2
 8003138:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800313a:	f107 030c 	add.w	r3, r7, #12
 800313e:	4619      	mov	r1, r3
 8003140:	4827      	ldr	r0, [pc, #156]	; (80031e0 <LCD_IO_Init+0xe8>)
 8003142:	f000 ff8d 	bl	8004060 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <LCD_IO_Init+0xe4>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a23      	ldr	r2, [pc, #140]	; (80031dc <LCD_IO_Init+0xe4>)
 8003150:	f043 0308 	orr.w	r3, r3, #8
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <LCD_IO_Init+0xe4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003166:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003170:	2302      	movs	r3, #2
 8003172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003174:	f107 030c 	add.w	r3, r7, #12
 8003178:	4619      	mov	r1, r3
 800317a:	4819      	ldr	r0, [pc, #100]	; (80031e0 <LCD_IO_Init+0xe8>)
 800317c:	f000 ff70 	bl	8004060 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003180:	2300      	movs	r3, #0
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4b15      	ldr	r3, [pc, #84]	; (80031dc <LCD_IO_Init+0xe4>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <LCD_IO_Init+0xe4>)
 800318a:	f043 0304 	orr.w	r3, r3, #4
 800318e:	6313      	str	r3, [r2, #48]	; 0x30
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <LCD_IO_Init+0xe4>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800319c:	2304      	movs	r3, #4
 800319e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80031ac:	f107 030c 	add.w	r3, r7, #12
 80031b0:	4619      	mov	r1, r3
 80031b2:	480c      	ldr	r0, [pc, #48]	; (80031e4 <LCD_IO_Init+0xec>)
 80031b4:	f000 ff54 	bl	8004060 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80031b8:	2200      	movs	r2, #0
 80031ba:	2104      	movs	r1, #4
 80031bc:	4809      	ldr	r0, [pc, #36]	; (80031e4 <LCD_IO_Init+0xec>)
 80031be:	f001 fa03 	bl	80045c8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80031c2:	2201      	movs	r2, #1
 80031c4:	2104      	movs	r1, #4
 80031c6:	4807      	ldr	r0, [pc, #28]	; (80031e4 <LCD_IO_Init+0xec>)
 80031c8:	f001 f9fe 	bl	80045c8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80031cc:	f7ff fef6 	bl	8002fbc <SPIx_Init>
  }
}
 80031d0:	bf00      	nop
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200009c0 	.word	0x200009c0
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020c00 	.word	0x40020c00
 80031e4:	40020800 	.word	0x40020800

080031e8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80031f2:	2201      	movs	r2, #1
 80031f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031f8:	480a      	ldr	r0, [pc, #40]	; (8003224 <LCD_IO_WriteData+0x3c>)
 80031fa:	f001 f9e5 	bl	80045c8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80031fe:	2200      	movs	r2, #0
 8003200:	2104      	movs	r1, #4
 8003202:	4809      	ldr	r0, [pc, #36]	; (8003228 <LCD_IO_WriteData+0x40>)
 8003204:	f001 f9e0 	bl	80045c8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003208:	88fb      	ldrh	r3, [r7, #6]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ff10 	bl	8003030 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003210:	2201      	movs	r2, #1
 8003212:	2104      	movs	r1, #4
 8003214:	4804      	ldr	r0, [pc, #16]	; (8003228 <LCD_IO_WriteData+0x40>)
 8003216:	f001 f9d7 	bl	80045c8 <HAL_GPIO_WritePin>
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40020c00 	.word	0x40020c00
 8003228:	40020800 	.word	0x40020800

0800322c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003236:	2200      	movs	r2, #0
 8003238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800323c:	480a      	ldr	r0, [pc, #40]	; (8003268 <LCD_IO_WriteReg+0x3c>)
 800323e:	f001 f9c3 	bl	80045c8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003242:	2200      	movs	r2, #0
 8003244:	2104      	movs	r1, #4
 8003246:	4809      	ldr	r0, [pc, #36]	; (800326c <LCD_IO_WriteReg+0x40>)
 8003248:	f001 f9be 	bl	80045c8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800324c:	79fb      	ldrb	r3, [r7, #7]
 800324e:	b29b      	uxth	r3, r3
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff feed 	bl	8003030 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003256:	2201      	movs	r2, #1
 8003258:	2104      	movs	r1, #4
 800325a:	4804      	ldr	r0, [pc, #16]	; (800326c <LCD_IO_WriteReg+0x40>)
 800325c:	f001 f9b4 	bl	80045c8 <HAL_GPIO_WritePin>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40020c00 	.word	0x40020c00
 800326c:	40020800 	.word	0x40020800

08003270 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f987 	bl	800358c <HAL_Delay>
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800328a:	f7ff fda3 	bl	8002dd4 <I2Cx_Init>
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}

08003292 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8003296:	f7ff fdcf 	bl	8002e38 <I2Cx_ITConfig>
}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}

0800329e <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b082      	sub	sp, #8
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	4603      	mov	r3, r0
 80032a6:	71fb      	strb	r3, [r7, #7]
 80032a8:	460b      	mov	r3, r1
 80032aa:	71bb      	strb	r3, [r7, #6]
 80032ac:	4613      	mov	r3, r2
 80032ae:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80032b0:	797a      	ldrb	r2, [r7, #5]
 80032b2:	79b9      	ldrb	r1, [r7, #6]
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fdf0 	bl	8002e9c <I2Cx_WriteData>
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	460a      	mov	r2, r1
 80032ce:	71fb      	strb	r3, [r7, #7]
 80032d0:	4613      	mov	r3, r2
 80032d2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80032d4:	79ba      	ldrb	r2, [r7, #6]
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fe08 	bl	8002ef0 <I2Cx_ReadData>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	603a      	str	r2, [r7, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	4603      	mov	r3, r0
 80032f6:	71fb      	strb	r3, [r7, #7]
 80032f8:	460b      	mov	r3, r1
 80032fa:	71bb      	strb	r3, [r7, #6]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003300:	88bb      	ldrh	r3, [r7, #4]
 8003302:	79b9      	ldrb	r1, [r7, #6]
 8003304:	79f8      	ldrb	r0, [r7, #7]
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	f7ff fe1e 	bl	8002f48 <I2Cx_ReadBuffer>
 800330c:	4603      	mov	r3, r0
 800330e:	b29b      	uxth	r3, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f933 	bl	800358c <HAL_Delay>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
	...

08003330 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	460a      	mov	r2, r1
 800333a:	80fb      	strh	r3, [r7, #6]
 800333c:	4613      	mov	r3, r2
 800333e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <BSP_TS_Init+0x64>)
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800334a:	4a13      	ldr	r2, [pc, #76]	; (8003398 <BSP_TS_Init+0x68>)
 800334c:	88bb      	ldrh	r3, [r7, #4]
 800334e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003350:	4b12      	ldr	r3, [pc, #72]	; (800339c <BSP_TS_Init+0x6c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2082      	movs	r0, #130	; 0x82
 8003356:	4798      	blx	r3
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	f640 0311 	movw	r3, #2065	; 0x811
 8003360:	429a      	cmp	r2, r3
 8003362:	d104      	bne.n	800336e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003364:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <BSP_TS_Init+0x70>)
 8003366:	4a0d      	ldr	r2, [pc, #52]	; (800339c <BSP_TS_Init+0x6c>)
 8003368:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <BSP_TS_Init+0x70>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2082      	movs	r0, #130	; 0x82
 800337c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <BSP_TS_Init+0x70>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2082      	movs	r0, #130	; 0x82
 8003386:	4798      	blx	r3
  }

  return ret;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200009c8 	.word	0x200009c8
 8003398:	200009ca 	.word	0x200009ca
 800339c:	20000004 	.word	0x20000004
 80033a0:	200009c4 	.word	0x200009c4

080033a4 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80033ac:	4b4f      	ldr	r3, [pc, #316]	; (80034ec <BSP_TS_GetState+0x148>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2082      	movs	r0, #130	; 0x82
 80033b4:	4798      	blx	r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 808d 	beq.w	80034e2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80033c8:	4b48      	ldr	r3, [pc, #288]	; (80034ec <BSP_TS_GetState+0x148>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f107 020c 	add.w	r2, r7, #12
 80033d2:	f107 010e 	add.w	r1, r7, #14
 80033d6:	2082      	movs	r0, #130	; 0x82
 80033d8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80033da:	89bb      	ldrh	r3, [r7, #12]
 80033dc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80033e4:	89bb      	ldrh	r3, [r7, #12]
 80033e6:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <BSP_TS_GetState+0x14c>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80033f0:	8abb      	ldrh	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d102      	bne.n	80033fc <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	82bb      	strh	r3, [r7, #20]
 80033fa:	e008      	b.n	800340e <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80033fc:	4b3d      	ldr	r3, [pc, #244]	; (80034f4 <BSP_TS_GetState+0x150>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	8aba      	ldrh	r2, [r7, #20]
 8003402:	429a      	cmp	r2, r3
 8003404:	d903      	bls.n	800340e <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <BSP_TS_GetState+0x150>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 800340e:	8abb      	ldrh	r3, [r7, #20]
 8003410:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003412:	89fb      	ldrh	r3, [r7, #14]
 8003414:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003418:	4293      	cmp	r3, r2
 800341a:	d806      	bhi.n	800342a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 800341c:	89fb      	ldrh	r3, [r7, #14]
 800341e:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003422:	330e      	adds	r3, #14
 8003424:	b29b      	uxth	r3, r3
 8003426:	81fb      	strh	r3, [r7, #14]
 8003428:	e005      	b.n	8003436 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800342a:	89fb      	ldrh	r3, [r7, #14]
 800342c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003430:	3308      	adds	r3, #8
 8003432:	b29b      	uxth	r3, r3
 8003434:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <BSP_TS_GetState+0x154>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	08db      	lsrs	r3, r3, #3
 8003440:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003442:	8afb      	ldrh	r3, [r7, #22]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	82fb      	strh	r3, [r7, #22]
 800344c:	e008      	b.n	8003460 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <BSP_TS_GetState+0x158>)
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	8afa      	ldrh	r2, [r7, #22]
 8003454:	429a      	cmp	r2, r3
 8003456:	d903      	bls.n	8003460 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <BSP_TS_GetState+0x158>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	3b01      	subs	r3, #1
 800345e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003460:	8afb      	ldrh	r3, [r7, #22]
 8003462:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003464:	89fb      	ldrh	r3, [r7, #14]
 8003466:	461a      	mov	r2, r3
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <BSP_TS_GetState+0x15c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	429a      	cmp	r2, r3
 800346e:	d906      	bls.n	800347e <BSP_TS_GetState+0xda>
 8003470:	89fa      	ldrh	r2, [r7, #14]
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <BSP_TS_GetState+0x15c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	e005      	b.n	800348a <BSP_TS_GetState+0xe6>
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <BSP_TS_GetState+0x15c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29a      	uxth	r2, r3
 8003484:	89fb      	ldrh	r3, [r7, #14]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	b29b      	uxth	r3, r3
 800348a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800348c:	89bb      	ldrh	r3, [r7, #12]
 800348e:	461a      	mov	r2, r3
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <BSP_TS_GetState+0x160>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d906      	bls.n	80034a6 <BSP_TS_GetState+0x102>
 8003498:	89ba      	ldrh	r2, [r7, #12]
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <BSP_TS_GetState+0x160>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	e005      	b.n	80034b2 <BSP_TS_GetState+0x10e>
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <BSP_TS_GetState+0x160>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	89bb      	ldrh	r3, [r7, #12]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80034b4:	8a7a      	ldrh	r2, [r7, #18]
 80034b6:	8a3b      	ldrh	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	2b05      	cmp	r3, #5
 80034bc:	dd07      	ble.n	80034ce <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80034be:	89fb      	ldrh	r3, [r7, #14]
 80034c0:	461a      	mov	r2, r3
 80034c2:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <BSP_TS_GetState+0x15c>)
 80034c4:	601a      	str	r2, [r3, #0]
      _y = y; 
 80034c6:	89bb      	ldrh	r3, [r7, #12]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <BSP_TS_GetState+0x160>)
 80034cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <BSP_TS_GetState+0x15c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <BSP_TS_GetState+0x160>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	809a      	strh	r2, [r3, #4]
  }
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200009c4 	.word	0x200009c4
 80034f0:	ba2e8ba3 	.word	0xba2e8ba3
 80034f4:	200009ca 	.word	0x200009ca
 80034f8:	88888889 	.word	0x88888889
 80034fc:	200009c8 	.word	0x200009c8
 8003500:	200009cc 	.word	0x200009cc
 8003504:	200009d0 	.word	0x200009d0

08003508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <HAL_Init+0x40>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0d      	ldr	r2, [pc, #52]	; (8003548 <HAL_Init+0x40>)
 8003512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_Init+0x40>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_Init+0x40>)
 800351e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003524:	4b08      	ldr	r3, [pc, #32]	; (8003548 <HAL_Init+0x40>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a07      	ldr	r2, [pc, #28]	; (8003548 <HAL_Init+0x40>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003530:	2003      	movs	r0, #3
 8003532:	f000 f91c 	bl	800376e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003536:	2000      	movs	r0, #0
 8003538:	f7fe fe56 	bl	80021e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800353c:	f7fe fb60 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023c00 	.word	0x40023c00

0800354c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_IncTick+0x20>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_IncTick+0x24>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4413      	add	r3, r2
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_IncTick+0x24>)
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000038 	.word	0x20000038
 8003570:	2001aa78 	.word	0x2001aa78

08003574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return uwTick;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_GetTick+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	2001aa78 	.word	0x2001aa78

0800358c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003594:	f7ff ffee 	bl	8003574 <HAL_GetTick>
 8003598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d005      	beq.n	80035b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_Delay+0x40>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	461a      	mov	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035b2:	bf00      	nop
 80035b4:	f7ff ffde 	bl	8003574 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d8f7      	bhi.n	80035b4 <HAL_Delay+0x28>
  {
  }
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000038 	.word	0x20000038

080035d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e0:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035ec:	4013      	ands	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003602:	4a04      	ldr	r2, [pc, #16]	; (8003614 <__NVIC_SetPriorityGrouping+0x44>)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	60d3      	str	r3, [r2, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800361c:	4b04      	ldr	r3, [pc, #16]	; (8003630 <__NVIC_GetPriorityGrouping+0x18>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	0a1b      	lsrs	r3, r3, #8
 8003622:	f003 0307 	and.w	r3, r3, #7
}
 8003626:	4618      	mov	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	4603      	mov	r3, r0
 800363c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	2b00      	cmp	r3, #0
 8003644:	db0b      	blt.n	800365e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	4907      	ldr	r1, [pc, #28]	; (800366c <__NVIC_EnableIRQ+0x38>)
 800364e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2001      	movs	r0, #1
 8003656:	fa00 f202 	lsl.w	r2, r0, r2
 800365a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db10      	blt.n	80036a4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4909      	ldr	r1, [pc, #36]	; (80036b0 <__NVIC_DisableIRQ+0x40>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2001      	movs	r0, #1
 8003692:	fa00 f202 	lsl.w	r2, r0, r2
 8003696:	3320      	adds	r3, #32
 8003698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800369c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80036a0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100

080036b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db0a      	blt.n	80036de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	490c      	ldr	r1, [pc, #48]	; (8003700 <__NVIC_SetPriority+0x4c>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	440b      	add	r3, r1
 80036d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036dc:	e00a      	b.n	80036f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4908      	ldr	r1, [pc, #32]	; (8003704 <__NVIC_SetPriority+0x50>)
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3b04      	subs	r3, #4
 80036ec:	0112      	lsls	r2, r2, #4
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	440b      	add	r3, r1
 80036f2:	761a      	strb	r2, [r3, #24]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f1c3 0307 	rsb	r3, r3, #7
 8003722:	2b04      	cmp	r3, #4
 8003724:	bf28      	it	cs
 8003726:	2304      	movcs	r3, #4
 8003728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3304      	adds	r3, #4
 800372e:	2b06      	cmp	r3, #6
 8003730:	d902      	bls.n	8003738 <NVIC_EncodePriority+0x30>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3b03      	subs	r3, #3
 8003736:	e000      	b.n	800373a <NVIC_EncodePriority+0x32>
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	401a      	ands	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43d9      	mvns	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	4313      	orrs	r3, r2
         );
}
 8003762:	4618      	mov	r0, r3
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff2a 	bl	80035d0 <__NVIC_SetPriorityGrouping>
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003796:	f7ff ff3f 	bl	8003618 <__NVIC_GetPriorityGrouping>
 800379a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	6978      	ldr	r0, [r7, #20]
 80037a2:	f7ff ffb1 	bl	8003708 <NVIC_EncodePriority>
 80037a6:	4602      	mov	r2, r0
 80037a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff ff80 	bl	80036b4 <__NVIC_SetPriority>
}
 80037b4:	bf00      	nop
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff32 	bl	8003634 <__NVIC_EnableIRQ>
}
 80037d0:	bf00      	nop
 80037d2:	3708      	adds	r7, #8
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff42 	bl	8003670 <__NVIC_DisableIRQ>
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e00e      	b.n	8003824 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	795b      	ldrb	r3, [r3, #5]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fe fa1e 	bl	8001c58 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d004      	beq.n	800384a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e00c      	b.n	8003864 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2205      	movs	r2, #5
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e03b      	b.n	80038fa <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f014 fa5e 	bl	8017d58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	f023 0107 	bic.w	r1, r3, #7
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80038da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d1      	ldr	r1, [r2, #12]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	430b      	orrs	r3, r1
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e05f      	b.n	80039d6 <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 8003916:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <HAL_DMA2D_DeInit+0xdc>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02e      	beq.n	8003980 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8c1 	bl	8003ab8 <HAL_DMA2D_Abort>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d021      	beq.n	8003980 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e04a      	b.n	80039d6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	f003 0320 	and.w	r3, r3, #32
 800394a:	2b20      	cmp	r3, #32
 800394c:	d108      	bne.n	8003960 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 800394e:	2100      	movs	r1, #0
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8f7 	bl	8003b44 <HAL_DMA2D_CLUTLoading_Abort>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d011      	beq.n	8003980 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e03a      	b.n	80039d6 <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d108      	bne.n	8003980 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 800396e:	2101      	movs	r1, #1
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8e7 	bl	8003b44 <HAL_DMA2D_CLUTLoading_Abort>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e02a      	b.n	80039d6 <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	223f      	movs	r2, #63	; 0x3f
 800398e:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2200      	movs	r2, #0
 8003996:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2200      	movs	r2, #0
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2200      	movs	r2, #0
 80039b6:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f014 f9f5 	bl	8017da8 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d101      	bne.n	8003a00 <HAL_DMA2D_Start_IT+0x1c>
 80039fc:	2302      	movs	r3, #2
 80039fe:	e020      	b.n	8003a42 <HAL_DMA2D_Start_IT+0x5e>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fa84 	bl	8003f28 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0201 	orr.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af02      	add	r7, sp, #8
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_DMA2D_BlendingStart_IT+0x1c>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e024      	b.n	8003ab0 <HAL_DMA2D_BlendingStart_IT+0x66>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fa4d 	bl	8003f28 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0201 	orr.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f023 0205 	bic.w	r2, r3, #5
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0204 	orr.w	r2, r2, #4
 8003ad2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ad4:	f7ff fd4e 	bl	8003574 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ada:	e017      	b.n	8003b0c <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003adc:	f7ff fd4a 	bl	8003574 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aea:	d90f      	bls.n	8003b0c <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2203      	movs	r2, #3
 8003afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e017      	b.n	8003b3c <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e0      	bne.n	8003adc <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8003b28:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	3324      	adds	r3, #36	; 0x24
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0204 	orr.w	r2, r2, #4
 8003b64:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d103      	bne.n	8003b74 <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	331c      	adds	r3, #28
 8003b72:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 8003b74:	f7ff fcfe 	bl	8003574 <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003b7a:	e017      	b.n	8003bac <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8003b7c:	f7ff fcfa 	bl	8003574 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b8a:	d90f      	bls.n	8003bac <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e016      	b.n	8003bda <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0320 	and.w	r3, r3, #32
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e1      	bne.n	8003b7c <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 8003bc6:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d026      	beq.n	8003c52 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d021      	beq.n	8003c52 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c1c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	f043 0201 	orr.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2204      	movs	r2, #4
 8003c36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d026      	beq.n	8003caa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d021      	beq.n	8003caa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c74:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	f043 0202 	orr.w	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d026      	beq.n	8003d02 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d021      	beq.n	8003d02 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ccc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f853 	bl	8003dda <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d024      	beq.n	8003d88 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01f      	beq.n	8003d88 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d56:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01f      	beq.n	8003dd2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01a      	beq.n	8003dd2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003daa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2210      	movs	r2, #16
 8003db2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f80e 	bl	8003dee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_DMA2D_ConfigLayer+0x20>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e079      	b.n	8003f18 <HAL_DMA2D_ConfigLayer+0x114>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	3318      	adds	r3, #24
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003e4e:	4b35      	ldr	r3, [pc, #212]	; (8003f24 <HAL_DMA2D_ConfigLayer+0x120>)
 8003e50:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b0a      	cmp	r3, #10
 8003e58:	d003      	beq.n	8003e62 <HAL_DMA2D_ConfigLayer+0x5e>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b09      	cmp	r3, #9
 8003e60:	d107      	bne.n	8003e72 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e005      	b.n	8003e7e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	061b      	lsls	r3, r3, #24
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d120      	bne.n	8003ec6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	ea02 0103 	and.w	r1, r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b0a      	cmp	r3, #10
 8003eac:	d003      	beq.n	8003eb6 <HAL_DMA2D_ConfigLayer+0xb2>
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d127      	bne.n	8003f06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec4:	e01f      	b.n	8003f06 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	ea02 0103 	and.w	r1, r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b0a      	cmp	r3, #10
 8003eee:	d003      	beq.n	8003ef8 <HAL_DMA2D_ConfigLayer+0xf4>
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b09      	cmp	r3, #9
 8003ef6:	d106      	bne.n	8003f06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003f04:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	ff03000f 	.word	0xff03000f

08003f28 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b08b      	sub	sp, #44	; 0x2c
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	041a      	lsls	r2, r3, #16
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f60:	d174      	bne.n	800404c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003f68:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f70:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f78:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e053      	b.n	8004042 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d106      	bne.n	8003fb0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	e048      	b.n	8004042 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d111      	bne.n	8003fdc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	0cdb      	lsrs	r3, r3, #19
 8003fbc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	0a9b      	lsrs	r3, r3, #10
 8003fc2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	08db      	lsrs	r3, r3, #3
 8003fc8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	02db      	lsls	r3, r3, #11
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fda:	e032      	b.n	8004042 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d117      	bne.n	8004014 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	0fdb      	lsrs	r3, r3, #31
 8003fe8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	0cdb      	lsrs	r3, r3, #19
 8003fee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	0adb      	lsrs	r3, r3, #11
 8003ff4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	08db      	lsrs	r3, r3, #3
 8003ffa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	029b      	lsls	r3, r3, #10
 8004004:	431a      	orrs	r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	03db      	lsls	r3, r3, #15
 800400a:	4313      	orrs	r3, r2
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
 8004012:	e016      	b.n	8004042 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	0f1b      	lsrs	r3, r3, #28
 8004018:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	0d1b      	lsrs	r3, r3, #20
 800401e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	0b1b      	lsrs	r3, r3, #12
 8004024:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	011a      	lsls	r2, r3, #4
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	431a      	orrs	r2, r3
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	4313      	orrs	r3, r2
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004048:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800404a:	e003      	b.n	8004054 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	60da      	str	r2, [r3, #12]
}
 8004054:	bf00      	nop
 8004056:	372c      	adds	r7, #44	; 0x2c
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004060:	b480      	push	{r7}
 8004062:	b089      	sub	sp, #36	; 0x24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	e177      	b.n	800436c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800407c:	2201      	movs	r2, #1
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	429a      	cmp	r2, r3
 8004096:	f040 8166 	bne.w	8004366 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d00b      	beq.n	80040ba <HAL_GPIO_Init+0x5a>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d007      	beq.n	80040ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040ae:	2b11      	cmp	r3, #17
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b12      	cmp	r3, #18
 80040b8:	d130      	bne.n	800411c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	2203      	movs	r2, #3
 80040c6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ca:	43db      	mvns	r3, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4013      	ands	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040f0:	2201      	movs	r2, #1
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 0201 	and.w	r2, r3, #1
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	2203      	movs	r2, #3
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0xfc>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b12      	cmp	r3, #18
 800415a:	d123      	bne.n	80041a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	08da      	lsrs	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3208      	adds	r2, #8
 8004164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004168:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f003 0307 	and.w	r3, r3, #7
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	220f      	movs	r2, #15
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	08da      	lsrs	r2, r3, #3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3208      	adds	r2, #8
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	2203      	movs	r2, #3
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4013      	ands	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 0203 	and.w	r2, r3, #3
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80c0 	beq.w	8004366 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	4b65      	ldr	r3, [pc, #404]	; (8004380 <HAL_GPIO_Init+0x320>)
 80041ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ee:	4a64      	ldr	r2, [pc, #400]	; (8004380 <HAL_GPIO_Init+0x320>)
 80041f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041f4:	6453      	str	r3, [r2, #68]	; 0x44
 80041f6:	4b62      	ldr	r3, [pc, #392]	; (8004380 <HAL_GPIO_Init+0x320>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004202:	4a60      	ldr	r2, [pc, #384]	; (8004384 <HAL_GPIO_Init+0x324>)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	089b      	lsrs	r3, r3, #2
 8004208:	3302      	adds	r3, #2
 800420a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 0303 	and.w	r3, r3, #3
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	220f      	movs	r2, #15
 800421a:	fa02 f303 	lsl.w	r3, r2, r3
 800421e:	43db      	mvns	r3, r3
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	4013      	ands	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a57      	ldr	r2, [pc, #348]	; (8004388 <HAL_GPIO_Init+0x328>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d037      	beq.n	800429e <HAL_GPIO_Init+0x23e>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a56      	ldr	r2, [pc, #344]	; (800438c <HAL_GPIO_Init+0x32c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_GPIO_Init+0x23a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a55      	ldr	r2, [pc, #340]	; (8004390 <HAL_GPIO_Init+0x330>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02b      	beq.n	8004296 <HAL_GPIO_Init+0x236>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a54      	ldr	r2, [pc, #336]	; (8004394 <HAL_GPIO_Init+0x334>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d025      	beq.n	8004292 <HAL_GPIO_Init+0x232>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a53      	ldr	r2, [pc, #332]	; (8004398 <HAL_GPIO_Init+0x338>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d01f      	beq.n	800428e <HAL_GPIO_Init+0x22e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a52      	ldr	r2, [pc, #328]	; (800439c <HAL_GPIO_Init+0x33c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d019      	beq.n	800428a <HAL_GPIO_Init+0x22a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a51      	ldr	r2, [pc, #324]	; (80043a0 <HAL_GPIO_Init+0x340>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <HAL_GPIO_Init+0x226>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a50      	ldr	r2, [pc, #320]	; (80043a4 <HAL_GPIO_Init+0x344>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d00d      	beq.n	8004282 <HAL_GPIO_Init+0x222>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4f      	ldr	r2, [pc, #316]	; (80043a8 <HAL_GPIO_Init+0x348>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d007      	beq.n	800427e <HAL_GPIO_Init+0x21e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a4e      	ldr	r2, [pc, #312]	; (80043ac <HAL_GPIO_Init+0x34c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d101      	bne.n	800427a <HAL_GPIO_Init+0x21a>
 8004276:	2309      	movs	r3, #9
 8004278:	e012      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 800427a:	230a      	movs	r3, #10
 800427c:	e010      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 800427e:	2308      	movs	r3, #8
 8004280:	e00e      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 8004282:	2307      	movs	r3, #7
 8004284:	e00c      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 8004286:	2306      	movs	r3, #6
 8004288:	e00a      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 800428a:	2305      	movs	r3, #5
 800428c:	e008      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 800428e:	2304      	movs	r3, #4
 8004290:	e006      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 8004292:	2303      	movs	r3, #3
 8004294:	e004      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 8004296:	2302      	movs	r3, #2
 8004298:	e002      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 800429a:	2301      	movs	r3, #1
 800429c:	e000      	b.n	80042a0 <HAL_GPIO_Init+0x240>
 800429e:	2300      	movs	r3, #0
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f002 0203 	and.w	r2, r2, #3
 80042a6:	0092      	lsls	r2, r2, #2
 80042a8:	4093      	lsls	r3, r2
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b0:	4934      	ldr	r1, [pc, #208]	; (8004384 <HAL_GPIO_Init+0x324>)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042be:	4b3c      	ldr	r3, [pc, #240]	; (80043b0 <HAL_GPIO_Init+0x350>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	43db      	mvns	r3, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4013      	ands	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4313      	orrs	r3, r2
 80042e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042e2:	4a33      	ldr	r2, [pc, #204]	; (80043b0 <HAL_GPIO_Init+0x350>)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80042e8:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_GPIO_Init+0x350>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800430c:	4a28      	ldr	r2, [pc, #160]	; (80043b0 <HAL_GPIO_Init+0x350>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004312:	4b27      	ldr	r3, [pc, #156]	; (80043b0 <HAL_GPIO_Init+0x350>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_GPIO_Init+0x350>)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800433c:	4b1c      	ldr	r3, [pc, #112]	; (80043b0 <HAL_GPIO_Init+0x350>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004360:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <HAL_GPIO_Init+0x350>)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	3301      	adds	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b0f      	cmp	r3, #15
 8004370:	f67f ae84 	bls.w	800407c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004374:	bf00      	nop
 8004376:	3724      	adds	r7, #36	; 0x24
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40023800 	.word	0x40023800
 8004384:	40013800 	.word	0x40013800
 8004388:	40020000 	.word	0x40020000
 800438c:	40020400 	.word	0x40020400
 8004390:	40020800 	.word	0x40020800
 8004394:	40020c00 	.word	0x40020c00
 8004398:	40021000 	.word	0x40021000
 800439c:	40021400 	.word	0x40021400
 80043a0:	40021800 	.word	0x40021800
 80043a4:	40021c00 	.word	0x40021c00
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40022400 	.word	0x40022400
 80043b0:	40013c00 	.word	0x40013c00

080043b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e0d9      	b.n	8004584 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043d0:	2201      	movs	r2, #1
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4013      	ands	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	f040 80c9 	bne.w	800457e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80043ec:	4a6a      	ldr	r2, [pc, #424]	; (8004598 <HAL_GPIO_DeInit+0x1e4>)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	089b      	lsrs	r3, r3, #2
 80043f2:	3302      	adds	r3, #2
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	220f      	movs	r2, #15
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	4013      	ands	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a62      	ldr	r2, [pc, #392]	; (800459c <HAL_GPIO_DeInit+0x1e8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d037      	beq.n	8004486 <HAL_GPIO_DeInit+0xd2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <HAL_GPIO_DeInit+0x1ec>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d031      	beq.n	8004482 <HAL_GPIO_DeInit+0xce>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a60      	ldr	r2, [pc, #384]	; (80045a4 <HAL_GPIO_DeInit+0x1f0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d02b      	beq.n	800447e <HAL_GPIO_DeInit+0xca>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a5f      	ldr	r2, [pc, #380]	; (80045a8 <HAL_GPIO_DeInit+0x1f4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d025      	beq.n	800447a <HAL_GPIO_DeInit+0xc6>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a5e      	ldr	r2, [pc, #376]	; (80045ac <HAL_GPIO_DeInit+0x1f8>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d01f      	beq.n	8004476 <HAL_GPIO_DeInit+0xc2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a5d      	ldr	r2, [pc, #372]	; (80045b0 <HAL_GPIO_DeInit+0x1fc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d019      	beq.n	8004472 <HAL_GPIO_DeInit+0xbe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a5c      	ldr	r2, [pc, #368]	; (80045b4 <HAL_GPIO_DeInit+0x200>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <HAL_GPIO_DeInit+0xba>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a5b      	ldr	r2, [pc, #364]	; (80045b8 <HAL_GPIO_DeInit+0x204>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00d      	beq.n	800446a <HAL_GPIO_DeInit+0xb6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a5a      	ldr	r2, [pc, #360]	; (80045bc <HAL_GPIO_DeInit+0x208>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <HAL_GPIO_DeInit+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a59      	ldr	r2, [pc, #356]	; (80045c0 <HAL_GPIO_DeInit+0x20c>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_GPIO_DeInit+0xae>
 800445e:	2309      	movs	r3, #9
 8004460:	e012      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 8004462:	230a      	movs	r3, #10
 8004464:	e010      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 8004466:	2308      	movs	r3, #8
 8004468:	e00e      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 800446a:	2307      	movs	r3, #7
 800446c:	e00c      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 800446e:	2306      	movs	r3, #6
 8004470:	e00a      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 8004472:	2305      	movs	r3, #5
 8004474:	e008      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 8004476:	2304      	movs	r3, #4
 8004478:	e006      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 800447a:	2303      	movs	r3, #3
 800447c:	e004      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 800447e:	2302      	movs	r3, #2
 8004480:	e002      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_GPIO_DeInit+0xd4>
 8004486:	2300      	movs	r3, #0
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	f002 0203 	and.w	r2, r2, #3
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	4093      	lsls	r3, r2
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	d132      	bne.n	80044fe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004498:	4b4a      	ldr	r3, [pc, #296]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	43db      	mvns	r3, r3
 80044a0:	4948      	ldr	r1, [pc, #288]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	4945      	ldr	r1, [pc, #276]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	4941      	ldr	r1, [pc, #260]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 80044be:	4013      	ands	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80044c2:	4b40      	ldr	r3, [pc, #256]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	493e      	ldr	r1, [pc, #248]	; (80045c4 <HAL_GPIO_DeInit+0x210>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	220f      	movs	r2, #15
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80044e0:	4a2d      	ldr	r2, [pc, #180]	; (8004598 <HAL_GPIO_DeInit+0x1e4>)
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	089b      	lsrs	r3, r3, #2
 80044e6:	3302      	adds	r3, #2
 80044e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	43da      	mvns	r2, r3
 80044f0:	4829      	ldr	r0, [pc, #164]	; (8004598 <HAL_GPIO_DeInit+0x1e4>)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	400a      	ands	r2, r1
 80044f8:	3302      	adds	r3, #2
 80044fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	2103      	movs	r1, #3
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	08da      	lsrs	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3208      	adds	r2, #8
 800451c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	220f      	movs	r2, #15
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43db      	mvns	r3, r3
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	08d2      	lsrs	r2, r2, #3
 8004534:	4019      	ands	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3208      	adds	r2, #8
 800453a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2103      	movs	r1, #3
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	401a      	ands	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	2101      	movs	r1, #1
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2103      	movs	r1, #3
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	401a      	ands	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	3301      	adds	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	f67f af22 	bls.w	80043d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800458c:	bf00      	nop
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	40013800 	.word	0x40013800
 800459c:	40020000 	.word	0x40020000
 80045a0:	40020400 	.word	0x40020400
 80045a4:	40020800 	.word	0x40020800
 80045a8:	40020c00 	.word	0x40020c00
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40021400 	.word	0x40021400
 80045b4:	40021800 	.word	0x40021800
 80045b8:	40021c00 	.word	0x40021c00
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40022400 	.word	0x40022400
 80045c4:	40013c00 	.word	0x40013c00

080045c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]
 80045d4:	4613      	mov	r3, r2
 80045d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045d8:	787b      	ldrb	r3, [r7, #1]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045e4:	e003      	b.n	80045ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045e6:	887b      	ldrh	r3, [r7, #2]
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	619a      	str	r2, [r3, #24]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e11f      	b.n	800484e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fd fb3a 	bl	8001c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800464e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800465e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004660:	f002 f8f2 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8004664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4a7b      	ldr	r2, [pc, #492]	; (8004858 <HAL_I2C_Init+0x25c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d807      	bhi.n	8004680 <HAL_I2C_Init+0x84>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a7a      	ldr	r2, [pc, #488]	; (800485c <HAL_I2C_Init+0x260>)
 8004674:	4293      	cmp	r3, r2
 8004676:	bf94      	ite	ls
 8004678:	2301      	movls	r3, #1
 800467a:	2300      	movhi	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e006      	b.n	800468e <HAL_I2C_Init+0x92>
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4a77      	ldr	r2, [pc, #476]	; (8004860 <HAL_I2C_Init+0x264>)
 8004684:	4293      	cmp	r3, r2
 8004686:	bf94      	ite	ls
 8004688:	2301      	movls	r3, #1
 800468a:	2300      	movhi	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0db      	b.n	800484e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a72      	ldr	r2, [pc, #456]	; (8004864 <HAL_I2C_Init+0x268>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	0c9b      	lsrs	r3, r3, #18
 80046a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4a64      	ldr	r2, [pc, #400]	; (8004858 <HAL_I2C_Init+0x25c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d802      	bhi.n	80046d0 <HAL_I2C_Init+0xd4>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3301      	adds	r3, #1
 80046ce:	e009      	b.n	80046e4 <HAL_I2C_Init+0xe8>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	4a63      	ldr	r2, [pc, #396]	; (8004868 <HAL_I2C_Init+0x26c>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	3301      	adds	r3, #1
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	4956      	ldr	r1, [pc, #344]	; (8004858 <HAL_I2C_Init+0x25c>)
 8004700:	428b      	cmp	r3, r1
 8004702:	d80d      	bhi.n	8004720 <HAL_I2C_Init+0x124>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	1e59      	subs	r1, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004712:	3301      	adds	r3, #1
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	2b04      	cmp	r3, #4
 800471a:	bf38      	it	cc
 800471c:	2304      	movcc	r3, #4
 800471e:	e04f      	b.n	80047c0 <HAL_I2C_Init+0x1c4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d111      	bne.n	800474c <HAL_I2C_Init+0x150>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1e58      	subs	r0, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	440b      	add	r3, r1
 8004736:	fbb0 f3f3 	udiv	r3, r0, r3
 800473a:	3301      	adds	r3, #1
 800473c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf0c      	ite	eq
 8004744:	2301      	moveq	r3, #1
 8004746:	2300      	movne	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e012      	b.n	8004772 <HAL_I2C_Init+0x176>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1e58      	subs	r0, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6859      	ldr	r1, [r3, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	0099      	lsls	r1, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004762:	3301      	adds	r3, #1
 8004764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf0c      	ite	eq
 800476c:	2301      	moveq	r3, #1
 800476e:	2300      	movne	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_I2C_Init+0x17e>
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <HAL_I2C_Init+0x1c4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10e      	bne.n	80047a0 <HAL_I2C_Init+0x1a4>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1e58      	subs	r0, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	460b      	mov	r3, r1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	440b      	add	r3, r1
 8004790:	fbb0 f3f3 	udiv	r3, r0, r3
 8004794:	3301      	adds	r3, #1
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	e00f      	b.n	80047c0 <HAL_I2C_Init+0x1c4>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	1e58      	subs	r0, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6859      	ldr	r1, [r3, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	0099      	lsls	r1, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047b6:	3301      	adds	r3, #1
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	6809      	ldr	r1, [r1, #0]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6911      	ldr	r1, [r2, #16]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68d2      	ldr	r2, [r2, #12]
 80047fa:	4311      	orrs	r1, r2
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	430b      	orrs	r3, r1
 8004802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f042 0201 	orr.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	000186a0 	.word	0x000186a0
 800485c:	001e847f 	.word	0x001e847f
 8004860:	003d08ff 	.word	0x003d08ff
 8004864:	431bde83 	.word	0x431bde83
 8004868:	10624dd3 	.word	0x10624dd3

0800486c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e021      	b.n	80048c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2224      	movs	r2, #36	; 0x24
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0201 	bic.w	r2, r2, #1
 8004894:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fd fa6a 	bl	8001d70 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
	...

080048cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	4603      	mov	r3, r0
 80048dc:	817b      	strh	r3, [r7, #10]
 80048de:	460b      	mov	r3, r1
 80048e0:	813b      	strh	r3, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048e6:	f7fe fe45 	bl	8003574 <HAL_GetTick>
 80048ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	f040 80d9 	bne.w	8004aac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	2319      	movs	r3, #25
 8004900:	2201      	movs	r2, #1
 8004902:	496d      	ldr	r1, [pc, #436]	; (8004ab8 <HAL_I2C_Mem_Write+0x1ec>)
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 fc89 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004910:	2302      	movs	r3, #2
 8004912:	e0cc      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_I2C_Mem_Write+0x56>
 800491e:	2302      	movs	r3, #2
 8004920:	e0c5      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d007      	beq.n	8004948 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2221      	movs	r2, #33	; 0x21
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2240      	movs	r2, #64	; 0x40
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4a4d      	ldr	r2, [pc, #308]	; (8004abc <HAL_I2C_Mem_Write+0x1f0>)
 8004988:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800498a:	88f8      	ldrh	r0, [r7, #6]
 800498c:	893a      	ldrh	r2, [r7, #8]
 800498e:	8979      	ldrh	r1, [r7, #10]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	4603      	mov	r3, r0
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f000 fac4 	bl	8004f28 <I2C_RequestMemoryWrite>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d052      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e081      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fd0a 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d107      	bne.n	80049d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e06b      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3b01      	subs	r3, #1
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d11b      	bne.n	8004a4c <HAL_I2C_Mem_Write+0x180>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d017      	beq.n	8004a4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1aa      	bne.n	80049aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fcf6 	bl	800544a <I2C_WaitOnBTFFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00d      	beq.n	8004a80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d107      	bne.n	8004a7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e016      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	00100002 	.word	0x00100002
 8004abc:	ffff0000 	.word	0xffff0000

08004ac0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08c      	sub	sp, #48	; 0x30
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	813b      	strh	r3, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ada:	f7fe fd4b 	bl	8003574 <HAL_GetTick>
 8004ade:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	f040 8208 	bne.w	8004efe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2319      	movs	r3, #25
 8004af4:	2201      	movs	r2, #1
 8004af6:	497b      	ldr	r1, [pc, #492]	; (8004ce4 <HAL_I2C_Mem_Read+0x224>)
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fb8f 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
 8004b06:	e1fb      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <HAL_I2C_Mem_Read+0x56>
 8004b12:	2302      	movs	r3, #2
 8004b14:	e1f4      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d007      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2222      	movs	r2, #34	; 0x22
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2240      	movs	r2, #64	; 0x40
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a5b      	ldr	r2, [pc, #364]	; (8004ce8 <HAL_I2C_Mem_Read+0x228>)
 8004b7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b7e:	88f8      	ldrh	r0, [r7, #6]
 8004b80:	893a      	ldrh	r2, [r7, #8]
 8004b82:	8979      	ldrh	r1, [r7, #10]
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa5e 	bl	8005050 <I2C_RequestMemoryRead>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e1b0      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d113      	bne.n	8004bce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	623b      	str	r3, [r7, #32]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	623b      	str	r3, [r7, #32]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e184      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d11b      	bne.n	8004c0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	61fb      	str	r3, [r7, #28]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e164      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d11b      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	e144      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c64:	e138      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	f200 80f1 	bhi.w	8004e52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d123      	bne.n	8004cc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fc25 	bl	80054cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e139      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cbe:	e10b      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d14e      	bne.n	8004d66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4906      	ldr	r1, [pc, #24]	; (8004cec <HAL_I2C_Mem_Read+0x22c>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 faa2 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e10e      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
 8004ce2:	bf00      	nop
 8004ce4:	00100002 	.word	0x00100002
 8004ce8:	ffff0000 	.word	0xffff0000
 8004cec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691a      	ldr	r2, [r3, #16]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	1c5a      	adds	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d64:	e0b8      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4966      	ldr	r1, [pc, #408]	; (8004f08 <HAL_I2C_Mem_Read+0x448>)
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 fa53 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0bf      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	2200      	movs	r2, #0
 8004dca:	494f      	ldr	r1, [pc, #316]	; (8004f08 <HAL_I2C_Mem_Read+0x448>)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fa25 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e091      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e50:	e042      	b.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 fb38 	bl	80054cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e04c      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d118      	bne.n	8004ed8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f47f aec2 	bne.w	8004c66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	e000      	b.n	8004f00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004efe:	2302      	movs	r3, #2
  }
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3728      	adds	r7, #40	; 0x28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	00010004 	.word	0x00010004

08004f0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	4608      	mov	r0, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4603      	mov	r3, r0
 8004f38:	817b      	strh	r3, [r7, #10]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	813b      	strh	r3, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 f95c 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e05f      	b.n	8005044 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	492c      	ldr	r1, [pc, #176]	; (800504c <I2C_RequestMemoryWrite+0x124>)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f995 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e04c      	b.n	8005044 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004faa:	2300      	movs	r3, #0
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	6a39      	ldr	r1, [r7, #32]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f9ff 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00d      	beq.n	8004fec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d107      	bne.n	8004fe8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fe6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e02b      	b.n	8005044 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d105      	bne.n	8004ffe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ff2:	893b      	ldrh	r3, [r7, #8]
 8004ff4:	b2da      	uxtb	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	611a      	str	r2, [r3, #16]
 8004ffc:	e021      	b.n	8005042 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ffe:	893b      	ldrh	r3, [r7, #8]
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	b29b      	uxth	r3, r3
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800500c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500e:	6a39      	ldr	r1, [r7, #32]
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f9d9 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00d      	beq.n	8005038 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2b04      	cmp	r3, #4
 8005022:	d107      	bne.n	8005034 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005032:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e005      	b.n	8005044 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005038:	893b      	ldrh	r3, [r7, #8]
 800503a:	b2da      	uxtb	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	00010002 	.word	0x00010002

08005050 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	4608      	mov	r0, r1
 800505a:	4611      	mov	r1, r2
 800505c:	461a      	mov	r2, r3
 800505e:	4603      	mov	r3, r0
 8005060:	817b      	strh	r3, [r7, #10]
 8005062:	460b      	mov	r3, r1
 8005064:	813b      	strh	r3, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005078:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005088:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	2200      	movs	r2, #0
 8005092:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f000 f8c0 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00c      	beq.n	80050bc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e0a9      	b.n	8005210 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050bc:	897b      	ldrh	r3, [r7, #10]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	6a3a      	ldr	r2, [r7, #32]
 80050d0:	4951      	ldr	r1, [pc, #324]	; (8005218 <I2C_RequestMemoryRead+0x1c8>)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f8f9 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e096      	b.n	8005210 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fa:	6a39      	ldr	r1, [r7, #32]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	f000 f963 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b04      	cmp	r3, #4
 800510e:	d107      	bne.n	8005120 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e075      	b.n	8005210 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800512a:	893b      	ldrh	r3, [r7, #8]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]
 8005134:	e021      	b.n	800517a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005136:	893b      	ldrh	r3, [r7, #8]
 8005138:	0a1b      	lsrs	r3, r3, #8
 800513a:	b29b      	uxth	r3, r3
 800513c:	b2da      	uxtb	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005146:	6a39      	ldr	r1, [r7, #32]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f93d 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00d      	beq.n	8005170 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	2b04      	cmp	r3, #4
 800515a:	d107      	bne.n	800516c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800516a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e04f      	b.n	8005210 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005170:	893b      	ldrh	r3, [r7, #8]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517c:	6a39      	ldr	r1, [r7, #32]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f922 	bl	80053c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b04      	cmp	r3, #4
 8005190:	d107      	bne.n	80051a2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e034      	b.n	8005210 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	2200      	movs	r2, #0
 80051be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f82a 	bl	800521c <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e013      	b.n	8005210 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051e8:	897b      	ldrh	r3, [r7, #10]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	4906      	ldr	r1, [pc, #24]	; (8005218 <I2C_RequestMemoryRead+0x1c8>)
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f000 f863 	bl	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	00010002 	.word	0x00010002

0800521c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800522c:	e025      	b.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005234:	d021      	beq.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005236:	f7fe f99d 	bl	8003574 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d302      	bcc.n	800524c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0220 	orr.w	r2, r3, #32
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e023      	b.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d10d      	bne.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	43da      	mvns	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	e00c      	b.n	80052ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	43da      	mvns	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4013      	ands	r3, r2
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bf0c      	ite	eq
 80052b2:	2301      	moveq	r3, #1
 80052b4:	2300      	movne	r3, #0
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d0b6      	beq.n	800522e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052d8:	e051      	b.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e8:	d123      	bne.n	8005332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005302:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f043 0204 	orr.w	r2, r3, #4
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e046      	b.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d021      	beq.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fe f91b 	bl	8003574 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d116      	bne.n	800537e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	f043 0220 	orr.w	r2, r3, #32
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e020      	b.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10c      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	43da      	mvns	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	4013      	ands	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf14      	ite	ne
 800539a:	2301      	movne	r3, #1
 800539c:	2300      	moveq	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	e00b      	b.n	80053ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d18d      	bne.n	80052da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053d4:	e02d      	b.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 f8ce 	bl	8005578 <I2C_IsAcknowledgeFailed>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e02d      	b.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d021      	beq.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fe f8c1 	bl	8003574 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d116      	bne.n	8005432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e007      	b.n	8005442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543c:	2b80      	cmp	r3, #128	; 0x80
 800543e:	d1ca      	bne.n	80053d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005456:	e02d      	b.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f88d 	bl	8005578 <I2C_IsAcknowledgeFailed>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d001      	beq.n	8005468 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e02d      	b.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	d021      	beq.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005470:	f7fe f880 	bl	8003574 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d302      	bcc.n	8005486 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d116      	bne.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e007      	b.n	80054c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d1ca      	bne.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054d8:	e042      	b.n	8005560 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d119      	bne.n	800551c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0210 	mvn.w	r2, #16
 80054f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e029      	b.n	8005570 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800551c:	f7fe f82a 	bl	8003574 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	429a      	cmp	r2, r3
 800552a:	d302      	bcc.n	8005532 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d116      	bne.n	8005560 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	f043 0220 	orr.w	r2, r3, #32
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e007      	b.n	8005570 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d1b5      	bne.n	80054da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800558e:	d11b      	bne.n	80055c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005598:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f043 0204 	orr.w	r2, r3, #4
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d129      	bne.n	8005640 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	; 0x24
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0210 	bic.w	r2, r2, #16
 8005612:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	e000      	b.n	8005642 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
  }
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b20      	cmp	r3, #32
 8005666:	d12a      	bne.n	80056be <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2224      	movs	r2, #36	; 0x24
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	f023 030f 	bic.w	r3, r3, #15
 800568e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	b29a      	uxth	r2, r3
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	4313      	orrs	r3, r2
 8005698:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	89fa      	ldrh	r2, [r7, #14]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e0bf      	b.n	800585e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f012 f93a 	bl	801796c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	699a      	ldr	r2, [r3, #24]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800570e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6999      	ldr	r1, [r3, #24]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005724:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6899      	ldr	r1, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b4a      	ldr	r3, [pc, #296]	; (8005868 <HAL_LTDC_Init+0x19c>)
 8005740:	400b      	ands	r3, r1
 8005742:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6899      	ldr	r1, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68d9      	ldr	r1, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b3e      	ldr	r3, [pc, #248]	; (8005868 <HAL_LTDC_Init+0x19c>)
 800576e:	400b      	ands	r3, r1
 8005770:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68d9      	ldr	r1, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6919      	ldr	r1, [r3, #16]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_LTDC_Init+0x19c>)
 800579c:	400b      	ands	r3, r1
 800579e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6919      	ldr	r1, [r3, #16]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6959      	ldr	r1, [r3, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <HAL_LTDC_Init+0x19c>)
 80057ca:	400b      	ands	r3, r1
 80057cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	041b      	lsls	r3, r3, #16
 80057d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6959      	ldr	r1, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4313      	orrs	r3, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f042 0206 	orr.w	r2, r2, #6
 800583a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	699a      	ldr	r2, [r3, #24]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	f000f800 	.word	0xf000f800

0800586c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f012 f98f 	bl	8017b98 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d023      	beq.n	8005906 <HAL_LTDC_IRQHandler+0x6a>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01e      	beq.n	8005906 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0204 	bic.w	r2, r2, #4
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2204      	movs	r2, #4
 80058de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80058e6:	f043 0201 	orr.w	r2, r3, #1
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2204      	movs	r2, #4
 80058f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f86f 	bl	80059e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d023      	beq.n	8005958 <HAL_LTDC_IRQHandler+0xbc>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01e      	beq.n	8005958 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0202 	bic.w	r2, r2, #2
 8005928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2202      	movs	r2, #2
 8005930:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005938:	f043 0202 	orr.w	r2, r3, #2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2204      	movs	r2, #4
 8005946:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f846 	bl	80059e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01b      	beq.n	800599a <HAL_LTDC_IRQHandler+0xfe>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2201      	movs	r2, #1
 8005982:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f013 f923 	bl	8018be0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <HAL_LTDC_IRQHandler+0x140>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d016      	beq.n	80059dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f022 0208 	bic.w	r2, r2, #8
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2208      	movs	r2, #8
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f80e 	bl	80059f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005a0c:	b5b0      	push	{r4, r5, r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_LTDC_ConfigLayer+0x1a>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e02c      	b.n	8005a80 <HAL_LTDC_ConfigLayer+0x74>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2134      	movs	r1, #52	; 0x34
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	4413      	add	r3, r2
 8005a42:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4614      	mov	r4, r2
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f8cf 	bl	8005c04 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bdb0      	pop	{r4, r5, r7, pc}

08005a88 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b089      	sub	sp, #36	; 0x24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_LTDC_SetPitch+0x1a>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e06f      	b.n	8005b82 <HAL_LTDC_SetPitch+0xfa>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2202      	movs	r2, #2
 8005aae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2134      	movs	r1, #52	; 0x34
 8005ab8:	fb01 f303 	mul.w	r3, r1, r3
 8005abc:	4413      	add	r3, r2
 8005abe:	3348      	adds	r3, #72	; 0x48
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d102      	bne.n	8005ad0 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8005aca:	2304      	movs	r3, #4
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	e016      	b.n	8005afe <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d102      	bne.n	8005adc <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	e010      	b.n	8005afe <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d008      	beq.n	8005af4 <HAL_LTDC_SetPitch+0x6c>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d005      	beq.n	8005af4 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d002      	beq.n	8005af4 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b07      	cmp	r3, #7
 8005af2:	d102      	bne.n	8005afa <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005af4:	2302      	movs	r3, #2
 8005af6:	61fb      	str	r3, [r7, #28]
 8005af8:	e001      	b.n	8005afe <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8005afa:	2301      	movs	r3, #1
 8005afc:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	01db      	lsls	r3, r3, #7
 8005b14:	4413      	add	r3, r2
 8005b16:	3384      	adds	r3, #132	; 0x84
 8005b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	6812      	ldr	r2, [r2, #0]
 8005b1e:	4611      	mov	r1, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	01d2      	lsls	r2, r2, #7
 8005b24:	440a      	add	r2, r1
 8005b26:	3284      	adds	r2, #132	; 0x84
 8005b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b30:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005b32:	4b17      	ldr	r3, [pc, #92]	; (8005b90 <HAL_LTDC_SetPitch+0x108>)
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	4a16      	ldr	r2, [pc, #88]	; (8005b90 <HAL_LTDC_SetPitch+0x108>)
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	01db      	lsls	r3, r3, #7
 8005b48:	4413      	add	r3, r2
 8005b4a:	3384      	adds	r3, #132	; 0x84
 8005b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	01db      	lsls	r3, r3, #7
 8005b58:	440b      	add	r3, r1
 8005b5a:	3384      	adds	r3, #132	; 0x84
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <HAL_LTDC_SetPitch+0x108>)
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <HAL_LTDC_SetPitch+0x108>)
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	; 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop
 8005b90:	40016800 	.word	0x40016800

08005b94 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d101      	bne.n	8005bac <HAL_LTDC_ProgramLineEvent+0x18>
 8005ba8:	2302      	movs	r3, #2
 8005baa:	e023      	b.n	8005bf4 <HAL_LTDC_ProgramLineEvent+0x60>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0201 	bic.w	r2, r2, #1
 8005bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005bcc:	4a0c      	ldr	r2, [pc, #48]	; (8005c00 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	40016800 	.word	0x40016800

08005c04 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	; 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	0c1b      	lsrs	r3, r3, #16
 8005c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c20:	4413      	add	r3, r2
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	01db      	lsls	r3, r3, #7
 8005c30:	4413      	add	r3, r2
 8005c32:	3384      	adds	r3, #132	; 0x84
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	01d2      	lsls	r2, r2, #7
 8005c40:	440a      	add	r2, r1
 8005c42:	3284      	adds	r2, #132	; 0x84
 8005c44:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c48:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c5a:	4413      	add	r3, r2
 8005c5c:	1c5a      	adds	r2, r3, #1
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4619      	mov	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	01db      	lsls	r3, r3, #7
 8005c68:	440b      	add	r3, r1
 8005c6a:	3384      	adds	r3, #132	; 0x84
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c82:	4413      	add	r3, r2
 8005c84:	041b      	lsls	r3, r3, #16
 8005c86:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	01db      	lsls	r3, r3, #7
 8005c92:	4413      	add	r3, r2
 8005c94:	3384      	adds	r3, #132	; 0x84
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	6812      	ldr	r2, [r2, #0]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	01d2      	lsls	r2, r2, #7
 8005ca2:	440a      	add	r2, r1
 8005ca4:	3284      	adds	r2, #132	; 0x84
 8005ca6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005caa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cba:	4413      	add	r3, r2
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	01db      	lsls	r3, r3, #7
 8005cc8:	440b      	add	r3, r1
 8005cca:	3384      	adds	r3, #132	; 0x84
 8005ccc:	4619      	mov	r1, r3
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	01db      	lsls	r3, r3, #7
 8005cde:	4413      	add	r3, r2
 8005ce0:	3384      	adds	r3, #132	; 0x84
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	4611      	mov	r1, r2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	01d2      	lsls	r2, r2, #7
 8005cee:	440a      	add	r2, r1
 8005cf0:	3284      	adds	r2, #132	; 0x84
 8005cf2:	f023 0307 	bic.w	r3, r3, #7
 8005cf6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	01db      	lsls	r3, r3, #7
 8005d02:	4413      	add	r3, r2
 8005d04:	3384      	adds	r3, #132	; 0x84
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	061b      	lsls	r3, r3, #24
 8005d28:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	01db      	lsls	r3, r3, #7
 8005d34:	4413      	add	r3, r2
 8005d36:	3384      	adds	r3, #132	; 0x84
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	01db      	lsls	r3, r3, #7
 8005d44:	4413      	add	r3, r2
 8005d46:	3384      	adds	r3, #132	; 0x84
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d54:	461a      	mov	r2, r3
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4619      	mov	r1, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	01db      	lsls	r3, r3, #7
 8005d68:	440b      	add	r3, r1
 8005d6a:	3384      	adds	r3, #132	; 0x84
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	01db      	lsls	r3, r3, #7
 8005d7e:	4413      	add	r3, r2
 8005d80:	3384      	adds	r3, #132	; 0x84
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	01d2      	lsls	r2, r2, #7
 8005d8e:	440a      	add	r2, r1
 8005d90:	3284      	adds	r2, #132	; 0x84
 8005d92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d96:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	01db      	lsls	r3, r3, #7
 8005da2:	4413      	add	r3, r2
 8005da4:	3384      	adds	r3, #132	; 0x84
 8005da6:	461a      	mov	r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	01db      	lsls	r3, r3, #7
 8005db8:	4413      	add	r3, r2
 8005dba:	3384      	adds	r3, #132	; 0x84
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	01d2      	lsls	r2, r2, #7
 8005dc8:	440a      	add	r2, r1
 8005dca:	3284      	adds	r2, #132	; 0x84
 8005dcc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005dd0:	f023 0307 	bic.w	r3, r3, #7
 8005dd4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	6809      	ldr	r1, [r1, #0]
 8005de2:	4608      	mov	r0, r1
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	01c9      	lsls	r1, r1, #7
 8005de8:	4401      	add	r1, r0
 8005dea:	3184      	adds	r1, #132	; 0x84
 8005dec:	4313      	orrs	r3, r2
 8005dee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	461a      	mov	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	01db      	lsls	r3, r3, #7
 8005dfa:	4413      	add	r3, r2
 8005dfc:	3384      	adds	r3, #132	; 0x84
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	01db      	lsls	r3, r3, #7
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3384      	adds	r3, #132	; 0x84
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2300      	movs	r3, #0
 8005e12:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	01db      	lsls	r3, r3, #7
 8005e1e:	4413      	add	r3, r2
 8005e20:	3384      	adds	r3, #132	; 0x84
 8005e22:	461a      	mov	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d102      	bne.n	8005e38 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005e32:	2304      	movs	r3, #4
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	e01b      	b.n	8005e70 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d102      	bne.n	8005e46 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005e40:	2303      	movs	r3, #3
 8005e42:	61fb      	str	r3, [r7, #28]
 8005e44:	e014      	b.n	8005e70 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d00b      	beq.n	8005e66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d007      	beq.n	8005e66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d003      	beq.n	8005e66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e62:	2b07      	cmp	r3, #7
 8005e64:	d102      	bne.n	8005e6c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005e66:	2302      	movs	r3, #2
 8005e68:	61fb      	str	r3, [r7, #28]
 8005e6a:	e001      	b.n	8005e70 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	01db      	lsls	r3, r3, #7
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3384      	adds	r3, #132	; 0x84
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6812      	ldr	r2, [r2, #0]
 8005e84:	4611      	mov	r1, r2
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	01d2      	lsls	r2, r2, #7
 8005e8a:	440a      	add	r2, r1
 8005e8c:	3284      	adds	r2, #132	; 0x84
 8005e8e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005e92:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	041a      	lsls	r2, r3, #16
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	1acb      	subs	r3, r1, r3
 8005eaa:	69f9      	ldr	r1, [r7, #28]
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	3303      	adds	r3, #3
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	6809      	ldr	r1, [r1, #0]
 8005eb6:	4608      	mov	r0, r1
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	01c9      	lsls	r1, r1, #7
 8005ebc:	4401      	add	r1, r0
 8005ebe:	3184      	adds	r1, #132	; 0x84
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	01db      	lsls	r3, r3, #7
 8005ece:	4413      	add	r3, r2
 8005ed0:	3384      	adds	r3, #132	; 0x84
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	4611      	mov	r1, r2
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	01d2      	lsls	r2, r2, #7
 8005ede:	440a      	add	r2, r1
 8005ee0:	3284      	adds	r2, #132	; 0x84
 8005ee2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	01db      	lsls	r3, r3, #7
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3384      	adds	r3, #132	; 0x84
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	461a      	mov	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	01db      	lsls	r3, r3, #7
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3384      	adds	r3, #132	; 0x84
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	6812      	ldr	r2, [r2, #0]
 8005f16:	4611      	mov	r1, r2
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	01d2      	lsls	r2, r2, #7
 8005f1c:	440a      	add	r2, r1
 8005f1e:	3284      	adds	r2, #132	; 0x84
 8005f20:	f043 0301 	orr.w	r3, r3, #1
 8005f24:	6013      	str	r3, [r2, #0]
}
 8005f26:	bf00      	nop
 8005f28:	3724      	adds	r7, #36	; 0x24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f4e:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f5a:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f60:	f7fd fb08 	bl	8003574 <HAL_GetTick>
 8005f64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f66:	e009      	b.n	8005f7c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f68:	f7fd fb04 	bl	8003574 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f76:	d901      	bls.n	8005f7c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e01f      	b.n	8005fbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <HAL_PWREx_EnableOverDrive+0x98>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f88:	d1ee      	bne.n	8005f68 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f8a:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f90:	f7fd faf0 	bl	8003574 <HAL_GetTick>
 8005f94:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f96:	e009      	b.n	8005fac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f98:	f7fd faec 	bl	8003574 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fa6:	d901      	bls.n	8005fac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e007      	b.n	8005fbc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fac:	4b07      	ldr	r3, [pc, #28]	; (8005fcc <HAL_PWREx_EnableOverDrive+0x98>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb8:	d1ee      	bne.n	8005f98 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3708      	adds	r7, #8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	420e0040 	.word	0x420e0040
 8005fcc:	40007000 	.word	0x40007000
 8005fd0:	420e0044 	.word	0x420e0044

08005fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e25b      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d075      	beq.n	80060de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ff2:	4ba3      	ldr	r3, [pc, #652]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d00c      	beq.n	8006018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ffe:	4ba0      	ldr	r3, [pc, #640]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006006:	2b08      	cmp	r3, #8
 8006008:	d112      	bne.n	8006030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800600a:	4b9d      	ldr	r3, [pc, #628]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006016:	d10b      	bne.n	8006030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006018:	4b99      	ldr	r3, [pc, #612]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d05b      	beq.n	80060dc <HAL_RCC_OscConfig+0x108>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d157      	bne.n	80060dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e236      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006038:	d106      	bne.n	8006048 <HAL_RCC_OscConfig+0x74>
 800603a:	4b91      	ldr	r3, [pc, #580]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a90      	ldr	r2, [pc, #576]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e01d      	b.n	8006084 <HAL_RCC_OscConfig+0xb0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006050:	d10c      	bne.n	800606c <HAL_RCC_OscConfig+0x98>
 8006052:	4b8b      	ldr	r3, [pc, #556]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a8a      	ldr	r2, [pc, #552]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	4b88      	ldr	r3, [pc, #544]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a87      	ldr	r2, [pc, #540]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e00b      	b.n	8006084 <HAL_RCC_OscConfig+0xb0>
 800606c:	4b84      	ldr	r3, [pc, #528]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a83      	ldr	r2, [pc, #524]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	4b81      	ldr	r3, [pc, #516]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a80      	ldr	r2, [pc, #512]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 800607e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d013      	beq.n	80060b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800608c:	f7fd fa72 	bl	8003574 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006094:	f7fd fa6e 	bl	8003574 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b64      	cmp	r3, #100	; 0x64
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e1fb      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a6:	4b76      	ldr	r3, [pc, #472]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0xc0>
 80060b2:	e014      	b.n	80060de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fd fa5e 	bl	8003574 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060bc:	f7fd fa5a 	bl	8003574 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b64      	cmp	r3, #100	; 0x64
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e1e7      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ce:	4b6c      	ldr	r3, [pc, #432]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f0      	bne.n	80060bc <HAL_RCC_OscConfig+0xe8>
 80060da:	e000      	b.n	80060de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d063      	beq.n	80061b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060ea:	4b65      	ldr	r3, [pc, #404]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060f6:	4b62      	ldr	r3, [pc, #392]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d11c      	bne.n	800613c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006102:	4b5f      	ldr	r3, [pc, #380]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d116      	bne.n	800613c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610e:	4b5c      	ldr	r3, [pc, #368]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <HAL_RCC_OscConfig+0x152>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d001      	beq.n	8006126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e1bb      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006126:	4b56      	ldr	r3, [pc, #344]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4952      	ldr	r1, [pc, #328]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006136:	4313      	orrs	r3, r2
 8006138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800613a:	e03a      	b.n	80061b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006144:	4b4f      	ldr	r3, [pc, #316]	; (8006284 <HAL_RCC_OscConfig+0x2b0>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614a:	f7fd fa13 	bl	8003574 <HAL_GetTick>
 800614e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006150:	e008      	b.n	8006164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006152:	f7fd fa0f 	bl	8003574 <HAL_GetTick>
 8006156:	4602      	mov	r2, r0
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	2b02      	cmp	r3, #2
 800615e:	d901      	bls.n	8006164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e19c      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006164:	4b46      	ldr	r3, [pc, #280]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f0      	beq.n	8006152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006170:	4b43      	ldr	r3, [pc, #268]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	00db      	lsls	r3, r3, #3
 800617e:	4940      	ldr	r1, [pc, #256]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006180:	4313      	orrs	r3, r2
 8006182:	600b      	str	r3, [r1, #0]
 8006184:	e015      	b.n	80061b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006186:	4b3f      	ldr	r3, [pc, #252]	; (8006284 <HAL_RCC_OscConfig+0x2b0>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fd f9f2 	bl	8003574 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006194:	f7fd f9ee 	bl	8003574 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e17b      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061a6:	4b36      	ldr	r3, [pc, #216]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d030      	beq.n	8006220 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061c6:	4b30      	ldr	r3, [pc, #192]	; (8006288 <HAL_RCC_OscConfig+0x2b4>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7fd f9d2 	bl	8003574 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d4:	f7fd f9ce 	bl	8003574 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e15b      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061e6:	4b26      	ldr	r3, [pc, #152]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x200>
 80061f2:	e015      	b.n	8006220 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061f4:	4b24      	ldr	r3, [pc, #144]	; (8006288 <HAL_RCC_OscConfig+0x2b4>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fa:	f7fd f9bb 	bl	8003574 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006200:	e008      	b.n	8006214 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006202:	f7fd f9b7 	bl	8003574 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e144      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006214:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f0      	bne.n	8006202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80a0 	beq.w	800636e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800622e:	2300      	movs	r3, #0
 8006230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006232:	4b13      	ldr	r3, [pc, #76]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800624c:	6413      	str	r3, [r2, #64]	; 0x40
 800624e:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <HAL_RCC_OscConfig+0x2ac>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006256:	60bb      	str	r3, [r7, #8]
 8006258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625e:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_RCC_OscConfig+0x2b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006266:	2b00      	cmp	r3, #0
 8006268:	d121      	bne.n	80062ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800626a:	4b08      	ldr	r3, [pc, #32]	; (800628c <HAL_RCC_OscConfig+0x2b8>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a07      	ldr	r2, [pc, #28]	; (800628c <HAL_RCC_OscConfig+0x2b8>)
 8006270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006276:	f7fd f97d 	bl	8003574 <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627c:	e011      	b.n	80062a2 <HAL_RCC_OscConfig+0x2ce>
 800627e:	bf00      	nop
 8006280:	40023800 	.word	0x40023800
 8006284:	42470000 	.word	0x42470000
 8006288:	42470e80 	.word	0x42470e80
 800628c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006290:	f7fd f970 	bl	8003574 <HAL_GetTick>
 8006294:	4602      	mov	r2, r0
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	2b02      	cmp	r3, #2
 800629c:	d901      	bls.n	80062a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800629e:	2303      	movs	r3, #3
 80062a0:	e0fd      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a2:	4b81      	ldr	r3, [pc, #516]	; (80064a8 <HAL_RCC_OscConfig+0x4d4>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0f0      	beq.n	8006290 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d106      	bne.n	80062c4 <HAL_RCC_OscConfig+0x2f0>
 80062b6:	4b7d      	ldr	r3, [pc, #500]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	4a7c      	ldr	r2, [pc, #496]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062bc:	f043 0301 	orr.w	r3, r3, #1
 80062c0:	6713      	str	r3, [r2, #112]	; 0x70
 80062c2:	e01c      	b.n	80062fe <HAL_RCC_OscConfig+0x32a>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b05      	cmp	r3, #5
 80062ca:	d10c      	bne.n	80062e6 <HAL_RCC_OscConfig+0x312>
 80062cc:	4b77      	ldr	r3, [pc, #476]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d0:	4a76      	ldr	r2, [pc, #472]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062d2:	f043 0304 	orr.w	r3, r3, #4
 80062d6:	6713      	str	r3, [r2, #112]	; 0x70
 80062d8:	4b74      	ldr	r3, [pc, #464]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	4a73      	ldr	r2, [pc, #460]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062de:	f043 0301 	orr.w	r3, r3, #1
 80062e2:	6713      	str	r3, [r2, #112]	; 0x70
 80062e4:	e00b      	b.n	80062fe <HAL_RCC_OscConfig+0x32a>
 80062e6:	4b71      	ldr	r3, [pc, #452]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	4a70      	ldr	r2, [pc, #448]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062ec:	f023 0301 	bic.w	r3, r3, #1
 80062f0:	6713      	str	r3, [r2, #112]	; 0x70
 80062f2:	4b6e      	ldr	r3, [pc, #440]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	4a6d      	ldr	r2, [pc, #436]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d015      	beq.n	8006332 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006306:	f7fd f935 	bl	8003574 <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800630c:	e00a      	b.n	8006324 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800630e:	f7fd f931 	bl	8003574 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	; 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e0bc      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006324:	4b61      	ldr	r3, [pc, #388]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 8006326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0ee      	beq.n	800630e <HAL_RCC_OscConfig+0x33a>
 8006330:	e014      	b.n	800635c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006332:	f7fd f91f 	bl	8003574 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006338:	e00a      	b.n	8006350 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800633a:	f7fd f91b 	bl	8003574 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f241 3288 	movw	r2, #5000	; 0x1388
 8006348:	4293      	cmp	r3, r2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e0a6      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006350:	4b56      	ldr	r3, [pc, #344]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 8006352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ee      	bne.n	800633a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800635c:	7dfb      	ldrb	r3, [r7, #23]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d105      	bne.n	800636e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006362:	4b52      	ldr	r3, [pc, #328]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	4a51      	ldr	r2, [pc, #324]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 8006368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800636c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 8092 	beq.w	800649c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006378:	4b4c      	ldr	r3, [pc, #304]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f003 030c 	and.w	r3, r3, #12
 8006380:	2b08      	cmp	r3, #8
 8006382:	d05c      	beq.n	800643e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	2b02      	cmp	r3, #2
 800638a:	d141      	bne.n	8006410 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800638c:	4b48      	ldr	r3, [pc, #288]	; (80064b0 <HAL_RCC_OscConfig+0x4dc>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006392:	f7fd f8ef 	bl	8003574 <HAL_GetTick>
 8006396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006398:	e008      	b.n	80063ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800639a:	f7fd f8eb 	bl	8003574 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d901      	bls.n	80063ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e078      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ac:	4b3f      	ldr	r3, [pc, #252]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1f0      	bne.n	800639a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69da      	ldr	r2, [r3, #28]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	431a      	orrs	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	019b      	lsls	r3, r3, #6
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	3b01      	subs	r3, #1
 80063d2:	041b      	lsls	r3, r3, #16
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	061b      	lsls	r3, r3, #24
 80063dc:	4933      	ldr	r1, [pc, #204]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063e2:	4b33      	ldr	r3, [pc, #204]	; (80064b0 <HAL_RCC_OscConfig+0x4dc>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fd f8c4 	bl	8003574 <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063f0:	f7fd f8c0 	bl	8003574 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e04d      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006402:	4b2a      	ldr	r3, [pc, #168]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0x41c>
 800640e:	e045      	b.n	800649c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006410:	4b27      	ldr	r3, [pc, #156]	; (80064b0 <HAL_RCC_OscConfig+0x4dc>)
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006416:	f7fd f8ad 	bl	8003574 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800641e:	f7fd f8a9 	bl	8003574 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e036      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006430:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f0      	bne.n	800641e <HAL_RCC_OscConfig+0x44a>
 800643c:	e02e      	b.n	800649c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e029      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800644a:	4b18      	ldr	r3, [pc, #96]	; (80064ac <HAL_RCC_OscConfig+0x4d8>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	429a      	cmp	r2, r3
 800645c:	d11c      	bne.n	8006498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006468:	429a      	cmp	r2, r3
 800646a:	d115      	bne.n	8006498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800646c:	68fa      	ldr	r2, [r7, #12]
 800646e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006472:	4013      	ands	r3, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006478:	4293      	cmp	r3, r2
 800647a:	d10d      	bne.n	8006498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006486:	429a      	cmp	r2, r3
 8006488:	d106      	bne.n	8006498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006494:	429a      	cmp	r2, r3
 8006496:	d001      	beq.n	800649c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40007000 	.word	0x40007000
 80064ac:	40023800 	.word	0x40023800
 80064b0:	42470060 	.word	0x42470060

080064b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0cc      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064c8:	4b68      	ldr	r3, [pc, #416]	; (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d90c      	bls.n	80064f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d6:	4b65      	ldr	r3, [pc, #404]	; (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064de:	4b63      	ldr	r3, [pc, #396]	; (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 030f 	and.w	r3, r3, #15
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d001      	beq.n	80064f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0b8      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d020      	beq.n	800653e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006508:	4b59      	ldr	r3, [pc, #356]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	4a58      	ldr	r2, [pc, #352]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006520:	4b53      	ldr	r3, [pc, #332]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	4a52      	ldr	r2, [pc, #328]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800652a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800652c:	4b50      	ldr	r3, [pc, #320]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	494d      	ldr	r1, [pc, #308]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	4313      	orrs	r3, r2
 800653c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0301 	and.w	r3, r3, #1
 8006546:	2b00      	cmp	r3, #0
 8006548:	d044      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006552:	4b47      	ldr	r3, [pc, #284]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d119      	bne.n	8006592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e07f      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d003      	beq.n	8006572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800656e:	2b03      	cmp	r3, #3
 8006570:	d107      	bne.n	8006582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006572:	4b3f      	ldr	r3, [pc, #252]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e06f      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006582:	4b3b      	ldr	r3, [pc, #236]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e067      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006592:	4b37      	ldr	r3, [pc, #220]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f023 0203 	bic.w	r2, r3, #3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4934      	ldr	r1, [pc, #208]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065a4:	f7fc ffe6 	bl	8003574 <HAL_GetTick>
 80065a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065aa:	e00a      	b.n	80065c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065ac:	f7fc ffe2 	bl	8003574 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e04f      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065c2:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 020c 	and.w	r2, r3, #12
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d1eb      	bne.n	80065ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065d4:	4b25      	ldr	r3, [pc, #148]	; (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d20c      	bcs.n	80065fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065e2:	4b22      	ldr	r3, [pc, #136]	; (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ea:	4b20      	ldr	r3, [pc, #128]	; (800666c <HAL_RCC_ClockConfig+0x1b8>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 030f 	and.w	r3, r3, #15
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e032      	b.n	8006662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006608:	4b19      	ldr	r3, [pc, #100]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	4916      	ldr	r1, [pc, #88]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006616:	4313      	orrs	r3, r2
 8006618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	490e      	ldr	r1, [pc, #56]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006636:	4313      	orrs	r3, r2
 8006638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800663a:	f000 f821 	bl	8006680 <HAL_RCC_GetSysClockFreq>
 800663e:	4601      	mov	r1, r0
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <HAL_RCC_ClockConfig+0x1bc>)
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	091b      	lsrs	r3, r3, #4
 8006646:	f003 030f 	and.w	r3, r3, #15
 800664a:	4a0a      	ldr	r2, [pc, #40]	; (8006674 <HAL_RCC_ClockConfig+0x1c0>)
 800664c:	5cd3      	ldrb	r3, [r2, r3]
 800664e:	fa21 f303 	lsr.w	r3, r1, r3
 8006652:	4a09      	ldr	r2, [pc, #36]	; (8006678 <HAL_RCC_ClockConfig+0x1c4>)
 8006654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <HAL_RCC_ClockConfig+0x1c8>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fb fdc4 	bl	80021e8 <HAL_InitTick>

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40023c00 	.word	0x40023c00
 8006670:	40023800 	.word	0x40023800
 8006674:	08022cd0 	.word	0x08022cd0
 8006678:	20000000 	.word	0x20000000
 800667c:	20000034 	.word	0x20000034

08006680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	607b      	str	r3, [r7, #4]
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	2300      	movs	r3, #0
 8006690:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006696:	4b63      	ldr	r3, [pc, #396]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d007      	beq.n	80066b2 <HAL_RCC_GetSysClockFreq+0x32>
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d008      	beq.n	80066b8 <HAL_RCC_GetSysClockFreq+0x38>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f040 80b4 	bne.w	8006814 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066ac:	4b5e      	ldr	r3, [pc, #376]	; (8006828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80066ae:	60bb      	str	r3, [r7, #8]
       break;
 80066b0:	e0b3      	b.n	800681a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066b2:	4b5e      	ldr	r3, [pc, #376]	; (800682c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80066b4:	60bb      	str	r3, [r7, #8]
      break;
 80066b6:	e0b0      	b.n	800681a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066b8:	4b5a      	ldr	r3, [pc, #360]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066c2:	4b58      	ldr	r3, [pc, #352]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04a      	beq.n	8006764 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ce:	4b55      	ldr	r3, [pc, #340]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	099b      	lsrs	r3, r3, #6
 80066d4:	f04f 0400 	mov.w	r4, #0
 80066d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	ea03 0501 	and.w	r5, r3, r1
 80066e4:	ea04 0602 	and.w	r6, r4, r2
 80066e8:	4629      	mov	r1, r5
 80066ea:	4632      	mov	r2, r6
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	f04f 0400 	mov.w	r4, #0
 80066f4:	0154      	lsls	r4, r2, #5
 80066f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066fa:	014b      	lsls	r3, r1, #5
 80066fc:	4619      	mov	r1, r3
 80066fe:	4622      	mov	r2, r4
 8006700:	1b49      	subs	r1, r1, r5
 8006702:	eb62 0206 	sbc.w	r2, r2, r6
 8006706:	f04f 0300 	mov.w	r3, #0
 800670a:	f04f 0400 	mov.w	r4, #0
 800670e:	0194      	lsls	r4, r2, #6
 8006710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006714:	018b      	lsls	r3, r1, #6
 8006716:	1a5b      	subs	r3, r3, r1
 8006718:	eb64 0402 	sbc.w	r4, r4, r2
 800671c:	f04f 0100 	mov.w	r1, #0
 8006720:	f04f 0200 	mov.w	r2, #0
 8006724:	00e2      	lsls	r2, r4, #3
 8006726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800672a:	00d9      	lsls	r1, r3, #3
 800672c:	460b      	mov	r3, r1
 800672e:	4614      	mov	r4, r2
 8006730:	195b      	adds	r3, r3, r5
 8006732:	eb44 0406 	adc.w	r4, r4, r6
 8006736:	f04f 0100 	mov.w	r1, #0
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	0262      	lsls	r2, r4, #9
 8006740:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006744:	0259      	lsls	r1, r3, #9
 8006746:	460b      	mov	r3, r1
 8006748:	4614      	mov	r4, r2
 800674a:	4618      	mov	r0, r3
 800674c:	4621      	mov	r1, r4
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f04f 0400 	mov.w	r4, #0
 8006754:	461a      	mov	r2, r3
 8006756:	4623      	mov	r3, r4
 8006758:	f7fa f998 	bl	8000a8c <__aeabi_uldivmod>
 800675c:	4603      	mov	r3, r0
 800675e:	460c      	mov	r4, r1
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	e049      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006764:	4b2f      	ldr	r3, [pc, #188]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	099b      	lsrs	r3, r3, #6
 800676a:	f04f 0400 	mov.w	r4, #0
 800676e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006772:	f04f 0200 	mov.w	r2, #0
 8006776:	ea03 0501 	and.w	r5, r3, r1
 800677a:	ea04 0602 	and.w	r6, r4, r2
 800677e:	4629      	mov	r1, r5
 8006780:	4632      	mov	r2, r6
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	f04f 0400 	mov.w	r4, #0
 800678a:	0154      	lsls	r4, r2, #5
 800678c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006790:	014b      	lsls	r3, r1, #5
 8006792:	4619      	mov	r1, r3
 8006794:	4622      	mov	r2, r4
 8006796:	1b49      	subs	r1, r1, r5
 8006798:	eb62 0206 	sbc.w	r2, r2, r6
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	f04f 0400 	mov.w	r4, #0
 80067a4:	0194      	lsls	r4, r2, #6
 80067a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067aa:	018b      	lsls	r3, r1, #6
 80067ac:	1a5b      	subs	r3, r3, r1
 80067ae:	eb64 0402 	sbc.w	r4, r4, r2
 80067b2:	f04f 0100 	mov.w	r1, #0
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	00e2      	lsls	r2, r4, #3
 80067bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067c0:	00d9      	lsls	r1, r3, #3
 80067c2:	460b      	mov	r3, r1
 80067c4:	4614      	mov	r4, r2
 80067c6:	195b      	adds	r3, r3, r5
 80067c8:	eb44 0406 	adc.w	r4, r4, r6
 80067cc:	f04f 0100 	mov.w	r1, #0
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	02a2      	lsls	r2, r4, #10
 80067d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80067da:	0299      	lsls	r1, r3, #10
 80067dc:	460b      	mov	r3, r1
 80067de:	4614      	mov	r4, r2
 80067e0:	4618      	mov	r0, r3
 80067e2:	4621      	mov	r1, r4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f04f 0400 	mov.w	r4, #0
 80067ea:	461a      	mov	r2, r3
 80067ec:	4623      	mov	r3, r4
 80067ee:	f7fa f94d 	bl	8000a8c <__aeabi_uldivmod>
 80067f2:	4603      	mov	r3, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067f8:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	f003 0303 	and.w	r3, r3, #3
 8006802:	3301      	adds	r3, #1
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006810:	60bb      	str	r3, [r7, #8]
      break;
 8006812:	e002      	b.n	800681a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006814:	4b04      	ldr	r3, [pc, #16]	; (8006828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006816:	60bb      	str	r3, [r7, #8]
      break;
 8006818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800681a:	68bb      	ldr	r3, [r7, #8]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006824:	40023800 	.word	0x40023800
 8006828:	00f42400 	.word	0x00f42400
 800682c:	007a1200 	.word	0x007a1200

08006830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <HAL_RCC_GetHCLKFreq+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000000 	.word	0x20000000

08006848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800684c:	f7ff fff0 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006850:	4601      	mov	r1, r0
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	0a9b      	lsrs	r3, r3, #10
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4a03      	ldr	r2, [pc, #12]	; (800686c <HAL_RCC_GetPCLK1Freq+0x24>)
 800685e:	5cd3      	ldrb	r3, [r2, r3]
 8006860:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006864:	4618      	mov	r0, r3
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40023800 	.word	0x40023800
 800686c:	08022ce0 	.word	0x08022ce0

08006870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006874:	f7ff ffdc 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006878:	4601      	mov	r1, r0
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	0b5b      	lsrs	r3, r3, #13
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	4a03      	ldr	r2, [pc, #12]	; (8006894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006886:	5cd3      	ldrb	r3, [r2, r3]
 8006888:	fa21 f303 	lsr.w	r3, r1, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40023800 	.word	0x40023800
 8006894:	08022ce0 	.word	0x08022ce0

08006898 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	220f      	movs	r2, #15
 80068a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <HAL_RCC_GetClockConfig+0x5c>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 0203 	and.w	r2, r3, #3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80068b4:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <HAL_RCC_GetClockConfig+0x5c>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80068c0:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <HAL_RCC_GetClockConfig+0x5c>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80068cc:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <HAL_RCC_GetClockConfig+0x5c>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	08db      	lsrs	r3, r3, #3
 80068d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <HAL_RCC_GetClockConfig+0x60>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 020f 	and.w	r2, r3, #15
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	601a      	str	r2, [r3, #0]
}
 80068e6:	bf00      	nop
 80068e8:	370c      	adds	r7, #12
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40023800 	.word	0x40023800
 80068f8:	40023c00 	.word	0x40023c00

080068fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800692c:	2b00      	cmp	r3, #0
 800692e:	d075      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006930:	4bad      	ldr	r3, [pc, #692]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006936:	f7fc fe1d 	bl	8003574 <HAL_GetTick>
 800693a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800693c:	e008      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800693e:	f7fc fe19 	bl	8003574 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e18b      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006950:	4ba6      	ldr	r3, [pc, #664]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f0      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	019a      	lsls	r2, r3, #6
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	071b      	lsls	r3, r3, #28
 8006974:	499d      	ldr	r1, [pc, #628]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01f      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006988:	4b98      	ldr	r3, [pc, #608]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800698a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800698e:	0f1b      	lsrs	r3, r3, #28
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	019a      	lsls	r2, r3, #6
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	431a      	orrs	r2, r3
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	071b      	lsls	r3, r3, #28
 80069a8:	4990      	ldr	r1, [pc, #576]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069b0:	4b8e      	ldr	r3, [pc, #568]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b6:	f023 021f 	bic.w	r2, r3, #31
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	3b01      	subs	r3, #1
 80069c0:	498a      	ldr	r1, [pc, #552]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00d      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	019a      	lsls	r2, r3, #6
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	061b      	lsls	r3, r3, #24
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	071b      	lsls	r3, r3, #28
 80069e8:	4980      	ldr	r1, [pc, #512]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069f0:	4b7d      	ldr	r3, [pc, #500]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80069f2:	2201      	movs	r2, #1
 80069f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069f6:	f7fc fdbd 	bl	8003574 <HAL_GetTick>
 80069fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069fc:	e008      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069fe:	f7fc fdb9 	bl	8003574 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e12b      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a10:	4b76      	ldr	r3, [pc, #472]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0f0      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d105      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d079      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a34:	4b6e      	ldr	r3, [pc, #440]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a3a:	f7fc fd9b 	bl	8003574 <HAL_GetTick>
 8006a3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a42:	f7fc fd97 	bl	8003574 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e109      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a54:	4b65      	ldr	r3, [pc, #404]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a60:	d0ef      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0304 	and.w	r3, r3, #4
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d020      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a6e:	4b5f      	ldr	r3, [pc, #380]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a74:	0f1b      	lsrs	r3, r3, #28
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	019a      	lsls	r2, r3, #6
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	061b      	lsls	r3, r3, #24
 8006a88:	431a      	orrs	r2, r3
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	071b      	lsls	r3, r3, #28
 8006a8e:	4957      	ldr	r1, [pc, #348]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a96:	4b55      	ldr	r3, [pc, #340]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a9c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	4950      	ldr	r1, [pc, #320]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01e      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006abc:	4b4b      	ldr	r3, [pc, #300]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac2:	0e1b      	lsrs	r3, r3, #24
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	019a      	lsls	r2, r3, #6
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	071b      	lsls	r3, r3, #28
 8006adc:	4943      	ldr	r1, [pc, #268]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ae4:	4b41      	ldr	r3, [pc, #260]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	493e      	ldr	r1, [pc, #248]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006afa:	4b3d      	ldr	r3, [pc, #244]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b00:	f7fc fd38 	bl	8003574 <HAL_GetTick>
 8006b04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b08:	f7fc fd34 	bl	8003574 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e0a6      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b1a:	4b34      	ldr	r3, [pc, #208]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b26:	d1ef      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 808d 	beq.w	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	4b2c      	ldr	r3, [pc, #176]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	4a2b      	ldr	r2, [pc, #172]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b44:	6413      	str	r3, [r2, #64]	; 0x40
 8006b46:	4b29      	ldr	r3, [pc, #164]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b52:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a27      	ldr	r2, [pc, #156]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b5e:	f7fc fd09 	bl	8003574 <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b64:	e008      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b66:	f7fc fd05 	bl	8003574 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e077      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b78:	4b1e      	ldr	r3, [pc, #120]	; (8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f0      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b84:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d039      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d032      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006baa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bac:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006bbe:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d11e      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006bca:	f7fc fcd3 	bl	8003574 <HAL_GetTick>
 8006bce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd0:	e014      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd2:	f7fc fccf 	bl	8003574 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d90b      	bls.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e03f      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006be8:	42470068 	.word	0x42470068
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	42470070 	.word	0x42470070
 8006bf4:	40007000 	.word	0x40007000
 8006bf8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bfc:	4b1c      	ldr	r3, [pc, #112]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d0e4      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c14:	d10d      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006c16:	4b16      	ldr	r3, [pc, #88]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c2a:	4911      	ldr	r1, [pc, #68]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	608b      	str	r3, [r1, #8]
 8006c30:	e005      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	4a0e      	ldr	r2, [pc, #56]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c38:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c3c:	6093      	str	r3, [r2, #8]
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c4a:	4909      	ldr	r1, [pc, #36]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c64:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40023800 	.word	0x40023800
 8006c74:	424711e0 	.word	0x424711e0

08006c78 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d101      	bne.n	8006c8c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e025      	b.n	8006cd8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f011 f84f 	bl	8017d44 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4610      	mov	r0, r2
 8006cba:	f002 fa3f 	bl	800913c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	6839      	ldr	r1, [r7, #0]
 8006cca:	f002 faaa 	bl	8009222 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d101      	bne.n	8006cfc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e018      	b.n	8006d2e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	68b9      	ldr	r1, [r7, #8]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 fb07 	bl	8009320 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d104      	bne.n	8006d24 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2205      	movs	r2, #5
 8006d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006d22:	e003      	b.n	8006d2c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d101      	bne.n	8006d50 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e00e      	b.n	8006d6e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6839      	ldr	r1, [r7, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f002 fb1a 	bl	8009398 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e056      	b.n	8006e36 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fb f80a 	bl	8001dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	69db      	ldr	r3, [r3, #28]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	ea42 0103 	orr.w	r1, r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	0c1b      	lsrs	r3, r3, #16
 8006e06:	f003 0104 	and.w	r1, r3, #4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e01a      	b.n	8006e86 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2202      	movs	r2, #2
 8006e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e66:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7fb f82d 	bl	8001ec8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b088      	sub	sp, #32
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	60f8      	str	r0, [r7, #12]
 8006e96:	60b9      	str	r1, [r7, #8]
 8006e98:	603b      	str	r3, [r7, #0]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_SPI_Transmit+0x22>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e11e      	b.n	80070ee <HAL_SPI_Transmit+0x260>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006eb8:	f7fc fb5c 	bl	8003574 <HAL_GetTick>
 8006ebc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d002      	beq.n	8006ed4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ed2:	e103      	b.n	80070dc <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_SPI_Transmit+0x52>
 8006eda:	88fb      	ldrh	r3, [r7, #6]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ee4:	e0fa      	b.n	80070dc <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2203      	movs	r2, #3
 8006eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	88fa      	ldrh	r2, [r7, #6]
 8006efe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f2c:	d107      	bne.n	8006f3e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f48:	2b40      	cmp	r3, #64	; 0x40
 8006f4a:	d007      	beq.n	8006f5c <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f64:	d14b      	bne.n	8006ffe <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_SPI_Transmit+0xe6>
 8006f6e:	8afb      	ldrh	r3, [r7, #22]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d13e      	bne.n	8006ff2 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	881a      	ldrh	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	1c9a      	adds	r2, r3, #2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f98:	e02b      	b.n	8006ff2 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 0302 	and.w	r3, r3, #2
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d112      	bne.n	8006fce <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fcc:	e011      	b.n	8006ff2 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fce:	f7fc fad1 	bl	8003574 <HAL_GetTick>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d803      	bhi.n	8006fe6 <HAL_SPI_Transmit+0x158>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d102      	bne.n	8006fec <HAL_SPI_Transmit+0x15e>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d102      	bne.n	8006ff2 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ff0:	e074      	b.n	80070dc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1ce      	bne.n	8006f9a <HAL_SPI_Transmit+0x10c>
 8006ffc:	e04c      	b.n	8007098 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_SPI_Transmit+0x17e>
 8007006:	8afb      	ldrh	r3, [r7, #22]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d140      	bne.n	800708e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701e:	1c5a      	adds	r2, r3, #1
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007028:	b29b      	uxth	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007032:	e02c      	b.n	800708e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d113      	bne.n	800706a <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	7812      	ldrb	r2, [r2, #0]
 800704e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	86da      	strh	r2, [r3, #54]	; 0x36
 8007068:	e011      	b.n	800708e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800706a:	f7fc fa83 	bl	8003574 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d803      	bhi.n	8007082 <HAL_SPI_Transmit+0x1f4>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d102      	bne.n	8007088 <HAL_SPI_Transmit+0x1fa>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800708c:	e026      	b.n	80070dc <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007092:	b29b      	uxth	r3, r3
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1cd      	bne.n	8007034 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 fc63 	bl	8007968 <SPI_EndRxTxTransaction>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070b6:	2300      	movs	r3, #0
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	613b      	str	r3, [r7, #16]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e000      	b.n	80070dc <HAL_SPI_Transmit+0x24e>
  }

error:
 80070da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	4613      	mov	r3, r2
 8007104:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d110      	bne.n	8007134 <HAL_SPI_Receive_IT+0x3c>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800711a:	d10b      	bne.n	8007134 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2204      	movs	r2, #4
 8007120:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8007124:	88fb      	ldrh	r3, [r7, #6]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 f87a 	bl	8007224 <HAL_SPI_TransmitReceive_IT>
 8007130:	4603      	mov	r3, r0
 8007132:	e06e      	b.n	8007212 <HAL_SPI_Receive_IT+0x11a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800713a:	2b01      	cmp	r3, #1
 800713c:	d101      	bne.n	8007142 <HAL_SPI_Receive_IT+0x4a>
 800713e:	2302      	movs	r3, #2
 8007140:	e067      	b.n	8007212 <HAL_SPI_Receive_IT+0x11a>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b01      	cmp	r3, #1
 8007154:	d002      	beq.n	800715c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8007156:	2302      	movs	r3, #2
 8007158:	75fb      	strb	r3, [r7, #23]
    goto error;
 800715a:	e055      	b.n	8007208 <HAL_SPI_Receive_IT+0x110>
  }

  if ((pData == NULL) || (Size == 0U))
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_SPI_Receive_IT+0x70>
 8007162:	88fb      	ldrh	r3, [r7, #6]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d102      	bne.n	800716e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800716c:	e04c      	b.n	8007208 <HAL_SPI_Receive_IT+0x110>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2204      	movs	r2, #4
 8007172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	88fa      	ldrh	r2, [r7, #6]
 8007186:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a1a      	ldr	r2, [pc, #104]	; (800721c <HAL_SPI_Receive_IT+0x124>)
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40
 80071b4:	e002      	b.n	80071bc <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a19      	ldr	r2, [pc, #100]	; (8007220 <HAL_SPI_Receive_IT+0x128>)
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c4:	d107      	bne.n	80071d6 <HAL_SPI_Receive_IT+0xde>
  {
    SPI_1LINE_RX(hspi);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80071e4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d008      	beq.n	8007206 <HAL_SPI_Receive_IT+0x10e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	e000      	b.n	8007208 <HAL_SPI_Receive_IT+0x110>
  }

error :
 8007206:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	08007785 	.word	0x08007785
 8007220:	0800773b 	.word	0x0800773b

08007224 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800723c:	2b01      	cmp	r3, #1
 800723e:	d101      	bne.n	8007244 <HAL_SPI_TransmitReceive_IT+0x20>
 8007240:	2302      	movs	r3, #2
 8007242:	e075      	b.n	8007330 <HAL_SPI_TransmitReceive_IT+0x10c>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007252:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800725a:	7dbb      	ldrb	r3, [r7, #22]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d00d      	beq.n	800727c <HAL_SPI_TransmitReceive_IT+0x58>
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007266:	d106      	bne.n	8007276 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <HAL_SPI_TransmitReceive_IT+0x52>
 8007270:	7dbb      	ldrb	r3, [r7, #22]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d002      	beq.n	800727c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8007276:	2302      	movs	r3, #2
 8007278:	75fb      	strb	r3, [r7, #23]
    goto error;
 800727a:	e054      	b.n	8007326 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_SPI_TransmitReceive_IT+0x6a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_SPI_TransmitReceive_IT+0x6a>
 8007288:	887b      	ldrh	r3, [r7, #2]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d102      	bne.n	8007294 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007292:	e048      	b.n	8007326 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b04      	cmp	r3, #4
 800729e:	d003      	beq.n	80072a8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2205      	movs	r2, #5
 80072a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	887a      	ldrh	r2, [r7, #2]
 80072b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	887a      	ldrh	r2, [r7, #2]
 80072be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	887a      	ldrh	r2, [r7, #2]
 80072ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	887a      	ldrh	r2, [r7, #2]
 80072d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4a17      	ldr	r2, [pc, #92]	; (800733c <HAL_SPI_TransmitReceive_IT+0x118>)
 80072de:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4a17      	ldr	r2, [pc, #92]	; (8007340 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44
 80072e6:	e005      	b.n	80072f4 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a16      	ldr	r2, [pc, #88]	; (8007344 <HAL_SPI_TransmitReceive_IT+0x120>)
 80072ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4a15      	ldr	r2, [pc, #84]	; (8007348 <HAL_SPI_TransmitReceive_IT+0x124>)
 80072f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8007302:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730e:	2b40      	cmp	r3, #64	; 0x40
 8007310:	d008      	beq.n	8007324 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e000      	b.n	8007326 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8007324:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800732e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007330:	4618      	mov	r0, r3
 8007332:	371c      	adds	r7, #28
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	0800767d 	.word	0x0800767d
 8007340:	080076dd 	.word	0x080076dd
 8007344:	080075b9 	.word	0x080075b9
 8007348:	0800761d 	.word	0x0800761d

0800734c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10f      	bne.n	8007390 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	099b      	lsrs	r3, r3, #6
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d004      	beq.n	8007390 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	4798      	blx	r3
    return;
 800738e:	e0d8      	b.n	8007542 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <HAL_SPI_IRQHandler+0x66>
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	09db      	lsrs	r3, r3, #7
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	4798      	blx	r3
    return;
 80073b0:	e0c7      	b.n	8007542 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10c      	bne.n	80073d8 <HAL_SPI_IRQHandler+0x8c>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	099b      	lsrs	r3, r3, #6
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80b5 	beq.w	8007542 <HAL_SPI_IRQHandler+0x1f6>
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	095b      	lsrs	r3, r3, #5
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80ae 	beq.w	8007542 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	099b      	lsrs	r3, r3, #6
 80073ea:	f003 0301 	and.w	r3, r3, #1
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d023      	beq.n	800743a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d011      	beq.n	8007422 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007402:	f043 0204 	orr.w	r2, r3, #4
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	617b      	str	r3, [r7, #20]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	e00b      	b.n	800743a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	613b      	str	r3, [r7, #16]
 8007436:	693b      	ldr	r3, [r7, #16]
        return;
 8007438:	e083      	b.n	8007542 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d014      	beq.n	8007470 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744a:	f043 0201 	orr.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	0a1b      	lsrs	r3, r3, #8
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d00c      	beq.n	8007496 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007480:	f043 0208 	orr.w	r2, r3, #8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	60bb      	str	r3, [r7, #8]
 8007494:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	2b00      	cmp	r3, #0
 800749c:	d050      	beq.n	8007540 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074ac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <HAL_SPI_IRQHandler+0x17e>
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d034      	beq.n	8007534 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f022 0203 	bic.w	r2, r2, #3
 80074d8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d011      	beq.n	8007506 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e6:	4a18      	ldr	r2, [pc, #96]	; (8007548 <HAL_SPI_IRQHandler+0x1fc>)
 80074e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ee:	4618      	mov	r0, r3
 80074f0:	f7fc f99c 	bl	800382c <HAL_DMA_Abort_IT>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800750a:	2b00      	cmp	r3, #0
 800750c:	d016      	beq.n	800753c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	4a0d      	ldr	r2, [pc, #52]	; (8007548 <HAL_SPI_IRQHandler+0x1fc>)
 8007514:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	4618      	mov	r0, r3
 800751c:	f7fc f986 	bl	800382c <HAL_DMA_Abort_IT>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007532:	e003      	b.n	800753c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 f813 	bl	8007560 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800753a:	e000      	b.n	800753e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800753c:	bf00      	nop
    return;
 800753e:	bf00      	nop
 8007540:	bf00      	nop
  }
}
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	08007591 	.word	0x08007591

0800754c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007582:	b2db      	uxtb	r3, r3
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f7ff ffd8 	bl	8007560 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f103 020c 	add.w	r2, r3, #12
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10f      	bne.n	8007614 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007602:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f9ec 	bl	80079ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8007614:	bf00      	nop
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	7812      	ldrb	r2, [r2, #0]
 8007630:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10f      	bne.n	8007674 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685a      	ldr	r2, [r3, #4]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007662:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f9bc 	bl	80079ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8007674:	bf00      	nop
 8007676:	3708      	adds	r7, #8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	b292      	uxth	r2, r2
 8007690:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	1c9a      	adds	r2, r3, #2
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10f      	bne.n	80076d4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f98c 	bl	80079ec <SPI_CloseRxTx_ISR>
    }
  }
}
 80076d4:	bf00      	nop
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	881a      	ldrh	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	1c9a      	adds	r2, r3, #2
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	3b01      	subs	r3, #1
 8007702:	b29a      	uxth	r2, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10f      	bne.n	8007732 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007720:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007726:	b29b      	uxth	r3, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f95d 	bl	80079ec <SPI_CloseRxTx_ISR>
    }
  }
}
 8007732:	bf00      	nop
 8007734:	3708      	adds	r7, #8
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b082      	sub	sp, #8
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f103 020c 	add.w	r2, r3, #12
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774e:	7812      	ldrb	r2, [r2, #0]
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d102      	bne.n	800777c <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9ac 	bl	8007ad4 <SPI_CloseRx_ISR>
  }
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	b292      	uxth	r2, r2
 8007798:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779e:	1c9a      	adds	r2, r3, #2
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f989 	bl	8007ad4 <SPI_CloseRx_ISR>
  }
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4613      	mov	r3, r2
 80077d8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077da:	e04c      	b.n	8007876 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e2:	d048      	beq.n	8007876 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80077e4:	f7fb fec6 	bl	8003574 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d902      	bls.n	80077fa <SPI_WaitFlagStateUntilTimeout+0x30>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d13d      	bne.n	8007876 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007812:	d111      	bne.n	8007838 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781c:	d004      	beq.n	8007828 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007826:	d107      	bne.n	8007838 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007836:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007840:	d10f      	bne.n	8007862 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007860:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e00f      	b.n	8007896 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4013      	ands	r3, r2
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	429a      	cmp	r2, r3
 8007884:	bf0c      	ite	eq
 8007886:	2301      	moveq	r3, #1
 8007888:	2300      	movne	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	429a      	cmp	r2, r3
 8007892:	d1a3      	bne.n	80077dc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af02      	add	r7, sp, #8
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078b2:	d111      	bne.n	80078d8 <SPI_EndRxTransaction+0x3a>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078bc:	d004      	beq.n	80078c8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c6:	d107      	bne.n	80078d8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e0:	d12a      	bne.n	8007938 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ea:	d012      	beq.n	8007912 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	2180      	movs	r1, #128	; 0x80
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f7ff ff67 	bl	80077ca <SPI_WaitFlagStateUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d02d      	beq.n	800795e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f043 0220 	orr.w	r2, r3, #32
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e026      	b.n	8007960 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2200      	movs	r2, #0
 800791a:	2101      	movs	r1, #1
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff ff54 	bl	80077ca <SPI_WaitFlagStateUntilTimeout>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01a      	beq.n	800795e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792c:	f043 0220 	orr.w	r2, r3, #32
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e013      	b.n	8007960 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	2101      	movs	r1, #1
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff ff41 	bl	80077ca <SPI_WaitFlagStateUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007952:	f043 0220 	orr.w	r2, r3, #32
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e000      	b.n	8007960 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af02      	add	r7, sp, #8
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007974:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <SPI_EndRxTxTransaction+0x7c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <SPI_EndRxTxTransaction+0x80>)
 800797a:	fba2 2303 	umull	r2, r3, r2, r3
 800797e:	0d5b      	lsrs	r3, r3, #21
 8007980:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007984:	fb02 f303 	mul.w	r3, r2, r3
 8007988:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007992:	d112      	bne.n	80079ba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	2180      	movs	r1, #128	; 0x80
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7ff ff13 	bl	80077ca <SPI_WaitFlagStateUntilTimeout>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d016      	beq.n	80079d8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ae:	f043 0220 	orr.w	r2, r3, #32
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e00f      	b.n	80079da <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d0:	2b80      	cmp	r3, #128	; 0x80
 80079d2:	d0f2      	beq.n	80079ba <SPI_EndRxTxTransaction+0x52>
 80079d4:	e000      	b.n	80079d8 <SPI_EndRxTxTransaction+0x70>
        break;
 80079d6:	bf00      	nop
  }

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20000000 	.word	0x20000000
 80079e8:	165e9f81 	.word	0x165e9f81

080079ec <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80079f4:	4b35      	ldr	r3, [pc, #212]	; (8007acc <SPI_CloseRxTx_ISR+0xe0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a35      	ldr	r2, [pc, #212]	; (8007ad0 <SPI_CloseRxTx_ISR+0xe4>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	0a5b      	lsrs	r3, r3, #9
 8007a00:	2264      	movs	r2, #100	; 0x64
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a08:	f7fb fdb4 	bl	8003574 <HAL_GetTick>
 8007a0c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0220 	bic.w	r2, r2, #32
 8007a1c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a28:	f043 0220 	orr.w	r2, r3, #32
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a30:	e009      	b.n	8007a46 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0eb      	beq.n	8007a1e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	2164      	movs	r1, #100	; 0x64
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff ff8c 	bl	8007968 <SPI_EndRxTxTransaction>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	f043 0220 	orr.w	r2, r3, #32
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10a      	bne.n	8007a80 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	60fb      	str	r3, [r7, #12]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d115      	bne.n	8007ab4 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d107      	bne.n	8007aa4 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fa f833 	bl	8001b08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007aa2:	e00e      	b.n	8007ac2 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff fd4d 	bl	800754c <HAL_SPI_TxRxCpltCallback>
}
 8007ab2:	e006      	b.n	8007ac2 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7ff fd4f 	bl	8007560 <HAL_SPI_ErrorCallback>
}
 8007ac2:	bf00      	nop
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000000 	.word	0x20000000
 8007ad0:	057619f1 	.word	0x057619f1

08007ad4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007aea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007aec:	f7fb fd42 	bl	8003574 <HAL_GetTick>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	2164      	movs	r1, #100	; 0x64
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fed1 	bl	800789e <SPI_EndRxTransaction>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10a      	bne.n	8007b2c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	60fb      	str	r3, [r7, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d103      	bne.n	8007b44 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7f9 ffe3 	bl	8001b08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007b42:	e002      	b.n	8007b4a <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fd0b 	bl	8007560 <HAL_SPI_ErrorCallback>
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e01d      	b.n	8007ba0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f7fa f9db 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4610      	mov	r0, r2
 8007b92:	f000 fb69 	bl	8008268 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 0307 	and.w	r3, r3, #7
 8007bc2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b06      	cmp	r3, #6
 8007bc8:	d007      	beq.n	8007bda <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0201 	orr.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0201 	orr.w	r2, r2, #1
 8007c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b06      	cmp	r3, #6
 8007c18:	d007      	beq.n	8007c2a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0201 	orr.w	r2, r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3714      	adds	r7, #20
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e01d      	b.n	8007c86 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7fa f98a 	bl	8001f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f000 faf6 	bl	8008268 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 fdca 	bl	800883c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <HAL_TIM_PWM_Start+0x74>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d004      	beq.n	8007cbc <HAL_TIM_PWM_Start+0x2c>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <HAL_TIM_PWM_Start+0x78>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d101      	bne.n	8007cc0 <HAL_TIM_PWM_Start+0x30>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <HAL_TIM_PWM_Start+0x32>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d007      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b06      	cmp	r3, #6
 8007ce6:	d007      	beq.n	8007cf8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0201 	orr.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400

08007d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b02      	cmp	r3, #2
 8007d20:	d122      	bne.n	8007d68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d11b      	bne.n	8007d68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f06f 0202 	mvn.w	r2, #2
 8007d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	f003 0303 	and.w	r3, r3, #3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa6b 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007d54:	e005      	b.n	8007d62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f000 fa5d 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa6e 	bl	800823e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d122      	bne.n	8007dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	d11b      	bne.n	8007dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0204 	mvn.w	r2, #4
 8007d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fa41 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007da8:	e005      	b.n	8007db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa33 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fa44 	bl	800823e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b08      	cmp	r3, #8
 8007dc8:	d122      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b08      	cmp	r3, #8
 8007dd6:	d11b      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f06f 0208 	mvn.w	r2, #8
 8007de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2204      	movs	r2, #4
 8007de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	f003 0303 	and.w	r3, r3, #3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa17 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007dfc:	e005      	b.n	8007e0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa09 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fa1a 	bl	800823e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d122      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b10      	cmp	r3, #16
 8007e2a:	d11b      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0210 	mvn.w	r2, #16
 8007e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2208      	movs	r2, #8
 8007e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9ed 	bl	800822a <HAL_TIM_IC_CaptureCallback>
 8007e50:	e005      	b.n	8007e5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f9df 	bl	8008216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9f0 	bl	800823e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d10e      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d107      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f06f 0201 	mvn.w	r2, #1
 8007e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7f9 fe9e 	bl	8001bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9a:	2b80      	cmp	r3, #128	; 0x80
 8007e9c:	d10e      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea8:	2b80      	cmp	r3, #128	; 0x80
 8007eaa:	d107      	bne.n	8007ebc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fd6c 	bl	8008994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec6:	2b40      	cmp	r3, #64	; 0x40
 8007ec8:	d10e      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	d107      	bne.n	8007ee8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f9b5 	bl	8008252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	d10e      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b20      	cmp	r3, #32
 8007f02:	d107      	bne.n	8007f14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f06f 0220 	mvn.w	r2, #32
 8007f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 fd36 	bl	8008980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e0b4      	b.n	80080a0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b0c      	cmp	r3, #12
 8007f4a:	f200 809f 	bhi.w	800808c <HAL_TIM_PWM_ConfigChannel+0x170>
 8007f4e:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f89 	.word	0x08007f89
 8007f58:	0800808d 	.word	0x0800808d
 8007f5c:	0800808d 	.word	0x0800808d
 8007f60:	0800808d 	.word	0x0800808d
 8007f64:	08007fc9 	.word	0x08007fc9
 8007f68:	0800808d 	.word	0x0800808d
 8007f6c:	0800808d 	.word	0x0800808d
 8007f70:	0800808d 	.word	0x0800808d
 8007f74:	0800800b 	.word	0x0800800b
 8007f78:	0800808d 	.word	0x0800808d
 8007f7c:	0800808d 	.word	0x0800808d
 8007f80:	0800808d 	.word	0x0800808d
 8007f84:	0800804b 	.word	0x0800804b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fa0a 	bl	80083a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0208 	orr.w	r2, r2, #8
 8007fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0204 	bic.w	r2, r2, #4
 8007fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	619a      	str	r2, [r3, #24]
      break;
 8007fc6:	e062      	b.n	800808e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fa5a 	bl	8008488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6999      	ldr	r1, [r3, #24]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	021a      	lsls	r2, r3, #8
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	619a      	str	r2, [r3, #24]
      break;
 8008008:	e041      	b.n	800808e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 faaf 	bl	8008574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0208 	orr.w	r2, r2, #8
 8008024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0204 	bic.w	r2, r2, #4
 8008034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69d9      	ldr	r1, [r3, #28]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	61da      	str	r2, [r3, #28]
      break;
 8008048:	e021      	b.n	800808e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fb03 	bl	800865c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69da      	ldr	r2, [r3, #28]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69da      	ldr	r2, [r3, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69d9      	ldr	r1, [r3, #28]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	021a      	lsls	r2, r3, #8
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	61da      	str	r2, [r3, #28]
      break;
 800808a:	e000      	b.n	800808e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800808c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_ConfigClockSource+0x18>
 80080bc:	2302      	movs	r3, #2
 80080be:	e0a6      	b.n	800820e <HAL_TIM_ConfigClockSource+0x166>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d067      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0x120>
 80080f8:	2b40      	cmp	r3, #64	; 0x40
 80080fa:	d80b      	bhi.n	8008114 <HAL_TIM_ConfigClockSource+0x6c>
 80080fc:	2b10      	cmp	r3, #16
 80080fe:	d073      	beq.n	80081e8 <HAL_TIM_ConfigClockSource+0x140>
 8008100:	2b10      	cmp	r3, #16
 8008102:	d802      	bhi.n	800810a <HAL_TIM_ConfigClockSource+0x62>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d06f      	beq.n	80081e8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008108:	e078      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800810a:	2b20      	cmp	r3, #32
 800810c:	d06c      	beq.n	80081e8 <HAL_TIM_ConfigClockSource+0x140>
 800810e:	2b30      	cmp	r3, #48	; 0x30
 8008110:	d06a      	beq.n	80081e8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008112:	e073      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008114:	2b70      	cmp	r3, #112	; 0x70
 8008116:	d00d      	beq.n	8008134 <HAL_TIM_ConfigClockSource+0x8c>
 8008118:	2b70      	cmp	r3, #112	; 0x70
 800811a:	d804      	bhi.n	8008126 <HAL_TIM_ConfigClockSource+0x7e>
 800811c:	2b50      	cmp	r3, #80	; 0x50
 800811e:	d033      	beq.n	8008188 <HAL_TIM_ConfigClockSource+0xe0>
 8008120:	2b60      	cmp	r3, #96	; 0x60
 8008122:	d041      	beq.n	80081a8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008124:	e06a      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812a:	d066      	beq.n	80081fa <HAL_TIM_ConfigClockSource+0x152>
 800812c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008130:	d017      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008132:	e063      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	6899      	ldr	r1, [r3, #8]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f000 fb5a 	bl	80087fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008156:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	609a      	str	r2, [r3, #8]
      break;
 8008160:	e04c      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6899      	ldr	r1, [r3, #8]
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f000 fb43 	bl	80087fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008184:	609a      	str	r2, [r3, #8]
      break;
 8008186:	e039      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6818      	ldr	r0, [r3, #0]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	6859      	ldr	r1, [r3, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	461a      	mov	r2, r3
 8008196:	f000 fab7 	bl	8008708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2150      	movs	r1, #80	; 0x50
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 fb10 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80081a6:	e029      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	6859      	ldr	r1, [r3, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	461a      	mov	r2, r3
 80081b6:	f000 fad6 	bl	8008766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2160      	movs	r1, #96	; 0x60
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fb00 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80081c6:	e019      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	6859      	ldr	r1, [r3, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	461a      	mov	r2, r3
 80081d6:	f000 fa97 	bl	8008708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2140      	movs	r1, #64	; 0x40
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 faf0 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80081e6:	e009      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f000 fae7 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80081f8:	e000      	b.n	80081fc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80081fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008216:	b480      	push	{r7}
 8008218:	b083      	sub	sp, #12
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800821e:	bf00      	nop
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr

0800822a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800822a:	b480      	push	{r7}
 800822c:	b083      	sub	sp, #12
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008246:	bf00      	nop
 8008248:	370c      	adds	r7, #12
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008252:	b480      	push	{r7}
 8008254:	b083      	sub	sp, #12
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
	...

08008268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a40      	ldr	r2, [pc, #256]	; (800837c <TIM_Base_SetConfig+0x114>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d013      	beq.n	80082a8 <TIM_Base_SetConfig+0x40>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008286:	d00f      	beq.n	80082a8 <TIM_Base_SetConfig+0x40>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a3d      	ldr	r2, [pc, #244]	; (8008380 <TIM_Base_SetConfig+0x118>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d00b      	beq.n	80082a8 <TIM_Base_SetConfig+0x40>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a3c      	ldr	r2, [pc, #240]	; (8008384 <TIM_Base_SetConfig+0x11c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d007      	beq.n	80082a8 <TIM_Base_SetConfig+0x40>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a3b      	ldr	r2, [pc, #236]	; (8008388 <TIM_Base_SetConfig+0x120>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d003      	beq.n	80082a8 <TIM_Base_SetConfig+0x40>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a3a      	ldr	r2, [pc, #232]	; (800838c <TIM_Base_SetConfig+0x124>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d108      	bne.n	80082ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a2f      	ldr	r2, [pc, #188]	; (800837c <TIM_Base_SetConfig+0x114>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d02b      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c8:	d027      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a2c      	ldr	r2, [pc, #176]	; (8008380 <TIM_Base_SetConfig+0x118>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d023      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a2b      	ldr	r2, [pc, #172]	; (8008384 <TIM_Base_SetConfig+0x11c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d01f      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2a      	ldr	r2, [pc, #168]	; (8008388 <TIM_Base_SetConfig+0x120>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01b      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a29      	ldr	r2, [pc, #164]	; (800838c <TIM_Base_SetConfig+0x124>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d017      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a28      	ldr	r2, [pc, #160]	; (8008390 <TIM_Base_SetConfig+0x128>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d013      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a27      	ldr	r2, [pc, #156]	; (8008394 <TIM_Base_SetConfig+0x12c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d00f      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a26      	ldr	r2, [pc, #152]	; (8008398 <TIM_Base_SetConfig+0x130>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00b      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a25      	ldr	r2, [pc, #148]	; (800839c <TIM_Base_SetConfig+0x134>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d007      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a24      	ldr	r2, [pc, #144]	; (80083a0 <TIM_Base_SetConfig+0x138>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d003      	beq.n	800831a <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a23      	ldr	r2, [pc, #140]	; (80083a4 <TIM_Base_SetConfig+0x13c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d108      	bne.n	800832c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a0a      	ldr	r2, [pc, #40]	; (800837c <TIM_Base_SetConfig+0x114>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d003      	beq.n	8008360 <TIM_Base_SetConfig+0xf8>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a0c      	ldr	r2, [pc, #48]	; (800838c <TIM_Base_SetConfig+0x124>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d103      	bne.n	8008368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	615a      	str	r2, [r3, #20]
}
 800836e:	bf00      	nop
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	40010000 	.word	0x40010000
 8008380:	40000400 	.word	0x40000400
 8008384:	40000800 	.word	0x40000800
 8008388:	40000c00 	.word	0x40000c00
 800838c:	40010400 	.word	0x40010400
 8008390:	40014000 	.word	0x40014000
 8008394:	40014400 	.word	0x40014400
 8008398:	40014800 	.word	0x40014800
 800839c:	40001800 	.word	0x40001800
 80083a0:	40001c00 	.word	0x40001c00
 80083a4:	40002000 	.word	0x40002000

080083a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b087      	sub	sp, #28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f023 0201 	bic.w	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f023 0303 	bic.w	r3, r3, #3
 80083de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f023 0302 	bic.w	r3, r3, #2
 80083f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a20      	ldr	r2, [pc, #128]	; (8008480 <TIM_OC1_SetConfig+0xd8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d003      	beq.n	800840c <TIM_OC1_SetConfig+0x64>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	4a1f      	ldr	r2, [pc, #124]	; (8008484 <TIM_OC1_SetConfig+0xdc>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d10c      	bne.n	8008426 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f023 0308 	bic.w	r3, r3, #8
 8008412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f023 0304 	bic.w	r3, r3, #4
 8008424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a15      	ldr	r2, [pc, #84]	; (8008480 <TIM_OC1_SetConfig+0xd8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d003      	beq.n	8008436 <TIM_OC1_SetConfig+0x8e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a14      	ldr	r2, [pc, #80]	; (8008484 <TIM_OC1_SetConfig+0xdc>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d111      	bne.n	800845a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800843c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	621a      	str	r2, [r3, #32]
}
 8008474:	bf00      	nop
 8008476:	371c      	adds	r7, #28
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	40010000 	.word	0x40010000
 8008484:	40010400 	.word	0x40010400

08008488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f023 0210 	bic.w	r2, r3, #16
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f023 0320 	bic.w	r3, r3, #32
 80084d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a22      	ldr	r2, [pc, #136]	; (800856c <TIM_OC2_SetConfig+0xe4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d003      	beq.n	80084f0 <TIM_OC2_SetConfig+0x68>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a21      	ldr	r2, [pc, #132]	; (8008570 <TIM_OC2_SetConfig+0xe8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d10d      	bne.n	800850c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800850a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a17      	ldr	r2, [pc, #92]	; (800856c <TIM_OC2_SetConfig+0xe4>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d003      	beq.n	800851c <TIM_OC2_SetConfig+0x94>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a16      	ldr	r2, [pc, #88]	; (8008570 <TIM_OC2_SetConfig+0xe8>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d113      	bne.n	8008544 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800852a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	4313      	orrs	r3, r2
 8008536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	693a      	ldr	r2, [r7, #16]
 8008540:	4313      	orrs	r3, r2
 8008542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	621a      	str	r2, [r3, #32]
}
 800855e:	bf00      	nop
 8008560:	371c      	adds	r7, #28
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40010000 	.word	0x40010000
 8008570:	40010400 	.word	0x40010400

08008574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0303 	bic.w	r3, r3, #3
 80085aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a21      	ldr	r2, [pc, #132]	; (8008654 <TIM_OC3_SetConfig+0xe0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d003      	beq.n	80085da <TIM_OC3_SetConfig+0x66>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a20      	ldr	r2, [pc, #128]	; (8008658 <TIM_OC3_SetConfig+0xe4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d10d      	bne.n	80085f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	021b      	lsls	r3, r3, #8
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a16      	ldr	r2, [pc, #88]	; (8008654 <TIM_OC3_SetConfig+0xe0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d003      	beq.n	8008606 <TIM_OC3_SetConfig+0x92>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a15      	ldr	r2, [pc, #84]	; (8008658 <TIM_OC3_SetConfig+0xe4>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d113      	bne.n	800862e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800860c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	4313      	orrs	r3, r2
 8008620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4313      	orrs	r3, r2
 800862c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	621a      	str	r2, [r3, #32]
}
 8008648:	bf00      	nop
 800864a:	371c      	adds	r7, #28
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr
 8008654:	40010000 	.word	0x40010000
 8008658:	40010400 	.word	0x40010400

0800865c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800868a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	021b      	lsls	r3, r3, #8
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80086a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	031b      	lsls	r3, r3, #12
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a12      	ldr	r2, [pc, #72]	; (8008700 <TIM_OC4_SetConfig+0xa4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d003      	beq.n	80086c4 <TIM_OC4_SetConfig+0x68>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a11      	ldr	r2, [pc, #68]	; (8008704 <TIM_OC4_SetConfig+0xa8>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d109      	bne.n	80086d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	019b      	lsls	r3, r3, #6
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685a      	ldr	r2, [r3, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	693a      	ldr	r2, [r7, #16]
 80086f0:	621a      	str	r2, [r3, #32]
}
 80086f2:	bf00      	nop
 80086f4:	371c      	adds	r7, #28
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	40010000 	.word	0x40010000
 8008704:	40010400 	.word	0x40010400

08008708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	f023 0201 	bic.w	r2, r3, #1
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f023 030a 	bic.w	r3, r3, #10
 8008744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008766:	b480      	push	{r7}
 8008768:	b087      	sub	sp, #28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f023 0210 	bic.w	r2, r3, #16
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	031b      	lsls	r3, r3, #12
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f043 0307 	orr.w	r3, r3, #7
 80087e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	609a      	str	r2, [r3, #8]
}
 80087f0:	bf00      	nop
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	021a      	lsls	r2, r3, #8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	431a      	orrs	r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	4313      	orrs	r3, r2
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	609a      	str	r2, [r3, #8]
}
 8008830:	bf00      	nop
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	2201      	movs	r2, #1
 8008850:	fa02 f303 	lsl.w	r3, r2, r3
 8008854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1a      	ldr	r2, [r3, #32]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	43db      	mvns	r3, r3
 800885e:	401a      	ands	r2, r3
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1a      	ldr	r2, [r3, #32]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	fa01 f303 	lsl.w	r3, r1, r3
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
	...

08008888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008898:	2b01      	cmp	r3, #1
 800889a:	d101      	bne.n	80088a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800889c:	2302      	movs	r3, #2
 800889e:	e05a      	b.n	8008956 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2202      	movs	r2, #2
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a21      	ldr	r2, [pc, #132]	; (8008964 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d022      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ec:	d01d      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d018      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1b      	ldr	r2, [pc, #108]	; (800896c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d013      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a1a      	ldr	r2, [pc, #104]	; (8008970 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00e      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a18      	ldr	r2, [pc, #96]	; (8008974 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d009      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a17      	ldr	r2, [pc, #92]	; (8008978 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d004      	beq.n	800892a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a15      	ldr	r2, [pc, #84]	; (800897c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d10c      	bne.n	8008944 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008930:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	4313      	orrs	r3, r2
 800893a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	40010000 	.word	0x40010000
 8008968:	40000400 	.word	0x40000400
 800896c:	40000800 	.word	0x40000800
 8008970:	40000c00 	.word	0x40000c00
 8008974:	40010400 	.word	0x40010400
 8008978:	40014000 	.word	0x40014000
 800897c:	40001800 	.word	0x40001800

08008980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e03f      	b.n	8008a3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d106      	bne.n	80089d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7f9 fbc2 	bl	8002158 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2224      	movs	r2, #36	; 0x24
 80089d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f829 	bl	8008a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	695a      	ldr	r2, [r3, #20]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	b085      	sub	sp, #20
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008a86:	f023 030c 	bic.w	r3, r3, #12
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	68f9      	ldr	r1, [r7, #12]
 8008a90:	430b      	orrs	r3, r1
 8008a92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	69db      	ldr	r3, [r3, #28]
 8008aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab2:	f040 818b 	bne.w	8008dcc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4ac1      	ldr	r2, [pc, #772]	; (8008dc0 <UART_SetConfig+0x37c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d005      	beq.n	8008acc <UART_SetConfig+0x88>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4abf      	ldr	r2, [pc, #764]	; (8008dc4 <UART_SetConfig+0x380>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	f040 80bd 	bne.w	8008c46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008acc:	f7fd fed0 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8008ad0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	461d      	mov	r5, r3
 8008ad6:	f04f 0600 	mov.w	r6, #0
 8008ada:	46a8      	mov	r8, r5
 8008adc:	46b1      	mov	r9, r6
 8008ade:	eb18 0308 	adds.w	r3, r8, r8
 8008ae2:	eb49 0409 	adc.w	r4, r9, r9
 8008ae6:	4698      	mov	r8, r3
 8008ae8:	46a1      	mov	r9, r4
 8008aea:	eb18 0805 	adds.w	r8, r8, r5
 8008aee:	eb49 0906 	adc.w	r9, r9, r6
 8008af2:	f04f 0100 	mov.w	r1, #0
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008afe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b06:	4688      	mov	r8, r1
 8008b08:	4691      	mov	r9, r2
 8008b0a:	eb18 0005 	adds.w	r0, r8, r5
 8008b0e:	eb49 0106 	adc.w	r1, r9, r6
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	461d      	mov	r5, r3
 8008b18:	f04f 0600 	mov.w	r6, #0
 8008b1c:	196b      	adds	r3, r5, r5
 8008b1e:	eb46 0406 	adc.w	r4, r6, r6
 8008b22:	461a      	mov	r2, r3
 8008b24:	4623      	mov	r3, r4
 8008b26:	f7f7 ffb1 	bl	8000a8c <__aeabi_uldivmod>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	461a      	mov	r2, r3
 8008b30:	4ba5      	ldr	r3, [pc, #660]	; (8008dc8 <UART_SetConfig+0x384>)
 8008b32:	fba3 2302 	umull	r2, r3, r3, r2
 8008b36:	095b      	lsrs	r3, r3, #5
 8008b38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	461d      	mov	r5, r3
 8008b40:	f04f 0600 	mov.w	r6, #0
 8008b44:	46a9      	mov	r9, r5
 8008b46:	46b2      	mov	sl, r6
 8008b48:	eb19 0309 	adds.w	r3, r9, r9
 8008b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8008b50:	4699      	mov	r9, r3
 8008b52:	46a2      	mov	sl, r4
 8008b54:	eb19 0905 	adds.w	r9, r9, r5
 8008b58:	eb4a 0a06 	adc.w	sl, sl, r6
 8008b5c:	f04f 0100 	mov.w	r1, #0
 8008b60:	f04f 0200 	mov.w	r2, #0
 8008b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b70:	4689      	mov	r9, r1
 8008b72:	4692      	mov	sl, r2
 8008b74:	eb19 0005 	adds.w	r0, r9, r5
 8008b78:	eb4a 0106 	adc.w	r1, sl, r6
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	461d      	mov	r5, r3
 8008b82:	f04f 0600 	mov.w	r6, #0
 8008b86:	196b      	adds	r3, r5, r5
 8008b88:	eb46 0406 	adc.w	r4, r6, r6
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	4623      	mov	r3, r4
 8008b90:	f7f7 ff7c 	bl	8000a8c <__aeabi_uldivmod>
 8008b94:	4603      	mov	r3, r0
 8008b96:	460c      	mov	r4, r1
 8008b98:	461a      	mov	r2, r3
 8008b9a:	4b8b      	ldr	r3, [pc, #556]	; (8008dc8 <UART_SetConfig+0x384>)
 8008b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	2164      	movs	r1, #100	; 0x64
 8008ba4:	fb01 f303 	mul.w	r3, r1, r3
 8008ba8:	1ad3      	subs	r3, r2, r3
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	3332      	adds	r3, #50	; 0x32
 8008bae:	4a86      	ldr	r2, [pc, #536]	; (8008dc8 <UART_SetConfig+0x384>)
 8008bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bbc:	4498      	add	r8, r3
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	461d      	mov	r5, r3
 8008bc2:	f04f 0600 	mov.w	r6, #0
 8008bc6:	46a9      	mov	r9, r5
 8008bc8:	46b2      	mov	sl, r6
 8008bca:	eb19 0309 	adds.w	r3, r9, r9
 8008bce:	eb4a 040a 	adc.w	r4, sl, sl
 8008bd2:	4699      	mov	r9, r3
 8008bd4:	46a2      	mov	sl, r4
 8008bd6:	eb19 0905 	adds.w	r9, r9, r5
 8008bda:	eb4a 0a06 	adc.w	sl, sl, r6
 8008bde:	f04f 0100 	mov.w	r1, #0
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bf2:	4689      	mov	r9, r1
 8008bf4:	4692      	mov	sl, r2
 8008bf6:	eb19 0005 	adds.w	r0, r9, r5
 8008bfa:	eb4a 0106 	adc.w	r1, sl, r6
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	461d      	mov	r5, r3
 8008c04:	f04f 0600 	mov.w	r6, #0
 8008c08:	196b      	adds	r3, r5, r5
 8008c0a:	eb46 0406 	adc.w	r4, r6, r6
 8008c0e:	461a      	mov	r2, r3
 8008c10:	4623      	mov	r3, r4
 8008c12:	f7f7 ff3b 	bl	8000a8c <__aeabi_uldivmod>
 8008c16:	4603      	mov	r3, r0
 8008c18:	460c      	mov	r4, r1
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	4b6a      	ldr	r3, [pc, #424]	; (8008dc8 <UART_SetConfig+0x384>)
 8008c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	2164      	movs	r1, #100	; 0x64
 8008c26:	fb01 f303 	mul.w	r3, r1, r3
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	00db      	lsls	r3, r3, #3
 8008c2e:	3332      	adds	r3, #50	; 0x32
 8008c30:	4a65      	ldr	r2, [pc, #404]	; (8008dc8 <UART_SetConfig+0x384>)
 8008c32:	fba2 2303 	umull	r2, r3, r2, r3
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	f003 0207 	and.w	r2, r3, #7
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4442      	add	r2, r8
 8008c42:	609a      	str	r2, [r3, #8]
 8008c44:	e26f      	b.n	8009126 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c46:	f7fd fdff 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8008c4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	461d      	mov	r5, r3
 8008c50:	f04f 0600 	mov.w	r6, #0
 8008c54:	46a8      	mov	r8, r5
 8008c56:	46b1      	mov	r9, r6
 8008c58:	eb18 0308 	adds.w	r3, r8, r8
 8008c5c:	eb49 0409 	adc.w	r4, r9, r9
 8008c60:	4698      	mov	r8, r3
 8008c62:	46a1      	mov	r9, r4
 8008c64:	eb18 0805 	adds.w	r8, r8, r5
 8008c68:	eb49 0906 	adc.w	r9, r9, r6
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	f04f 0200 	mov.w	r2, #0
 8008c74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008c78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c80:	4688      	mov	r8, r1
 8008c82:	4691      	mov	r9, r2
 8008c84:	eb18 0005 	adds.w	r0, r8, r5
 8008c88:	eb49 0106 	adc.w	r1, r9, r6
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	461d      	mov	r5, r3
 8008c92:	f04f 0600 	mov.w	r6, #0
 8008c96:	196b      	adds	r3, r5, r5
 8008c98:	eb46 0406 	adc.w	r4, r6, r6
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	f7f7 fef4 	bl	8000a8c <__aeabi_uldivmod>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	461a      	mov	r2, r3
 8008caa:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <UART_SetConfig+0x384>)
 8008cac:	fba3 2302 	umull	r2, r3, r3, r2
 8008cb0:	095b      	lsrs	r3, r3, #5
 8008cb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	461d      	mov	r5, r3
 8008cba:	f04f 0600 	mov.w	r6, #0
 8008cbe:	46a9      	mov	r9, r5
 8008cc0:	46b2      	mov	sl, r6
 8008cc2:	eb19 0309 	adds.w	r3, r9, r9
 8008cc6:	eb4a 040a 	adc.w	r4, sl, sl
 8008cca:	4699      	mov	r9, r3
 8008ccc:	46a2      	mov	sl, r4
 8008cce:	eb19 0905 	adds.w	r9, r9, r5
 8008cd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8008cd6:	f04f 0100 	mov.w	r1, #0
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ce2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ce6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008cea:	4689      	mov	r9, r1
 8008cec:	4692      	mov	sl, r2
 8008cee:	eb19 0005 	adds.w	r0, r9, r5
 8008cf2:	eb4a 0106 	adc.w	r1, sl, r6
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	461d      	mov	r5, r3
 8008cfc:	f04f 0600 	mov.w	r6, #0
 8008d00:	196b      	adds	r3, r5, r5
 8008d02:	eb46 0406 	adc.w	r4, r6, r6
 8008d06:	461a      	mov	r2, r3
 8008d08:	4623      	mov	r3, r4
 8008d0a:	f7f7 febf 	bl	8000a8c <__aeabi_uldivmod>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	460c      	mov	r4, r1
 8008d12:	461a      	mov	r2, r3
 8008d14:	4b2c      	ldr	r3, [pc, #176]	; (8008dc8 <UART_SetConfig+0x384>)
 8008d16:	fba3 1302 	umull	r1, r3, r3, r2
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	2164      	movs	r1, #100	; 0x64
 8008d1e:	fb01 f303 	mul.w	r3, r1, r3
 8008d22:	1ad3      	subs	r3, r2, r3
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	3332      	adds	r3, #50	; 0x32
 8008d28:	4a27      	ldr	r2, [pc, #156]	; (8008dc8 <UART_SetConfig+0x384>)
 8008d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d36:	4498      	add	r8, r3
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	461d      	mov	r5, r3
 8008d3c:	f04f 0600 	mov.w	r6, #0
 8008d40:	46a9      	mov	r9, r5
 8008d42:	46b2      	mov	sl, r6
 8008d44:	eb19 0309 	adds.w	r3, r9, r9
 8008d48:	eb4a 040a 	adc.w	r4, sl, sl
 8008d4c:	4699      	mov	r9, r3
 8008d4e:	46a2      	mov	sl, r4
 8008d50:	eb19 0905 	adds.w	r9, r9, r5
 8008d54:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d58:	f04f 0100 	mov.w	r1, #0
 8008d5c:	f04f 0200 	mov.w	r2, #0
 8008d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d6c:	4689      	mov	r9, r1
 8008d6e:	4692      	mov	sl, r2
 8008d70:	eb19 0005 	adds.w	r0, r9, r5
 8008d74:	eb4a 0106 	adc.w	r1, sl, r6
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	461d      	mov	r5, r3
 8008d7e:	f04f 0600 	mov.w	r6, #0
 8008d82:	196b      	adds	r3, r5, r5
 8008d84:	eb46 0406 	adc.w	r4, r6, r6
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	f7f7 fe7e 	bl	8000a8c <__aeabi_uldivmod>
 8008d90:	4603      	mov	r3, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	461a      	mov	r2, r3
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <UART_SetConfig+0x384>)
 8008d98:	fba3 1302 	umull	r1, r3, r3, r2
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	2164      	movs	r1, #100	; 0x64
 8008da0:	fb01 f303 	mul.w	r3, r1, r3
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	3332      	adds	r3, #50	; 0x32
 8008daa:	4a07      	ldr	r2, [pc, #28]	; (8008dc8 <UART_SetConfig+0x384>)
 8008dac:	fba2 2303 	umull	r2, r3, r2, r3
 8008db0:	095b      	lsrs	r3, r3, #5
 8008db2:	f003 0207 	and.w	r2, r3, #7
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4442      	add	r2, r8
 8008dbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008dbe:	e1b2      	b.n	8009126 <UART_SetConfig+0x6e2>
 8008dc0:	40011000 	.word	0x40011000
 8008dc4:	40011400 	.word	0x40011400
 8008dc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4ad7      	ldr	r2, [pc, #860]	; (8009130 <UART_SetConfig+0x6ec>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d005      	beq.n	8008de2 <UART_SetConfig+0x39e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4ad6      	ldr	r2, [pc, #856]	; (8009134 <UART_SetConfig+0x6f0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	f040 80d1 	bne.w	8008f84 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008de2:	f7fd fd45 	bl	8006870 <HAL_RCC_GetPCLK2Freq>
 8008de6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	469a      	mov	sl, r3
 8008dec:	f04f 0b00 	mov.w	fp, #0
 8008df0:	46d0      	mov	r8, sl
 8008df2:	46d9      	mov	r9, fp
 8008df4:	eb18 0308 	adds.w	r3, r8, r8
 8008df8:	eb49 0409 	adc.w	r4, r9, r9
 8008dfc:	4698      	mov	r8, r3
 8008dfe:	46a1      	mov	r9, r4
 8008e00:	eb18 080a 	adds.w	r8, r8, sl
 8008e04:	eb49 090b 	adc.w	r9, r9, fp
 8008e08:	f04f 0100 	mov.w	r1, #0
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e1c:	4688      	mov	r8, r1
 8008e1e:	4691      	mov	r9, r2
 8008e20:	eb1a 0508 	adds.w	r5, sl, r8
 8008e24:	eb4b 0609 	adc.w	r6, fp, r9
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f04f 0200 	mov.w	r2, #0
 8008e32:	f04f 0300 	mov.w	r3, #0
 8008e36:	f04f 0400 	mov.w	r4, #0
 8008e3a:	0094      	lsls	r4, r2, #2
 8008e3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e40:	008b      	lsls	r3, r1, #2
 8008e42:	461a      	mov	r2, r3
 8008e44:	4623      	mov	r3, r4
 8008e46:	4628      	mov	r0, r5
 8008e48:	4631      	mov	r1, r6
 8008e4a:	f7f7 fe1f 	bl	8000a8c <__aeabi_uldivmod>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	460c      	mov	r4, r1
 8008e52:	461a      	mov	r2, r3
 8008e54:	4bb8      	ldr	r3, [pc, #736]	; (8009138 <UART_SetConfig+0x6f4>)
 8008e56:	fba3 2302 	umull	r2, r3, r3, r2
 8008e5a:	095b      	lsrs	r3, r3, #5
 8008e5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	469b      	mov	fp, r3
 8008e64:	f04f 0c00 	mov.w	ip, #0
 8008e68:	46d9      	mov	r9, fp
 8008e6a:	46e2      	mov	sl, ip
 8008e6c:	eb19 0309 	adds.w	r3, r9, r9
 8008e70:	eb4a 040a 	adc.w	r4, sl, sl
 8008e74:	4699      	mov	r9, r3
 8008e76:	46a2      	mov	sl, r4
 8008e78:	eb19 090b 	adds.w	r9, r9, fp
 8008e7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008e80:	f04f 0100 	mov.w	r1, #0
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008e8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008e90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e94:	4689      	mov	r9, r1
 8008e96:	4692      	mov	sl, r2
 8008e98:	eb1b 0509 	adds.w	r5, fp, r9
 8008e9c:	eb4c 060a 	adc.w	r6, ip, sl
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	f04f 0400 	mov.w	r4, #0
 8008eb2:	0094      	lsls	r4, r2, #2
 8008eb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008eb8:	008b      	lsls	r3, r1, #2
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4623      	mov	r3, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	f7f7 fde3 	bl	8000a8c <__aeabi_uldivmod>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	460c      	mov	r4, r1
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4b9a      	ldr	r3, [pc, #616]	; (8009138 <UART_SetConfig+0x6f4>)
 8008ece:	fba3 1302 	umull	r1, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	2164      	movs	r1, #100	; 0x64
 8008ed6:	fb01 f303 	mul.w	r3, r1, r3
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	3332      	adds	r3, #50	; 0x32
 8008ee0:	4a95      	ldr	r2, [pc, #596]	; (8009138 <UART_SetConfig+0x6f4>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	095b      	lsrs	r3, r3, #5
 8008ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eec:	4498      	add	r8, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	469b      	mov	fp, r3
 8008ef2:	f04f 0c00 	mov.w	ip, #0
 8008ef6:	46d9      	mov	r9, fp
 8008ef8:	46e2      	mov	sl, ip
 8008efa:	eb19 0309 	adds.w	r3, r9, r9
 8008efe:	eb4a 040a 	adc.w	r4, sl, sl
 8008f02:	4699      	mov	r9, r3
 8008f04:	46a2      	mov	sl, r4
 8008f06:	eb19 090b 	adds.w	r9, r9, fp
 8008f0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f0e:	f04f 0100 	mov.w	r1, #0
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f22:	4689      	mov	r9, r1
 8008f24:	4692      	mov	sl, r2
 8008f26:	eb1b 0509 	adds.w	r5, fp, r9
 8008f2a:	eb4c 060a 	adc.w	r6, ip, sl
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	4619      	mov	r1, r3
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	f04f 0400 	mov.w	r4, #0
 8008f40:	0094      	lsls	r4, r2, #2
 8008f42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f46:	008b      	lsls	r3, r1, #2
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4623      	mov	r3, r4
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	4631      	mov	r1, r6
 8008f50:	f7f7 fd9c 	bl	8000a8c <__aeabi_uldivmod>
 8008f54:	4603      	mov	r3, r0
 8008f56:	460c      	mov	r4, r1
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b77      	ldr	r3, [pc, #476]	; (8009138 <UART_SetConfig+0x6f4>)
 8008f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f60:	095b      	lsrs	r3, r3, #5
 8008f62:	2164      	movs	r1, #100	; 0x64
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	3332      	adds	r3, #50	; 0x32
 8008f6e:	4a72      	ldr	r2, [pc, #456]	; (8009138 <UART_SetConfig+0x6f4>)
 8008f70:	fba2 2303 	umull	r2, r3, r2, r3
 8008f74:	095b      	lsrs	r3, r3, #5
 8008f76:	f003 020f 	and.w	r2, r3, #15
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4442      	add	r2, r8
 8008f80:	609a      	str	r2, [r3, #8]
 8008f82:	e0d0      	b.n	8009126 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f84:	f7fd fc60 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8008f88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	469a      	mov	sl, r3
 8008f8e:	f04f 0b00 	mov.w	fp, #0
 8008f92:	46d0      	mov	r8, sl
 8008f94:	46d9      	mov	r9, fp
 8008f96:	eb18 0308 	adds.w	r3, r8, r8
 8008f9a:	eb49 0409 	adc.w	r4, r9, r9
 8008f9e:	4698      	mov	r8, r3
 8008fa0:	46a1      	mov	r9, r4
 8008fa2:	eb18 080a 	adds.w	r8, r8, sl
 8008fa6:	eb49 090b 	adc.w	r9, r9, fp
 8008faa:	f04f 0100 	mov.w	r1, #0
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008fb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008fba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008fbe:	4688      	mov	r8, r1
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	eb1a 0508 	adds.w	r5, sl, r8
 8008fc6:	eb4b 0609 	adc.w	r6, fp, r9
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	f04f 0200 	mov.w	r2, #0
 8008fd4:	f04f 0300 	mov.w	r3, #0
 8008fd8:	f04f 0400 	mov.w	r4, #0
 8008fdc:	0094      	lsls	r4, r2, #2
 8008fde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008fe2:	008b      	lsls	r3, r1, #2
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	4623      	mov	r3, r4
 8008fe8:	4628      	mov	r0, r5
 8008fea:	4631      	mov	r1, r6
 8008fec:	f7f7 fd4e 	bl	8000a8c <__aeabi_uldivmod>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	4b50      	ldr	r3, [pc, #320]	; (8009138 <UART_SetConfig+0x6f4>)
 8008ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8008ffc:	095b      	lsrs	r3, r3, #5
 8008ffe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	469b      	mov	fp, r3
 8009006:	f04f 0c00 	mov.w	ip, #0
 800900a:	46d9      	mov	r9, fp
 800900c:	46e2      	mov	sl, ip
 800900e:	eb19 0309 	adds.w	r3, r9, r9
 8009012:	eb4a 040a 	adc.w	r4, sl, sl
 8009016:	4699      	mov	r9, r3
 8009018:	46a2      	mov	sl, r4
 800901a:	eb19 090b 	adds.w	r9, r9, fp
 800901e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009022:	f04f 0100 	mov.w	r1, #0
 8009026:	f04f 0200 	mov.w	r2, #0
 800902a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800902e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009032:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009036:	4689      	mov	r9, r1
 8009038:	4692      	mov	sl, r2
 800903a:	eb1b 0509 	adds.w	r5, fp, r9
 800903e:	eb4c 060a 	adc.w	r6, ip, sl
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	4619      	mov	r1, r3
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	f04f 0300 	mov.w	r3, #0
 8009050:	f04f 0400 	mov.w	r4, #0
 8009054:	0094      	lsls	r4, r2, #2
 8009056:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800905a:	008b      	lsls	r3, r1, #2
 800905c:	461a      	mov	r2, r3
 800905e:	4623      	mov	r3, r4
 8009060:	4628      	mov	r0, r5
 8009062:	4631      	mov	r1, r6
 8009064:	f7f7 fd12 	bl	8000a8c <__aeabi_uldivmod>
 8009068:	4603      	mov	r3, r0
 800906a:	460c      	mov	r4, r1
 800906c:	461a      	mov	r2, r3
 800906e:	4b32      	ldr	r3, [pc, #200]	; (8009138 <UART_SetConfig+0x6f4>)
 8009070:	fba3 1302 	umull	r1, r3, r3, r2
 8009074:	095b      	lsrs	r3, r3, #5
 8009076:	2164      	movs	r1, #100	; 0x64
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	3332      	adds	r3, #50	; 0x32
 8009082:	4a2d      	ldr	r2, [pc, #180]	; (8009138 <UART_SetConfig+0x6f4>)
 8009084:	fba2 2303 	umull	r2, r3, r2, r3
 8009088:	095b      	lsrs	r3, r3, #5
 800908a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800908e:	4498      	add	r8, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	469b      	mov	fp, r3
 8009094:	f04f 0c00 	mov.w	ip, #0
 8009098:	46d9      	mov	r9, fp
 800909a:	46e2      	mov	sl, ip
 800909c:	eb19 0309 	adds.w	r3, r9, r9
 80090a0:	eb4a 040a 	adc.w	r4, sl, sl
 80090a4:	4699      	mov	r9, r3
 80090a6:	46a2      	mov	sl, r4
 80090a8:	eb19 090b 	adds.w	r9, r9, fp
 80090ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80090b0:	f04f 0100 	mov.w	r1, #0
 80090b4:	f04f 0200 	mov.w	r2, #0
 80090b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090c4:	4689      	mov	r9, r1
 80090c6:	4692      	mov	sl, r2
 80090c8:	eb1b 0509 	adds.w	r5, fp, r9
 80090cc:	eb4c 060a 	adc.w	r6, ip, sl
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	4619      	mov	r1, r3
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	f04f 0300 	mov.w	r3, #0
 80090de:	f04f 0400 	mov.w	r4, #0
 80090e2:	0094      	lsls	r4, r2, #2
 80090e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090e8:	008b      	lsls	r3, r1, #2
 80090ea:	461a      	mov	r2, r3
 80090ec:	4623      	mov	r3, r4
 80090ee:	4628      	mov	r0, r5
 80090f0:	4631      	mov	r1, r6
 80090f2:	f7f7 fccb 	bl	8000a8c <__aeabi_uldivmod>
 80090f6:	4603      	mov	r3, r0
 80090f8:	460c      	mov	r4, r1
 80090fa:	461a      	mov	r2, r3
 80090fc:	4b0e      	ldr	r3, [pc, #56]	; (8009138 <UART_SetConfig+0x6f4>)
 80090fe:	fba3 1302 	umull	r1, r3, r3, r2
 8009102:	095b      	lsrs	r3, r3, #5
 8009104:	2164      	movs	r1, #100	; 0x64
 8009106:	fb01 f303 	mul.w	r3, r1, r3
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	3332      	adds	r3, #50	; 0x32
 8009110:	4a09      	ldr	r2, [pc, #36]	; (8009138 <UART_SetConfig+0x6f4>)
 8009112:	fba2 2303 	umull	r2, r3, r2, r3
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4442      	add	r2, r8
 8009122:	609a      	str	r2, [r3, #8]
}
 8009124:	e7ff      	b.n	8009126 <UART_SetConfig+0x6e2>
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009130:	40011000 	.word	0x40011000
 8009134:	40011400 	.word	0x40011400
 8009138:	51eb851f 	.word	0x51eb851f

0800913c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d029      	beq.n	80091aa <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009162:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009166:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009170:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009176:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800917c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009182:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009188:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800918e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009194:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800919a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	e034      	b.n	8009214 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80091b6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80091c0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80091c6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4313      	orrs	r3, r2
 80091cc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80091da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80091de:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80091e8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80091ee:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80091f4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80091fa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009200:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	4313      	orrs	r3, r2
 8009206:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009222:	b480      	push	{r7}
 8009224:	b087      	sub	sp, #28
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d02e      	beq.n	800929a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009248:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	3b01      	subs	r3, #1
 8009256:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009258:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	3b01      	subs	r3, #1
 8009260:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009262:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	3b01      	subs	r3, #1
 800926a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800926c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	3b01      	subs	r3, #1
 8009274:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009276:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	3b01      	subs	r3, #1
 800927e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009280:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	3b01      	subs	r3, #1
 8009288:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800928a:	4313      	orrs	r3, r2
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	4313      	orrs	r3, r2
 8009290:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	697a      	ldr	r2, [r7, #20]
 8009296:	609a      	str	r2, [r3, #8]
 8009298:	e03b      	b.n	8009312 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80092a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092aa:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80092bc:	4313      	orrs	r3, r2
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80092d0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	3b01      	subs	r3, #1
 80092de:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80092e0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80092ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	3b01      	subs	r3, #1
 80092f2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80092f4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80092fe:	4313      	orrs	r3, r2
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	4313      	orrs	r3, r2
 8009304:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	697a      	ldr	r2, [r7, #20]
 800930a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800933c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	3b01      	subs	r3, #1
 8009344:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009346:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800934e:	4313      	orrs	r3, r2
 8009350:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009358:	f7fa f90c 	bl	8003574 <HAL_GetTick>
 800935c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800935e:	e010      	b.n	8009382 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009366:	d00c      	beq.n	8009382 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <FMC_SDRAM_SendCommand+0x5e>
 800936e:	f7fa f901 	bl	8003574 <HAL_GetTick>
 8009372:	4602      	mov	r2, r0
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	1ad3      	subs	r3, r2, r3
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	429a      	cmp	r2, r3
 800937c:	d201      	bcs.n	8009382 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e006      	b.n	8009390 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b20      	cmp	r3, #32
 800938c:	d0e8      	beq.n	8009360 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	695a      	ldr	r2, [r3, #20]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
	...

080093c0 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
    {
 80093c8:	4a04      	ldr	r2, [pc, #16]	; (80093dc <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]
    }
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	08022cf0 	.word	0x08022cf0

080093e0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
    }
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ffe9 	bl	80093c0 <_ZN8touchgfx15TouchControllerD1Ev>
 80093ee:	2104      	movs	r1, #4
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f017 fae6 	bl	80209c2 <_ZdlPvj>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4618      	mov	r0, r3
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <_ZN8touchgfx4RectC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Resulting in an empty Rect with coordinates 0,0.
     */
    Rect()
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
    {
        this->x = 0;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	80da      	strh	r2, [r3, #6]
    }
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800942e:	b480      	push	{r7}
 8009430:	b083      	sub	sp, #12
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	807b      	strh	r3, [r7, #2]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	887a      	ldrh	r2, [r7, #2]
 800943e:	801a      	strh	r2, [r3, #0]
    {
    }
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4618      	mov	r0, r3
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
	...

08009450 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	4a04      	ldr	r2, [pc, #16]	; (800946c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	08025104 	.word	0x08025104

08009470 <_ZN8touchgfx8DrawableD0Ev>:
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff ffe9 	bl	8009450 <_ZN8touchgfx8DrawableD1Ev>
 800947e:	2128      	movs	r1, #40	; 0x28
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f017 fa9e 	bl	80209c2 <_ZdlPvj>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	4608      	mov	r0, r1
 800949a:	4611      	mov	r1, r2
 800949c:	461a      	mov	r2, r3
 800949e:	4603      	mov	r3, r0
 80094a0:	817b      	strh	r3, [r7, #10]
 80094a2:	460b      	mov	r3, r1
 80094a4:	813b      	strh	r3, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3334      	adds	r3, #52	; 0x34
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80094b6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	4798      	blx	r3
        setWidth(width);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3338      	adds	r3, #56	; 0x38
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094ca:	4611      	mov	r1, r2
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	4798      	blx	r3
        setHeight(height);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	333c      	adds	r3, #60	; 0x3c
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80094dc:	4611      	mov	r1, r2
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	4798      	blx	r3
    };
 80094e2:	bf00      	nop
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 80094ea:	b480      	push	{r7}
 80094ec:	b083      	sub	sp, #12
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	460b      	mov	r3, r1
 80094f4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	887a      	ldrh	r2, [r7, #2]
 80094fa:	809a      	strh	r2, [r3, #4]
    }
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	887a      	ldrh	r2, [r7, #2]
 8009518:	80da      	strh	r2, [r3, #6]
    }
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	807b      	strh	r3, [r7, #2]
 8009532:	4613      	mov	r3, r2
 8009534:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	332c      	adds	r3, #44	; 0x2c
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8009542:	4611      	mov	r1, r2
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
        setY(y);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3330      	adds	r3, #48	; 0x30
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f9b7 2000 	ldrsh.w	r2, [r7]
 8009554:	4611      	mov	r1, r2
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
    }
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	887a      	ldrh	r2, [r7, #2]
 8009572:	811a      	strh	r2, [r3, #8]
    }
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	887a      	ldrh	r2, [r7, #2]
 8009590:	815a      	strh	r2, [r3, #10]
    }
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	bf00      	nop
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
 80095e8:	bf00      	nop
 80095ea:	370c      	adds	r7, #12
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 80095f4:	b480      	push	{r7}
 80095f6:	b083      	sub	sp, #12
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8009616:	4618      	mov	r0, r3
 8009618:	370c      	adds	r7, #12
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	807b      	strh	r3, [r7, #2]
 8009648:	4613      	mov	r3, r2
 800964a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	3354      	adds	r3, #84	; 0x54
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	8879      	ldrh	r1, [r7, #2]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800965c:	b292      	uxth	r2, r2
 800965e:	1a8a      	subs	r2, r1, r2
 8009660:	b292      	uxth	r2, r2
 8009662:	b210      	sxth	r0, r2
 8009664:	8839      	ldrh	r1, [r7, #0]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800966c:	b292      	uxth	r2, r2
 800966e:	1a8a      	subs	r2, r1, r2
 8009670:	b292      	uxth	r2, r2
 8009672:	b212      	sxth	r2, r2
 8009674:	4601      	mov	r1, r0
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	4798      	blx	r3
    }
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009690:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009698:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096a0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b084      	sub	sp, #16
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	60f8      	str	r0, [r7, #12]
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f7ff ffe1 	bl	8009682 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	601a      	str	r2, [r3, #0]
    }
 80096ce:	bf00      	nop
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
	...

080096d8 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	4a05      	ldr	r2, [pc, #20]	; (80096f8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff feb1 	bl	8009450 <_ZN8touchgfx8DrawableD1Ev>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	08022d08 	.word	0x08022d08

080096fc <_ZN8touchgfx6WidgetD0Ev>:
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7ff ffe7 	bl	80096d8 <_ZN8touchgfx6WidgetD1Ev>
 800970a:	2128      	movs	r1, #40	; 0x28
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f017 f958 	bl	80209c2 <_ZdlPvj>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	607b      	str	r3, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	817b      	strh	r3, [r7, #10]
 800972a:	4613      	mov	r3, r2
 800972c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	4618      	mov	r0, r3
 8009732:	f7ff ff69 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d008      	beq.n	800974e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff ff6f 	bl	8009622 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800974e:	2300      	movs	r3, #0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	601a      	str	r2, [r3, #0]
        }
    }
 800975a:	bf00      	nop
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800976a:	2301      	movs	r3, #1
    }
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 8009780:	2308      	movs	r3, #8
    }
 8009782:	4618      	mov	r0, r3
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr
	...

08009790 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	4a05      	ldr	r2, [pc, #20]	; (80097b0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7ff fe55 	bl	8009450 <_ZN8touchgfx8DrawableD1Ev>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	08022d74 	.word	0x08022d74

080097b4 <_ZN8touchgfx9ContainerD0Ev>:
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff ffe7 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 80097c2:	212c      	movs	r1, #44	; 0x2c
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f017 f8fc 	bl	80209c2 <_ZdlPvj>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4618      	mov	r0, r3
 80097ce:	3708      	adds	r7, #8
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 80097dc:	2312      	movs	r3, #18
    }
 80097de:	4618      	mov	r0, r3
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	4a05      	ldr	r2, [pc, #20]	; (800980c <_ZN8touchgfx5ImageD1Ev+0x20>)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff ff6b 	bl	80096d8 <_ZN8touchgfx6WidgetD1Ev>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	08023af8 	.word	0x08023af8

08009810 <_ZN8touchgfx5ImageD0Ev>:
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff ffe7 	bl	80097ec <_ZN8touchgfx5ImageD1Ev>
 800981e:	212c      	movs	r1, #44	; 0x2c
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f017 f8ce 	bl	80209c2 <_ZdlPvj>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8009830:	b480      	push	{r7}
 8009832:	af00      	add	r7, sp, #0
    {
        return instance;
 8009834:	4b03      	ldr	r3, [pc, #12]	; (8009844 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8009836:	681b      	ldr	r3, [r3, #0]
    }
 8009838:	4618      	mov	r0, r3
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	2001a8ac 	.word	0x2001a8ac

08009848 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8009848:	b480      	push	{r7}
 800984a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800984c:	4b0b      	ldr	r3, [pc, #44]	; (800987c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8009854:	2b00      	cmp	r3, #0
 8009856:	d008      	beq.n	800986a <_ZN8touchgfx3HAL3lcdEv+0x22>
 8009858:	4b08      	ldr	r3, [pc, #32]	; (800987c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800985e:	2b00      	cmp	r3, #0
 8009860:	d003      	beq.n	800986a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009868:	e002      	b.n	8009870 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        else
        {
            return instance->lcdRef;
 800986a:	4b04      	ldr	r3, [pc, #16]	; (800987c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
        }
    }
 8009870:	4618      	mov	r0, r3
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	2001a8ac 	.word	0x2001a8ac

08009880 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	461a      	mov	r2, r3
 800988e:	4603      	mov	r3, r0
 8009890:	817b      	strh	r3, [r7, #10]
 8009892:	460b      	mov	r3, r1
 8009894:	813b      	strh	r3, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	897a      	ldrh	r2, [r7, #10]
 800989e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	893a      	ldrh	r2, [r7, #8]
 80098a4:	805a      	strh	r2, [r3, #2]
        this->width = width;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	809a      	strh	r2, [r3, #4]
        this->height = height;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	8b3a      	ldrh	r2, [r7, #24]
 80098b0:	80da      	strh	r2, [r3, #6]
    }
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 80098c0:	b480      	push	{r7}
 80098c2:	b083      	sub	sp, #12
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4413      	add	r3, r2
 80098da:	b29b      	uxth	r3, r3
 80098dc:	b21b      	sxth	r3, r3
    }
 80098de:	4618      	mov	r0, r3
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr

080098ea <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 80098ea:	b480      	push	{r7}
 80098ec:	b083      	sub	sp, #12
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009900:	b29b      	uxth	r3, r3
 8009902:	4413      	add	r3, r2
 8009904:	b29b      	uxth	r3, r3
 8009906:	b21b      	sxth	r3, r3
    }
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	807b      	strh	r3, [r7, #2]
 8009920:	4613      	mov	r3, r2
 8009922:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800992a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800992e:	429a      	cmp	r2, r3
 8009930:	db1a      	blt.n	8009968 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff ffc4 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009940:	4293      	cmp	r3, r2
 8009942:	da11      	bge.n	8009968 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800994a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800994e:	429a      	cmp	r2, r3
 8009950:	db0a      	blt.n	8009968 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff ffc9 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009958:	4603      	mov	r3, r0
 800995a:	461a      	mov	r2, r3
 800995c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009960:	4293      	cmp	r3, r2
 8009962:	da01      	bge.n	8009968 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 8009964:	2301      	movs	r3, #1
 8009966:	e000      	b.n	800996a <_ZNK8touchgfx4Rect9intersectEss+0x56>
 8009968:	2300      	movs	r3, #0
    }
 800996a:	4618      	mov	r0, r3
 800996c:	3708      	adds	r7, #8
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 8009972:	b590      	push	{r4, r7, lr}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8009982:	6838      	ldr	r0, [r7, #0]
 8009984:	f7ff ff9c 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009988:	4603      	mov	r3, r0
 800998a:	429c      	cmp	r4, r3
 800998c:	da1e      	bge.n	80099cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff ff96 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009994:	4603      	mov	r3, r0
 8009996:	461a      	mov	r2, r3
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999e:	429a      	cmp	r2, r3
 80099a0:	dd14      	ble.n	80099cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80099a8:	6838      	ldr	r0, [r7, #0]
 80099aa:	f7ff ff9e 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 80099ae:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 80099b0:	429c      	cmp	r4, r3
 80099b2:	da0b      	bge.n	80099cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff ff98 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 80099ba:	4603      	mov	r3, r0
 80099bc:	461a      	mov	r2, r3
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 80099c4:	429a      	cmp	r2, r3
 80099c6:	dd01      	ble.n	80099cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e000      	b.n	80099ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 80099cc:	2300      	movs	r3, #0
    }
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd90      	pop	{r4, r7, pc}

080099d6 <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	6811      	ldr	r1, [r2, #0]
 80099e8:	6852      	ldr	r2, [r2, #4]
 80099ea:	6019      	str	r1, [r3, #0]
 80099ec:	605a      	str	r2, [r3, #4]
        r &= other;
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 f805 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 80099f6:	bf00      	nop
    }
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff ffb0 	bl	8009972 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d05f      	beq.n	8009ad8 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	dd03      	ble.n	8009a30 <_ZN8touchgfx4RectaNERKS0_+0x30>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a2e:	e002      	b.n	8009a36 <_ZN8touchgfx4RectaNERKS0_+0x36>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a36:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	dd04      	ble.n	8009a52 <_ZN8touchgfx4RectaNERKS0_+0x52>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3302      	adds	r3, #2
 8009a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a50:	e002      	b.n	8009a58 <_ZN8touchgfx4RectaNERKS0_+0x58>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009a58:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f7ff ff30 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461c      	mov	r4, r3
 8009a64:	6838      	ldr	r0, [r7, #0]
 8009a66:	f7ff ff2b 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	da05      	bge.n	8009a7c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff ff25 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009a76:	4603      	mov	r3, r0
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	e004      	b.n	8009a86 <_ZN8touchgfx4RectaNERKS0_+0x86>
 8009a7c:	6838      	ldr	r0, [r7, #0]
 8009a7e:	f7ff ff1f 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009a82:	4603      	mov	r3, r0
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	89fa      	ldrh	r2, [r7, #14]
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	b21a      	sxth	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7ff ff29 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461c      	mov	r4, r3
 8009a9c:	6838      	ldr	r0, [r7, #0]
 8009a9e:	f7ff ff24 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	da05      	bge.n	8009ab4 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff1e 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	e004      	b.n	8009abe <_ZN8touchgfx4RectaNERKS0_+0xbe>
 8009ab4:	6838      	ldr	r0, [r7, #0]
 8009ab6:	f7ff ff18 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009aba:	4603      	mov	r3, r0
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	89ba      	ldrh	r2, [r7, #12]
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	b21a      	sxth	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	80da      	strh	r2, [r3, #6]
            x = newX;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	89fa      	ldrh	r2, [r7, #14]
 8009ace:	801a      	strh	r2, [r3, #0]
            y = newY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	89ba      	ldrh	r2, [r7, #12]
 8009ad4:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 8009ad6:	e00b      	b.n	8009af0 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	801a      	strh	r2, [r3, #0]
            y = 0;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	805a      	strh	r2, [r3, #2]
            width = 0;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	809a      	strh	r2, [r3, #4]
            height = 0;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	80da      	strh	r2, [r3, #6]
    }
 8009af0:	bf00      	nop
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd90      	pop	{r4, r7, pc}

08009af8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 8009af8:	b590      	push	{r4, r7, lr}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 8009b02:	6838      	ldr	r0, [r7, #0]
 8009b04:	f000 f884 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f083 0301 	eor.w	r3, r3, #1
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d079      	beq.n	8009c08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f87b 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d014      	beq.n	8009b4a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	801a      	strh	r2, [r3, #0]
                y = other.y;
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	805a      	strh	r2, [r3, #2]
                width = other.width;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	809a      	strh	r2, [r3, #4]
                height = other.height;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 8009b48:	e05e      	b.n	8009c08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	da03      	bge.n	8009b62 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b60:	e002      	b.n	8009b68 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b68:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	da04      	bge.n	8009b84 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3302      	adds	r3, #2
 8009b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b82:	e002      	b.n	8009b8a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009b8a:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fe97 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009b92:	4603      	mov	r3, r0
 8009b94:	461c      	mov	r4, r3
 8009b96:	6838      	ldr	r0, [r7, #0]
 8009b98:	f7ff fe92 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	429c      	cmp	r4, r3
 8009ba0:	dd04      	ble.n	8009bac <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff fe8c 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	e003      	b.n	8009bb4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 8009bac:	6838      	ldr	r0, [r7, #0]
 8009bae:	f7ff fe87 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fe97 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461c      	mov	r4, r3
 8009bc0:	6838      	ldr	r0, [r7, #0]
 8009bc2:	f7ff fe92 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	dd04      	ble.n	8009bd6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff fe8c 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	e003      	b.n	8009bde <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 8009bd6:	6838      	ldr	r0, [r7, #0]
 8009bd8:	f7ff fe87 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	813b      	strh	r3, [r7, #8]
                x = newX;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	89fa      	ldrh	r2, [r7, #14]
 8009be4:	801a      	strh	r2, [r3, #0]
                y = newY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	89ba      	ldrh	r2, [r7, #12]
 8009bea:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 8009bec:	897a      	ldrh	r2, [r7, #10]
 8009bee:	89fb      	ldrh	r3, [r7, #14]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	b21a      	sxth	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 8009bfa:	893a      	ldrh	r2, [r7, #8]
 8009bfc:	89bb      	ldrh	r3, [r7, #12]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	b21a      	sxth	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	80da      	strh	r2, [r3, #6]
    }
 8009c08:	bf00      	nop
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd90      	pop	{r4, r7, pc}

08009c10 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d004      	beq.n	8009c2c <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d101      	bne.n	8009c30 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e000      	b.n	8009c32 <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 8009c30:	2300      	movs	r3, #0
    }
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <_ZNK8touchgfx8Drawable7getRectEv>:
    const Rect& getRect() const
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
        return rect;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	3304      	adds	r3, #4
    }
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <_ZNK8touchgfx8Drawable4getXEv>:
    int16_t getX() const
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
        return rect.x;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8009c64:	4618      	mov	r0, r3
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <_ZNK8touchgfx8Drawable4getYEv>:
    int16_t getY() const
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
        return rect.y;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 8009c7e:	4618      	mov	r0, r3
 8009c80:	370c      	adds	r7, #12
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	6039      	str	r1, [r7, #0]
    bool found = false;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9c:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00d      	beq.n	8009cc0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10a      	bne.n	8009cc0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	bf0c      	ite	eq
 8009cb2:	2301      	moveq	r3, #1
 8009cb4:	2300      	movne	r3, #0
 8009cb6:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	699b      	ldr	r3, [r3, #24]
 8009cbc:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 8009cbe:	e7ee      	b.n	8009c9e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3714      	adds	r7, #20
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
	...

08009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	683a      	ldr	r2, [r7, #0]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d105      	bne.n	8009cee <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 8009ce2:	4b22      	ldr	r3, [pc, #136]	; (8009d6c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 8009ce4:	4a22      	ldr	r2, [pc, #136]	; (8009d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8009ce6:	2123      	movs	r1, #35	; 0x23
 8009ce8:	4822      	ldr	r0, [pc, #136]	; (8009d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8009cea:	f016 fe87 	bl	80209fc <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 8009cf6:	4b20      	ldr	r3, [pc, #128]	; (8009d78 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 8009cf8:	4a1d      	ldr	r2, [pc, #116]	; (8009d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8009cfa:	2124      	movs	r1, #36	; 0x24
 8009cfc:	481d      	ldr	r0, [pc, #116]	; (8009d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8009cfe:	f016 fe7d 	bl	80209fc <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d103      	bne.n	8009d1e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 8009d1c:	e021      	b.n	8009d62 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d22:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	699b      	ldr	r3, [r3, #24]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00d      	beq.n	8009d48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 8009d2c:	68fa      	ldr	r2, [r7, #12]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d105      	bne.n	8009d40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 8009d34:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 8009d36:	4a0e      	ldr	r2, [pc, #56]	; (8009d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8009d38:	2135      	movs	r1, #53	; 0x35
 8009d3a:	480e      	ldr	r0, [pc, #56]	; (8009d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8009d3c:	f016 fe5e 	bl	80209fc <__assert_func>
            head = head->nextSibling;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 8009d46:	e7ed      	b.n	8009d24 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d105      	bne.n	8009d5c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 8009d50:	4b0a      	ldr	r3, [pc, #40]	; (8009d7c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 8009d52:	4a07      	ldr	r2, [pc, #28]	; (8009d70 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 8009d54:	2138      	movs	r1, #56	; 0x38
 8009d56:	4807      	ldr	r0, [pc, #28]	; (8009d74 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 8009d58:	f016 fe50 	bl	80209fc <__assert_func>
        head->nextSibling = &d;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	619a      	str	r2, [r3, #24]
}
 8009d62:	bf00      	nop
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	08021e24 	.word	0x08021e24
 8009d70:	08022dfc 	.word	0x08022dfc
 8009d74:	08021e50 	.word	0x08021e50
 8009d78:	08021ea8 	.word	0x08021ea8
 8009d7c:	08021ee0 	.word	0x08021ee0

08009d80 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b085      	sub	sp, #20
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d031      	beq.n	8009df6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d112      	bne.n	8009dc2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d103      	bne.n	8009db2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 8009db0:	e022      	b.n	8009df8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	619a      	str	r2, [r3, #24]
        return;
 8009dc0:	e01a      	b.n	8009df8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	60fb      	str	r3, [r7, #12]

    while (tmp)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d014      	beq.n	8009df8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d10a      	bne.n	8009dee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	699a      	ldr	r2, [r3, #24]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2200      	movs	r2, #0
 8009de4:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2200      	movs	r2, #0
 8009dea:	619a      	str	r2, [r3, #24]
            return;
 8009dec:	e004      	b.n	8009df8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	699b      	ldr	r3, [r3, #24]
 8009df2:	60fb      	str	r3, [r7, #12]
    while (tmp)
 8009df4:	e7e8      	b.n	8009dc8 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 8009df6:	bf00      	nop
        }
    }
}
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr

08009e02 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 8009e02:	b480      	push	{r7}
 8009e04:	b085      	sub	sp, #20
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
    while (firstChild)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00e      	beq.n	8009e30 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e16:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	699a      	ldr	r2, [r3, #24]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	619a      	str	r2, [r3, #24]
    while (firstChild)
 8009e2e:	e7ec      	b.n	8009e0a <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 8009e30:	bf00      	nop
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009e4a:	bf00      	nop
 8009e4c:	370c      	adds	r7, #12
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e54:	4770      	bx	lr

08009e56 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b088      	sub	sp, #32
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
 8009e5e:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7ff fbd0 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f083 0301 	eor.w	r3, r3, #1
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d103      	bne.n	8009e7c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e000      	b.n	8009e82 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 8009e80:	2300      	movs	r3, #0
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d14e      	bne.n	8009f24 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	f107 0314 	add.w	r3, r7, #20
 8009e8c:	6810      	ldr	r0, [r2, #0]
 8009e8e:	6851      	ldr	r1, [r2, #4]
 8009e90:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e96:	61fb      	str	r3, [r7, #28]
    while (d)
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d043      	beq.n	8009f26 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 8009e9e:	69f8      	ldr	r0, [r7, #28]
 8009ea0:	f7ff fbb2 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d038      	beq.n	8009f1c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 8009eaa:	69f8      	ldr	r0, [r7, #28]
 8009eac:	f7ff fec7 	bl	8009c3e <_ZNK8touchgfx8Drawable7getRectEv>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	f107 030c 	add.w	r3, r7, #12
 8009eb6:	f107 0114 	add.w	r1, r7, #20
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff fd8b 	bl	80099d6 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff fea3 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f083 0301 	eor.w	r3, r3, #1
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d022      	beq.n	8009f1c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 8009ed6:	69f8      	ldr	r0, [r7, #28]
 8009ed8:	f7ff febd 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 8009edc:	4603      	mov	r3, r0
 8009ede:	4619      	mov	r1, r3
 8009ee0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	b28b      	uxth	r3, r1
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	b21b      	sxth	r3, r3
 8009eee:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 8009ef0:	69f8      	ldr	r0, [r7, #28]
 8009ef2:	f7ff febd 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	b28b      	uxth	r3, r1
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	b21b      	sxth	r3, r3
 8009f08:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f107 020c 	add.w	r2, r7, #12
 8009f16:	4611      	mov	r1, r2
 8009f18:	69f8      	ldr	r0, [r7, #28]
 8009f1a:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	61fb      	str	r3, [r7, #28]
    while (d)
 8009f22:	e7b9      	b.n	8009e98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 8009f24:	bf00      	nop
    }
}
 8009f26:	3720      	adds	r7, #32
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 8009f2c:	b590      	push	{r4, r7, lr}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	607b      	str	r3, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	817b      	strh	r3, [r7, #10]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff fb6e 	bl	8009622 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f56:	617b      	str	r3, [r7, #20]
    while (d)
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d038      	beq.n	8009fd0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 8009f5e:	6978      	ldr	r0, [r7, #20]
 8009f60:	f7ff fb52 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00e      	beq.n	8009f88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8009f6a:	6978      	ldr	r0, [r7, #20]
 8009f6c:	f7ff fe67 	bl	8009c3e <_ZNK8touchgfx8Drawable7getRectEv>
 8009f70:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8009f74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	f7ff fccb 	bl	8009914 <_ZNK8touchgfx4Rect9intersectEss>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 8009f88:	2300      	movs	r3, #0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01c      	beq.n	8009fc8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 8009f8e:	897c      	ldrh	r4, [r7, #10]
 8009f90:	6978      	ldr	r0, [r7, #20]
 8009f92:	f7ff fe60 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 8009f96:	4603      	mov	r3, r0
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	1ae3      	subs	r3, r4, r3
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 8009fa0:	893c      	ldrh	r4, [r7, #8]
 8009fa2:	6978      	ldr	r0, [r7, #20]
 8009fa4:	f7ff fe64 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	1ae3      	subs	r3, r4, r3
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	331c      	adds	r3, #28
 8009fb8:	681c      	ldr	r4, [r3, #0]
 8009fba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009fbe:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6978      	ldr	r0, [r7, #20]
 8009fc6:	47a0      	blx	r4
        }
        d = d->nextSibling;
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	617b      	str	r3, [r7, #20]
    while (d)
 8009fce:	e7c3      	b.n	8009f58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 8009fd0:	bf00      	nop
 8009fd2:	371c      	adds	r7, #28
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd90      	pop	{r4, r7, pc}

08009fd8 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af02      	add	r7, sp, #8
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2100      	movs	r1, #0
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff fc47 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
}
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b086      	sub	sp, #24
 8009ffe:	af02      	add	r7, sp, #8
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800a00a:	2300      	movs	r3, #0
 800a00c:	9300      	str	r3, [sp, #0]
 800a00e:	2300      	movs	r3, #0
 800a010:	2200      	movs	r2, #0
 800a012:	2100      	movs	r1, #0
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7ff fc33 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    while (d)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00b      	beq.n	800a038 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7ff fe0c 	bl	8009c3e <_ZNK8touchgfx8Drawable7getRectEv>
 800a026:	4603      	mov	r3, r0
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff fd64 	bl	8009af8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	60fb      	str	r3, [r7, #12]
    while (d)
 800a036:	e7f0      	b.n	800a01a <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800a038:	bf00      	nop
}
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	807b      	strh	r3, [r7, #2]
 800a04e:	4613      	mov	r3, r2
 800a050:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a056:	60fb      	str	r3, [r7, #12]
    while (d)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00d      	beq.n	800a07a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3354      	adds	r3, #84	; 0x54
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a06a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	4798      	blx	r3
        d = d->nextSibling;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	699b      	ldr	r3, [r3, #24]
 800a076:	60fb      	str	r3, [r7, #12]
    while (d)
 800a078:	e7ee      	b.n	800a058 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800a07a:	bf00      	nop
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a090:	60fb      	str	r3, [r7, #12]
    while (d)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3308      	adds	r3, #8
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	6838      	ldr	r0, [r7, #0]
 800a0a4:	4798      	blx	r3
        d = d->nextSibling;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	60fb      	str	r3, [r7, #12]
    while (d)
 800a0ac:	e7f1      	b.n	800a092 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b086      	sub	sp, #24
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	60b9      	str	r1, [r7, #8]
 800a0c0:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d107      	bne.n	800a0da <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	3364      	adds	r3, #100	; 0x64
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6879      	ldr	r1, [r7, #4]
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	4798      	blx	r3
        return;
 800a0d8:	e026      	b.n	800a128 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10a      	bne.n	800a0f6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	615a      	str	r2, [r3, #20]
 800a0f4:	e018      	b.n	800a128 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fa:	617b      	str	r3, [r7, #20]
        while (tmp)
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d012      	beq.n	800a128 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	429a      	cmp	r2, r3
 800a108:	d10a      	bne.n	800a120 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	615a      	str	r2, [r3, #20]
                return;
 800a11e:	e003      	b.n	800a128 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	617b      	str	r3, [r7, #20]
        while (tmp)
 800a126:	e7e9      	b.n	800a0fc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b088      	sub	sp, #32
 800a132:	af00      	add	r7, sp, #0
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	60b9      	str	r1, [r7, #8]
 800a138:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff fa63 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800a142:	4603      	mov	r3, r0
 800a144:	f083 0301 	eor.w	r3, r3, #1
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d14b      	bne.n	800a1e6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a152:	2b00      	cmp	r3, #0
 800a154:	d049      	beq.n	800a1ea <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15a:	61fb      	str	r3, [r7, #28]
    while (d)
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d044      	beq.n	800a1ec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800a162:	69f8      	ldr	r0, [r7, #28]
 800a164:	f7ff fa50 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d037      	beq.n	800a1de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800a16e:	69f8      	ldr	r0, [r7, #28]
 800a170:	f7ff fd65 	bl	8009c3e <_ZNK8touchgfx8Drawable7getRectEv>
 800a174:	4602      	mov	r2, r0
 800a176:	f107 0314 	add.w	r3, r7, #20
 800a17a:	68b9      	ldr	r1, [r7, #8]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7ff fc2a 	bl	80099d6 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800a182:	f107 0314 	add.w	r3, r7, #20
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff fd42 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800a18c:	4603      	mov	r3, r0
 800a18e:	f083 0301 	eor.w	r3, r3, #1
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d022      	beq.n	800a1de <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800a198:	69f8      	ldr	r0, [r7, #28]
 800a19a:	f7ff fd5c 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a1a6:	b29a      	uxth	r2, r3
 800a1a8:	b28b      	uxth	r3, r1
 800a1aa:	1ad3      	subs	r3, r2, r3
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	b21b      	sxth	r3, r3
 800a1b0:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800a1b2:	69f8      	ldr	r0, [r7, #28]
 800a1b4:	f7ff fd5c 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	b28b      	uxth	r3, r1
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	b21b      	sxth	r3, r3
 800a1ca:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3360      	adds	r3, #96	; 0x60
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f107 0114 	add.w	r1, r7, #20
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	69f8      	ldr	r0, [r7, #28]
 800a1dc:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	61fb      	str	r3, [r7, #28]
    while (d)
 800a1e4:	e7ba      	b.n	800a15c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800a1e6:	bf00      	nop
 800a1e8:	e000      	b.n	800a1ec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800a1ea:	bf00      	nop
    }
}
 800a1ec:	3720      	adds	r7, #32
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800a1f2:	b480      	push	{r7}
 800a1f4:	b083      	sub	sp, #12
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
        return rect.width;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800a200:	4618      	mov	r0, r3
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
        return rect.height;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr
	...

0800a228 <_ZN8touchgfx10ListLayoutD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ListLayout() { }
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	4a05      	ldr	r2, [pc, #20]	; (800a248 <_ZN8touchgfx10ListLayoutD1Ev+0x20>)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7ff faa9 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	08022e88 	.word	0x08022e88

0800a24c <_ZN8touchgfx10ListLayoutD0Ev>:
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7ff ffe7 	bl	800a228 <_ZN8touchgfx10ListLayoutD1Ev>
 800a25a:	2130      	movs	r1, #48	; 0x30
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f016 fbb0 	bl	80209c2 <_ZdlPvj>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <_ZNK8touchgfx10ListLayout12getDirectionEv>:
     *
     * @return The current direction to grow in when added children (either SOUTH or EAST).
     *
     * @see setDirection()
     */
    virtual Direction getDirection() const
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    {
        return direction;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr

0800a286 <_ZNK8touchgfx10ListLayout7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_LISTLAYOUT.
     */
    virtual uint16_t getType() const
 800a286:	b480      	push	{r7}
 800a288:	b083      	sub	sp, #12
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_LISTLAYOUT;
 800a28e:	2313      	movs	r3, #19
    }
 800a290:	4618      	mov	r0, r3
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <_ZN8touchgfx14AdjustElementsC1EPNS_8DrawableENS_9DirectionE>:
namespace touchgfx
{
class AdjustElements
{
public:
    AdjustElements(Drawable* d, Direction dir) : insertedCoord(0),
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	71fb      	strb	r3, [r7, #7]
        newElementPassed(false),
        newElement(d),
        direction(dir) {}
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	801a      	strh	r2, [r3, #0]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	709a      	strb	r2, [r3, #2]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	605a      	str	r2, [r3, #4]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	79fa      	ldrb	r2, [r7, #7]
 800a2c0:	721a      	strb	r2, [r3, #8]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE>:

    void handleInsert(Drawable& d)
 800a2d0:	b5b0      	push	{r4, r5, r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
    {
        if (!newElementPassed)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	789b      	ldrb	r3, [r3, #2]
 800a2de:	f083 0301 	eor.w	r3, r3, #1
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d030      	beq.n	800a34a <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x7a>
        {
            if (newElement == &d)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	d103      	bne.n	800a2fa <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x2a>
            {
                newElementPassed = true;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	709a      	strb	r2, [r3, #2]
            else if (direction == EAST)
            {
                d.setX(d.getX() + newElement->getWidth());
            }
        }
    }
 800a2f8:	e05c      	b.n	800a3b4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0xe4>
                if (direction == SOUTH)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	7a1b      	ldrb	r3, [r3, #8]
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d10f      	bne.n	800a322 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0x52>
                    insertedCoord = d.getY() + d.getHeight();
 800a302:	6838      	ldr	r0, [r7, #0]
 800a304:	f7ff fcb4 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 800a308:	4603      	mov	r3, r0
 800a30a:	b29c      	uxth	r4, r3
 800a30c:	6838      	ldr	r0, [r7, #0]
 800a30e:	f7ff ff7d 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a312:	4603      	mov	r3, r0
 800a314:	b29b      	uxth	r3, r3
 800a316:	4423      	add	r3, r4
 800a318:	b29b      	uxth	r3, r3
 800a31a:	b21a      	sxth	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	801a      	strh	r2, [r3, #0]
    }
 800a320:	e048      	b.n	800a3b4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0xe4>
                else if (direction == EAST)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	7a1b      	ldrb	r3, [r3, #8]
 800a326:	2b02      	cmp	r3, #2
 800a328:	d144      	bne.n	800a3b4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0xe4>
                    insertedCoord = d.getX() + d.getWidth();
 800a32a:	6838      	ldr	r0, [r7, #0]
 800a32c:	f7ff fc93 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800a330:	4603      	mov	r3, r0
 800a332:	b29c      	uxth	r4, r3
 800a334:	6838      	ldr	r0, [r7, #0]
 800a336:	f7ff ff5c 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a33a:	4603      	mov	r3, r0
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	4423      	add	r3, r4
 800a340:	b29b      	uxth	r3, r3
 800a342:	b21a      	sxth	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	801a      	strh	r2, [r3, #0]
    }
 800a348:	e034      	b.n	800a3b4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0xe4>
            if (direction == SOUTH)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	7a1b      	ldrb	r3, [r3, #8]
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d116      	bne.n	800a380 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0xb0>
                d.setY(d.getY() + newElement->getHeight());
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3330      	adds	r3, #48	; 0x30
 800a358:	681c      	ldr	r4, [r3, #0]
 800a35a:	6838      	ldr	r0, [r7, #0]
 800a35c:	f7ff fc88 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 800a360:	4603      	mov	r3, r0
 800a362:	b29d      	uxth	r5, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff ff4f 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a36e:	4603      	mov	r3, r0
 800a370:	b29b      	uxth	r3, r3
 800a372:	442b      	add	r3, r5
 800a374:	b29b      	uxth	r3, r3
 800a376:	b21b      	sxth	r3, r3
 800a378:	4619      	mov	r1, r3
 800a37a:	6838      	ldr	r0, [r7, #0]
 800a37c:	47a0      	blx	r4
    }
 800a37e:	e019      	b.n	800a3b4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0xe4>
            else if (direction == EAST)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	7a1b      	ldrb	r3, [r3, #8]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d115      	bne.n	800a3b4 <_ZN8touchgfx14AdjustElements12handleInsertERNS_8DrawableE+0xe4>
                d.setX(d.getX() + newElement->getWidth());
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	332c      	adds	r3, #44	; 0x2c
 800a38e:	681c      	ldr	r4, [r3, #0]
 800a390:	6838      	ldr	r0, [r7, #0]
 800a392:	f7ff fc60 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800a396:	4603      	mov	r3, r0
 800a398:	b29d      	uxth	r5, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7ff ff27 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	442b      	add	r3, r5
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	b21b      	sxth	r3, r3
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6838      	ldr	r0, [r7, #0]
 800a3b2:	47a0      	blx	r4
    }
 800a3b4:	bf00      	nop
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bdb0      	pop	{r4, r5, r7, pc}

0800a3bc <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE>:

    void handleRemove(Drawable& d)
 800a3bc:	b5b0      	push	{r4, r5, r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
    {
        if (!newElementPassed)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	789b      	ldrb	r3, [r3, #2]
 800a3ca:	f083 0301 	eor.w	r3, r3, #1
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d008      	beq.n	800a3e6 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x2a>
        {
            if (newElement == &d)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d138      	bne.n	800a450 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x94>
            {
                newElementPassed = true;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	709a      	strb	r2, [r3, #2]
 800a3e4:	e034      	b.n	800a450 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x94>
            }
        }
        else
        {
            if (direction == SOUTH)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	7a1b      	ldrb	r3, [r3, #8]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d116      	bne.n	800a41c <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x60>
            {
                d.setY(d.getY() - newElement->getHeight());
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	3330      	adds	r3, #48	; 0x30
 800a3f4:	681c      	ldr	r4, [r3, #0]
 800a3f6:	6838      	ldr	r0, [r7, #0]
 800a3f8:	f7ff fc3a 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	b29d      	uxth	r5, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	4618      	mov	r0, r3
 800a406:	f7ff ff01 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a40a:	4603      	mov	r3, r0
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	1aeb      	subs	r3, r5, r3
 800a410:	b29b      	uxth	r3, r3
 800a412:	b21b      	sxth	r3, r3
 800a414:	4619      	mov	r1, r3
 800a416:	6838      	ldr	r0, [r7, #0]
 800a418:	47a0      	blx	r4
 800a41a:	e019      	b.n	800a450 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x94>
            }
            else if (direction == EAST)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	7a1b      	ldrb	r3, [r3, #8]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d115      	bne.n	800a450 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x94>
            {
                d.setX(d.getX() - newElement->getWidth());
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	332c      	adds	r3, #44	; 0x2c
 800a42a:	681c      	ldr	r4, [r3, #0]
 800a42c:	6838      	ldr	r0, [r7, #0]
 800a42e:	f7ff fc12 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800a432:	4603      	mov	r3, r0
 800a434:	b29d      	uxth	r5, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff fed9 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a440:	4603      	mov	r3, r0
 800a442:	b29b      	uxth	r3, r3
 800a444:	1aeb      	subs	r3, r5, r3
 800a446:	b29b      	uxth	r3, r3
 800a448:	b21b      	sxth	r3, r3
 800a44a:	4619      	mov	r1, r3
 800a44c:	6838      	ldr	r0, [r7, #0]
 800a44e:	47a0      	blx	r4
            }
        }
        if (newElement != &d)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d034      	beq.n	800a4c4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x108>
        {
            if (direction == SOUTH)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	7a1b      	ldrb	r3, [r3, #8]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d116      	bne.n	800a490 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0xd4>
            {
                if (d.getWidth() > insertedCoord)
 800a462:	6838      	ldr	r0, [r7, #0]
 800a464:	f7ff fec5 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a468:	4603      	mov	r3, r0
 800a46a:	461a      	mov	r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a472:	429a      	cmp	r2, r3
 800a474:	bfcc      	ite	gt
 800a476:	2301      	movgt	r3, #1
 800a478:	2300      	movle	r3, #0
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d021      	beq.n	800a4c4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x108>
                {
                    insertedCoord = d.getWidth();
 800a480:	6838      	ldr	r0, [r7, #0]
 800a482:	f7ff feb6 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a486:	4603      	mov	r3, r0
 800a488:	461a      	mov	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	801a      	strh	r2, [r3, #0]
                {
                    insertedCoord = d.getHeight();
                }
            }
        }
    }
 800a48e:	e019      	b.n	800a4c4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x108>
            else if (direction == EAST)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	7a1b      	ldrb	r3, [r3, #8]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d115      	bne.n	800a4c4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x108>
                if (d.getHeight() > insertedCoord)
 800a498:	6838      	ldr	r0, [r7, #0]
 800a49a:	f7ff feb7 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	bfcc      	ite	gt
 800a4ac:	2301      	movgt	r3, #1
 800a4ae:	2300      	movle	r3, #0
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d006      	beq.n	800a4c4 <_ZN8touchgfx14AdjustElements12handleRemoveERNS_8DrawableE+0x108>
                    insertedCoord = d.getHeight();
 800a4b6:	6838      	ldr	r0, [r7, #0]
 800a4b8:	f7ff fea8 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	801a      	strh	r2, [r3, #0]
    }
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bdb0      	pop	{r4, r5, r7, pc}

0800a4cc <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>:
    Drawable* newElement;
    Direction direction;
}; //lint !e1712

void ListLayout::internalAddElementAt(Drawable& d, int16_t coord)
{
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	60b9      	str	r1, [r7, #8]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	80fb      	strh	r3, [r7, #6]
    switch (direction)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d002      	beq.n	800a4ea <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x1e>
 800a4e4:	2b02      	cmp	r3, #2
 800a4e6:	d03d      	beq.n	800a564 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x98>
        offset += d.getWidth();
        break;
    case NORTH:
    case WEST:
    default:
        break;
 800a4e8:	e079      	b.n	800a5de <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x112>
        if (rect.width < d.getWidth())
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 800a4f0:	68b8      	ldr	r0, [r7, #8]
 800a4f2:	f7ff fe7e 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	429c      	cmp	r4, r3
 800a4fa:	bfb4      	ite	lt
 800a4fc:	2301      	movlt	r3, #1
 800a4fe:	2300      	movge	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d006      	beq.n	800a514 <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x48>
            rect.width = d.getWidth();
 800a506:	68b8      	ldr	r0, [r7, #8]
 800a508:	f7ff fe73 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a50c:	4603      	mov	r3, r0
 800a50e:	461a      	mov	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	811a      	strh	r2, [r3, #8]
        rect.height += d.getHeight();
 800a514:	68b8      	ldr	r0, [r7, #8]
 800a516:	f7ff fe79 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a51a:	4603      	mov	r3, r0
 800a51c:	4619      	mov	r1, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a524:	b29a      	uxth	r2, r3
 800a526:	b28b      	uxth	r3, r1
 800a528:	4413      	add	r3, r2
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	b21a      	sxth	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	815a      	strh	r2, [r3, #10]
        d.setXY(0, coord);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	3334      	adds	r3, #52	; 0x34
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a53e:	2100      	movs	r1, #0
 800a540:	68b8      	ldr	r0, [r7, #8]
 800a542:	4798      	blx	r3
        offset += d.getHeight();
 800a544:	68b8      	ldr	r0, [r7, #8]
 800a546:	f7ff fe61 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a54a:	4603      	mov	r3, r0
 800a54c:	4619      	mov	r1, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a554:	b29a      	uxth	r2, r3
 800a556:	b28b      	uxth	r3, r1
 800a558:	4413      	add	r3, r2
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	b21a      	sxth	r2, r3
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	85da      	strh	r2, [r3, #46]	; 0x2e
        break;
 800a562:	e03c      	b.n	800a5de <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0x112>
        if (rect.height < d.getHeight())
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f9b3 400a 	ldrsh.w	r4, [r3, #10]
 800a56a:	68b8      	ldr	r0, [r7, #8]
 800a56c:	f7ff fe4e 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a570:	4603      	mov	r3, r0
 800a572:	429c      	cmp	r4, r3
 800a574:	bfb4      	ite	lt
 800a576:	2301      	movlt	r3, #1
 800a578:	2300      	movge	r3, #0
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d006      	beq.n	800a58e <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs+0xc2>
            rect.height = d.getHeight();
 800a580:	68b8      	ldr	r0, [r7, #8]
 800a582:	f7ff fe43 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a586:	4603      	mov	r3, r0
 800a588:	461a      	mov	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	815a      	strh	r2, [r3, #10]
        rect.width += d.getWidth();
 800a58e:	68b8      	ldr	r0, [r7, #8]
 800a590:	f7ff fe2f 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a594:	4603      	mov	r3, r0
 800a596:	4619      	mov	r1, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	b28b      	uxth	r3, r1
 800a5a2:	4413      	add	r3, r2
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	b21a      	sxth	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	811a      	strh	r2, [r3, #8]
        d.setXY(coord, 0);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3334      	adds	r3, #52	; 0x34
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	68b8      	ldr	r0, [r7, #8]
 800a5bc:	4798      	blx	r3
        offset += d.getWidth();
 800a5be:	68b8      	ldr	r0, [r7, #8]
 800a5c0:	f7ff fe17 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	b28b      	uxth	r3, r1
 800a5d2:	4413      	add	r3, r2
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b21a      	sxth	r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	85da      	strh	r2, [r3, #46]	; 0x2e
        break;
 800a5dc:	bf00      	nop
    }
}
 800a5de:	bf00      	nop
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd90      	pop	{r4, r7, pc}

0800a5e6 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>:

void ListLayout::internalAddElement(Drawable& d)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b082      	sub	sp, #8
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	6039      	str	r1, [r7, #0]
    internalAddElementAt(d, offset);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff ff66 	bl	800a4cc <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
}
 800a600:	bf00      	nop
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>:

void ListLayout::internalRemoveElement(Drawable& d, int16_t coord)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	80fb      	strh	r3, [r7, #6]
    switch (direction)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d002      	beq.n	800a626 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x1e>
 800a620:	2b02      	cmp	r3, #2
 800a622:	d037      	beq.n	800a694 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x8c>
        offset -= d.getWidth();
        break;
    case NORTH:
    case WEST:
    default:
        break;
 800a624:	e06d      	b.n	800a702 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0xfa>
        if (rect.width > coord)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a62c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a630:	429a      	cmp	r2, r3
 800a632:	da02      	bge.n	800a63a <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0x32>
            rect.width = coord;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	88fa      	ldrh	r2, [r7, #6]
 800a638:	811a      	strh	r2, [r3, #8]
        rect.height -= d.getHeight();
 800a63a:	68b8      	ldr	r0, [r7, #8]
 800a63c:	f7ff fde6 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a640:	4603      	mov	r3, r0
 800a642:	4619      	mov	r1, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	b28b      	uxth	r3, r1
 800a64e:	1ad3      	subs	r3, r2, r3
 800a650:	b29b      	uxth	r3, r3
 800a652:	b21a      	sxth	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	815a      	strh	r2, [r3, #10]
        d.setX(0);
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	332c      	adds	r3, #44	; 0x2c
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2100      	movs	r1, #0
 800a662:	68b8      	ldr	r0, [r7, #8]
 800a664:	4798      	blx	r3
        d.setY(0);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3330      	adds	r3, #48	; 0x30
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2100      	movs	r1, #0
 800a670:	68b8      	ldr	r0, [r7, #8]
 800a672:	4798      	blx	r3
        offset -= d.getHeight();
 800a674:	68b8      	ldr	r0, [r7, #8]
 800a676:	f7ff fdc9 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800a67a:	4603      	mov	r3, r0
 800a67c:	4619      	mov	r1, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a684:	b29a      	uxth	r2, r3
 800a686:	b28b      	uxth	r3, r1
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	b21a      	sxth	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	85da      	strh	r2, [r3, #46]	; 0x2e
        break;
 800a692:	e036      	b.n	800a702 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0xfa>
        if (rect.height > coord)
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800a69a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	da02      	bge.n	800a6a8 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs+0xa0>
            rect.height = coord;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	88fa      	ldrh	r2, [r7, #6]
 800a6a6:	815a      	strh	r2, [r3, #10]
        rect.width -= d.getWidth();
 800a6a8:	68b8      	ldr	r0, [r7, #8]
 800a6aa:	f7ff fda2 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	b28b      	uxth	r3, r1
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	b21a      	sxth	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	811a      	strh	r2, [r3, #8]
        d.setX(0);
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	332c      	adds	r3, #44	; 0x2c
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	68b8      	ldr	r0, [r7, #8]
 800a6d2:	4798      	blx	r3
        d.setY(0);
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3330      	adds	r3, #48	; 0x30
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2100      	movs	r1, #0
 800a6de:	68b8      	ldr	r0, [r7, #8]
 800a6e0:	4798      	blx	r3
        offset -= d.getWidth();
 800a6e2:	68b8      	ldr	r0, [r7, #8]
 800a6e4:	f7ff fd85 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	b28b      	uxth	r3, r1
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	b21a      	sxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	85da      	strh	r2, [r3, #46]	; 0x2e
        break;
 800a700:	bf00      	nop
    }
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE>:

void ListLayout::setDirection(const Direction d)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	460b      	mov	r3, r1
 800a716:	70fb      	strb	r3, [r7, #3]
    assert((d == SOUTH || d == EAST) && "Chosen direction not supported");
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d008      	beq.n	800a730 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x24>
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	2b02      	cmp	r3, #2
 800a722:	d005      	beq.n	800a730 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0x24>
 800a724:	4b26      	ldr	r3, [pc, #152]	; (800a7c0 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0xb4>)
 800a726:	4a27      	ldr	r2, [pc, #156]	; (800a7c4 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0xb8>)
 800a728:	21af      	movs	r1, #175	; 0xaf
 800a72a:	4827      	ldr	r0, [pc, #156]	; (800a7c8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0xbc>)
 800a72c:	f016 f966 	bl	80209fc <__assert_func>
    if (direction != d)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a736:	78fa      	ldrb	r2, [r7, #3]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d03d      	beq.n	800a7b8 <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0xac>
    {
        direction = d;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	78fa      	ldrb	r2, [r7, #3]
 800a740:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        offset = 0;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	85da      	strh	r2, [r3, #46]	; 0x2e
        setWidth(0);
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3338      	adds	r3, #56	; 0x38
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2100      	movs	r1, #0
 800a756:	4610      	mov	r0, r2
 800a758:	4798      	blx	r3
        setHeight(0);
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	333c      	adds	r3, #60	; 0x3c
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2100      	movs	r1, #0
 800a766:	4610      	mov	r0, r2
 800a768:	4798      	blx	r3
        Callback<ListLayout, Drawable&> function(this, &ListLayout::internalAddElement);
 800a76a:	4b18      	ldr	r3, [pc, #96]	; (800a7cc <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0xc0>)
 800a76c:	61bb      	str	r3, [r7, #24]
 800a76e:	2300      	movs	r3, #0
 800a770:	61fb      	str	r3, [r7, #28]
 800a772:	f107 0008 	add.w	r0, r7, #8
 800a776:	f107 0318 	add.w	r3, r7, #24
 800a77a:	cb0c      	ldmia	r3, {r2, r3}
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	f000 f925 	bl	800a9cc <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvEC1EPS1_MS1_FvS3_E>
        forEachChild(&function);
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	337c      	adds	r3, #124	; 0x7c
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f107 0108 	add.w	r1, r7, #8
 800a790:	4610      	mov	r0, r2
 800a792:	4798      	blx	r3
        if (parent)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d008      	beq.n	800a7ae <_ZN8touchgfx10ListLayout12setDirectionENS_9DirectionE+0xa2>
        {
            parent->childGeometryChanged();
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	695a      	ldr	r2, [r3, #20]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	695b      	ldr	r3, [r3, #20]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3340      	adds	r3, #64	; 0x40
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4798      	blx	r3
        Callback<ListLayout, Drawable&> function(this, &ListLayout::internalAddElement);
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f98c 	bl	800aad0 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>
        }
    }
}
 800a7b8:	bf00      	nop
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	08021f14 	.word	0x08021f14
 800a7c4:	08022f18 	.word	0x08022f18
 800a7c8:	08021f54 	.word	0x08021f54
 800a7cc:	0800a5e7 	.word	0x0800a5e7

0800a7d0 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>:

void ListLayout::add(Drawable& d)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
    internalAddElement(d);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7ff ff02 	bl	800a5e6 <_ZN8touchgfx10ListLayout18internalAddElementERNS_8DrawableE>
    Container::add(d);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6839      	ldr	r1, [r7, #0]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7ff fa72 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    if (parent)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d008      	beq.n	800a806 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE+0x36>
    {
        parent->childGeometryChanged();
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	695a      	ldr	r2, [r3, #20]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3340      	adds	r3, #64	; 0x40
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4610      	mov	r0, r2
 800a804:	4798      	blx	r3
    }
}
 800a806:	bf00      	nop
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <_ZN8touchgfx10ListLayout9removeAllEv>:

void ListLayout::removeAll()
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b082      	sub	sp, #8
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
    offset = 0;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	85da      	strh	r2, [r3, #46]	; 0x2e
    setWidth(0);
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3338      	adds	r3, #56	; 0x38
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2100      	movs	r1, #0
 800a828:	4610      	mov	r0, r2
 800a82a:	4798      	blx	r3
    setHeight(0);
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	333c      	adds	r3, #60	; 0x3c
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	2100      	movs	r1, #0
 800a838:	4610      	mov	r0, r2
 800a83a:	4798      	blx	r3
    Container::removeAll();
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff fadf 	bl	8009e02 <_ZN8touchgfx9Container9removeAllEv>
    if (parent)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	695b      	ldr	r3, [r3, #20]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d008      	beq.n	800a85e <_ZN8touchgfx10ListLayout9removeAllEv+0x50>
    {
        parent->childGeometryChanged();
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	695a      	ldr	r2, [r3, #20]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3340      	adds	r3, #64	; 0x40
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4610      	mov	r0, r2
 800a85c:	4798      	blx	r3
    }
}
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
	...

0800a868 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_>:

void ListLayout::insert(Drawable* previousElement, Drawable& d)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08e      	sub	sp, #56	; 0x38
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d107      	bne.n	800a88c <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x24>
    {
        // List is empty, just add the new entry
        add(d);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	3364      	adds	r3, #100	; 0x64
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	4798      	blx	r3
 800a88a:	e03d      	b.n	800a908 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0xa0>
        return;
    }
    Container::insert(previousElement, d);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	68b9      	ldr	r1, [r7, #8]
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fc0f 	bl	800a0b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>
    AdjustElements tmp(&d, direction);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a89e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8a2:	6879      	ldr	r1, [r7, #4]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fcf9 	bl	800a29c <_ZN8touchgfx14AdjustElementsC1EPNS_8DrawableENS_9DirectionE>
    Callback<AdjustElements, Drawable&> function(&tmp, &AdjustElements::handleInsert);
 800a8aa:	4b19      	ldr	r3, [pc, #100]	; (800a910 <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0xa8>)
 800a8ac:	633b      	str	r3, [r7, #48]	; 0x30
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a8b6:	f107 0014 	add.w	r0, r7, #20
 800a8ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8be:	cb0c      	ldmia	r3, {r2, r3}
 800a8c0:	f000 f8a4 	bl	800aa0c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvEC1EPS1_MS1_FvS3_E>
    forEachChild(&function);
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	337c      	adds	r3, #124	; 0x7c
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f107 0114 	add.w	r1, r7, #20
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	4798      	blx	r3
    internalAddElementAt(d, tmp.insertedCoord);
 800a8d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800a8da:	461a      	mov	r2, r3
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f7ff fdf4 	bl	800a4cc <_ZN8touchgfx10ListLayout20internalAddElementAtERNS_8DrawableEs>
    if (parent)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d008      	beq.n	800a8fe <_ZN8touchgfx10ListLayout6insertEPNS_8DrawableERS1_+0x96>
    {
        parent->childGeometryChanged();
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	695a      	ldr	r2, [r3, #20]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	695b      	ldr	r3, [r3, #20]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3340      	adds	r3, #64	; 0x40
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	4798      	blx	r3
    Callback<AdjustElements, Drawable&> function(&tmp, &AdjustElements::handleInsert);
 800a8fe:	f107 0314 	add.w	r3, r7, #20
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f8c2 	bl	800aa8c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>
    }
}
 800a908:	3738      	adds	r7, #56	; 0x38
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	0800a2d1 	.word	0x0800a2d1

0800a914 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>:

void ListLayout::remove(Drawable& d)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08c      	sub	sp, #48	; 0x30
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
    AdjustElements tmp(&d, direction);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a924:	f107 031c 	add.w	r3, r7, #28
 800a928:	6839      	ldr	r1, [r7, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fcb6 	bl	800a29c <_ZN8touchgfx14AdjustElementsC1EPNS_8DrawableENS_9DirectionE>
    Callback<AdjustElements, Drawable&> function(&tmp, &AdjustElements::handleRemove);
 800a930:	4b1d      	ldr	r3, [pc, #116]	; (800a9a8 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x94>)
 800a932:	62bb      	str	r3, [r7, #40]	; 0x28
 800a934:	2300      	movs	r3, #0
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a938:	f107 011c 	add.w	r1, r7, #28
 800a93c:	f107 000c 	add.w	r0, r7, #12
 800a940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a944:	cb0c      	ldmia	r3, {r2, r3}
 800a946:	f000 f861 	bl	800aa0c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvEC1EPS1_MS1_FvS3_E>
    forEachChild(&function);
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	337c      	adds	r3, #124	; 0x7c
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f107 010c 	add.w	r1, r7, #12
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
    if (tmp.newElementPassed)
 800a95c:	7fbb      	ldrb	r3, [r7, #30]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00b      	beq.n	800a97a <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x66>
    {
        internalRemoveElement(d, tmp.insertedCoord);
 800a962:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800a966:	461a      	mov	r2, r3
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7ff fe4c 	bl	800a608 <_ZN8touchgfx10ListLayout21internalRemoveElementERNS_8DrawableEs>
        Container::remove(d);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff fa03 	bl	8009d80 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
    }
    if (parent)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d008      	beq.n	800a994 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE+0x80>
    {
        parent->childGeometryChanged();
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	695a      	ldr	r2, [r3, #20]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3340      	adds	r3, #64	; 0x40
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4610      	mov	r0, r2
 800a992:	4798      	blx	r3
    Callback<AdjustElements, Drawable&> function(&tmp, &AdjustElements::handleRemove);
 800a994:	f107 030c 	add.w	r3, r7, #12
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 f877 	bl	800aa8c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>
    }
}
 800a99e:	bf00      	nop
 800a9a0:	3730      	adds	r7, #48	; 0x30
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	0800a3bd 	.word	0x0800a3bd

0800a9ac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	4a04      	ldr	r2, [pc, #16]	; (800a9c8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	08022e70 	.word	0x08022e70

0800a9cc <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvEC1EPS1_MS1_FvS3_E>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_1 Address of member function. This is the version where function
     *                       takes one argument.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff ffe4 	bl	800a9ac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800a9e4:	4a08      	ldr	r2, [pc, #32]	; (800aa08 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvEC1EPS1_MS1_FvS3_E+0x3c>)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	3308      	adds	r3, #8
 800a9f4:	463a      	mov	r2, r7
 800a9f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9fa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	08022e58 	.word	0x08022e58

0800aa0c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvEC1EPS1_MS1_FvS3_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	4639      	mov	r1, r7
 800aa18:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff ffc4 	bl	800a9ac <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 800aa24:	4a08      	ldr	r2, [pc, #32]	; (800aa48 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvEC1EPS1_MS1_FvS3_E+0x3c>)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	3308      	adds	r3, #8
 800aa34:	463a      	mov	r2, r7
 800aa36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa3a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	08022e40 	.word	0x08022e40

0800aa4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
    }
 800aa54:	4a04      	ldr	r2, [pc, #16]	; (800aa68 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr
 800aa68:	08022e70 	.word	0x08022e70

0800aa6c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
    }
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f7ff ffe9 	bl	800aa4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800aa7a:	2104      	movs	r1, #4
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f015 ffa0 	bl	80209c2 <_ZdlPvj>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	4a05      	ldr	r2, [pc, #20]	; (800aaac <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev+0x20>)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff ffd5 	bl	800aa4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	08022e40 	.word	0x08022e40

0800aab0 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED0Ev>:
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f7ff ffe7 	bl	800aa8c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvED1Ev>
 800aabe:	2110      	movs	r1, #16
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f015 ff7e 	bl	80209c2 <_ZdlPvj>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4618      	mov	r0, r3
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>:
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	4a05      	ldr	r2, [pc, #20]	; (800aaf0 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev+0x20>)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	601a      	str	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff ffb3 	bl	800aa4c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	08022e58 	.word	0x08022e58

0800aaf4 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED0Ev>:
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff ffe7 	bl	800aad0 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvED1Ev>
 800ab02:	2110      	movs	r1, #16
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f015 ff5c 	bl	80209c2 <_ZdlPvj>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_>:
     *
     * @param t1 This value will be passed as the first argument in the function call.
     *
     * @see isValid()
     */
    virtual void execute(T1 t1)
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
    {
        (pobject->*pmemfun_1)(t1);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	68d2      	ldr	r2, [r2, #12]
 800ab26:	1052      	asrs	r2, r2, #1
 800ab28:	1898      	adds	r0, r3, r2
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d102      	bne.n	800ab3c <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_+0x28>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	e00a      	b.n	800ab52 <_ZN8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7executeES3_+0x3e>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	68d2      	ldr	r2, [r2, #12]
 800ab44:	1052      	asrs	r2, r2, #1
 800ab46:	4413      	add	r3, r2
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6892      	ldr	r2, [r2, #8]
 800ab4e:	4413      	add	r3, r2
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	4798      	blx	r3
    }
 800ab56:	bf00      	nop
 800ab58:	3708      	adds	r7, #8
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv>:
     *
     *        Query if this object is valid.
     *
     * @return true if valid, false if not.
     */
    virtual bool isValid() const
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_1 != 0);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d010      	beq.n	800ab90 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x32>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d107      	bne.n	800ab86 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x28>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x28>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x2a>
 800ab86:	2300      	movs	r3, #0
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d001      	beq.n	800ab90 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x32>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e000      	b.n	800ab92 <_ZNK8touchgfx8CallbackINS_14AdjustElementsERNS_8DrawableEvvE7isValidEv+0x34>
 800ab90:	2300      	movs	r3, #0
    }
 800ab92:	4618      	mov	r0, r3
 800ab94:	370c      	adds	r7, #12
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_>:
    virtual void execute(T1 t1)
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	68d2      	ldr	r2, [r2, #12]
 800abb0:	1052      	asrs	r2, r2, #1
 800abb2:	1898      	adds	r0, r3, r2
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_+0x28>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	e00a      	b.n	800abdc <_ZN8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7executeES3_+0x3e>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	68d2      	ldr	r2, [r2, #12]
 800abce:	1052      	asrs	r2, r2, #1
 800abd0:	4413      	add	r3, r2
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	687a      	ldr	r2, [r7, #4]
 800abd6:	6892      	ldr	r2, [r2, #8]
 800abd8:	4413      	add	r3, r2
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	4798      	blx	r3
    }
 800abe0:	bf00      	nop
 800abe2:	3708      	adds	r7, #8
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d010      	beq.n	800ac1a <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x32>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d107      	bne.n	800ac10 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x28>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d101      	bne.n	800ac10 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x28>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e000      	b.n	800ac12 <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x2a>
 800ac10:	2300      	movs	r3, #0
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d001      	beq.n	800ac1a <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x32>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e000      	b.n	800ac1c <_ZNK8touchgfx8CallbackINS_10ListLayoutERNS_8DrawableEvvE7isValidEv+0x34>
 800ac1a:	2300      	movs	r3, #0
    }
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
        color = col;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	601a      	str	r2, [r3, #0]
    }
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	370c      	adds	r7, #12
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
	...

0800ac48 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af02      	add	r7, sp, #8
 800ac4e:	6078      	str	r0, [r7, #4]
        visible(true)
 800ac50:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	1d18      	adds	r0, r3, #4
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9300      	str	r3, [sp, #0]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	2200      	movs	r2, #0
 800ac62:	2100      	movs	r1, #0
 800ac64:	f7fe fe0c 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	330c      	adds	r3, #12
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7fe fbc7 	bl	8009400 <_ZN8touchgfx4RectC1Ev>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	615a      	str	r2, [r3, #20]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	619a      	str	r2, [r3, #24]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	61da      	str	r2, [r3, #28]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	4618      	mov	r0, r3
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	08025104 	.word	0x08025104

0800aca4 <_ZN8touchgfx8Drawable10setVisibleEb>:
    void setVisible(bool vis)
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	70fb      	strb	r3, [r7, #3]
        visible = vis;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	78fa      	ldrb	r2, [r7, #3]
 800acb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	78fa      	ldrb	r2, [r7, #3]
 800acd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	f7ff ffaa 	bl	800ac48 <_ZN8touchgfx8DrawableC1Ev>
 800acf4:	4a05      	ldr	r2, [pc, #20]	; (800ad0c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	08022d74 	.word	0x08022d74

0800ad10 <_ZN8touchgfx6WidgetC1Ev>:
    Widget() : Drawable() { }
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff ff94 	bl	800ac48 <_ZN8touchgfx8DrawableC1Ev>
 800ad20:	4a03      	ldr	r2, [pc, #12]	; (800ad30 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	08022d08 	.word	0x08022d08

0800ad34 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff ffe6 	bl	800ad10 <_ZN8touchgfx6WidgetC1Ev>
 800ad44:	4a0a      	ldr	r2, [pc, #40]	; (800ad70 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	601a      	str	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	22ff      	movs	r2, #255	; 0xff
 800ad4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3328      	adds	r3, #40	; 0x28
 800ad56:	2100      	movs	r1, #0
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff ff65 	bl	800ac28 <_ZN8touchgfx9colortypeC1Em>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	08023938 	.word	0x08023938

0800ad74 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	4a05      	ldr	r2, [pc, #20]	; (800ad94 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fe fca7 	bl	80096d8 <_ZN8touchgfx6WidgetD1Ev>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	08023938 	.word	0x08023938

0800ad98 <_ZN8touchgfx3BoxD0Ev>:
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff ffe7 	bl	800ad74 <_ZN8touchgfx3BoxD1Ev>
 800ada6:	2130      	movs	r1, #48	; 0x30
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f015 fe0a 	bl	80209c2 <_ZdlPvj>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4618      	mov	r0, r3
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	683a      	ldr	r2, [r7, #0]
 800adc6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <_ZNK8touchgfx3Box8getColorEv>:
     *
     *        Gets the current color of the Box.
     *
     * @return The current color.
     */
    inline colortype getColor() const
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
    {
        return color;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <_ZN8touchgfx3Box8setAlphaEh>:
     *
     *        Sets the alpha value for this Box.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    void setAlpha(uint8_t alpha)
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	78fa      	ldrb	r2, [r7, #3]
 800adfc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <_ZNK8touchgfx3Box8getAlphaEv>:
     *
     * @brief Returns the current alpha value.
     *
     * @return Gets the current alpha value of the Box.
     */
    inline uint8_t getAlpha() const
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
    }
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	370c      	adds	r7, #12
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
	...

0800ae28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7ff ff6b 	bl	800ad10 <_ZN8touchgfx6WidgetC1Ev>
 800ae3a:	4a0b      	ldr	r2, [pc, #44]	; (800ae68 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	3326      	adds	r3, #38	; 0x26
 800ae44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fe faf0 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	22ff      	movs	r2, #255	; 0xff
 800ae52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        setBitmap(bmp);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f005 f84b 	bl	800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	08023af8 	.word	0x08023af8

0800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
     * @param green Value of the green part (0-255).
     * @param blue  Value of the blue part (0-255).
     *
     * @return The color representation depending on LCD color format.
     */
    static colortype getColorFrom24BitRGB(uint8_t red, uint8_t green, uint8_t blue)
 800ae6c:	b590      	push	{r4, r7, lr}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	71fb      	strb	r3, [r7, #7]
 800ae76:	460b      	mov	r3, r1
 800ae78:	71bb      	strb	r3, [r7, #6]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	717b      	strb	r3, [r7, #5]
    {
        assert(HAL::getInstance() && "Cannot set color before HAL is initialized");
 800ae7e:	f7fe fcd7 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d105      	bne.n	800ae94 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x28>
 800ae88:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>)
 800ae8a:	4a0b      	ldr	r2, [pc, #44]	; (800aeb8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x4c>)
 800ae8c:	2138      	movs	r1, #56	; 0x38
 800ae8e:	480b      	ldr	r0, [pc, #44]	; (800aebc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x50>)
 800ae90:	f015 fdb4 	bl	80209fc <__assert_func>
 800ae94:	bf00      	nop
        return HAL::lcd().getColorFrom24BitRGB(red, green, blue);
 800ae96:	f7fe fcd7 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800ae9a:	6803      	ldr	r3, [r0, #0]
 800ae9c:	332c      	adds	r3, #44	; 0x2c
 800ae9e:	681c      	ldr	r4, [r3, #0]
 800aea0:	797b      	ldrb	r3, [r7, #5]
 800aea2:	79ba      	ldrb	r2, [r7, #6]
 800aea4:	79f9      	ldrb	r1, [r7, #7]
 800aea6:	47a0      	blx	r4
 800aea8:	4603      	mov	r3, r0
    }
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd90      	pop	{r4, r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	08021fac 	.word	0x08021fac
 800aeb8:	08022f60 	.word	0x08022f60
 800aebc:	08021ff0 	.word	0x08021ff0

0800aec0 <_ZN8touchgfx5EventC1Ev>:
        EVENT_CLICK,  ///< A click
        EVENT_DRAG,   ///< A drag
        EVENT_GESTURE ///< A gesture
    } EventType;

    Event() { }
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	4a04      	ldr	r2, [pc, #16]	; (800aedc <_ZN8touchgfx5EventC1Ev+0x1c>)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4618      	mov	r0, r3
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	08023084 	.word	0x08023084

0800aee0 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	4a04      	ldr	r2, [pc, #16]	; (800aefc <_ZN8touchgfx5EventD1Ev+0x1c>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr
 800aefc:	08023084 	.word	0x08023084

0800af00 <_ZN8touchgfx5EventD0Ev>:
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7ff ffe9 	bl	800aee0 <_ZN8touchgfx5EventD1Ev>
 800af0e:	2104      	movs	r1, #4
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f015 fd56 	bl	80209c2 <_ZdlPvj>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <_ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss>:
     * @param y     The y coordinate of the click event.
     * @param force The force of the click. On touch displays this usually means how hard the
     *              user pressed on the display. On the windows platform, this will always be
     *              zero.
     */
    ClickEvent(ClickEventType type, int16_t x, int16_t y, int16_t force = 0) :
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	4608      	mov	r0, r1
 800af2a:	4611      	mov	r1, r2
 800af2c:	461a      	mov	r2, r3
 800af2e:	4603      	mov	r3, r0
 800af30:	72fb      	strb	r3, [r7, #11]
 800af32:	460b      	mov	r3, r1
 800af34:	813b      	strh	r3, [r7, #8]
 800af36:	4613      	mov	r3, r2
 800af38:	80fb      	strh	r3, [r7, #6]
        _type(type), _x(x), _y(y), _force(force) { }
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff ffbf 	bl	800aec0 <_ZN8touchgfx5EventC1Ev>
 800af42:	4a0a      	ldr	r2, [pc, #40]	; (800af6c <_ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss+0x4c>)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	7afa      	ldrb	r2, [r7, #11]
 800af4c:	711a      	strb	r2, [r3, #4]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	893a      	ldrh	r2, [r7, #8]
 800af52:	80da      	strh	r2, [r3, #6]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	88fa      	ldrh	r2, [r7, #6]
 800af58:	811a      	strh	r2, [r3, #8]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	8b3a      	ldrh	r2, [r7, #24]
 800af5e:	815a      	strh	r2, [r3, #10]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	08023070 	.word	0x08023070

0800af70 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	4a05      	ldr	r2, [pc, #20]	; (800af90 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff ffad 	bl	800aee0 <_ZN8touchgfx5EventD1Ev>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	08023070 	.word	0x08023070

0800af94 <_ZN8touchgfx10ClickEventD0Ev>:
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7ff ffe7 	bl	800af70 <_ZN8touchgfx10ClickEventD1Ev>
 800afa2:	210c      	movs	r1, #12
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f015 fd0c 	bl	80209c2 <_ZdlPvj>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>:
     *
     *        Gets the x coordinate of this event.
     *
     * @return The x coordinate of this event.
     */
    int16_t getX() const
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
    {
        return _x;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <_ZNK8touchgfx10ClickEvent4getYEv>:
     *
     *        Gets the y coordinate of this event.
     *
     * @return The y coordinate of this event.
     */
    int16_t getY() const
 800afce:	b480      	push	{r7}
 800afd0:	b083      	sub	sp, #12
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
    {
        return _y;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800afdc:	4618      	mov	r0, r3
 800afde:	370c      	adds	r7, #12
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	791b      	ldrb	r3, [r3, #4]
    }
 800aff4:	4618      	mov	r0, r3
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800b008:	2300      	movs	r3, #0
    }
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
	...

0800b018 <_ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss>:
     * @param oldX The x coordinate of the drag start position (dragged from)
     * @param oldY The y coordinate of the drag start position (dragged from)
     * @param newX The x coordinate of the new position (dragged to)
     * @param newY The y coordinate of the new position (dragged to)
     */
    DragEvent(DragEventType type, int16_t oldX, int16_t oldY, int16_t newX, int16_t newY) :
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	4608      	mov	r0, r1
 800b022:	4611      	mov	r1, r2
 800b024:	461a      	mov	r2, r3
 800b026:	4603      	mov	r3, r0
 800b028:	72fb      	strb	r3, [r7, #11]
 800b02a:	460b      	mov	r3, r1
 800b02c:	813b      	strh	r3, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	80fb      	strh	r3, [r7, #6]
        _type(type), _oldX(oldX), _oldY(oldY), _newX(newX), _newY(newY) { }
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff ff43 	bl	800aec0 <_ZN8touchgfx5EventC1Ev>
 800b03a:	4a0b      	ldr	r2, [pc, #44]	; (800b068 <_ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss+0x50>)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	7afa      	ldrb	r2, [r7, #11]
 800b044:	711a      	strb	r2, [r3, #4]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	893a      	ldrh	r2, [r7, #8]
 800b04a:	80da      	strh	r2, [r3, #6]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	88fa      	ldrh	r2, [r7, #6]
 800b050:	811a      	strh	r2, [r3, #8]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	8b3a      	ldrh	r2, [r7, #24]
 800b056:	815a      	strh	r2, [r3, #10]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	8bba      	ldrh	r2, [r7, #28]
 800b05c:	819a      	strh	r2, [r3, #12]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	0802305c 	.word	0x0802305c

0800b06c <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	4a05      	ldr	r2, [pc, #20]	; (800b08c <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff ff2f 	bl	800aee0 <_ZN8touchgfx5EventD1Ev>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4618      	mov	r0, r3
 800b086:	3708      	adds	r7, #8
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	0802305c 	.word	0x0802305c

0800b090 <_ZN8touchgfx9DragEventD0Ev>:
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7ff ffe7 	bl	800b06c <_ZN8touchgfx9DragEventD1Ev>
 800b09e:	2110      	movs	r1, #16
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f015 fc8e 	bl	80209c2 <_ZdlPvj>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <_ZNK8touchgfx9DragEvent7getOldXEv>:
     *
     *        Gets the x coordinate where the drag operation was started (dragged from).
     *
     * @return The x coordinate where the drag operation was started (dragged from).
     */
    int16_t getOldX() const
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
    {
        return _oldX;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <_ZNK8touchgfx9DragEvent7getOldYEv>:
     *
     *        Gets the y coordinate where the drag operation was started (dragged from).
     *
     * @return The y coordinate where the drag operation was started (dragged from).
     */
    int16_t getOldY() const
 800b0ca:	b480      	push	{r7}
 800b0cc:	b083      	sub	sp, #12
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
    {
        return _oldY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800b0d8:	4618      	mov	r0, r3
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <_ZNK8touchgfx9DragEvent7getNewXEv>:
     *
     *        Gets the new x coordinate (dragged to).
     *
     * @return The new x coordinate (dragged to).
     */
    int16_t getNewX() const
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
    {
        return _newX;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <_ZNK8touchgfx9DragEvent7getNewYEv>:
     *
     *        Gets the new x coordinate (dragged to).
     *
     * @return The new y coordinate (dragged to).
     */
    int16_t getNewY() const
 800b0fe:	b480      	push	{r7}
 800b100:	b083      	sub	sp, #12
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
    {
        return _newY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    }
 800b10c:	4618      	mov	r0, r3
 800b10e:	370c      	adds	r7, #12
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <_ZNK8touchgfx9DragEvent9getDeltaXEv>:
     *
     *        Gets the distance in x coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaX() const
 800b118:	b480      	push	{r7}
 800b11a:	b083      	sub	sp, #12
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
    {
        return _newX - _oldX;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b126:	b29a      	uxth	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b12e:	b29b      	uxth	r3, r3
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	b29b      	uxth	r3, r3
 800b134:	b21b      	sxth	r3, r3
    }
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <_ZNK8touchgfx9DragEvent9getDeltaYEv>:
     *
     *        Gets the distance in y coordinates (how long was the drag).
     *
     * @return The distance of this drag event.
     */
    int16_t getDeltaY() const
 800b142:	b480      	push	{r7}
 800b144:	b083      	sub	sp, #12
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
    {
        return _newY - _oldY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b150:	b29a      	uxth	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b158:	b29b      	uxth	r3, r3
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	b21b      	sxth	r3, r3
    }
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800b174:	2301      	movs	r3, #1
    }
 800b176:	4618      	mov	r0, r3
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <_ZNK8touchgfx12GestureEvent11getVelocityEv>:
     *
     *        Gets the velocity of this gesture event.
     *
     * @return The velocity of this gesture event.
     */
    int16_t getVelocity() const
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
    {
        return velocity;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800b190:	4618      	mov	r0, r3
 800b192:	370c      	adds	r7, #12
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr

0800b19c <_ZNK8touchgfx12GestureEvent7getTypeEv>:
     *
     *        Gets the type of this gesture event.
     *
     * @return The type of this gesture event.
     */
    GestureType getType() const
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
    {
        return type;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	791b      	ldrb	r3, [r3, #4]
    }
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <_ZN8touchgfx8Drawable14getNextSiblingEv>:
    Drawable* getNextSibling()
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
        return nextSibling;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	699b      	ldr	r3, [r3, #24]
    }
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>:
    Box(uint16_t width, uint16_t height, colortype color, uint8_t alpha = 255) : Widget(),
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	607b      	str	r3, [r7, #4]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	817b      	strh	r3, [r7, #10]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	813b      	strh	r3, [r7, #8]
        alpha(alpha), color(color), reportAsSolid(false)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff fd95 	bl	800ad10 <_ZN8touchgfx6WidgetC1Ev>
 800b1e6:	4a0d      	ldr	r2, [pc, #52]	; (800b21c <_ZN8touchgfx3BoxC1EttNS_9colortypeEh+0x50>)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	601a      	str	r2, [r3, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	7e3a      	ldrb	r2, [r7, #24]
 800b1f0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	629a      	str	r2, [r3, #40]	; 0x28
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        rect.width = width;
 800b202:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	811a      	strh	r2, [r3, #8]
        rect.height = height;
 800b20a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	815a      	strh	r2, [r3, #10]
    }
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	08023938 	.word	0x08023938

0800b220 <_ZN8touchgfx19ScrollableContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ScrollableContainer() { }
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	4a0a      	ldr	r2, [pc, #40]	; (800b254 <_ZN8touchgfx19ScrollableContainerD1Ev+0x34>)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3368      	adds	r3, #104	; 0x68
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fd9e 	bl	800ad74 <_ZN8touchgfx3BoxD1Ev>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3338      	adds	r3, #56	; 0x38
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff fd99 	bl	800ad74 <_ZN8touchgfx3BoxD1Ev>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4618      	mov	r0, r3
 800b246:	f7fe faa3 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	08022fc4 	.word	0x08022fc4

0800b258 <_ZN8touchgfx19ScrollableContainerD0Ev>:
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff ffdd 	bl	800b220 <_ZN8touchgfx19ScrollableContainerD1Ev>
 800b266:	21c0      	movs	r1, #192	; 0xc0
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f015 fbaa 	bl	80209c2 <_ZdlPvj>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4618      	mov	r0, r3
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_>:
     *        contained elements into account.
     *
     * @param [in,out] scrollX Is the container able to scroll horizontally.
     * @param [in,out] scrollY Is the container able to scroll vertically.
     */
    virtual void isScrollableXY(bool& scrollX, bool& scrollY)
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
    {
        Rect contained = getContainedArea();
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3380      	adds	r3, #128	; 0x80
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f107 0210 	add.w	r2, r7, #16
 800b290:	68f9      	ldr	r1, [r7, #12]
 800b292:	4610      	mov	r0, r2
 800b294:	4798      	blx	r3
        scrollX = (scrollableX && (rect.width < contained.width));
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d008      	beq.n	800b2b2 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x3a>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800b2a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	da01      	bge.n	800b2b2 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x3a>
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	e000      	b.n	800b2b4 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x3c>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	701a      	strb	r2, [r3, #0]
        scrollY = (scrollableY && (rect.height < contained.height));
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d008      	beq.n	800b2d4 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x5c>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b2c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	da01      	bge.n	800b2d4 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x5c>
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	e000      	b.n	800b2d6 <_ZN8touchgfx19ScrollableContainer14isScrollableXYERbS1_+0x5e>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	701a      	strb	r2, [r3, #0]
    }
 800b2da:	bf00      	nop
 800b2dc:	3718      	adds	r7, #24
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}

0800b2e2 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE>:
     * @param x          The x coordinate of the (click) event.
     * @param y          The y coordinate of the (click) event.
     * @param [out] last The last child intersecting x,y. ScrollableContainer intercepts these, so
     *                   returns it self.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800b2e2:	b580      	push	{r7, lr}
 800b2e4:	b084      	sub	sp, #16
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	607b      	str	r3, [r7, #4]
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	817b      	strh	r3, [r7, #10]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible())
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe f986 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d012      	beq.n	800b328 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x46>
        {
            if (isTouchable())
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	4618      	mov	r0, r3
 800b306:	f7fe f98c 	bl	8009622 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d003      	beq.n	800b318 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x36>
            {
                *last = this;
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	601a      	str	r2, [r3, #0]
            else
            {
                Container::getLastChild(x, y, last);
            }
        }
    }
 800b316:	e007      	b.n	800b328 <_ZN8touchgfx19ScrollableContainer12getLastChildEssPPNS_8DrawableE+0x46>
                Container::getLastChild(x, y, last);
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b31e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f7fe fe02 	bl	8009f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
    }
 800b328:	bf00      	nop
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <_ZNK8touchgfx19ScrollableContainer7getTypeEv>:
    *        For GUI testing only. Returns type of this drawable.
    *
    * @return TYPE_SCROLLABLECONTAINER.
    */

    virtual uint16_t getType() const
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SCROLLABLECONTAINER;
 800b338:	2314      	movs	r3, #20
    }
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <_ZNK8touchgfx3HAL13getFingerSizeEv>:
     *
     *        Gets the finger size in pixels.
     *
     * @return The size of the finger in pixels, 1 is the default value.
     */
    uint8_t getFingerSize() const
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
    {
        return fingerSize;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
    }
 800b354:	4618      	mov	r0, r3
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <_ZN8touchgfx19ScrollableContainerC1Ev>:
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/Color.hpp>

namespace touchgfx
{
ScrollableContainer::ScrollableContainer()
 800b360:	b590      	push	{r4, r7, lr}
 800b362:	b085      	sub	sp, #20
 800b364:	af02      	add	r7, sp, #8
 800b366:	6078      	str	r0, [r7, #4]
      targetValue(0),
      animationCounter(0),
      animate(false),
      fingerAdjustmentX(0),
      fingerAdjustmentY(0),
      hasIssuedCancelEvent(false)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff fcba 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800b370:	4a50      	ldr	r2, [pc, #320]	; (800b4b4 <_ZN8touchgfx19ScrollableContainerC1Ev+0x154>)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2202      	movs	r2, #2
 800b382:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2278      	movs	r2, #120	; 0x78
 800b38a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800b38e:	687c      	ldr	r4, [r7, #4]
 800b390:	22ff      	movs	r2, #255	; 0xff
 800b392:	21ff      	movs	r1, #255	; 0xff
 800b394:	20ff      	movs	r0, #255	; 0xff
 800b396:	f7ff fd69 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 800b39a:	6320      	str	r0, [r4, #48]	; 0x30
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	9200      	str	r2, [sp, #0]
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	f7ff ff07 	bl	800b1cc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	9200      	str	r2, [sp, #0]
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	f7ff fefa 	bl	800b1cc <_ZN8touchgfx3BoxC1EttNS_9colortypeEh>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2205      	movs	r2, #5
 800b3fc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
{
    xSlider.setVisible(false);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3338      	adds	r3, #56	; 0x38
 800b484:	2100      	movs	r1, #0
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff fc0c 	bl	800aca4 <_ZN8touchgfx8Drawable10setVisibleEb>
    ySlider.setVisible(false);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3368      	adds	r3, #104	; 0x68
 800b490:	2100      	movs	r1, #0
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff fc06 	bl	800aca4 <_ZN8touchgfx8Drawable10setVisibleEb>
    maxVelocity = SCROLLBAR_MAX_VELOCITY;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2211      	movs	r2, #17
 800b49c:	869a      	strh	r2, [r3, #52]	; 0x34
    setTouchable(true);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff fc0e 	bl	800acc4 <_ZN8touchgfx8Drawable12setTouchableEb>
}
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd90      	pop	{r4, r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	08022fc4 	.word	0x08022fc4

0800b4b8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE>:

void ScrollableContainer::handleClickEvent(const ClickEvent& evt)
{
 800b4b8:	b5b0      	push	{r4, r5, r7, lr}
 800b4ba:	b0b6      	sub	sp, #216	; 0xd8
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
    if (evt.getType() == ClickEvent::PRESSED)
 800b4c2:	6838      	ldr	r0, [r7, #0]
 800b4c4:	f7ff fd90 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	bf0c      	ite	eq
 800b4ce:	2301      	moveq	r3, #1
 800b4d0:	2300      	movne	r3, #0
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f000 820c 	beq.w	800b8f2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x43a>
    {
        isPressed = true;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

        if (animate)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00f      	beq.n	800b50c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x54>
        {
            // Stop scroll animation
            animate = false;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
            animationCounter = 0;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
            Application::getInstance()->unregisterTimerWidget(this);
 800b4fc:	f00f fafa 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 800b500:	4602      	mov	r2, r0
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f00f fb2a 	bl	801ab60 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
        }

        const int fingerSize = HAL::getInstance()->getFingerSize();
 800b50c:	f7fe f990 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 800b510:	4603      	mov	r3, r0
 800b512:	4618      	mov	r0, r3
 800b514:	f7ff ff17 	bl	800b346 <_ZNK8touchgfx3HAL13getFingerSizeEv>
 800b518:	4603      	mov	r3, r0
 800b51a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        fingerAdjustmentX = 0;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
        fingerAdjustmentY = 0;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2200      	movs	r2, #0
 800b52a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

        const int minimumDistance = 3;
 800b52e:	2303      	movs	r3, #3
 800b530:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        if ((fingerSize - 1) >= minimumDistance)
 800b534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b538:	3b01      	subs	r3, #1
 800b53a:	2b02      	cmp	r3, #2
 800b53c:	f340 8146 	ble.w	800b7cc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x314>
        {
            pressedDrawable = 0;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

            const int maximumSquares = 3;
 800b548:	2303      	movs	r3, #3
 800b54a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            const int numberOfSquares = MIN(maximumSquares, (fingerSize - 1) / minimumDistance);
 800b54e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b552:	3b01      	subs	r3, #1
 800b554:	2b0b      	cmp	r3, #11
 800b556:	dc08      	bgt.n	800b56a <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xb2>
 800b558:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b55c:	3b01      	subs	r3, #1
 800b55e:	4a99      	ldr	r2, [pc, #612]	; (800b7c4 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x30c>)
 800b560:	fb82 1203 	smull	r1, r2, r2, r3
 800b564:	17db      	asrs	r3, r3, #31
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	e000      	b.n	800b56c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0xb4>
 800b56a:	2303      	movs	r3, #3
 800b56c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            uint32_t bestDistance = 0xFFFFFFFF;
 800b570:	f04f 33ff 	mov.w	r3, #4294967295
 800b574:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            Drawable* last = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

            Rect me(0, 0, getWidth(), getHeight());
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4618      	mov	r0, r3
 800b582:	f7fe fe36 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800b586:	4603      	mov	r3, r0
 800b588:	461c      	mov	r4, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe fe3d 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800b592:	4603      	mov	r3, r0
 800b594:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	4623      	mov	r3, r4
 800b59c:	2200      	movs	r2, #0
 800b59e:	2100      	movs	r1, #0
 800b5a0:	f7fe f96e 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
            Rect meAbs = me;
 800b5a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800b5a8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800b5ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b5b0:	e883 0003 	stmia.w	r3, {r0, r1}
            translateRectToAbsolute(meAbs);
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	3324      	adds	r3, #36	; 0x24
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800b5c2:	4610      	mov	r0, r2
 800b5c4:	4798      	blx	r3

            for (int squareNumber = 1; squareNumber <= numberOfSquares; squareNumber++)
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b5d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	f300 810a 	bgt.w	800b7ee <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x336>
            {
                int distance = ((squareNumber * fingerSize) / numberOfSquares);
 800b5da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b5de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b5e2:	fb02 f203 	mul.w	r2, r2, r3
 800b5e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b5ea:	fb92 f3f3 	sdiv	r3, r2, r3
 800b5ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                const int samplePoints[10][2] = { { 0, 0 }, { -1, -1 }, { 0, -1 }, { 1, -1 }, { -1, 0 }, { 0, 0 }, { 1, 0 }, { -1, 1 }, { 0, 1 }, { 1, 1 } };
 800b5f2:	4a75      	ldr	r2, [pc, #468]	; (800b7c8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x310>)
 800b5f4:	f107 0308 	add.w	r3, r7, #8
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	2250      	movs	r2, #80	; 0x50
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f015 fa6d 	bl	8020adc <memcpy>

                for (int sampleIndex = squareNumber - 1; sampleIndex < 10; sampleIndex += 2)
 800b602:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b606:	3b01      	subs	r3, #1
 800b608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b60c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b610:	2b09      	cmp	r3, #9
 800b612:	f300 80d1 	bgt.w	800b7b8 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x300>
                {
                    Drawable* d = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                    int16_t deltaX = samplePoints[sampleIndex][0] * distance;
 800b61c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b620:	00db      	lsls	r3, r3, #3
 800b622:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800b626:	4413      	add	r3, r2
 800b628:	f853 3cc8 	ldr.w	r3, [r3, #-200]
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b632:	b29b      	uxth	r3, r3
 800b634:	fb12 f303 	smulbb	r3, r2, r3
 800b638:	b29b      	uxth	r3, r3
 800b63a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
                    int16_t deltaY = samplePoints[sampleIndex][1] * distance;
 800b63e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b642:	00db      	lsls	r3, r3, #3
 800b644:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 800b648:	4413      	add	r3, r2
 800b64a:	f853 3cc4 	ldr.w	r3, [r3, #-196]
 800b64e:	b29a      	uxth	r2, r3
 800b650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b654:	b29b      	uxth	r3, r3
 800b656:	fb12 f303 	smulbb	r3, r2, r3
 800b65a:	b29b      	uxth	r3, r3
 800b65c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
                    if (me.intersect(evt.getX() + deltaX, evt.getY() + deltaY))
 800b660:	6838      	ldr	r0, [r7, #0]
 800b662:	f7ff fca7 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800b666:	4603      	mov	r3, r0
 800b668:	b29a      	uxth	r2, r3
 800b66a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800b66e:	4413      	add	r3, r2
 800b670:	b29b      	uxth	r3, r3
 800b672:	b21c      	sxth	r4, r3
 800b674:	6838      	ldr	r0, [r7, #0]
 800b676:	f7ff fcaa 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800b67a:	4603      	mov	r3, r0
 800b67c:	b29a      	uxth	r2, r3
 800b67e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800b682:	4413      	add	r3, r2
 800b684:	b29b      	uxth	r3, r3
 800b686:	b21a      	sxth	r2, r3
 800b688:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800b68c:	4621      	mov	r1, r4
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fe f940 	bl	8009914 <_ZNK8touchgfx4Rect9intersectEss>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 8088 	beq.w	800b7ac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2f4>
                    {
                        Container::getLastChild(evt.getX() + deltaX, evt.getY() + deltaY, &d);
 800b69c:	687c      	ldr	r4, [r7, #4]
 800b69e:	6838      	ldr	r0, [r7, #0]
 800b6a0:	f7ff fc88 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800b6ac:	4413      	add	r3, r2
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	b21d      	sxth	r5, r3
 800b6b2:	6838      	ldr	r0, [r7, #0]
 800b6b4:	f7ff fc8b 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800b6c0:	4413      	add	r3, r2
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	b21a      	sxth	r2, r3
 800b6c6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7fe fc2d 	bl	8009f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
                        if (d && d != last && d != this)
 800b6d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d068      	beq.n	800b7ac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2f4>
 800b6da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d062      	beq.n	800b7ac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2f4>
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d05d      	beq.n	800b7ac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2f4>
                        {
                            Rect absRect = d->getAbsoluteRect();
 800b6f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b6f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f00f ff49 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
                            int x = meAbs.x + evt.getX() - (absRect.x + (absRect.width / 2));
 800b700:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	; 0x8c
 800b704:	461c      	mov	r4, r3
 800b706:	6838      	ldr	r0, [r7, #0]
 800b708:	f7ff fc54 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800b70c:	4603      	mov	r3, r0
 800b70e:	18e2      	adds	r2, r4, r3
 800b710:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	; 0x80
 800b714:	4618      	mov	r0, r3
 800b716:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800b71a:	0fd9      	lsrs	r1, r3, #31
 800b71c:	440b      	add	r3, r1
 800b71e:	105b      	asrs	r3, r3, #1
 800b720:	b21b      	sxth	r3, r3
 800b722:	4403      	add	r3, r0
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
                            int y = meAbs.y + evt.getY() - (absRect.y + (absRect.height / 2));
 800b72a:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 800b72e:	461c      	mov	r4, r3
 800b730:	6838      	ldr	r0, [r7, #0]
 800b732:	f7ff fc4c 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800b736:	4603      	mov	r3, r0
 800b738:	18e2      	adds	r2, r4, r3
 800b73a:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800b73e:	4618      	mov	r0, r3
 800b740:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800b744:	0fd9      	lsrs	r1, r3, #31
 800b746:	440b      	add	r3, r1
 800b748:	105b      	asrs	r3, r3, #1
 800b74a:	b21b      	sxth	r3, r3
 800b74c:	4403      	add	r3, r0
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                            uint32_t dist = x * x + y * y;
 800b754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b758:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b75c:	fb02 f203 	mul.w	r2, r2, r3
 800b760:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b764:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b768:	fb01 f303 	mul.w	r3, r1, r3
 800b76c:	4413      	add	r3, r2
 800b76e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                            if (dist < bestDistance)
 800b772:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d216      	bcs.n	800b7ac <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x2f4>
                            {
                                last = d;
 800b77e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b782:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
                                bestDistance = dist;
 800b786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b78a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                                pressedDrawable = d;
 800b78e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                fingerAdjustmentX = deltaX;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800b79e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
                                fingerAdjustmentY = deltaY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	; 0xac
 800b7a8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
                for (int sampleIndex = squareNumber - 1; sampleIndex < 10; sampleIndex += 2)
 800b7ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7b0:	3302      	adds	r3, #2
 800b7b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7b6:	e729      	b.n	800b60c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x154>
            for (int squareNumber = 1; squareNumber <= numberOfSquares; squareNumber++)
 800b7b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b7bc:	3301      	adds	r3, #1
 800b7be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7c2:	e703      	b.n	800b5cc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x114>
 800b7c4:	55555556 	.word	0x55555556
 800b7c8:	080220cc 	.word	0x080220cc
                }
            }
        }
        else
        {
            Container::getLastChild(evt.getX(), evt.getY(), &pressedDrawable);
 800b7cc:	687c      	ldr	r4, [r7, #4]
 800b7ce:	6838      	ldr	r0, [r7, #0]
 800b7d0:	f7ff fbf0 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	461d      	mov	r5, r3
 800b7d8:	6838      	ldr	r0, [r7, #0]
 800b7da:	f7ff fbf8 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3398      	adds	r3, #152	; 0x98
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f7fe fb9f 	bl	8009f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
        }

        if (pressedDrawable == this)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d103      	bne.n	800b802 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x34a>
        {
            pressedDrawable = 0;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        }

        if (pressedDrawable)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 80e6 	beq.w	800b9da <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x522>
        {
            hasIssuedCancelEvent = false;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
            pressedX = evt.getX();
 800b816:	6838      	ldr	r0, [r7, #0]
 800b818:	f7ff fbcc 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800b81c:	4603      	mov	r3, r0
 800b81e:	461a      	mov	r2, r3
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
            pressedY = evt.getY();
 800b826:	6838      	ldr	r0, [r7, #0]
 800b828:	f7ff fbd1 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800b82c:	4603      	mov	r3, r0
 800b82e:	461a      	mov	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
            Rect r = pressedDrawable->getAbsoluteRect();
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b83c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b840:	4611      	mov	r1, r2
 800b842:	4618      	mov	r0, r3
 800b844:	f00f fea5 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
            ClickEvent relative(evt.getType(), evt.getX() + rect.x + fingerAdjustmentX - r.x, evt.getY() + rect.y + fingerAdjustmentY - r.y);
 800b848:	6838      	ldr	r0, [r7, #0]
 800b84a:	f7ff fbcd 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b84e:	4603      	mov	r3, r0
 800b850:	461d      	mov	r5, r3
 800b852:	6838      	ldr	r0, [r7, #0]
 800b854:	f7ff fbae 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800b858:	4603      	mov	r3, r0
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b862:	b29b      	uxth	r3, r3
 800b864:	4413      	add	r3, r2
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800b86e:	b29b      	uxth	r3, r3
 800b870:	4413      	add	r3, r2
 800b872:	b29a      	uxth	r2, r3
 800b874:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800b878:	b29b      	uxth	r3, r3
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	b21c      	sxth	r4, r3
 800b880:	6838      	ldr	r0, [r7, #0]
 800b882:	f7ff fba4 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800b886:	4603      	mov	r3, r0
 800b888:	b29a      	uxth	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b890:	b29b      	uxth	r3, r3
 800b892:	4413      	add	r3, r2
 800b894:	b29a      	uxth	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	4413      	add	r3, r2
 800b8a0:	b29a      	uxth	r2, r3
 800b8a2:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	b21a      	sxth	r2, r3
 800b8ae:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	f7ff fb30 	bl	800af20 <_ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss>
            pressedDrawable->handleClickEvent(relative);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3344      	adds	r3, #68	; 0x44
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	4798      	blx	r3
            lastDraggableChild = pressedDrawable;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
            ClickEvent relative(evt.getType(), evt.getX() + rect.x + fingerAdjustmentX - r.x, evt.getY() + rect.y + fingerAdjustmentY - r.y);
 800b8e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff fb40 	bl	800af70 <_ZN8touchgfx10ClickEventD1Ev>
 800b8f0:	e073      	b.n	800b9da <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x522>
        }
    }
    else if (evt.getType() == ClickEvent::CANCEL)
 800b8f2:	6838      	ldr	r0, [r7, #0]
 800b8f4:	f7ff fb78 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	bf0c      	ite	eq
 800b8fe:	2301      	moveq	r3, #1
 800b900:	2300      	movne	r3, #0
 800b902:	b2db      	uxtb	r3, r3
 800b904:	2b00      	cmp	r3, #0
 800b906:	f040 80a2 	bne.w	800ba4e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x596>
    {
        return;
    }
    else // if (evt.getType() == ClickEvent::RELEASED)
    {
        if (pressedDrawable)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b910:	2b00      	cmp	r3, #0
 800b912:	d056      	beq.n	800b9c2 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x50a>
        {
            Rect r = pressedDrawable->getAbsoluteRect();
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b91a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800b91e:	4611      	mov	r1, r2
 800b920:	4618      	mov	r0, r3
 800b922:	f00f fe36 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
            ClickEvent relative(evt.getType(), evt.getX() + rect.x + fingerAdjustmentX - r.x, evt.getY() + rect.y + fingerAdjustmentY - r.y);
 800b926:	6838      	ldr	r0, [r7, #0]
 800b928:	f7ff fb5e 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800b92c:	4603      	mov	r3, r0
 800b92e:	461d      	mov	r5, r3
 800b930:	6838      	ldr	r0, [r7, #0]
 800b932:	f7ff fb3f 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800b936:	4603      	mov	r3, r0
 800b938:	b29a      	uxth	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b940:	b29b      	uxth	r3, r3
 800b942:	4413      	add	r3, r2
 800b944:	b29a      	uxth	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	4413      	add	r3, r2
 800b950:	b29a      	uxth	r2, r3
 800b952:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800b956:	b29b      	uxth	r3, r3
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	b21c      	sxth	r4, r3
 800b95e:	6838      	ldr	r0, [r7, #0]
 800b960:	f7ff fb35 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800b964:	4603      	mov	r3, r0
 800b966:	b29a      	uxth	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b96e:	b29b      	uxth	r3, r3
 800b970:	4413      	add	r3, r2
 800b972:	b29a      	uxth	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	4413      	add	r3, r2
 800b97e:	b29a      	uxth	r2, r3
 800b980:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800b984:	b29b      	uxth	r3, r3
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	b29b      	uxth	r3, r3
 800b98a:	b21a      	sxth	r2, r3
 800b98c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800b990:	2300      	movs	r3, #0
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	4613      	mov	r3, r2
 800b996:	4622      	mov	r2, r4
 800b998:	4629      	mov	r1, r5
 800b99a:	f7ff fac1 	bl	800af20 <_ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss>
            pressedDrawable->handleClickEvent(relative);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3344      	adds	r3, #68	; 0x44
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	4798      	blx	r3
            ClickEvent relative(evt.getType(), evt.getX() + rect.x + fingerAdjustmentX - r.x, evt.getY() + rect.y + fingerAdjustmentY - r.y);
 800b9b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff fad7 	bl	800af70 <_ZN8touchgfx10ClickEventD1Ev>
        }

        pressedDrawable = 0;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        lastDraggableChild = 0;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        isPressed = false;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    }

    isScrolling = false;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab

    // Redraw scrollbars.
    xSlider.setVisible((isPressed && scrollbarsVisible) || scrollbarsPermanentlyVisible);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d004      	beq.n	800b9fc <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x544>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d104      	bne.n	800ba06 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x54e>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x552>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e000      	b.n	800ba0c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x554>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4610      	mov	r0, r2
 800ba10:	f7ff f948 	bl	800aca4 <_ZN8touchgfx8Drawable10setVisibleEb>
    ySlider.setVisible((isPressed && scrollbarsVisible) || scrollbarsPermanentlyVisible);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d004      	beq.n	800ba2e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x576>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d104      	bne.n	800ba38 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x580>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x584>
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e000      	b.n	800ba3e <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x586>
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f7ff f92f 	bl	800aca4 <_ZN8touchgfx8Drawable10setVisibleEb>
    invalidateScrollbars();
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fdf4 	bl	800c634 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
 800ba4c:	e000      	b.n	800ba50 <_ZN8touchgfx19ScrollableContainer16handleClickEventERKNS_10ClickEventE+0x598>
        return;
 800ba4e:	bf00      	nop
}
 800ba50:	37d0      	adds	r7, #208	; 0xd0
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bdb0      	pop	{r4, r5, r7, pc}
 800ba56:	bf00      	nop

0800ba58 <_ZN8touchgfx5EventC1ERKS0_>:
class Event
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
 800ba62:	4a05      	ldr	r2, [pc, #20]	; (800ba78 <_ZN8touchgfx5EventC1ERKS0_+0x20>)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	601a      	str	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	08023084 	.word	0x08023084

0800ba7c <_ZN8touchgfx9DragEventC1ERKS0_>:
class DragEvent : public Event
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	683a      	ldr	r2, [r7, #0]
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7ff ffe3 	bl	800ba58 <_ZN8touchgfx5EventC1ERKS0_>
 800ba92:	4a10      	ldr	r2, [pc, #64]	; (800bad4 <_ZN8touchgfx9DragEventC1ERKS0_+0x58>)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	601a      	str	r2, [r3, #0]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	791a      	ldrb	r2, [r3, #4]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	711a      	strb	r2, [r3, #4]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	80da      	strh	r2, [r3, #6]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	811a      	strh	r2, [r3, #8]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	815a      	strh	r2, [r3, #10]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	819a      	strh	r2, [r3, #12]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	0802305c 	.word	0x0802305c

0800bad8 <_ZN8touchgfx5EventaSERKS0_>:
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <_ZN8touchgfx9DragEventaSERKS0_>:
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	4611      	mov	r1, r2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff ffe9 	bl	800bad8 <_ZN8touchgfx5EventaSERKS0_>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	791a      	ldrb	r2, [r3, #4]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	711a      	strb	r2, [r3, #4]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	80da      	strh	r2, [r3, #6]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	811a      	strh	r2, [r3, #8]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	815a      	strh	r2, [r3, #10]
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	819a      	strh	r2, [r3, #12]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE>:

void ScrollableContainer::handleDragEvent(const DragEvent& evt)
{
 800bb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb42:	b09f      	sub	sp, #124	; 0x7c
 800bb44:	af02      	add	r7, sp, #8
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
    DragEvent actualDrag = evt;
 800bb4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7ff ff93 	bl	800ba7c <_ZN8touchgfx9DragEventC1ERKS0_>
    bool acceptInitialScroll = false;
 800bb56:	2300      	movs	r3, #0
 800bb58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

    bool canScrollX = false;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    bool canScrollY = false;
 800bb62:	2300      	movs	r3, #0
 800bb64:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    isScrollableXY(canScrollX, canScrollY);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3388      	adds	r3, #136	; 0x88
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 800bb74:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	4798      	blx	r3

    if ((pressedDrawable != 0) && (pressedDrawable != this))
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 80bc 	beq.w	800bd00 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1c0>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	f000 80b5 	beq.w	800bd00 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1c0>
    {
        // Also send this drag event to the appropriate child widget
        Rect r = pressedDrawable->getAbsoluteRect();
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bb9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bba0:	4611      	mov	r1, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f00f fcf5 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
        int16_t oldX = evt.getOldX() + rect.x + fingerAdjustmentX - r.x;
 800bba8:	6838      	ldr	r0, [r7, #0]
 800bbaa:	f7ff fa81 	bl	800b0b0 <_ZNK8touchgfx9DragEvent7getOldXEv>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	b29a      	uxth	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bbb8:	b29b      	uxth	r3, r3
 800bbba:	4413      	add	r3, r2
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	4413      	add	r3, r2
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	1ad3      	subs	r3, r2, r3
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        int16_t oldY = evt.getOldY() + rect.y + fingerAdjustmentY - r.y;
 800bbd8:	6838      	ldr	r0, [r7, #0]
 800bbda:	f7ff fa76 	bl	800b0ca <_ZNK8touchgfx9DragEvent7getOldYEv>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	4413      	add	r3, r2
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	4413      	add	r3, r2
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
        int16_t newX = canScrollX ? oldX : evt.getNewX() + rect.x + fingerAdjustmentX - r.x;
 800bc08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0xd6>
 800bc10:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800bc14:	e016      	b.n	800bc44 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x104>
 800bc16:	6838      	ldr	r0, [r7, #0]
 800bc18:	f7ff fa64 	bl	800b0e4 <_ZNK8touchgfx9DragEvent7getNewXEv>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	4413      	add	r3, r2
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	4413      	add	r3, r2
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	b21b      	sxth	r3, r3
 800bc44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
        int16_t newY = canScrollY ? oldY : evt.getNewY() + rect.y + fingerAdjustmentY - r.y;
 800bc48:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x116>
 800bc50:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800bc54:	e016      	b.n	800bc84 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x144>
 800bc56:	6838      	ldr	r0, [r7, #0]
 800bc58:	f7ff fa51 	bl	800b0fe <_ZNK8touchgfx9DragEvent7getNewYEv>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	b29a      	uxth	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	4413      	add	r3, r2
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	4413      	add	r3, r2
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	b21b      	sxth	r3, r3
 800bc84:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        // but only in the direction(s) where the scrollable container itself
        // cannot scroll.
        if ((!canScrollX && newX != oldX) || (!canScrollY && newY != oldY))
 800bc88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bc8c:	f083 0301 	eor.w	r3, r3, #1
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d005      	beq.n	800bca2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x162>
 800bc96:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	; 0x64
 800bc9a:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	; 0x68
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d10c      	bne.n	800bcbc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x17c>
 800bca2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bca6:	f083 0301 	eor.w	r3, r3, #1
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d027      	beq.n	800bd00 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1c0>
 800bcb0:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 800bcb4:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d021      	beq.n	800bd00 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x1c0>
        {
            DragEvent relative(DragEvent::DRAGGED, oldX, oldY, newX, newY);
 800bcbc:	f9b7 1066 	ldrsh.w	r1, [r7, #102]	; 0x66
 800bcc0:	f9b7 2068 	ldrsh.w	r2, [r7, #104]	; 0x68
 800bcc4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bcc8:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 800bccc:	9301      	str	r3, [sp, #4]
 800bcce:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	f7ff f99e 	bl	800b018 <_ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss>
            pressedDrawable->handleDragEvent(relative);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	334c      	adds	r3, #76	; 0x4c
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800bcf2:	4610      	mov	r0, r2
 800bcf4:	4798      	blx	r3
            DragEvent relative(DragEvent::DRAGGED, oldX, oldY, newX, newY);
 800bcf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7ff f9b6 	bl	800b06c <_ZN8touchgfx9DragEventD1Ev>
        }
    }

    // If we are not currently scrolling, the drag event delta must
    // be larger than the threshold value, otherwise the event is ignored.
    if (!isScrolling)
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800bd06:	f083 0301 	eor.w	r3, r3, #1
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 80da 	beq.w	800bec6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x386>
    {
        // Only consider the delta in directions that are actually scrollable.
        // Note: Do not use the delta from received evt since that only reflects
        // change since last drag. What we want to check here is if the total
        // delta from the point of click has now exceeded the threshold.
        actualDrag = DragEvent(DragEvent::DRAGGED, pressedX + fingerAdjustmentX, pressedY + fingerAdjustmentY, evt.getNewX() + fingerAdjustmentX, evt.getNewY() + fingerAdjustmentY);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 800bd18:	b29a      	uxth	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	4413      	add	r3, r2
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	b21d      	sxth	r5, r3
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 800bd2e:	b29a      	uxth	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4413      	add	r3, r2
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	b21e      	sxth	r6, r3
 800bd3e:	6838      	ldr	r0, [r7, #0]
 800bd40:	f7ff f9d0 	bl	800b0e4 <_ZNK8touchgfx9DragEvent7getNewXEv>
 800bd44:	4603      	mov	r3, r0
 800bd46:	b29a      	uxth	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	4413      	add	r3, r2
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	b21c      	sxth	r4, r3
 800bd56:	6838      	ldr	r0, [r7, #0]
 800bd58:	f7ff f9d1 	bl	800b0fe <_ZNK8touchgfx9DragEvent7getNewYEv>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	4413      	add	r3, r2
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	b21b      	sxth	r3, r3
 800bd6e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	9400      	str	r4, [sp, #0]
 800bd76:	4633      	mov	r3, r6
 800bd78:	462a      	mov	r2, r5
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	f7ff f94c 	bl	800b018 <_ZN8touchgfx9DragEventC1ENS0_13DragEventTypeEssss>
 800bd80:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800bd84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd88:	4611      	mov	r1, r2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7ff feb0 	bl	800baf0 <_ZN8touchgfx9DragEventaSERKS0_>
 800bd90:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff f969 	bl	800b06c <_ZN8touchgfx9DragEventD1Ev>
        if (canScrollX)
 800bd9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d017      	beq.n	800bdd2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x292>
        {
            // Can scroll in X.
            if (abs(actualDrag.getDeltaX()) > scrollThreshold)
 800bda2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff f9b6 	bl	800b118 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 800bdac:	4603      	mov	r3, r0
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 ffde 	bl	800cd70 <_ZN8touchgfx3absIsEET_S1_>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	bfcc      	ite	gt
 800bdc2:	2301      	movgt	r3, #1
 800bdc4:	2300      	movle	r3, #0
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x292>
            {
                acceptInitialScroll = true;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
        }

        if (canScrollY)
 800bdd2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d017      	beq.n	800be0a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x2ca>
        {
            // Can scroll in Y.
            if (abs(actualDrag.getDeltaY()) > scrollThreshold)
 800bdda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff f9af 	bl	800b142 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 800bde4:	4603      	mov	r3, r0
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 ffc2 	bl	800cd70 <_ZN8touchgfx3absIsEET_S1_>
 800bdec:	4603      	mov	r3, r0
 800bdee:	461a      	mov	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	bfcc      	ite	gt
 800bdfa:	2301      	movgt	r3, #1
 800bdfc:	2300      	movle	r3, #0
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x2ca>
            {
                acceptInitialScroll = true;
 800be04:	2301      	movs	r3, #1
 800be06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
        }

        if (acceptInitialScroll)
 800be0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d004      	beq.n	800be1c <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x2dc>
        {
            isScrolling = true;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2201      	movs	r2, #1
 800be16:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
 800be1a:	e054      	b.n	800bec6 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x386>
        }
        else
        {
            // Discard this drag event. However, if the new coordinates no longer matches the drawable which received the PRESSED click event
            // issue a CANCEL event to that drawable.
            if (pressedDrawable && !hasIssuedCancelEvent)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be22:	2b00      	cmp	r3, #0
 800be24:	d04d      	beq.n	800bec2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x382>
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800be2c:	f083 0301 	eor.w	r3, r3, #1
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d045      	beq.n	800bec2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x382>
            {
                Drawable* child = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	623b      	str	r3, [r7, #32]
                Container::getLastChild(evt.getNewX() + fingerAdjustmentX, evt.getNewY() + fingerAdjustmentY, &child);
 800be3a:	687c      	ldr	r4, [r7, #4]
 800be3c:	6838      	ldr	r0, [r7, #0]
 800be3e:	f7ff f951 	bl	800b0e4 <_ZNK8touchgfx9DragEvent7getNewXEv>
 800be42:	4603      	mov	r3, r0
 800be44:	b29a      	uxth	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f9b3 30ba 	ldrsh.w	r3, [r3, #186]	; 0xba
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	4413      	add	r3, r2
 800be50:	b29b      	uxth	r3, r3
 800be52:	b21d      	sxth	r5, r3
 800be54:	6838      	ldr	r0, [r7, #0]
 800be56:	f7ff f952 	bl	800b0fe <_ZNK8touchgfx9DragEvent7getNewYEv>
 800be5a:	4603      	mov	r3, r0
 800be5c:	b29a      	uxth	r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f9b3 30bc 	ldrsh.w	r3, [r3, #188]	; 0xbc
 800be64:	b29b      	uxth	r3, r3
 800be66:	4413      	add	r3, r2
 800be68:	b29b      	uxth	r3, r3
 800be6a:	b21a      	sxth	r2, r3
 800be6c:	f107 0320 	add.w	r3, r7, #32
 800be70:	4629      	mov	r1, r5
 800be72:	4620      	mov	r0, r4
 800be74:	f7fe f85a 	bl	8009f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
                if (pressedDrawable != child)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800be7e:	6a3b      	ldr	r3, [r7, #32]
 800be80:	429a      	cmp	r2, r3
 800be82:	d01e      	beq.n	800bec2 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x382>
                {
                    ClickEvent ce(ClickEvent::CANCEL, 0, 0);
 800be84:	f107 0014 	add.w	r0, r7, #20
 800be88:	2300      	movs	r3, #0
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	2300      	movs	r3, #0
 800be8e:	2200      	movs	r2, #0
 800be90:	2102      	movs	r1, #2
 800be92:	f7ff f845 	bl	800af20 <_ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss>
                    pressedDrawable->handleClickEvent(ce);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3344      	adds	r3, #68	; 0x44
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f107 0114 	add.w	r1, r7, #20
 800beac:	4610      	mov	r0, r2
 800beae:	4798      	blx	r3
                    hasIssuedCancelEvent = true;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2201      	movs	r2, #1
 800beb4:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
                    ClickEvent ce(ClickEvent::CANCEL, 0, 0);
 800beb8:	f107 0314 	add.w	r3, r7, #20
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7ff f857 	bl	800af70 <_ZN8touchgfx10ClickEventD1Ev>
 800bec2:	2400      	movs	r4, #0
                }
            }
            return;
 800bec4:	e0a8      	b.n	800c018 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x4d8>
        }
    }

    // Send cancel events to child in focus
    if (pressedDrawable && !hasIssuedCancelEvent)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800becc:	2b00      	cmp	r3, #0
 800bece:	d026      	beq.n	800bf1e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x3de>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800bed6:	f083 0301 	eor.w	r3, r3, #1
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d01e      	beq.n	800bf1e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x3de>
    {
        ClickEvent ce(ClickEvent::CANCEL, 0, 0);
 800bee0:	f107 0008 	add.w	r0, r7, #8
 800bee4:	2300      	movs	r3, #0
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	2200      	movs	r2, #0
 800beec:	2102      	movs	r1, #2
 800beee:	f7ff f817 	bl	800af20 <_ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss>
        pressedDrawable->handleClickEvent(ce);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3344      	adds	r3, #68	; 0x44
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f107 0108 	add.w	r1, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
        hasIssuedCancelEvent = true;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
        ClickEvent ce(ClickEvent::CANCEL, 0, 0);
 800bf14:	f107 0308 	add.w	r3, r7, #8
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff f829 	bl	800af70 <_ZN8touchgfx10ClickEventD1Ev>
    }

    int16_t deltaX = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    int16_t deltaY = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    if (scrollableX)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d02d      	beq.n	800bf90 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x450>
    {
        if (acceptInitialScroll)
 800bf34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d020      	beq.n	800bf7e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x43e>
        {
            // Initial drag which is past threshold, only scroll one pixel in initial event.
            if (actualDrag.getDeltaX() > 0)
 800bf3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7ff f8e9 	bl	800b118 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	bfcc      	ite	gt
 800bf4c:	2301      	movgt	r3, #1
 800bf4e:	2300      	movle	r3, #0
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d003      	beq.n	800bf5e <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x41e>
            {
                deltaX = 1;
 800bf56:	2301      	movs	r3, #1
 800bf58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800bf5c:	e01b      	b.n	800bf96 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x456>
            }
            else if (actualDrag.getDeltaX() < 0)
 800bf5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf62:	4618      	mov	r0, r3
 800bf64:	f7ff f8d8 	bl	800b118 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	0bdb      	lsrs	r3, r3, #15
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d010      	beq.n	800bf96 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x456>
            {
                deltaX = -1;
 800bf74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800bf7c:	e00b      	b.n	800bf96 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x456>
            }
        }
        else
        {
            // Scroll entire delta
            deltaX = actualDrag.getDeltaX();
 800bf7e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf82:	4618      	mov	r0, r3
 800bf84:	f7ff f8c8 	bl	800b118 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800bf8e:	e002      	b.n	800bf96 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x456>
        }
    }
    else
    {
        // Not scrollable
        deltaX = 0;
 800bf90:	2300      	movs	r3, #0
 800bf92:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    }

    if (scrollableY)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d02d      	beq.n	800bffc <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x4bc>
    {
        if (acceptInitialScroll)
 800bfa0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d020      	beq.n	800bfea <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x4aa>
        {
            // Initial drag which is past threshold, only scroll one pixel in initial event.
            if (actualDrag.getDeltaY() > 0)
 800bfa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7ff f8c8 	bl	800b142 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	bfcc      	ite	gt
 800bfb8:	2301      	movgt	r3, #1
 800bfba:	2300      	movle	r3, #0
 800bfbc:	b2db      	uxtb	r3, r3
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d003      	beq.n	800bfca <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x48a>
            {
                deltaY = 1;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800bfc8:	e01b      	b.n	800c002 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x4c2>
            }
            else if (actualDrag.getDeltaY() < 0)
 800bfca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7ff f8b7 	bl	800b142 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	0bdb      	lsrs	r3, r3, #15
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d010      	beq.n	800c002 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x4c2>
            {
                deltaY = -1;
 800bfe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfe4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800bfe8:	e00b      	b.n	800c002 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x4c2>
            }
        }
        else
        {
            // Scroll entire delta
            deltaY = actualDrag.getDeltaY();
 800bfea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7ff f8a7 	bl	800b142 <_ZNK8touchgfx9DragEvent9getDeltaYEv>
 800bff4:	4603      	mov	r3, r0
 800bff6:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800bffa:	e002      	b.n	800c002 <_ZN8touchgfx19ScrollableContainer15handleDragEventERKNS_9DragEventE+0x4c2>
        }
    }
    else
    {
        // Not scrollable
        deltaY = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
    }

    doScroll(deltaX, deltaY);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	338c      	adds	r3, #140	; 0x8c
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f9b7 206a 	ldrsh.w	r2, [r7, #106]	; 0x6a
 800c00e:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4798      	blx	r3
 800c016:	2401      	movs	r4, #1
 800c018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff f825 	bl	800b06c <_ZN8touchgfx9DragEventD1Ev>
 800c022:	2c01      	cmp	r4, #1
    DragEvent actualDrag = evt;
 800c024:	bf00      	nop
}
 800c026:	3774      	adds	r7, #116	; 0x74
 800c028:	46bd      	mov	sp, r7
 800c02a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c02c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE>:

void ScrollableContainer::handleGestureEvent(const GestureEvent& evt)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08c      	sub	sp, #48	; 0x30
 800c030:	af02      	add	r7, sp, #8
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
    bool canScrollX = false;
 800c036:	2300      	movs	r3, #0
 800c038:	75fb      	strb	r3, [r7, #23]
    bool canScrollY = false;
 800c03a:	2300      	movs	r3, #0
 800c03c:	75bb      	strb	r3, [r7, #22]
    isScrollableXY(canScrollX, canScrollY);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3388      	adds	r3, #136	; 0x88
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f107 0216 	add.w	r2, r7, #22
 800c04a:	f107 0117 	add.w	r1, r7, #23
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	4798      	blx	r3

    if ((canScrollX && (evt.getType() == GestureEvent::SWIPE_HORIZONTAL)) ||
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d005      	beq.n	800c064 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x38>
 800c058:	6838      	ldr	r0, [r7, #0]
 800c05a:	f7ff f89f 	bl	800b19c <_ZNK8touchgfx12GestureEvent7getTypeEv>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d008      	beq.n	800c076 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x4a>
 800c064:	7dbb      	ldrb	r3, [r7, #22]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d007      	beq.n	800c07a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x4e>
            (canScrollY && (evt.getType() == GestureEvent::SWIPE_VERTICAL)))
 800c06a:	6838      	ldr	r0, [r7, #0]
 800c06c:	f7ff f896 	bl	800b19c <_ZNK8touchgfx12GestureEvent7getTypeEv>
 800c070:	4603      	mov	r3, r0
 800c072:	2b01      	cmp	r3, #1
 800c074:	d101      	bne.n	800c07a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x4e>
    if ((canScrollX && (evt.getType() == GestureEvent::SWIPE_HORIZONTAL)) ||
 800c076:	2301      	movs	r3, #1
 800c078:	e000      	b.n	800c07c <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x50>
 800c07a:	2300      	movs	r3, #0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 80a2 	beq.w	800c1c6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x19a>
    {
        int16_t velocityAbsolute = abs(evt.getVelocity());
 800c082:	6838      	ldr	r0, [r7, #0]
 800c084:	f7ff f87d 	bl	800b182 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 800c088:	4603      	mov	r3, r0
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 fe70 	bl	800cd70 <_ZN8touchgfx3absIsEET_S1_>
 800c090:	4603      	mov	r3, r0
 800c092:	82bb      	strh	r3, [r7, #20]

        // Ignore gestures with velocity lower than threshold
        if (velocityAbsolute < scrollThreshold)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f9b3 20a4 	ldrsh.w	r2, [r3, #164]	; 0xa4
 800c09a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	f300 8091 	bgt.w	800c1c6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x19a>
        {
            return;
        }

        // Force velocity within limits
        velocityAbsolute = MAX(MIN(velocityAbsolute, maxVelocity), SCROLLBAR_MIN_VELOCITY);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	bfa8      	it	ge
 800c0b2:	4613      	movge	r3, r2
 800c0b4:	2b05      	cmp	r3, #5
 800c0b6:	bfb8      	it	lt
 800c0b8:	2305      	movlt	r3, #5
 800c0ba:	b21b      	sxth	r3, r3
 800c0bc:	82bb      	strh	r3, [r7, #20]

        // Try to set some reasonable values for how long the resulting scroll should be, and how many ticks is should take
        scrollDuration = 7 * velocityAbsolute;
 800c0be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	00d2      	lsls	r2, r2, #3
 800c0c8:	1ad3      	subs	r3, r2, r3
 800c0ca:	b29a      	uxth	r2, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
        targetValue = ((evt.getVelocity() > 0) ? 1 : -1) * (velocityAbsolute - 4) * 72;
 800c0d2:	6838      	ldr	r0, [r7, #0]
 800c0d4:	f7ff f855 	bl	800b182 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	dd01      	ble.n	800c0e2 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xb6>
 800c0de:	2201      	movs	r2, #1
 800c0e0:	e001      	b.n	800c0e6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xba>
 800c0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c0ea:	3b04      	subs	r3, #4
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	fb12 f303 	smulbb	r3, r2, r3
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	00d2      	lsls	r2, r2, #3
 800c0f8:	4413      	add	r3, r2
 800c0fa:	00db      	lsls	r3, r3, #3
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	b21a      	sxth	r2, r3
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

        // Get ready to animate scroll: Initialize values
        beginningValue = (evt.getType() == GestureEvent::SWIPE_VERTICAL) ? getContainedArea().y : getContainedArea().x;
 800c106:	6838      	ldr	r0, [r7, #0]
 800c108:	f7ff f848 	bl	800b19c <_ZNK8touchgfx12GestureEvent7getTypeEv>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d10b      	bne.n	800c12a <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0xfe>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3380      	adds	r3, #128	; 0x80
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f107 0218 	add.w	r2, r7, #24
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
 800c124:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c128:	e00a      	b.n	800c140 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x114>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	3380      	adds	r3, #128	; 0x80
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f107 0220 	add.w	r2, r7, #32
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	4610      	mov	r0, r2
 800c13a:	4798      	blx	r3
 800c13c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	f8a2 30b2 	strh.w	r3, [r2, #178]	; 0xb2
        animate = true;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        Application::getInstance()->registerTimerWidget(this);
 800c14e:	f00e fcd1 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 800c152:	4602      	mov	r2, r0
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4619      	mov	r1, r3
 800c158:	4610      	mov	r0, r2
 800c15a:	f00e fcd1 	bl	801ab00 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>
        accelDirection = evt.getType();
 800c15e:	6838      	ldr	r0, [r7, #0]
 800c160:	f7ff f81c 	bl	800b19c <_ZNK8touchgfx12GestureEvent7getTypeEv>
 800c164:	4603      	mov	r3, r0
 800c166:	461a      	mov	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

        if (pressedDrawable && !hasIssuedCancelEvent)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c174:	2b00      	cmp	r3, #0
 800c176:	d026      	beq.n	800c1c6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x19a>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800c17e:	f083 0301 	eor.w	r3, r3, #1
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d01e      	beq.n	800c1c6 <_ZN8touchgfx19ScrollableContainer18handleGestureEventERKNS_12GestureEventE+0x19a>
        {
            ClickEvent ce(ClickEvent::CANCEL, 0, 0);
 800c188:	f107 0008 	add.w	r0, r7, #8
 800c18c:	2300      	movs	r3, #0
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	2300      	movs	r3, #0
 800c192:	2200      	movs	r2, #0
 800c194:	2102      	movs	r1, #2
 800c196:	f7fe fec3 	bl	800af20 <_ZN8touchgfx10ClickEventC1ENS0_14ClickEventTypeEsss>
            pressedDrawable->handleClickEvent(ce);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	3344      	adds	r3, #68	; 0x44
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f107 0108 	add.w	r1, r7, #8
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	4798      	blx	r3
            hasIssuedCancelEvent = true;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 20be 	strb.w	r2, [r3, #190]	; 0xbe
            ClickEvent ce(ClickEvent::CANCEL, 0, 0);
 800c1bc:	f107 0308 	add.w	r3, r7, #8
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe fed5 	bl	800af70 <_ZN8touchgfx10ClickEventD1Ev>
        }
    }
}
 800c1c6:	3728      	adds	r7, #40	; 0x28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>:

Rect ScrollableContainer::getXScrollbar() const
{
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b08f      	sub	sp, #60	; 0x3c
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
    Rect res(0, 0, 0, 0);
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2100      	movs	r1, #0
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7fd fb4d 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    if (scrollableX)
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f000 80a7 	beq.w	800c340 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x174>
    {
        Rect contained = getContainedArea();
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3380      	adds	r3, #128	; 0x80
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f107 0208 	add.w	r2, r7, #8
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	4610      	mov	r0, r2
 800c202:	4798      	blx	r3
        const int scrollSpace = (scrollableY && (contained.height > rect.height)) ? (2 * scrollbarPadding + scrollbarWidth + SCROLLBAR_LINE) : 0;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00f      	beq.n	800c22e <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x62>
 800c20e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c218:	429a      	cmp	r2, r3
 800c21a:	dd08      	ble.n	800c22e <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x62>
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c22a:	4413      	add	r3, r2
 800c22c:	e000      	b.n	800c230 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x64>
 800c22e:	2300      	movs	r3, #0
 800c230:	627b      	str	r3, [r7, #36]	; 0x24

        if (contained.width > rect.width)
 800c232:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	dd7f      	ble.n	800c340 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x174>
        {
            int leftPadding = (-1 * contained.x * rect.width) / contained.width;
 800c240:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c244:	425b      	negs	r3, r3
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800c24c:	fb02 f303 	mul.w	r3, r2, r3
 800c250:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c254:	fb93 f3f2 	sdiv	r3, r3, r2
 800c258:	62fb      	str	r3, [r7, #44]	; 0x2c
            int rightPadding = ((contained.right() - rect.width) * rect.width) / contained.width;
 800c25a:	f107 0308 	add.w	r3, r7, #8
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fd fb2e 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	683a      	ldr	r2, [r7, #0]
 800c272:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800c276:	fb02 f303 	mul.w	r3, r2, r3
 800c27a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c27e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c282:	623b      	str	r3, [r7, #32]
            const int startWidth = rect.width - 2 * scrollbarPadding - 2 * SCROLLBAR_LINE - scrollSpace;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c28a:	461a      	mov	r2, r3
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	1ad2      	subs	r2, r2, r3
 800c296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c298:	1ad3      	subs	r3, r2, r3
 800c29a:	61fb      	str	r3, [r7, #28]
            int width = startWidth;
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	62bb      	str	r3, [r7, #40]	; 0x28
            width -= (leftPadding + rightPadding);
 800c2a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2a2:	6a3b      	ldr	r3, [r7, #32]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2a8:	1ad3      	subs	r3, r2, r3
 800c2aa:	62bb      	str	r3, [r7, #40]	; 0x28
            if (width < scrollbarWidth * 2)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2b2:	005b      	lsls	r3, r3, #1
 800c2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	da15      	bge.n	800c2e6 <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv+0x11a>
            {
                // If the contained area is very large, the scrollbar width may become zero or even negative.
                int diff = scrollbarWidth * 2 - width;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2c0:	005a      	lsls	r2, r3, #1
 800c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c4:	1ad3      	subs	r3, r2, r3
 800c2c6:	61bb      	str	r3, [r7, #24]
                width = scrollbarWidth * 2; // Force scrollbar width to a minimum
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	62bb      	str	r3, [r7, #40]	; 0x28
                // Distribute the deviation error based on current scrollbar X position (the amount subtracted from scrollbar xpos increases gradually).
                leftPadding -= (diff * leftPadding) / startWidth;
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2d6:	fb02 f203 	mul.w	r2, r2, r3
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	fb92 f3f3 	sdiv	r3, r2, r3
 800c2e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2e2:	1ad3      	subs	r3, r2, r3
 800c2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            res = Rect(leftPadding + scrollbarPadding + SCROLLBAR_LINE, rect.height - scrollbarWidth - scrollbarPadding - SCROLLBAR_LINE, width, scrollbarWidth);
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	b219      	sxth	r1, r3
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c306:	b29b      	uxth	r3, r3
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c312:	b29b      	uxth	r3, r3
 800c314:	1ad3      	subs	r3, r2, r3
 800c316:	b29b      	uxth	r3, r3
 800c318:	b21a      	sxth	r2, r3
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	b21c      	sxth	r4, r3
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c324:	b21b      	sxth	r3, r3
 800c326:	f107 0010 	add.w	r0, r7, #16
 800c32a:	9300      	str	r3, [sp, #0]
 800c32c:	4623      	mov	r3, r4
 800c32e:	f7fd faa7 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	461a      	mov	r2, r3
 800c336:	f107 0310 	add.w	r3, r7, #16
 800c33a:	cb03      	ldmia	r3!, {r0, r1}
 800c33c:	6010      	str	r0, [r2, #0]
 800c33e:	6051      	str	r1, [r2, #4]
        }
    }
    return res;
 800c340:	bf00      	nop
}
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	3734      	adds	r7, #52	; 0x34
 800c346:	46bd      	mov	sp, r7
 800c348:	bd90      	pop	{r4, r7, pc}

0800c34a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>:

Rect ScrollableContainer::getYScrollbar() const
{
 800c34a:	b590      	push	{r4, r7, lr}
 800c34c:	b08f      	sub	sp, #60	; 0x3c
 800c34e:	af02      	add	r7, sp, #8
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	6039      	str	r1, [r7, #0]
    Rect res(0, 0, 0, 0);
 800c354:	2300      	movs	r3, #0
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	2300      	movs	r3, #0
 800c35a:	2200      	movs	r2, #0
 800c35c:	2100      	movs	r1, #0
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f7fd fa8e 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    if (scrollableY)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 80a7 	beq.w	800c4be <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x174>
    {
        Rect contained = getContainedArea();
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	3380      	adds	r3, #128	; 0x80
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f107 0208 	add.w	r2, r7, #8
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	4610      	mov	r0, r2
 800c380:	4798      	blx	r3
        const int scrollSpace = (scrollableX && (contained.width > rect.width)) ? (2 * scrollbarPadding + scrollbarWidth + SCROLLBAR_LINE) : 0;
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00f      	beq.n	800c3ac <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x62>
 800c38c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c396:	429a      	cmp	r2, r3
 800c398:	dd08      	ble.n	800c3ac <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x62>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c3a8:	4413      	add	r3, r2
 800c3aa:	e000      	b.n	800c3ae <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x64>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	627b      	str	r3, [r7, #36]	; 0x24

        if (contained.height > rect.height)
 800c3b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	dd7f      	ble.n	800c4be <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x174>
        {
            int topPadding = (-1 * contained.y * rect.height) / contained.height;
 800c3be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c3c2:	425b      	negs	r3, r3
 800c3c4:	683a      	ldr	r2, [r7, #0]
 800c3c6:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800c3ca:	fb02 f303 	mul.w	r3, r2, r3
 800c3ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c3d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            int bottomPadding = ((contained.bottom() - rect.height) * rect.height) / contained.height;
 800c3d8:	f107 0308 	add.w	r3, r7, #8
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fd fa84 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800c3f4:	fb02 f303 	mul.w	r3, r2, r3
 800c3f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c3fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c400:	623b      	str	r3, [r7, #32]
            const int startHeight = rect.height - 2 * scrollbarPadding - 2 * SCROLLBAR_LINE - scrollSpace;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c408:	461a      	mov	r2, r3
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c410:	005b      	lsls	r3, r3, #1
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	61fb      	str	r3, [r7, #28]
            int height = startHeight;
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
            height -= (topPadding + bottomPadding);
 800c41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	4413      	add	r3, r2
 800c424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	62bb      	str	r3, [r7, #40]	; 0x28
            if (height < scrollbarWidth * 2)
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c430:	005b      	lsls	r3, r3, #1
 800c432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c434:	429a      	cmp	r2, r3
 800c436:	da15      	bge.n	800c464 <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv+0x11a>
            {
                // If the contained area is very large, the scrollbar height may become zero or even negative.
                int diff = scrollbarWidth * 2 - height;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c43e:	005a      	lsls	r2, r3, #1
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	61bb      	str	r3, [r7, #24]
                height = scrollbarWidth * 2; // Force scrollbar height to a minimum
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	62bb      	str	r3, [r7, #40]	; 0x28
                // Distribute the deviation error based on current scrollbar Y position (the amount subtracted from scrollbar ypos increases gradually).
                topPadding -= (diff * topPadding) / startHeight;
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c454:	fb02 f203 	mul.w	r2, r2, r3
 800c458:	69fb      	ldr	r3, [r7, #28]
 800c45a:	fb92 f3f3 	sdiv	r3, r2, r3
 800c45e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            res = Rect(rect.width - scrollbarWidth - scrollbarPadding - 2 * SCROLLBAR_LINE, topPadding + scrollbarPadding + SCROLLBAR_LINE, scrollbarWidth, height);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c472:	b29b      	uxth	r3, r3
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	b29a      	uxth	r2, r3
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c47e:	b29b      	uxth	r3, r3
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	b29b      	uxth	r3, r3
 800c484:	b219      	sxth	r1, r3
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	b29b      	uxth	r3, r3
 800c492:	4413      	add	r3, r2
 800c494:	b29b      	uxth	r3, r3
 800c496:	b21a      	sxth	r2, r3
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c49e:	b21c      	sxth	r4, r3
 800c4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a2:	b21b      	sxth	r3, r3
 800c4a4:	f107 0010 	add.w	r0, r7, #16
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	f7fd f9e8 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	f107 0310 	add.w	r3, r7, #16
 800c4b8:	cb03      	ldmia	r3!, {r0, r1}
 800c4ba:	6010      	str	r0, [r2, #0]
 800c4bc:	6051      	str	r1, [r2, #4]
        }
    }
    return res;
 800c4be:	bf00      	nop
}
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	3734      	adds	r7, #52	; 0x34
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd90      	pop	{r4, r7, pc}

0800c4c8 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>:

Rect ScrollableContainer::getXBorder(const Rect& xBar, const Rect& yBar) const
{
 800c4c8:	b590      	push	{r4, r7, lr}
 800c4ca:	b08b      	sub	sp, #44	; 0x2c
 800c4cc:	af02      	add	r7, sp, #8
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
 800c4d4:	603b      	str	r3, [r7, #0]
    Rect border(0, 0, 0, 0);
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2100      	movs	r1, #0
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7fd f9cd 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    if (!xBar.isEmpty())
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7fd fb92 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	f083 0301 	eor.w	r3, r3, #1
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d03d      	beq.n	800c574 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0xac>
    {
        const int scrollSpace = (!yBar.isEmpty()) ? (2 * scrollbarPadding + scrollbarWidth + SCROLLBAR_LINE) : 0;
 800c4f8:	6838      	ldr	r0, [r7, #0]
 800c4fa:	f7fd fb89 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c4fe:	4603      	mov	r3, r0
 800c500:	f083 0301 	eor.w	r3, r3, #1
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d008      	beq.n	800c51c <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x54>
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c510:	005b      	lsls	r3, r3, #1
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c518:	4413      	add	r3, r2
 800c51a:	e000      	b.n	800c51e <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_+0x56>
 800c51c:	2300      	movs	r3, #0
 800c51e:	61fb      	str	r3, [r7, #28]
        border = Rect(scrollbarPadding, xBar.y - SCROLLBAR_LINE, rect.width - 2 * scrollbarPadding - scrollSpace, scrollbarWidth + 2 * SCROLLBAR_LINE);
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c526:	b219      	sxth	r1, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c534:	b29a      	uxth	r2, r3
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	b29b      	uxth	r3, r3
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	b29a      	uxth	r2, r3
 800c546:	69fb      	ldr	r3, [r7, #28]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	b21a      	sxth	r2, r3
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c556:	b21b      	sxth	r3, r3
 800c558:	f107 0014 	add.w	r0, r7, #20
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	4613      	mov	r3, r2
 800c560:	4622      	mov	r2, r4
 800c562:	f7fd f98d 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	461a      	mov	r2, r3
 800c56a:	f107 0314 	add.w	r3, r7, #20
 800c56e:	cb03      	ldmia	r3!, {r0, r1}
 800c570:	6010      	str	r0, [r2, #0]
 800c572:	6051      	str	r1, [r2, #4]
    }
    return border;
 800c574:	bf00      	nop
}
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	3724      	adds	r7, #36	; 0x24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd90      	pop	{r4, r7, pc}

0800c57e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>:

Rect ScrollableContainer::getYBorder(const Rect& xBar, const Rect& yBar) const
{
 800c57e:	b5b0      	push	{r4, r5, r7, lr}
 800c580:	b08a      	sub	sp, #40	; 0x28
 800c582:	af02      	add	r7, sp, #8
 800c584:	60f8      	str	r0, [r7, #12]
 800c586:	60b9      	str	r1, [r7, #8]
 800c588:	607a      	str	r2, [r7, #4]
 800c58a:	603b      	str	r3, [r7, #0]
    Rect border(0, 0, 0, 0);
 800c58c:	2300      	movs	r3, #0
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	2300      	movs	r3, #0
 800c592:	2200      	movs	r2, #0
 800c594:	2100      	movs	r1, #0
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f7fd f972 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    if (!yBar.isEmpty())
 800c59c:	6838      	ldr	r0, [r7, #0]
 800c59e:	f7fd fb37 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	f083 0301 	eor.w	r3, r3, #1
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d03d      	beq.n	800c62a <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0xac>
    {
        const int scrollSpace = (!xBar.isEmpty()) ? (2 * scrollbarPadding + scrollbarWidth + SCROLLBAR_LINE) : 0;
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7fd fb2e 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	f083 0301 	eor.w	r3, r3, #1
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d008      	beq.n	800c5d2 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x54>
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5c6:	005b      	lsls	r3, r3, #1
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c5ce:	4413      	add	r3, r2
 800c5d0:	e000      	b.n	800c5d4 <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_+0x56>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	61fb      	str	r3, [r7, #28]
        border = Rect(yBar.x - SCROLLBAR_LINE, scrollbarPadding, scrollbarWidth + 2 * SCROLLBAR_LINE, rect.height - 2 * scrollbarPadding - scrollSpace);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5e2:	b21c      	sxth	r4, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5ea:	b21d      	sxth	r5, r3
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	005b      	lsls	r3, r3, #1
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	b29a      	uxth	r2, r3
 800c604:	69fb      	ldr	r3, [r7, #28]
 800c606:	b29b      	uxth	r3, r3
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	b21b      	sxth	r3, r3
 800c60e:	f107 0014 	add.w	r0, r7, #20
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	462b      	mov	r3, r5
 800c616:	4622      	mov	r2, r4
 800c618:	f7fd f932 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	461a      	mov	r2, r3
 800c620:	f107 0314 	add.w	r3, r7, #20
 800c624:	cb03      	ldmia	r3!, {r0, r1}
 800c626:	6010      	str	r0, [r2, #0]
 800c628:	6051      	str	r1, [r2, #4]
    }
    return border;
 800c62a:	bf00      	nop
}
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	3720      	adds	r7, #32
 800c630:	46bd      	mov	sp, r7
 800c632:	bdb0      	pop	{r4, r5, r7, pc}

0800c634 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>:

void ScrollableContainer::invalidateScrollbars()
{
 800c634:	b590      	push	{r4, r7, lr}
 800c636:	b08d      	sub	sp, #52	; 0x34
 800c638:	af02      	add	r7, sp, #8
 800c63a:	6078      	str	r0, [r7, #4]
    Rect xBar = getXScrollbar();
 800c63c:	f107 0320 	add.w	r3, r7, #32
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff fdc2 	bl	800c1cc <_ZNK8touchgfx19ScrollableContainer13getXScrollbarEv>
    Rect yBar = getYScrollbar();
 800c648:	f107 0318 	add.w	r3, r7, #24
 800c64c:	6879      	ldr	r1, [r7, #4]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff fe7b 	bl	800c34a <_ZNK8touchgfx19ScrollableContainer13getYScrollbarEv>

    Rect xBorder = getXBorder(xBar, yBar);
 800c654:	f107 0010 	add.w	r0, r7, #16
 800c658:	f107 0318 	add.w	r3, r7, #24
 800c65c:	f107 0220 	add.w	r2, r7, #32
 800c660:	6879      	ldr	r1, [r7, #4]
 800c662:	f7ff ff31 	bl	800c4c8 <_ZNK8touchgfx19ScrollableContainer10getXBorderERKNS_4RectES3_>
    Rect yBorder = getYBorder(xBar, yBar);
 800c666:	f107 0008 	add.w	r0, r7, #8
 800c66a:	f107 0318 	add.w	r3, r7, #24
 800c66e:	f107 0220 	add.w	r2, r7, #32
 800c672:	6879      	ldr	r1, [r7, #4]
 800c674:	f7ff ff83 	bl	800c57e <_ZNK8touchgfx19ScrollableContainer10getYBorderERKNS_4RectES3_>

    // The two if statements ensure that the two sliders is invalidates thereby hides them, before they are set to size zero.
    if (xSlider.getY() > xBorder.y)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3338      	adds	r3, #56	; 0x38
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fd faf7 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 800c682:	4603      	mov	r3, r0
 800c684:	461a      	mov	r2, r3
 800c686:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	bfcc      	ite	gt
 800c68e:	2301      	movgt	r3, #1
 800c690:	2300      	movle	r3, #0
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b00      	cmp	r3, #0
 800c696:	d004      	beq.n	800c6a2 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x6e>
    {
        xSlider.invalidate();
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3338      	adds	r3, #56	; 0x38
 800c69c:	4618      	mov	r0, r3
 800c69e:	f00e fece 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
    }
    if (ySlider.getX() > yBorder.x)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3368      	adds	r3, #104	; 0x68
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fd fad5 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	bfcc      	ite	gt
 800c6b8:	2301      	movgt	r3, #1
 800c6ba:	2300      	movle	r3, #0
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d004      	beq.n	800c6cc <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x98>
    {
        ySlider.invalidate();
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	3368      	adds	r3, #104	; 0x68
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f00e feb9 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
    }

    xSlider.setPosition(xBar.x, xBar.y, xBar.width, xBar.height);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c6d2:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 800c6d6:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800c6da:	f9b7 4024 	ldrsh.w	r4, [r7, #36]	; 0x24
 800c6de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	4623      	mov	r3, r4
 800c6e6:	f7fc fed3 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    ySlider.setPosition(yBar.x, yBar.y, yBar.width, yBar.height);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800c6f0:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 800c6f4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c6f8:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 800c6fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c700:	9300      	str	r3, [sp, #0]
 800c702:	4623      	mov	r3, r4
 800c704:	f7fc fec4 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>

    // x-/yBorder is given the coordinates zero and the witdh of the visiable area for the scrollable container,
    // to ensure that the entire area where for the scrollable bars is and have been is invalidated correct.
    xBorder.x = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	823b      	strh	r3, [r7, #16]
    xBorder.width = rect.width;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c712:	82bb      	strh	r3, [r7, #20]
    yBorder.height = rect.height;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c71a:	81fb      	strh	r3, [r7, #14]
    yBorder.y = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	817b      	strh	r3, [r7, #10]

    if (!xBorder.isEmpty())
 800c720:	f107 0310 	add.w	r3, r7, #16
 800c724:	4618      	mov	r0, r3
 800c726:	f7fd fa73 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c72a:	4603      	mov	r3, r0
 800c72c:	f083 0301 	eor.w	r3, r3, #1
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d008      	beq.n	800c748 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x114>
    {
        invalidateRect(xBorder);
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3310      	adds	r3, #16
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f107 0110 	add.w	r1, r7, #16
 800c744:	4610      	mov	r0, r2
 800c746:	4798      	blx	r3
    }

    if (!yBorder.isEmpty())
 800c748:	f107 0308 	add.w	r3, r7, #8
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fd fa5f 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800c752:	4603      	mov	r3, r0
 800c754:	f083 0301 	eor.w	r3, r3, #1
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d008      	beq.n	800c770 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv+0x13c>
    {
        invalidateRect(yBorder);
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3310      	adds	r3, #16
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f107 0108 	add.w	r1, r7, #8
 800c76c:	4610      	mov	r0, r2
 800c76e:	4798      	blx	r3
    }
}
 800c770:	bf00      	nop
 800c772:	372c      	adds	r7, #44	; 0x2c
 800c774:	46bd      	mov	sp, r7
 800c776:	bd90      	pop	{r4, r7, pc}

0800c778 <_ZN8touchgfx19ScrollableContainer8doScrollEss>:

bool ScrollableContainer::doScroll(int16_t deltaX, int16_t deltaY)
{
 800c778:	b590      	push	{r4, r7, lr}
 800c77a:	b087      	sub	sp, #28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	460b      	mov	r3, r1
 800c782:	807b      	strh	r3, [r7, #2]
 800c784:	4613      	mov	r3, r2
 800c786:	803b      	strh	r3, [r7, #0]
    if (!deltaX && !deltaY)
 800c788:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d105      	bne.n	800c79c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x24>
 800c790:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d101      	bne.n	800c79c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x24>
    {
        return false;
 800c798:	2300      	movs	r3, #0
 800c79a:	e0be      	b.n	800c91a <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x1a2>
    }
    bool couldScroll = false;
 800c79c:	2300      	movs	r3, #0
 800c79e:	75fb      	strb	r3, [r7, #23]
    Rect contained = getContainedArea();
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3380      	adds	r3, #128	; 0x80
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f107 020c 	add.w	r2, r7, #12
 800c7ac:	6879      	ldr	r1, [r7, #4]
 800c7ae:	4610      	mov	r0, r2
 800c7b0:	4798      	blx	r3
    if (contained.width > rect.width)
 800c7b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	dd39      	ble.n	800c834 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xbc>
    {
        if (deltaX > 0)
 800c7c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dd0e      	ble.n	800c7e6 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x6e>
        {
            if (contained.x + deltaX > 0)
 800c7c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	dd2f      	ble.n	800c838 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc0>
            {
                deltaX = -contained.x;
 800c7d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	425b      	negs	r3, r3
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	807b      	strh	r3, [r7, #2]
 800c7e4:	e028      	b.n	800c838 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc0>
            }
        }
        else if (deltaX < 0)
 800c7e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	da24      	bge.n	800c838 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc0>
        {
            if (contained.right() + deltaX < rect.width)
 800c7ee:	f107 030c 	add.w	r3, r7, #12
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fd f864 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c800:	4413      	add	r3, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800c808:	4293      	cmp	r3, r2
 800c80a:	bfb4      	ite	lt
 800c80c:	2301      	movlt	r3, #1
 800c80e:	2300      	movge	r3, #0
 800c810:	b2db      	uxtb	r3, r3
 800c812:	2b00      	cmp	r3, #0
 800c814:	d010      	beq.n	800c838 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc0>
            {
                deltaX = rect.width - contained.right();
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c81c:	b29c      	uxth	r4, r3
 800c81e:	f107 030c 	add.w	r3, r7, #12
 800c822:	4618      	mov	r0, r3
 800c824:	f7fd f84c 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 800c828:	4603      	mov	r3, r0
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	1ae3      	subs	r3, r4, r3
 800c82e:	b29b      	uxth	r3, r3
 800c830:	807b      	strh	r3, [r7, #2]
 800c832:	e001      	b.n	800c838 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xc0>
            }
        }
    }
    else
    {
        deltaX = 0;
 800c834:	2300      	movs	r3, #0
 800c836:	807b      	strh	r3, [r7, #2]
    }

    if (contained.height > rect.height)
 800c838:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c842:	429a      	cmp	r2, r3
 800c844:	dd39      	ble.n	800c8ba <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x142>
    {
        if (deltaY > 0)
 800c846:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	dd0e      	ble.n	800c86c <_ZN8touchgfx19ScrollableContainer8doScrollEss+0xf4>
        {
            if (contained.y + deltaY > 0)
 800c84e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c852:	461a      	mov	r2, r3
 800c854:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c858:	4413      	add	r3, r2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	dd2f      	ble.n	800c8be <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x146>
            {
                deltaY = -contained.y;
 800c85e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c862:	b29b      	uxth	r3, r3
 800c864:	425b      	negs	r3, r3
 800c866:	b29b      	uxth	r3, r3
 800c868:	803b      	strh	r3, [r7, #0]
 800c86a:	e028      	b.n	800c8be <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x146>
            }
        }
        else if (deltaY < 0)
 800c86c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c870:	2b00      	cmp	r3, #0
 800c872:	da24      	bge.n	800c8be <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x146>
        {
            if (contained.bottom() + deltaY < rect.height)
 800c874:	f107 030c 	add.w	r3, r7, #12
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fd f836 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 800c87e:	4603      	mov	r3, r0
 800c880:	461a      	mov	r2, r3
 800c882:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c886:	4413      	add	r3, r2
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800c88e:	4293      	cmp	r3, r2
 800c890:	bfb4      	ite	lt
 800c892:	2301      	movlt	r3, #1
 800c894:	2300      	movge	r3, #0
 800c896:	b2db      	uxtb	r3, r3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d010      	beq.n	800c8be <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x146>
            {
                deltaY = rect.height - contained.bottom();
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c8a2:	b29c      	uxth	r4, r3
 800c8a4:	f107 030c 	add.w	r3, r7, #12
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fd f81e 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	1ae3      	subs	r3, r4, r3
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	803b      	strh	r3, [r7, #0]
 800c8b8:	e001      	b.n	800c8be <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x146>
            }
        }
    }
    else
    {
        deltaY = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	803b      	strh	r3, [r7, #0]
    }

    if (deltaX || deltaY)
 800c8be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d103      	bne.n	800c8ce <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x156>
 800c8c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d024      	beq.n	800c918 <_ZN8touchgfx19ScrollableContainer8doScrollEss+0x1a0>
    {
        scrolledXDistance += deltaX;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	887b      	ldrh	r3, [r7, #2]
 800c8d8:	4413      	add	r3, r2
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	b21a      	sxth	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        scrolledYDistance += deltaY;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	883b      	ldrh	r3, [r7, #0]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	b21a      	sxth	r2, r3
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        moveChildrenRelative(deltaX, deltaY);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	3384      	adds	r3, #132	; 0x84
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f9b7 2000 	ldrsh.w	r2, [r7]
 800c906:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	4798      	blx	r3

        invalidateScrollbars();
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7ff fe90 	bl	800c634 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
        couldScroll = true;
 800c914:	2301      	movs	r3, #1
 800c916:	75fb      	strb	r3, [r7, #23]
    }
    return couldScroll;
 800c918:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	371c      	adds	r7, #28
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd90      	pop	{r4, r7, pc}

0800c922 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv>:

void ScrollableContainer::childGeometryChanged()
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b086      	sub	sp, #24
 800c926:	af00      	add	r7, sp, #0
 800c928:	6078      	str	r0, [r7, #4]
    Rect contained = getContainedArea();
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	3380      	adds	r3, #128	; 0x80
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f107 0208 	add.w	r2, r7, #8
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	4610      	mov	r0, r2
 800c93a:	4798      	blx	r3
    // If children are not aligned top left, make sure they are
    if (contained.y > 0)
 800c93c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c940:	2b00      	cmp	r3, #0
 800c942:	dd0c      	ble.n	800c95e <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x3c>
    {
        moveChildrenRelative(0, -contained.y);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3384      	adds	r3, #132	; 0x84
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800c950:	b292      	uxth	r2, r2
 800c952:	4252      	negs	r2, r2
 800c954:	b292      	uxth	r2, r2
 800c956:	b212      	sxth	r2, r2
 800c958:	2100      	movs	r1, #0
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	4798      	blx	r3
    }
    if (contained.x > 0)
 800c95e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	dd0c      	ble.n	800c980 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x5e>
    {
        moveChildrenRelative(-contained.x, 0);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3384      	adds	r3, #132	; 0x84
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800c972:	b292      	uxth	r2, r2
 800c974:	4252      	negs	r2, r2
 800c976:	b292      	uxth	r2, r2
 800c978:	b211      	sxth	r1, r2
 800c97a:	2200      	movs	r2, #0
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	4798      	blx	r3
    }
    // Make sure we haven't scrolled below the bottom
    if (contained.bottom() < rect.height)
 800c980:	f107 0308 	add.w	r3, r7, #8
 800c984:	4618      	mov	r0, r3
 800c986:	f7fc ffb0 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 800c98a:	4603      	mov	r3, r0
 800c98c:	461a      	mov	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c994:	429a      	cmp	r2, r3
 800c996:	bfb4      	ite	lt
 800c998:	2301      	movlt	r3, #1
 800c99a:	2300      	movge	r3, #0
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d02b      	beq.n	800c9fa <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0xd8>
    {
        int16_t deltaY = contained.bottom() - rect.height;
 800c9a2:	f107 0308 	add.w	r3, r7, #8
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fc ff9f 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	82fb      	strh	r3, [r7, #22]
        if (contained.y > deltaY)
 800c9be:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c9c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	da01      	bge.n	800c9ce <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0xac>
        {
            deltaY = contained.y;
 800c9ca:	897b      	ldrh	r3, [r7, #10]
 800c9cc:	82fb      	strh	r3, [r7, #22]
        }
        scrolledYDistance -= deltaY;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 800c9d4:	b29a      	uxth	r2, r3
 800c9d6:	8afb      	ldrh	r3, [r7, #22]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	b21a      	sxth	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
        moveChildrenRelative(0, -deltaY);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	3384      	adds	r3, #132	; 0x84
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	8afa      	ldrh	r2, [r7, #22]
 800c9ee:	4252      	negs	r2, r2
 800c9f0:	b292      	uxth	r2, r2
 800c9f2:	b212      	sxth	r2, r2
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	4798      	blx	r3
    }
    // Make sure we haven't scrolled too far to the right
    if (contained.right() < rect.width)
 800c9fa:	f107 0308 	add.w	r3, r7, #8
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fc ff5e 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 800ca04:	4603      	mov	r3, r0
 800ca06:	461a      	mov	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	bfb4      	ite	lt
 800ca12:	2301      	movlt	r3, #1
 800ca14:	2300      	movge	r3, #0
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d02c      	beq.n	800ca76 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x154>
    {
        int deltaX = contained.right() - rect.width;
 800ca1c:	f107 0308 	add.w	r3, r7, #8
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7fc ff4d 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461a      	mov	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	613b      	str	r3, [r7, #16]
        if (contained.x > deltaX)
 800ca34:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	da02      	bge.n	800ca46 <_ZN8touchgfx19ScrollableContainer20childGeometryChangedEv+0x124>
        {
            deltaX = contained.x;
 800ca40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ca44:	613b      	str	r3, [r7, #16]
        }
        scrolledXDistance -= deltaX;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	b21a      	sxth	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        moveChildrenRelative(-deltaX, 0);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	3384      	adds	r3, #132	; 0x84
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	4252      	negs	r2, r2
 800ca6c:	b292      	uxth	r2, r2
 800ca6e:	b211      	sxth	r1, r2
 800ca70:	2200      	movs	r2, #0
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	4798      	blx	r3
    }
    invalidateScrollbars();
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7ff fddc 	bl	800c634 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
}
 800ca7c:	bf00      	nop
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>:

void ScrollableContainer::add(Drawable& d)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
    remove(xSlider);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3368      	adds	r3, #104	; 0x68
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	3238      	adds	r2, #56	; 0x38
 800ca9c:	4611      	mov	r1, r2
 800ca9e:	4798      	blx	r3
    remove(ySlider);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	3368      	adds	r3, #104	; 0x68
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	3268      	adds	r2, #104	; 0x68
 800caae:	4611      	mov	r1, r2
 800cab0:	4798      	blx	r3

    Container::add(d);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6839      	ldr	r1, [r7, #0]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fd f90a 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(xSlider);
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	3338      	adds	r3, #56	; 0x38
 800cac2:	4619      	mov	r1, r3
 800cac4:	4610      	mov	r0, r2
 800cac6:	f7fd f903 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(ySlider);
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3368      	adds	r3, #104	; 0x68
 800cad0:	4619      	mov	r1, r3
 800cad2:	4610      	mov	r0, r2
 800cad4:	f7fd f8fc 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv>:

Rect ScrollableContainer::getContainedArea() const
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af02      	add	r7, sp, #8
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caee:	617b      	str	r3, [r7, #20]
    Rect contained(0, 0, 0, 0);
 800caf0:	2300      	movs	r3, #0
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	2300      	movs	r3, #0
 800caf6:	2200      	movs	r2, #0
 800caf8:	2100      	movs	r1, #0
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7fc fec0 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    Rect r(0, 0, rect.width, rect.height);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800cb0c:	f107 000c 	add.w	r0, r7, #12
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	4613      	mov	r3, r2
 800cb14:	2200      	movs	r2, #0
 800cb16:	2100      	movs	r1, #0
 800cb18:	f7fc feb2 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    contained.expandToFit(r);
 800cb1c:	f107 030c 	add.w	r3, r7, #12
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7fc ffe8 	bl	8009af8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
    while (d)
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d021      	beq.n	800cb72 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x92>
    {
        if ((d != &xSlider) && (d != &ySlider) && (d->isVisible()))
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	3338      	adds	r3, #56	; 0x38
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d00c      	beq.n	800cb52 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x72>
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	3368      	adds	r3, #104	; 0x68
 800cb3c:	697a      	ldr	r2, [r7, #20]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d007      	beq.n	800cb52 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x72>
 800cb42:	6978      	ldr	r0, [r7, #20]
 800cb44:	f7fc fd60 	bl	8009608 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d001      	beq.n	800cb52 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x72>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e000      	b.n	800cb54 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x74>
 800cb52:	2300      	movs	r3, #0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d007      	beq.n	800cb68 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x88>
        {
            contained.expandToFit(d->getRect());
 800cb58:	6978      	ldr	r0, [r7, #20]
 800cb5a:	f7fd f870 	bl	8009c3e <_ZNK8touchgfx8Drawable7getRectEv>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7fc ffc8 	bl	8009af8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        }
        d = d->getNextSibling();
 800cb68:	6978      	ldr	r0, [r7, #20]
 800cb6a:	f7fe fb23 	bl	800b1b4 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800cb6e:	6178      	str	r0, [r7, #20]
    while (d)
 800cb70:	e7da      	b.n	800cb28 <_ZNK8touchgfx19ScrollableContainer16getContainedAreaEv+0x48>
    }
    return contained;
 800cb72:	bf00      	nop
}
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss>:
    scrolledYDistance = 0;
    invalidateScrollbars();
}

void ScrollableContainer::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	807b      	strh	r3, [r7, #2]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb90:	60fb      	str	r3, [r7, #12]
    while (d)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d018      	beq.n	800cbca <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x4e>
    {
        if ((d != &xSlider) && (d != &ySlider))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3338      	adds	r3, #56	; 0x38
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d00e      	beq.n	800cbc0 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x44>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3368      	adds	r3, #104	; 0x68
 800cba6:	68fa      	ldr	r2, [r7, #12]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d009      	beq.n	800cbc0 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x44>
        {
            d->moveRelative(deltaX, deltaY);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3354      	adds	r3, #84	; 0x54
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800cbb8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	4798      	blx	r3
        }
        d = d->getNextSibling();
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f7fe faf7 	bl	800b1b4 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800cbc6:	60f8      	str	r0, [r7, #12]
    while (d)
 800cbc8:	e7e3      	b.n	800cb92 <_ZN8touchgfx19ScrollableContainer20moveChildrenRelativeEss+0x16>
    }
}
 800cbca:	bf00      	nop
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}

0800cbd2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv>:

void ScrollableContainer::handleTickEvent()
{
 800cbd2:	b590      	push	{r4, r7, lr}
 800cbd4:	b089      	sub	sp, #36	; 0x24
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
    if (animate)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	f000 808a 	beq.w	800ccfa <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x128>
    {
        // Calculate new position or stop animation
        animationCounter++;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800cbec:	3301      	adds	r3, #1
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
        if (animationCounter <= scrollDuration)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d861      	bhi.n	800ccca <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xf8>
        {
            // Calculate value in [beginningValue ; (beginningValue+targetValue)]
            int16_t calculatedValue = EasingEquations::cubicEaseOut(animationCounter, beginningValue, targetValue, scrollDuration);
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f8b3 00b6 	ldrh.w	r0, [r3, #182]	; 0xb6
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f9b3 10b2 	ldrsh.w	r1, [r3, #178]	; 0xb2
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f9b3 20b4 	ldrsh.w	r2, [r3, #180]	; 0xb4
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800cc1e:	f00f f91f 	bl	801be60 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800cc22:	4603      	mov	r3, r0
 800cc24:	83fb      	strh	r3, [r7, #30]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 800cc26:	8bfb      	ldrh	r3, [r7, #30]
 800cc28:	f003 0301 	and.w	r3, r3, #1
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00b      	beq.n	800cc4a <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x78>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0) ? 1 : -1;
 800cc32:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dd01      	ble.n	800cc3e <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x6c>
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	e001      	b.n	800cc42 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x70>
 800cc3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc42:	8bfb      	ldrh	r3, [r7, #30]
 800cc44:	4413      	add	r3, r2
 800cc46:	b29b      	uxth	r3, r3
 800cc48:	83fb      	strh	r3, [r7, #30]
            }

            // Convert to delta value relative to current X or Y
            int16_t scrollX = (accelDirection == GestureEvent::SWIPE_VERTICAL) ? 0 : (calculatedValue - getContainedArea().x);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d010      	beq.n	800cc76 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa4>
 800cc54:	8bfc      	ldrh	r4, [r7, #30]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3380      	adds	r3, #128	; 0x80
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f107 0208 	add.w	r2, r7, #8
 800cc62:	6879      	ldr	r1, [r7, #4]
 800cc64:	4610      	mov	r0, r2
 800cc66:	4798      	blx	r3
 800cc68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	1ae3      	subs	r3, r4, r3
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	b21b      	sxth	r3, r3
 800cc74:	e000      	b.n	800cc78 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xa6>
 800cc76:	2300      	movs	r3, #0
 800cc78:	83bb      	strh	r3, [r7, #28]
            int16_t scrollY = (accelDirection == GestureEvent::SWIPE_HORIZONTAL) ? 0 : (calculatedValue - getContainedArea().y);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d010      	beq.n	800cca6 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xd4>
 800cc84:	8bfc      	ldrh	r4, [r7, #30]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	3380      	adds	r3, #128	; 0x80
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f107 0210 	add.w	r2, r7, #16
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	4610      	mov	r0, r2
 800cc96:	4798      	blx	r3
 800cc98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	1ae3      	subs	r3, r4, r3
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	b21b      	sxth	r3, r3
 800cca4:	e000      	b.n	800cca8 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0xd6>
 800cca6:	2300      	movs	r3, #0
 800cca8:	837b      	strh	r3, [r7, #26]

            // Perform the actual animation step, stop animation if
            // scrolling was not possible (doScroll invalidates children)
            animate = doScroll(scrollX, scrollY);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	338c      	adds	r3, #140	; 0x8c
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800ccb6:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	4798      	blx	r3
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800ccc8:	e003      	b.n	800ccd2 <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x100>
        }
        else
        {
            animate = false;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        }

        if (!animate)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800ccd8:	f083 0301 	eor.w	r3, r3, #1
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00b      	beq.n	800ccfa <_ZN8touchgfx19ScrollableContainer15handleTickEventEv+0x128>
        {
            Application::getInstance()->unregisterTimerWidget(this);
 800cce2:	f00d ff07 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 800cce6:	4602      	mov	r2, r0
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4619      	mov	r1, r3
 800ccec:	4610      	mov	r0, r2
 800ccee:	f00d ff37 	bl	801ab60 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
            animationCounter = 0;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
        }
    }
}
 800ccfa:	bf00      	nop
 800ccfc:	3724      	adds	r7, #36	; 0x24
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd90      	pop	{r4, r7, pc}

0800cd02 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>:

void ScrollableContainer::setScrollbarsColor(colortype color)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b082      	sub	sp, #8
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]
    scrollbarColor = color;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	631a      	str	r2, [r3, #48]	; 0x30
    xSlider.setColor(scrollbarColor);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	f7fe f84b 	bl	800adb8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    ySlider.setColor(scrollbarColor);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cd2c:	4610      	mov	r0, r2
 800cd2e:	f7fe f843 	bl	800adb8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
}
 800cd32:	bf00      	nop
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEv>:
{
    scrollbarsVisible = newVisible;
}

void ScrollableContainer::setScrollbarsPermanentlyVisible()
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b082      	sub	sp, #8
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
    scrollbarsPermanentlyVisible = true;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
    xSlider.setVisible(true);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3338      	adds	r3, #56	; 0x38
 800cd4e:	2101      	movs	r1, #1
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fd ffa7 	bl	800aca4 <_ZN8touchgfx8Drawable10setVisibleEb>
    ySlider.setVisible(true);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	3368      	adds	r3, #104	; 0x68
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fd ffa1 	bl	800aca4 <_ZN8touchgfx8Drawable10setVisibleEb>
    invalidateScrollbars();
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff fc66 	bl	800c634 <_ZN8touchgfx19ScrollableContainer20invalidateScrollbarsEv>
}
 800cd68:	bf00      	nop
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <_ZN8touchgfx3absIsEET_S1_>:
 * @param d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 800cd70:	b480      	push	{r7}
 800cd72:	b083      	sub	sp, #12
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	80fb      	strh	r3, [r7, #6]
{
    if (d < 0)
 800cd7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	da04      	bge.n	800cd8c <_ZN8touchgfx3absIsEET_S1_+0x1c>
    {
        return -d;
 800cd82:	88fb      	ldrh	r3, [r7, #6]
 800cd84:	425b      	negs	r3, r3
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	b21b      	sxth	r3, r3
 800cd8a:	e001      	b.n	800cd90 <_ZN8touchgfx3absIsEET_S1_+0x20>
    }
    return d;
 800cd8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fd ffb2 	bl	800ad10 <_ZN8touchgfx6WidgetC1Ev>
 800cdac:	4a09      	ldr	r2, [pc, #36]	; (800cdd4 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	629a      	str	r2, [r3, #40]	; 0x28
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f7fd ff7d 	bl	800acc4 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	080238c8 	.word	0x080238c8

0800cdd8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800cde8:	bf00      	nop
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	4a05      	ldr	r2, [pc, #20]	; (800ce14 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fc fc67 	bl	80096d8 <_ZN8touchgfx6WidgetD1Ev>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	080238c8 	.word	0x080238c8

0800ce18 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f7ff ffe7 	bl	800cdf4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800ce26:	2130      	movs	r1, #48	; 0x30
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f013 fdca 	bl	80209c2 <_ZdlPvj>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff ffaa 	bl	800cd9c <_ZN8touchgfx14AbstractButtonC1Ev>
 800ce48:	4a0c      	ldr	r2, [pc, #48]	; (800ce7c <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	601a      	str	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	332e      	adds	r3, #46	; 0x2e
 800ce52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fc fae9 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	3330      	adds	r3, #48	; 0x30
 800ce60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ce64:	4618      	mov	r0, r3
 800ce66:	f7fc fae2 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	22ff      	movs	r2, #255	; 0xff
 800ce6e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	08023a10 	.word	0x08023a10

0800ce80 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	4a05      	ldr	r2, [pc, #20]	; (800cea0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	601a      	str	r2, [r3, #0]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7ff ffaf 	bl	800cdf4 <_ZN8touchgfx14AbstractButtonD1Ev>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	08023a10 	.word	0x08023a10

0800cea4 <_ZN8touchgfx6ButtonD0Ev>:
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7ff ffe7 	bl	800ce80 <_ZN8touchgfx6ButtonD1Ev>
 800ceb2:	2134      	movs	r1, #52	; 0x34
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f013 fd84 	bl	80209c2 <_ZdlPvj>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4618      	mov	r0, r3
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	4a04      	ldr	r2, [pc, #16]	; (800cee0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	601a      	str	r2, [r3, #0]
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4618      	mov	r0, r3
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	08023098 	.word	0x08023098

0800cee4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
    }
 800ceec:	4a04      	ldr	r2, [pc, #16]	; (800cf00 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	08023098 	.word	0x08023098

0800cf04 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
    }
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff ffe9 	bl	800cee4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800cf12:	2104      	movs	r1, #4
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f013 fd54 	bl	80209c2 <_ZdlPvj>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMax
     */
    virtual uint16_t getIndicatorMin() const
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800cf32:	b29b      	uxth	r3, r3
    }
 800cf34:	4618      	mov	r0, r3
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
     *
     * @see setupHorizontalSlider
     * @see setupVerticalSlider
     * @see getIndicatorMin
     */
    virtual uint16_t getIndicatorMax() const
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
    {
        return indicatorMaxPosition;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800cf4e:	b29b      	uxth	r3, r3
    }
 800cf50:	4618      	mov	r0, r3
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr

0800cf5c <_ZNK8touchgfx6Slider11getMinValueEv>:
     *
     * @return The minimum value.
     * @see setValueRange
     * @see getMaxValue
     */
    virtual uint16_t getMinValue() const
 800cf5c:	b480      	push	{r7}
 800cf5e:	b083      	sub	sp, #12
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMin;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf68:	b29b      	uxth	r3, r3
    }
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	370c      	adds	r7, #12
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf74:	4770      	bx	lr

0800cf76 <_ZNK8touchgfx6Slider11getMaxValueEv>:
     *
     * @return The maximum value.
     * @see setValueRange
     * @see getMinValue
     */
    virtual uint16_t getMaxValue() const
 800cf76:	b480      	push	{r7}
 800cf78:	b083      	sub	sp, #12
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
    {
        return valueRangeMax;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf82:	b29b      	uxth	r3, r3
    }
 800cf84:	4618      	mov	r0, r3
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <_ZNK8touchgfx6Slider7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SLIDER;
 800cf98:	2318      	movs	r3, #24
    }
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr
	...

0800cfa8 <_ZN8touchgfx6SliderC1Ev>:

#include <touchgfx/containers/Slider.hpp>

namespace touchgfx
{
Slider::Slider() :
 800cfa8:	b590      	push	{r4, r7, lr}
 800cfaa:	b087      	sub	sp, #28
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
    valueRangeMax(1),
    indicatorMinPosition(0),
    indicatorMaxPosition(1),
    startValueCallback(0),
    stopValueCallback(0),
    newValueCallback(0)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fd fe96 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800cfb8:	4a42      	ldr	r2, [pc, #264]	; (800d0c4 <_ZN8touchgfx6SliderC1Ev+0x11c>)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	601a      	str	r2, [r3, #0]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	631a      	str	r2, [r3, #48]	; 0x30
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	635a      	str	r2, [r3, #52]	; 0x34
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2201      	movs	r2, #1
 800cfd6:	639a      	str	r2, [r3, #56]	; 0x38
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800cfde:	f107 030c 	add.w	r3, r7, #12
 800cfe2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fc fa21 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800cfec:	f107 030c 	add.w	r3, r7, #12
 800cff0:	4619      	mov	r1, r3
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7fd ff18 	bl	800ae28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800cffe:	f107 0310 	add.w	r3, r7, #16
 800d002:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d006:	4618      	mov	r0, r3
 800d008:	f7fc fa11 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800d00c:	f107 0310 	add.w	r3, r7, #16
 800d010:	4619      	mov	r1, r3
 800d012:	4620      	mov	r0, r4
 800d014:	f7fd ff08 	bl	800ae28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800d01e:	f107 0314 	add.w	r3, r7, #20
 800d022:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d026:	4618      	mov	r0, r3
 800d028:	f7fc fa01 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800d02c:	f107 0314 	add.w	r3, r7, #20
 800d030:	4619      	mov	r1, r3
 800d032:	4620      	mov	r0, r4
 800d034:	f7fd fef8 	bl	800ae28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	33c0      	adds	r3, #192	; 0xc0
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fd fe51 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2200      	movs	r2, #0
 800d056:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
{
    setTouchable(true);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2101      	movs	r1, #1
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd fe28 	bl	800acc4 <_ZN8touchgfx8Drawable12setTouchableEb>

    // The backgroundSelectedViewPort is a container into which the bitmap for the "filled" background
    // is placed. Containers are viewports, so the dimension of this container controls how
    // much of the filled background is visible.
    backgroundSelectedViewPort.add(backgroundSelected);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3368      	adds	r3, #104	; 0x68
 800d07e:	4619      	mov	r1, r3
 800d080:	4610      	mov	r0, r2
 800d082:	f7fc fe25 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Container::add(background);
 800d086:	687a      	ldr	r2, [r7, #4]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	333c      	adds	r3, #60	; 0x3c
 800d08c:	4619      	mov	r1, r3
 800d08e:	4610      	mov	r0, r2
 800d090:	f7fc fe1e 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(backgroundSelectedViewPort);
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	33c0      	adds	r3, #192	; 0xc0
 800d09a:	4619      	mov	r1, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	f7fc fe17 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(indicator);
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3394      	adds	r3, #148	; 0x94
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f7fc fe10 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    // Default value range
    Slider::setValueRange(0, 100);
 800d0b0:	2264      	movs	r2, #100	; 0x64
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fce3 	bl	800da80 <_ZN8touchgfx6Slider13setValueRangeEii>
}
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4618      	mov	r0, r3
 800d0be:	371c      	adds	r7, #28
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd90      	pop	{r4, r7, pc}
 800d0c4:	080230b0 	.word	0x080230b0

0800d0c8 <_ZN8touchgfx6SliderD1Ev>:

Slider::~Slider()
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	4a0f      	ldr	r2, [pc, #60]	; (800d110 <_ZN8touchgfx6SliderD1Ev+0x48>)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	33c0      	adds	r3, #192	; 0xc0
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fc fb58 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3394      	adds	r3, #148	; 0x94
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fc fb81 	bl	80097ec <_ZN8touchgfx5ImageD1Ev>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3368      	adds	r3, #104	; 0x68
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7fc fb7c 	bl	80097ec <_ZN8touchgfx5ImageD1Ev>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	333c      	adds	r3, #60	; 0x3c
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fc fb77 	bl	80097ec <_ZN8touchgfx5ImageD1Ev>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4618      	mov	r0, r3
 800d102:	f7fc fb45 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
{
}
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	4618      	mov	r0, r3
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	080230b0 	.word	0x080230b0

0800d114 <_ZN8touchgfx6SliderD0Ev>:
Slider::~Slider()
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
}
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff ffd3 	bl	800d0c8 <_ZN8touchgfx6SliderD1Ev>
 800d122:	21fc      	movs	r1, #252	; 0xfc
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f013 fc4c 	bl	80209c2 <_ZdlPvj>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	3708      	adds	r7, #8
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:

void Slider::setBitmaps(const Bitmap& sliderBackground, const Bitmap& sliderBackgroundSelected, const Bitmap& indicatorBitmap)
{
 800d134:	b590      	push	{r4, r7, lr}
 800d136:	b085      	sub	sp, #20
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	603b      	str	r3, [r7, #0]
    assert(sliderBackground.getWidth() == sliderBackgroundSelected.getWidth() &&
 800d142:	68b8      	ldr	r0, [r7, #8]
 800d144:	f00f ff22 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d148:	4603      	mov	r3, r0
 800d14a:	461c      	mov	r4, r3
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f00f ff1d 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800d152:	4603      	mov	r3, r0
 800d154:	429c      	cmp	r4, r3
 800d156:	d10a      	bne.n	800d16e <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x3a>
 800d158:	68b8      	ldr	r0, [r7, #8]
 800d15a:	f00f ff51 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d15e:	4603      	mov	r3, r0
 800d160:	461c      	mov	r4, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f00f ff4c 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800d168:	4603      	mov	r3, r0
 800d16a:	429c      	cmp	r4, r3
 800d16c:	d005      	beq.n	800d17a <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0x46>
 800d16e:	4b1b      	ldr	r3, [pc, #108]	; (800d1dc <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xa8>)
 800d170:	4a1b      	ldr	r2, [pc, #108]	; (800d1e0 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xac>)
 800d172:	2137      	movs	r1, #55	; 0x37
 800d174:	481b      	ldr	r0, [pc, #108]	; (800d1e4 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_+0xb0>)
 800d176:	f013 fc41 	bl	80209fc <__assert_func>
 800d17a:	bf00      	nop
           sliderBackground.getHeight() == sliderBackgroundSelected.getHeight() &&
           "Slider::setBitmaps - background and backgroundFilled must have same dimensions");

    background.setBitmap(sliderBackground);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	333c      	adds	r3, #60	; 0x3c
 800d180:	68b9      	ldr	r1, [r7, #8]
 800d182:	4618      	mov	r0, r3
 800d184:	f002 feb6 	bl	800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelected.setBitmap(sliderBackgroundSelected);
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3368      	adds	r3, #104	; 0x68
 800d18c:	6879      	ldr	r1, [r7, #4]
 800d18e:	4618      	mov	r0, r3
 800d190:	f002 feb0 	bl	800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    indicator.setBitmap(indicatorBitmap);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	3394      	adds	r3, #148	; 0x94
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f002 feaa 	bl	800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    backgroundSelectedViewPort.setWidth(backgroundSelected.getWidth());
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	3368      	adds	r3, #104	; 0x68
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fd f821 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f7fc f9d4 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
    backgroundSelectedViewPort.setHeight(backgroundSelected.getHeight());
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	3368      	adds	r3, #104	; 0x68
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fd f821 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4620      	mov	r0, r4
 800d1d0:	f7fc f9d6 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>
}
 800d1d4:	bf00      	nop
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd90      	pop	{r4, r7, pc}
 800d1dc:	0802211c 	.word	0x0802211c
 800d1e0:	08023174 	.word	0x08023174
 800d1e4:	080221fc 	.word	0x080221fc

0800d1e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
{
    setBitmaps(Bitmap(sliderBackground), Bitmap(sliderBackgroundSelected), Bitmap(indicatorBitmap));
}

void Slider::setupHorizontalSlider(uint16_t backgroundX, uint16_t backgroundY, uint16_t indicatorY, uint16_t indicatorMinX, uint16_t indicatorMaxX)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b088      	sub	sp, #32
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	4608      	mov	r0, r1
 800d1f2:	4611      	mov	r1, r2
 800d1f4:	461a      	mov	r2, r3
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	817b      	strh	r3, [r7, #10]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	813b      	strh	r3, [r7, #8]
 800d1fe:	4613      	mov	r3, r2
 800d200:	80fb      	strh	r3, [r7, #6]
    assert(indicatorMinX < indicatorMaxX && "Slider::setupHorizontalSlider - indicatorMinX must be smaller than indicatorMaxX");
 800d202:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d204:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d206:	429a      	cmp	r2, r3
 800d208:	d305      	bcc.n	800d216 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x2e>
 800d20a:	4b4a      	ldr	r3, [pc, #296]	; (800d334 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x14c>)
 800d20c:	4a4a      	ldr	r2, [pc, #296]	; (800d338 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x150>)
 800d20e:	2147      	movs	r1, #71	; 0x47
 800d210:	484a      	ldr	r0, [pc, #296]	; (800d33c <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0x154>)
 800d212:	f013 fbf3 	bl	80209fc <__assert_func>

    sliderOrientation = HORIZONTAL;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2200      	movs	r2, #0
 800d21a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    background.setXY(backgroundX, backgroundY);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	333c      	adds	r3, #60	; 0x3c
 800d222:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d226:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fc f97b 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	33c0      	adds	r3, #192	; 0xc0
 800d234:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d238:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fc f972 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelected.setXY(0, 0);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3368      	adds	r3, #104	; 0x68
 800d246:	2200      	movs	r2, #0
 800d248:	2100      	movs	r1, #0
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fc f96b 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    indicator.setY(indicatorY);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	3394      	adds	r3, #148	; 0x94
 800d254:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d258:	4611      	mov	r1, r2
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fc f954 	bl	8009508 <_ZN8touchgfx8Drawable4setYEs>

    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	333c      	adds	r3, #60	; 0x3c
 800d264:	4618      	mov	r0, r3
 800d266:	f7fc ffc4 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d26a:	4603      	mov	r3, r0
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	897b      	ldrh	r3, [r7, #10]
 800d270:	4413      	add	r3, r2
 800d272:	b29b      	uxth	r3, r3
 800d274:	837b      	strh	r3, [r7, #26]
    uint16_t indicatorWidth = indicatorMaxX + static_cast<uint16_t>(indicator.getWidth());
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3394      	adds	r3, #148	; 0x94
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fc ffb9 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d280:	4603      	mov	r3, r0
 800d282:	b29a      	uxth	r2, r3
 800d284:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d286:	4413      	add	r3, r2
 800d288:	b29b      	uxth	r3, r3
 800d28a:	833b      	strh	r3, [r7, #24]
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800d28c:	8b7a      	ldrh	r2, [r7, #26]
 800d28e:	8b3b      	ldrh	r3, [r7, #24]
 800d290:	429a      	cmp	r2, r3
 800d292:	d902      	bls.n	800d29a <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb2>
 800d294:	8b7b      	ldrh	r3, [r7, #26]
 800d296:	b21b      	sxth	r3, r3
 800d298:	e001      	b.n	800d29e <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xb6>
 800d29a:	8b3b      	ldrh	r3, [r7, #24]
 800d29c:	b21b      	sxth	r3, r3
 800d29e:	83fb      	strh	r3, [r7, #30]

    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	333c      	adds	r3, #60	; 0x3c
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fc ffb1 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	893b      	ldrh	r3, [r7, #8]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	b29b      	uxth	r3, r3
 800d2b4:	82fb      	strh	r3, [r7, #22]
    uint16_t indicatorHeight = indicatorY + static_cast<uint16_t>(indicator.getHeight());
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	3394      	adds	r3, #148	; 0x94
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fc ffa6 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	88fb      	ldrh	r3, [r7, #6]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	82bb      	strh	r3, [r7, #20]
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800d2cc:	8afa      	ldrh	r2, [r7, #22]
 800d2ce:	8abb      	ldrh	r3, [r7, #20]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d902      	bls.n	800d2da <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf2>
 800d2d4:	8afb      	ldrh	r3, [r7, #22]
 800d2d6:	b21b      	sxth	r3, r3
 800d2d8:	e001      	b.n	800d2de <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt+0xf6>
 800d2da:	8abb      	ldrh	r3, [r7, #20]
 800d2dc:	b21b      	sxth	r3, r3
 800d2de:	83bb      	strh	r3, [r7, #28]

    indicatorMinPosition = indicatorMinX;
 800d2e0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxX;
 800d2ea:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

    setWidth(newWidth);
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	3338      	adds	r3, #56	; 0x38
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d302:	4610      	mov	r0, r2
 800d304:	4798      	blx	r3
    setHeight(newHeight);
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	333c      	adds	r3, #60	; 0x3c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800d314:	4610      	mov	r0, r2
 800d316:	4798      	blx	r3

    setValue(currentValue);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	33a8      	adds	r3, #168	; 0xa8
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d324:	4611      	mov	r1, r2
 800d326:	68f8      	ldr	r0, [r7, #12]
 800d328:	4798      	blx	r3
}
 800d32a:	bf00      	nop
 800d32c:	3720      	adds	r7, #32
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	08022250 	.word	0x08022250
 800d338:	080231e4 	.word	0x080231e4
 800d33c:	080221fc 	.word	0x080221fc

0800d340 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:

void Slider::setupVerticalSlider(uint16_t backgroundX, uint16_t backgroundY, uint16_t indicatorX, uint16_t indicatorMinY, uint16_t indicatorMaxY)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	4608      	mov	r0, r1
 800d34a:	4611      	mov	r1, r2
 800d34c:	461a      	mov	r2, r3
 800d34e:	4603      	mov	r3, r0
 800d350:	817b      	strh	r3, [r7, #10]
 800d352:	460b      	mov	r3, r1
 800d354:	813b      	strh	r3, [r7, #8]
 800d356:	4613      	mov	r3, r2
 800d358:	80fb      	strh	r3, [r7, #6]
    assert(indicatorMinY < indicatorMaxY && "Slider::setupVerticalSlider - indicatorMinY must be smaller than indicatorMaxY");
 800d35a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d35c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d35e:	429a      	cmp	r2, r3
 800d360:	d305      	bcc.n	800d36e <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x2e>
 800d362:	4b46      	ldr	r3, [pc, #280]	; (800d47c <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x13c>)
 800d364:	4a46      	ldr	r2, [pc, #280]	; (800d480 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x140>)
 800d366:	2163      	movs	r1, #99	; 0x63
 800d368:	4846      	ldr	r0, [pc, #280]	; (800d484 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0x144>)
 800d36a:	f013 fb47 	bl	80209fc <__assert_func>

    sliderOrientation = VERTICAL;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2201      	movs	r2, #1
 800d372:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    background.setXY(backgroundX, backgroundY);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	333c      	adds	r3, #60	; 0x3c
 800d37a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d37e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d382:	4618      	mov	r0, r3
 800d384:	f7fc f8cf 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    backgroundSelectedViewPort.setXY(backgroundX, backgroundY);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	33c0      	adds	r3, #192	; 0xc0
 800d38c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800d390:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800d394:	4618      	mov	r0, r3
 800d396:	f7fc f8c6 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    indicator.setX(indicatorX);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	3394      	adds	r3, #148	; 0x94
 800d39e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fc f8a0 	bl	80094ea <_ZN8touchgfx8Drawable4setXEs>

    uint16_t backgroundWidth = backgroundX + static_cast<uint16_t>(background.getWidth());
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	333c      	adds	r3, #60	; 0x3c
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fc ff1f 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	897b      	ldrh	r3, [r7, #10]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	837b      	strh	r3, [r7, #26]
    uint16_t indicatorWidth = indicatorX + static_cast<uint16_t>(indicator.getWidth());
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3394      	adds	r3, #148	; 0x94
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fc ff14 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	88fb      	ldrh	r3, [r7, #6]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	b29b      	uxth	r3, r3
 800d3d4:	833b      	strh	r3, [r7, #24]
    int16_t newWidth = static_cast<int16_t>(MAX(backgroundWidth, indicatorWidth));
 800d3d6:	8b7a      	ldrh	r2, [r7, #26]
 800d3d8:	8b3b      	ldrh	r3, [r7, #24]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d902      	bls.n	800d3e4 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa4>
 800d3de:	8b7b      	ldrh	r3, [r7, #26]
 800d3e0:	b21b      	sxth	r3, r3
 800d3e2:	e001      	b.n	800d3e8 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xa8>
 800d3e4:	8b3b      	ldrh	r3, [r7, #24]
 800d3e6:	b21b      	sxth	r3, r3
 800d3e8:	83fb      	strh	r3, [r7, #30]

    uint16_t backgroundHeight = backgroundY + static_cast<uint16_t>(background.getHeight());
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	333c      	adds	r3, #60	; 0x3c
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fc ff0c 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	893b      	ldrh	r3, [r7, #8]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	82fb      	strh	r3, [r7, #22]
    uint16_t indicatorHeight = indicatorMaxY + static_cast<uint16_t>(indicator.getHeight());
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	3394      	adds	r3, #148	; 0x94
 800d404:	4618      	mov	r0, r3
 800d406:	f7fc ff01 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800d40a:	4603      	mov	r3, r0
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d410:	4413      	add	r3, r2
 800d412:	b29b      	uxth	r3, r3
 800d414:	82bb      	strh	r3, [r7, #20]
    int16_t newHeight = static_cast<int16_t>(MAX(backgroundHeight, indicatorHeight));
 800d416:	8afa      	ldrh	r2, [r7, #22]
 800d418:	8abb      	ldrh	r3, [r7, #20]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d902      	bls.n	800d424 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe4>
 800d41e:	8afb      	ldrh	r3, [r7, #22]
 800d420:	b21b      	sxth	r3, r3
 800d422:	e001      	b.n	800d428 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt+0xe8>
 800d424:	8abb      	ldrh	r3, [r7, #20]
 800d426:	b21b      	sxth	r3, r3
 800d428:	83bb      	strh	r3, [r7, #28]

    indicatorMinPosition = indicatorMinY;
 800d42a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
    indicatorMaxPosition = indicatorMaxY;
 800d434:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

    setWidth(newWidth);
 800d43e:	68fa      	ldr	r2, [r7, #12]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3338      	adds	r3, #56	; 0x38
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d44c:	4610      	mov	r0, r2
 800d44e:	4798      	blx	r3
    setHeight(newHeight);
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	333c      	adds	r3, #60	; 0x3c
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800d45e:	4610      	mov	r0, r2
 800d460:	4798      	blx	r3

    setValue(currentValue);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	33a8      	adds	r3, #168	; 0xa8
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d46e:	4611      	mov	r1, r2
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	4798      	blx	r3
}
 800d474:	bf00      	nop
 800d476:	3720      	adds	r7, #32
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	080222c4 	.word	0x080222c4
 800d480:	0802324c 	.word	0x0802324c
 800d484:	080221fc 	.word	0x080221fc

0800d488 <_ZN8touchgfx6Slider8setValueEi>:

void Slider::setValue(int value)
{
 800d488:	b590      	push	{r4, r7, lr}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
    updateIndicatorPosition(valueToPosition(value));
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	33ac      	adds	r3, #172	; 0xac
 800d498:	681c      	ldr	r4, [r3, #0]
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	33b0      	adds	r3, #176	; 0xb0
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	4798      	blx	r3
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	47a0      	blx	r4
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd90      	pop	{r4, r7, pc}

0800d4b8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:

void Slider::handleClickEvent(const ClickEvent& evt)
{
 800d4b8:	b5b0      	push	{r4, r5, r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
    if ((evt.getType() == ClickEvent::PRESSED) || (evt.getType() == ClickEvent::RELEASED))
 800d4c2:	6838      	ldr	r0, [r7, #0]
 800d4c4:	f7fd fd90 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d005      	beq.n	800d4da <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x22>
 800d4ce:	6838      	ldr	r0, [r7, #0]
 800d4d0:	f7fd fd8a 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d101      	bne.n	800d4de <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x26>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e000      	b.n	800d4e0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x28>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f000 8088 	beq.w	800d5f6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x13e>
    {
        // Communicate the start value if a listener is registered
        if ((evt.getType() == ClickEvent::PRESSED) && (startValueCallback != 0) && startValueCallback->isValid())
 800d4e6:	6838      	ldr	r0, [r7, #0]
 800d4e8:	f7fd fd7e 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d114      	bne.n	800d51c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d00f      	beq.n	800d51c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	330c      	adds	r3, #12
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4610      	mov	r0, r2
 800d510:	4798      	blx	r3
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d001      	beq.n	800d51c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x64>
 800d518:	2301      	movs	r3, #1
 800d51a:	e000      	b.n	800d51e <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x66>
 800d51c:	2300      	movs	r3, #0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00c      	beq.n	800d53c <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x84>
        {
            startValueCallback->execute(*this, currentValue);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3308      	adds	r3, #8
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d538:	6879      	ldr	r1, [r7, #4]
 800d53a:	4798      	blx	r3
        }

        if (sliderOrientation == HORIZONTAL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d542:	2b00      	cmp	r3, #0
 800d544:	d116      	bne.n	800d574 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xbc>
        {
            updateIndicatorPosition(evt.getX() - getIndicatorRadius());
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	33ac      	adds	r3, #172	; 0xac
 800d54c:	681c      	ldr	r4, [r3, #0]
 800d54e:	6838      	ldr	r0, [r7, #0]
 800d550:	f7fd fd30 	bl	800afb4 <_ZNK8touchgfx10ClickEvent4getXEv>
 800d554:	4603      	mov	r3, r0
 800d556:	b29d      	uxth	r5, r3
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	33b8      	adds	r3, #184	; 0xb8
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	4798      	blx	r3
 800d564:	4603      	mov	r3, r0
 800d566:	1aeb      	subs	r3, r5, r3
 800d568:	b29b      	uxth	r3, r3
 800d56a:	b21b      	sxth	r3, r3
 800d56c:	4619      	mov	r1, r3
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	47a0      	blx	r4
 800d572:	e015      	b.n	800d5a0 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0xe8>
        }
        else
        {
            updateIndicatorPosition(evt.getY() - getIndicatorRadius());
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	33ac      	adds	r3, #172	; 0xac
 800d57a:	681c      	ldr	r4, [r3, #0]
 800d57c:	6838      	ldr	r0, [r7, #0]
 800d57e:	f7fd fd26 	bl	800afce <_ZNK8touchgfx10ClickEvent4getYEv>
 800d582:	4603      	mov	r3, r0
 800d584:	b29d      	uxth	r5, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	33b8      	adds	r3, #184	; 0xb8
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	4798      	blx	r3
 800d592:	4603      	mov	r3, r0
 800d594:	1aeb      	subs	r3, r5, r3
 800d596:	b29b      	uxth	r3, r3
 800d598:	b21b      	sxth	r3, r3
 800d59a:	4619      	mov	r1, r3
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	47a0      	blx	r4
        }

        // Communicate the stop value if a listener is registered
        if ((evt.getType() == ClickEvent::RELEASED) && (stopValueCallback != 0) && stopValueCallback->isValid())
 800d5a0:	6838      	ldr	r0, [r7, #0]
 800d5a2:	f7fd fd21 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d114      	bne.n	800d5d6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d00f      	beq.n	800d5d6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	330c      	adds	r3, #12
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	4798      	blx	r3
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x11e>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e000      	b.n	800d5d8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x120>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00c      	beq.n	800d5f6 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x13e>
        {
            stopValueCallback->execute(*this, currentValue);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d5f2:	6879      	ldr	r1, [r7, #4]
 800d5f4:	4798      	blx	r3
        }
    }
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bdb0      	pop	{r4, r5, r7, pc}

0800d5fe <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:

void Slider::handleDragEvent(const DragEvent& evt)
{
 800d5fe:	b5b0      	push	{r4, r5, r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	6039      	str	r1, [r7, #0]
    if (sliderOrientation == HORIZONTAL)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d116      	bne.n	800d640 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x42>
    {
        updateIndicatorPosition(evt.getNewX() - getIndicatorRadius());
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	33ac      	adds	r3, #172	; 0xac
 800d618:	681c      	ldr	r4, [r3, #0]
 800d61a:	6838      	ldr	r0, [r7, #0]
 800d61c:	f7fd fd62 	bl	800b0e4 <_ZNK8touchgfx9DragEvent7getNewXEv>
 800d620:	4603      	mov	r3, r0
 800d622:	b29d      	uxth	r5, r3
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	33b8      	adds	r3, #184	; 0xb8
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	4798      	blx	r3
 800d630:	4603      	mov	r3, r0
 800d632:	1aeb      	subs	r3, r5, r3
 800d634:	b29b      	uxth	r3, r3
 800d636:	b21b      	sxth	r3, r3
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	47a0      	blx	r4
    }
    else
    {
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
    }
}
 800d63e:	e015      	b.n	800d66c <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x6e>
        updateIndicatorPosition(evt.getNewY() - getIndicatorRadius());
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	33ac      	adds	r3, #172	; 0xac
 800d646:	681c      	ldr	r4, [r3, #0]
 800d648:	6838      	ldr	r0, [r7, #0]
 800d64a:	f7fd fd58 	bl	800b0fe <_ZNK8touchgfx9DragEvent7getNewYEv>
 800d64e:	4603      	mov	r3, r0
 800d650:	b29d      	uxth	r5, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	33b8      	adds	r3, #184	; 0xb8
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	4798      	blx	r3
 800d65e:	4603      	mov	r3, r0
 800d660:	1aeb      	subs	r3, r5, r3
 800d662:	b29b      	uxth	r3, r3
 800d664:	b21b      	sxth	r3, r3
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	47a0      	blx	r4
}
 800d66c:	bf00      	nop
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bdb0      	pop	{r4, r5, r7, pc}

0800d674 <_ZNK8touchgfx6Slider15valueToPositionEi>:

int16_t Slider::valueToPosition(int value) const
{
 800d674:	b590      	push	{r4, r7, lr}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	6039      	str	r1, [r7, #0]
    value = MAX(MIN(valueRangeMax, value), valueRangeMin);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	429a      	cmp	r2, r3
 800d686:	da02      	bge.n	800d68e <_ZNK8touchgfx6Slider15valueToPositionEi+0x1a>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68c:	e001      	b.n	800d692 <_ZNK8touchgfx6Slider15valueToPositionEi+0x1e>
 800d68e:	463b      	mov	r3, r7
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d696:	4293      	cmp	r3, r2
 800d698:	dd0a      	ble.n	800d6b0 <_ZNK8touchgfx6Slider15valueToPositionEi+0x3c>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	da02      	bge.n	800d6aa <_ZNK8touchgfx6Slider15valueToPositionEi+0x36>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a8:	e004      	b.n	800d6b4 <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>
 800d6aa:	463b      	mov	r3, r7
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	e001      	b.n	800d6b4 <_ZNK8touchgfx6Slider15valueToPositionEi+0x40>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b4:	603b      	str	r3, [r7, #0]

    int coordinateOffset = ((value - valueRangeMin) * (getIndicatorPositionRangeSize() + 1)) / getValueRangeSize();
 800d6b6:	683a      	ldr	r2, [r7, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6bc:	1ad4      	subs	r4, r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	33bc      	adds	r3, #188	; 0xbc
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	4798      	blx	r3
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	fb03 f404 	mul.w	r4, r3, r4
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	33c0      	adds	r3, #192	; 0xc0
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	4798      	blx	r3
 800d6de:	4603      	mov	r3, r0
 800d6e0:	fb94 f3f3 	sdiv	r3, r4, r3
 800d6e4:	60bb      	str	r3, [r7, #8]

    int result = indicatorMinPosition + coordinateOffset;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	68bb      	ldr	r3, [r7, #8]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	60fb      	str	r3, [r7, #12]

    if (sliderOrientation == VERTICAL)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d10b      	bne.n	800d716 <_ZNK8touchgfx6Slider15valueToPositionEi+0xa2>
    {
        // Vertical slider grows as the position decreases so invert the coordinate
        result = indicatorMinPosition + (indicatorMaxPosition - result);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800d704:	461a      	mov	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800d70c:	4619      	mov	r1, r3
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	1acb      	subs	r3, r1, r3
 800d712:	4413      	add	r3, r2
 800d714:	60fb      	str	r3, [r7, #12]
    }

    return result;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	b21b      	sxth	r3, r3
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3714      	adds	r7, #20
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd90      	pop	{r4, r7, pc}

0800d722 <_ZNK8touchgfx6Slider15positionToValueEs>:

int Slider::positionToValue(int16_t position) const
{
 800d722:	b590      	push	{r4, r7, lr}
 800d724:	b087      	sub	sp, #28
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	460b      	mov	r3, r1
 800d72c:	807b      	strh	r3, [r7, #2]
    int result;

    if (position == indicatorMinPosition)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800d734:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d103      	bne.n	800d744 <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
    {
        // Ensure that min coordinate always results in min value
        result = valueRangeMin;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d740:	617b      	str	r3, [r7, #20]
 800d742:	e035      	b.n	800d7b0 <_ZNK8touchgfx6Slider15positionToValueEs+0x8e>
    }
    else if (position == indicatorMaxPosition)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800d74a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d103      	bne.n	800d75a <_ZNK8touchgfx6Slider15positionToValueEs+0x38>
    {
        // Ensure that max coordinate always results in max value
        result = valueRangeMax;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	e02a      	b.n	800d7b0 <_ZNK8touchgfx6Slider15positionToValueEs+0x8e>
    }
    else
    {
        int rounding = getIndicatorPositionRangeSize() / 2;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	33bc      	adds	r3, #188	; 0xbc
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	4798      	blx	r3
 800d766:	4603      	mov	r3, r0
 800d768:	0fda      	lsrs	r2, r3, #31
 800d76a:	4413      	add	r3, r2
 800d76c:	105b      	asrs	r3, r3, #1
 800d76e:	613b      	str	r3, [r7, #16]
        int valueOffset = (((position - indicatorMinPosition) * getValueRangeSize()) + rounding) / getIndicatorPositionRangeSize();
 800d770:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	f9b2 20ec 	ldrsh.w	r2, [r2, #236]	; 0xec
 800d77a:	1a9c      	subs	r4, r3, r2
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	33c0      	adds	r3, #192	; 0xc0
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	4798      	blx	r3
 800d788:	4603      	mov	r3, r0
 800d78a:	fb03 f204 	mul.w	r2, r3, r4
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	18d4      	adds	r4, r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	33bc      	adds	r3, #188	; 0xbc
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	4798      	blx	r3
 800d79e:	4603      	mov	r3, r0
 800d7a0:	fb94 f3f3 	sdiv	r3, r4, r3
 800d7a4:	60fb      	str	r3, [r7, #12]

        result = valueRangeMin + valueOffset;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	617b      	str	r3, [r7, #20]
    }

    if (sliderOrientation == VERTICAL)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d107      	bne.n	800d7ca <_ZNK8touchgfx6Slider15positionToValueEs+0xa8>
    {
        // Vertical slider grows as the position decreases so invert the value
        result = valueRangeMin + (valueRangeMax - result);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	1acb      	subs	r3, r1, r3
 800d7c6:	4413      	add	r3, r2
 800d7c8:	617b      	str	r3, [r7, #20]
    }

    return result;
 800d7ca:	697b      	ldr	r3, [r7, #20]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	371c      	adds	r7, #28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd90      	pop	{r4, r7, pc}

0800d7d4 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:

void Slider::updateIndicatorPosition(int16_t position)
{
 800d7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	807b      	strh	r3, [r7, #2]
    // Cut off positions outside the slider area
    position = MIN(MAX(position, indicatorMinPosition), indicatorMaxPosition);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f9b3 20ec 	ldrsh.w	r2, [r3, #236]	; 0xec
 800d7e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	bfb8      	it	lt
 800d7ee:	4613      	movlt	r3, r2
 800d7f0:	b21a      	sxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	da0d      	bge.n	800d818 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x44>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f9b3 20ec 	ldrsh.w	r2, [r3, #236]	; 0xec
 800d802:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d806:	429a      	cmp	r2, r3
 800d808:	db03      	blt.n	800d812 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x3e>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800d810:	e005      	b.n	800d81e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x4a>
 800d812:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d816:	e002      	b.n	800d81e <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x4a>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800d81e:	807b      	strh	r3, [r7, #2]

    if (sliderOrientation == HORIZONTAL)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d826:	2b00      	cmp	r3, #0
 800d828:	d137      	bne.n	800d89a <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xc6>
    {
        indicator.moveTo(position, indicator.getY());
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800d830:	f9b7 5002 	ldrsh.w	r5, [r7, #2]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3394      	adds	r3, #148	; 0x94
 800d838:	4618      	mov	r0, r3
 800d83a:	f7fc fa19 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 800d83e:	4603      	mov	r3, r0
 800d840:	461a      	mov	r2, r3
 800d842:	4629      	mov	r1, r5
 800d844:	4620      	mov	r0, r4
 800d846:	f7fb fef9 	bl	800963c <_ZN8touchgfx8Drawable6moveToEss>

        backgroundSelectedViewPort.invalidate();
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	33c0      	adds	r3, #192	; 0xc0
 800d84e:	4618      	mov	r0, r3
 800d850:	f00d fdf5 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
        backgroundSelectedViewPort.setWidth((position - backgroundSelectedViewPort.getX()) + getIndicatorRadius());
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
 800d85a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d85e:	b29c      	uxth	r4, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	33c0      	adds	r3, #192	; 0xc0
 800d864:	4618      	mov	r0, r3
 800d866:	f7fc f9f6 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800d86a:	4603      	mov	r3, r0
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	1ae3      	subs	r3, r4, r3
 800d870:	b29c      	uxth	r4, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	33b8      	adds	r3, #184	; 0xb8
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	4798      	blx	r3
 800d87e:	4603      	mov	r3, r0
 800d880:	4423      	add	r3, r4
 800d882:	b29b      	uxth	r3, r3
 800d884:	b21b      	sxth	r3, r3
 800d886:	4619      	mov	r1, r3
 800d888:	4628      	mov	r0, r5
 800d88a:	f7fb fe6a 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
        backgroundSelectedViewPort.invalidate();
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	33c0      	adds	r3, #192	; 0xc0
 800d892:	4618      	mov	r0, r3
 800d894:	f00d fdd3 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
 800d898:	e06e      	b.n	800d978 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1a4>
    }
    else
    {
        indicator.moveTo(indicator.getX(), position);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f103 0494 	add.w	r4, r3, #148	; 0x94
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	3394      	adds	r3, #148	; 0x94
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fc f9d6 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f7fb fec1 	bl	800963c <_ZN8touchgfx8Drawable6moveToEss>

        backgroundSelectedViewPort.invalidate();
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	33c0      	adds	r3, #192	; 0xc0
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f00d fdbd 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
        int16_t newViewPortHeight = background.getRect().bottom() - (position + getIndicatorRadius());
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	333c      	adds	r3, #60	; 0x3c
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fc f9b8 	bl	8009c3e <_ZNK8touchgfx8Drawable7getRectEv>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fc f80a 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	b29c      	uxth	r4, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	33b8      	adds	r3, #184	; 0xb8
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	4798      	blx	r3
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4413      	add	r3, r2
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	1ae3      	subs	r3, r4, r3
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	81fb      	strh	r3, [r7, #14]
        backgroundSelectedViewPort.setPosition(backgroundSelectedViewPort.getX(), position + getIndicatorRadius(), backgroundSelectedViewPort.getWidth(), newViewPortHeight);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	33c0      	adds	r3, #192	; 0xc0
 800d904:	4618      	mov	r0, r3
 800d906:	f7fc f9a6 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800d90a:	4603      	mov	r3, r0
 800d90c:	461e      	mov	r6, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	33b8      	adds	r3, #184	; 0xb8
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	4798      	blx	r3
 800d91a:	4603      	mov	r3, r0
 800d91c:	461a      	mov	r2, r3
 800d91e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d922:	b29b      	uxth	r3, r3
 800d924:	4413      	add	r3, r2
 800d926:	b29b      	uxth	r3, r3
 800d928:	b21d      	sxth	r5, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	33c0      	adds	r3, #192	; 0xc0
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fc fc5f 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d934:	4603      	mov	r3, r0
 800d936:	461a      	mov	r2, r3
 800d938:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d93c:	9300      	str	r3, [sp, #0]
 800d93e:	4613      	mov	r3, r2
 800d940:	462a      	mov	r2, r5
 800d942:	4631      	mov	r1, r6
 800d944:	4620      	mov	r0, r4
 800d946:	f7fb fda3 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
        backgroundSelected.setY(-(backgroundSelected.getHeight() - newViewPortHeight));
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f103 0568 	add.w	r5, r3, #104	; 0x68
 800d950:	89fc      	ldrh	r4, [r7, #14]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	3368      	adds	r3, #104	; 0x68
 800d956:	4618      	mov	r0, r3
 800d958:	f7fc fc58 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800d95c:	4603      	mov	r3, r0
 800d95e:	b29b      	uxth	r3, r3
 800d960:	1ae3      	subs	r3, r4, r3
 800d962:	b29b      	uxth	r3, r3
 800d964:	b21b      	sxth	r3, r3
 800d966:	4619      	mov	r1, r3
 800d968:	4628      	mov	r0, r5
 800d96a:	f7fb fdcd 	bl	8009508 <_ZN8touchgfx8Drawable4setYEs>
        backgroundSelectedViewPort.invalidate();
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	33c0      	adds	r3, #192	; 0xc0
 800d972:	4618      	mov	r0, r3
 800d974:	f00d fd63 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
    }

    currentValue = positionToValue(position);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	33b4      	adds	r3, #180	; 0xb4
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d984:	4611      	mov	r1, r2
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	4798      	blx	r3
 800d98a:	4602      	mov	r2, r0
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	631a      	str	r2, [r3, #48]	; 0x30

    // Communicate the new value if a listener is registered
    if ((newValueCallback != 0) && newValueCallback->isValid())
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00f      	beq.n	800d9ba <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e6>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	330c      	adds	r3, #12
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	4798      	blx	r3
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d001      	beq.n	800d9ba <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e6>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e000      	b.n	800d9bc <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x1e8>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00c      	beq.n	800d9da <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x206>
    {
        newValueCallback->execute(*this, currentValue);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d9d6:	6879      	ldr	r1, [r7, #4]
 800d9d8:	4798      	blx	r3
    }
}
 800d9da:	bf00      	nop
 800d9dc:	3714      	adds	r7, #20
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9e2 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:

uint16_t Slider::getIndicatorRadius() const
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
    uint16_t result;

    if (sliderOrientation == HORIZONTAL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d10b      	bne.n	800da0c <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x2a>
    {
        result = indicator.getWidth() / 2;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	3394      	adds	r3, #148	; 0x94
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fc fbfa 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800d9fe:	4603      	mov	r3, r0
 800da00:	0fda      	lsrs	r2, r3, #31
 800da02:	4413      	add	r3, r2
 800da04:	105b      	asrs	r3, r3, #1
 800da06:	b21b      	sxth	r3, r3
 800da08:	81fb      	strh	r3, [r7, #14]
 800da0a:	e00a      	b.n	800da22 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x40>
    }
    else
    {
        result = indicator.getHeight() / 2;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	3394      	adds	r3, #148	; 0x94
 800da10:	4618      	mov	r0, r3
 800da12:	f7fc fbfb 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800da16:	4603      	mov	r3, r0
 800da18:	0fda      	lsrs	r2, r3, #31
 800da1a:	4413      	add	r3, r2
 800da1c:	105b      	asrs	r3, r3, #1
 800da1e:	b21b      	sxth	r3, r3
 800da20:	81fb      	strh	r3, [r7, #14]
    }

    return result;
 800da22:	89fb      	ldrh	r3, [r7, #14]
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <_ZN8touchgfx6Slider13setValueRangeEiii>:

void Slider::setValueRange(int minValue, int maxValue, int newValue)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
 800da38:	603b      	str	r3, [r7, #0]
    assert(minValue < maxValue && "Slider::setValueRange - minValue must be smaller than maxValue");
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	429a      	cmp	r2, r3
 800da40:	db06      	blt.n	800da50 <_ZN8touchgfx6Slider13setValueRangeEiii+0x24>
 800da42:	4b0c      	ldr	r3, [pc, #48]	; (800da74 <_ZN8touchgfx6Slider13setValueRangeEiii+0x48>)
 800da44:	4a0c      	ldr	r2, [pc, #48]	; (800da78 <_ZN8touchgfx6Slider13setValueRangeEiii+0x4c>)
 800da46:	f240 110b 	movw	r1, #267	; 0x10b
 800da4a:	480c      	ldr	r0, [pc, #48]	; (800da7c <_ZN8touchgfx6Slider13setValueRangeEiii+0x50>)
 800da4c:	f012 ffd6 	bl	80209fc <__assert_func>

    valueRangeMin = minValue;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	635a      	str	r2, [r3, #52]	; 0x34
    valueRangeMax = maxValue;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	639a      	str	r2, [r3, #56]	; 0x38

    setValue(newValue);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	33a8      	adds	r3, #168	; 0xa8
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	4798      	blx	r3
}
 800da6a:	bf00      	nop
 800da6c:	3710      	adds	r7, #16
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	08022338 	.word	0x08022338
 800da78:	080232b4 	.word	0x080232b4
 800da7c:	080221fc 	.word	0x080221fc

0800da80 <_ZN8touchgfx6Slider13setValueRangeEii>:

void Slider::setValueRange(int minValue, int maxValue)
{
 800da80:	b590      	push	{r4, r7, lr}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
    int newValue = currentValue;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da90:	617b      	str	r3, [r7, #20]

    if (currentValue < minValue)
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	429a      	cmp	r2, r3
 800da9a:	dd02      	ble.n	800daa2 <_ZN8touchgfx6Slider13setValueRangeEii+0x22>
    {
        newValue = minValue;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	617b      	str	r3, [r7, #20]
 800daa0:	e006      	b.n	800dab0 <_ZN8touchgfx6Slider13setValueRangeEii+0x30>
    }
    else if (currentValue > maxValue)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	da01      	bge.n	800dab0 <_ZN8touchgfx6Slider13setValueRangeEii+0x30>
    {
        newValue = maxValue;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	617b      	str	r3, [r7, #20]
    }

    setValueRange(minValue, maxValue, newValue);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	3398      	adds	r3, #152	; 0x98
 800dab6:	681c      	ldr	r4, [r3, #0]
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	68b9      	ldr	r1, [r7, #8]
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	47a0      	blx	r4
}
 800dac2:	bf00      	nop
 800dac4:	371c      	adds	r7, #28
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd90      	pop	{r4, r7, pc}

0800daca <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:

int Slider::getIndicatorPositionRangeSize() const
{
 800daca:	b480      	push	{r7}
 800dacc:	b083      	sub	sp, #12
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
    return indicatorMaxPosition - indicatorMinPosition;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f9b3 30ee 	ldrsh.w	r3, [r3, #238]	; 0xee
 800dad8:	461a      	mov	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f9b3 30ec 	ldrsh.w	r3, [r3, #236]	; 0xec
 800dae0:	1ad3      	subs	r3, r2, r3
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	370c      	adds	r7, #12
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:

int Slider::getValueRangeSize() const
{
 800daee:	b480      	push	{r7}
 800daf0:	b083      	sub	sp, #12
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
    return valueRangeMax - valueRangeMin;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dafe:	1ad3      	subs	r3, r2, r3
}
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800db14:	4b07      	ldr	r3, [pc, #28]	; (800db34 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d105      	bne.n	800db28 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800db1c:	4b06      	ldr	r3, [pc, #24]	; (800db38 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800db1e:	4a07      	ldr	r2, [pc, #28]	; (800db3c <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800db20:	21b6      	movs	r1, #182	; 0xb6
 800db22:	4807      	ldr	r0, [pc, #28]	; (800db40 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800db24:	f012 ff6a 	bl	80209fc <__assert_func>
        return bitmapId;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	881b      	ldrh	r3, [r3, #0]
    }
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	2001a948 	.word	0x2001a948
 800db38:	08022390 	.word	0x08022390
 800db3c:	08023494 	.word	0x08023494
 800db40:	080223cc 	.word	0x080223cc

0800db44 <_ZN8touchgfx9Container13getFirstChildEv>:
     *        Useful if you want to manually iterate the children added to this container.
     *
     * @return Pointer to the first drawable added to this container. If nothing has been added
     *         return zero.
     */
    Drawable* getFirstChild()
 800db44:	b480      	push	{r7}
 800db46:	b083      	sub	sp, #12
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>:
    ListLayout(const Direction d = SOUTH)
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	70fb      	strb	r3, [r7, #3]
        : Container(), direction(d), offset(0)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fd f8ba 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800db70:	4a0d      	ldr	r2, [pc, #52]	; (800dba8 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x4c>)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	601a      	str	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	78fa      	ldrb	r2, [r7, #3]
 800db7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	85da      	strh	r2, [r3, #46]	; 0x2e
        assert((d == SOUTH || d == EAST) && "Chosen direction not supported");
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	2b01      	cmp	r3, #1
 800db88:	d008      	beq.n	800db9c <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 800db8a:	78fb      	ldrb	r3, [r7, #3]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d005      	beq.n	800db9c <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x40>
 800db90:	4b06      	ldr	r3, [pc, #24]	; (800dbac <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x50>)
 800db92:	4a07      	ldr	r2, [pc, #28]	; (800dbb0 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x54>)
 800db94:	2137      	movs	r1, #55	; 0x37
 800db96:	4807      	ldr	r0, [pc, #28]	; (800dbb4 <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE+0x58>)
 800db98:	f012 ff30 	bl	80209fc <__assert_func>
    }
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	4618      	mov	r0, r3
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	08022e88 	.word	0x08022e88
 800dbac:	08022418 	.word	0x08022418
 800dbb0:	08023414 	.word	0x08023414
 800dbb4:	08022458 	.word	0x08022458

0800dbb8 <_ZNK8touchgfx5Image9getBitmapEv>:
    BitmapId getBitmap() const
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
        return bitmap.getId();
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	3326      	adds	r3, #38	; 0x26
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff ffa1 	bl	800db0c <_ZNK8touchgfx6Bitmap5getIdEv>
 800dbca:	4603      	mov	r3, r0
    }
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    TiledImage(const Bitmap& bmp = Bitmap()) : Image(bmp), xOffset(0), yOffset(0)
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6839      	ldr	r1, [r7, #0]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd f920 	bl	800ae28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800dbe8:	4a06      	ldr	r2, [pc, #24]	; (800dc04 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE+0x30>)
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	859a      	strh	r2, [r3, #44]	; 0x2c
    {
    }
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}
 800dc04:	08023be4 	.word	0x08023be4

0800dc08 <_ZN8touchgfx14SwipeContainer16getNumberOfPagesEv>:
     *
     *        Gets number of pages.
     *
     * @return The number of pages.
     */
    uint8_t getNumberOfPages()
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
    {
        return numberOfPages;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800dc16:	4618      	mov	r0, r3
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
	...

0800dc24 <_ZN8touchgfx14SwipeContainerC1Ev>:
#include <touchgfx/containers/SwipeContainer.hpp>
#include <touchgfx/EasingEquations.hpp>

namespace touchgfx
{
SwipeContainer::SwipeContainer() :
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
    animateDistance(0),
    startX(0),
    currentPage(0),
    endElasticWidth(30),
    pages(EAST),
    pageIndicator()
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fd f858 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800dc34:	4a26      	ldr	r2, [pc, #152]	; (800dcd0 <_ZN8touchgfx14SwipeContainerC1Ev+0xac>)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	601a      	str	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2204      	movs	r2, #4
 800dc3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2250      	movs	r2, #80	; 0x50
 800dc56:	861a      	strh	r2, [r3, #48]	; 0x30
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	865a      	strh	r2, [r3, #50]	; 0x32
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	869a      	strh	r2, [r3, #52]	; 0x34
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	86da      	strh	r2, [r3, #54]	; 0x36
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	221e      	movs	r2, #30
 800dc76:	875a      	strh	r2, [r3, #58]	; 0x3a
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	333c      	adds	r3, #60	; 0x3c
 800dc7c:	2102      	movs	r1, #2
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7ff ff6c 	bl	800db5c <_ZN8touchgfx10ListLayoutC1ENS_9DirectionE>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	336c      	adds	r3, #108	; 0x6c
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f000 fbdf 	bl	800e44c <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>
{
    touchgfx::Application::getInstance()->registerTimerWidget(this);
 800dc8e:	f00c ff31 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 800dc92:	4602      	mov	r2, r0
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4619      	mov	r1, r3
 800dc98:	4610      	mov	r0, r2
 800dc9a:	f00c ff31 	bl	801ab00 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>

    setTouchable(true);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2101      	movs	r1, #1
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fd f80e 	bl	800acc4 <_ZN8touchgfx8Drawable12setTouchableEb>

    Container::add(pages);
 800dca8:	687a      	ldr	r2, [r7, #4]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	333c      	adds	r3, #60	; 0x3c
 800dcae:	4619      	mov	r1, r3
 800dcb0:	4610      	mov	r0, r2
 800dcb2:	f7fc f80d 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(pageIndicator);
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	336c      	adds	r3, #108	; 0x6c
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	4610      	mov	r0, r2
 800dcc0:	f7fc f806 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3708      	adds	r7, #8
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	080232f8 	.word	0x080232f8

0800dcd4 <_ZN8touchgfx14SwipeContainerD1Ev>:

SwipeContainer::~SwipeContainer()
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	4a0e      	ldr	r2, [pc, #56]	; (800dd18 <_ZN8touchgfx14SwipeContainerD1Ev+0x44>)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	601a      	str	r2, [r3, #0]
{
    touchgfx::Application::getInstance()->unregisterTimerWidget(this);
 800dce2:	f00c ff07 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 800dce6:	4602      	mov	r2, r0
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4619      	mov	r1, r3
 800dcec:	4610      	mov	r0, r2
 800dcee:	f00c ff37 	bl	801ab60 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>
SwipeContainer::~SwipeContainer()
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	336c      	adds	r3, #108	; 0x6c
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 fbfe 	bl	800e4f8 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	333c      	adds	r3, #60	; 0x3c
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fc fa91 	bl	800a228 <_ZN8touchgfx10ListLayoutD1Ev>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fb fd41 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
}
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	4618      	mov	r0, r3
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	080232f8 	.word	0x080232f8

0800dd1c <_ZN8touchgfx14SwipeContainerD0Ev>:
SwipeContainer::~SwipeContainer()
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
}
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7ff ffd5 	bl	800dcd4 <_ZN8touchgfx14SwipeContainerD1Ev>
 800dd2a:	21f8      	movs	r1, #248	; 0xf8
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f012 fe48 	bl	80209c2 <_ZdlPvj>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4618      	mov	r0, r3
 800dd36:	3708      	adds	r7, #8
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>:

void SwipeContainer::add(Drawable& page)
{
 800dd3c:	b5b0      	push	{r4, r5, r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
    pages.add(page);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	333c      	adds	r3, #60	; 0x3c
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fc fd3f 	bl	800a7d0 <_ZN8touchgfx10ListLayout3addERNS_8DrawableE>
    numberOfPages++;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd58:	3301      	adds	r3, #1
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    pageIndicator.setNumberOfPages(numberOfPages);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4610      	mov	r0, r2
 800dd72:	f000 fbed 	bl	800e550 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>

    setWidth(page.getWidth());
 800dd76:	687d      	ldr	r5, [r7, #4]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	3338      	adds	r3, #56	; 0x38
 800dd7e:	681c      	ldr	r4, [r3, #0]
 800dd80:	6838      	ldr	r0, [r7, #0]
 800dd82:	f7fc fa36 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800dd86:	4603      	mov	r3, r0
 800dd88:	4619      	mov	r1, r3
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	47a0      	blx	r4
    setHeight(page.getHeight());
 800dd8e:	687d      	ldr	r5, [r7, #4]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	333c      	adds	r3, #60	; 0x3c
 800dd96:	681c      	ldr	r4, [r3, #0]
 800dd98:	6838      	ldr	r0, [r7, #0]
 800dd9a:	f7fc fa37 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	4619      	mov	r1, r3
 800dda2:	4628      	mov	r0, r5
 800dda4:	47a0      	blx	r4
}
 800dda6:	bf00      	nop
 800dda8:	3708      	adds	r7, #8
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bdb0      	pop	{r4, r5, r7, pc}

0800ddae <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE>:

void SwipeContainer::remove(Drawable& page)
{
 800ddae:	b580      	push	{r7, lr}
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	af00      	add	r7, sp, #0
 800ddb4:	6078      	str	r0, [r7, #4]
 800ddb6:	6039      	str	r1, [r7, #0]
    Drawable* tmp = pages.getFirstChild();
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	333c      	adds	r3, #60	; 0x3c
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7ff fec1 	bl	800db44 <_ZN8touchgfx9Container13getFirstChildEv>
 800ddc2:	60f8      	str	r0, [r7, #12]

    if (!numberOfPages)
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d03a      	beq.n	800de44 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x96>
        return;
    }

    // looks for the child matching page
    // to ensure that the page indicator only counts down if a page is removed
    while (tmp)
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d038      	beq.n	800de46 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x98>
    {
        if (tmp == &page)
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	429a      	cmp	r2, r3
 800ddda:	d12e      	bne.n	800de3a <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x8c>
        {
            pages.remove(page);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	333c      	adds	r3, #60	; 0x3c
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fc fd96 	bl	800a914 <_ZN8touchgfx10ListLayout6removeERNS_8DrawableE>
            numberOfPages--;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

            if (!numberOfPages)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d110      	bne.n	800de24 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x76>
            {
                setWidth(0);
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	3338      	adds	r3, #56	; 0x38
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2100      	movs	r1, #0
 800de0e:	4610      	mov	r0, r2
 800de10:	4798      	blx	r3
                setHeight(0);
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	333c      	adds	r3, #60	; 0x3c
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2100      	movs	r1, #0
 800de1e:	4610      	mov	r0, r2
 800de20:	4798      	blx	r3
            }
            else
            {
                pageIndicator.setNumberOfPages(numberOfPages);
            }
            return;
 800de22:	e010      	b.n	800de46 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x98>
                pageIndicator.setNumberOfPages(numberOfPages);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de30:	4619      	mov	r1, r3
 800de32:	4610      	mov	r0, r2
 800de34:	f000 fb8c 	bl	800e550 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
            return;
 800de38:	e005      	b.n	800de46 <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x98>
        }
        else
        {
            tmp = tmp->getNextSibling();
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f7fd f9ba 	bl	800b1b4 <_ZN8touchgfx8Drawable14getNextSiblingEv>
 800de40:	60f8      	str	r0, [r7, #12]
    while (tmp)
 800de42:	e7c4      	b.n	800ddce <_ZN8touchgfx14SwipeContainer6removeERNS_8DrawableE+0x20>
        return;
 800de44:	bf00      	nop
        }
    }
}
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>:

void SwipeContainer::setEndSwipeElasticWidth(uint16_t width)
{
 800de4c:	b480      	push	{r7}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	807b      	strh	r3, [r7, #2]
    endElasticWidth = width;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	887a      	ldrh	r2, [r7, #2]
 800de5c:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800de5e:	bf00      	nop
 800de60:	370c      	adds	r7, #12
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr

0800de6a <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>:

void SwipeContainer::setSwipeCutoff(uint16_t cutoff)
{
 800de6a:	b480      	push	{r7}
 800de6c:	b083      	sub	sp, #12
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
 800de72:	460b      	mov	r3, r1
 800de74:	807b      	strh	r3, [r7, #2]
    swipeCutoff = cutoff;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	887a      	ldrh	r2, [r7, #2]
 800de7a:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>:

void SwipeContainer::setPageIndicatorBitmaps(const touchgfx::Bitmap& normalPage, const touchgfx::Bitmap& highlightedPage)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	607a      	str	r2, [r7, #4]
    pageIndicator.setBitmaps(normalPage, highlightedPage);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	336c      	adds	r3, #108	; 0x6c
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	68b9      	ldr	r1, [r7, #8]
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 fbdb 	bl	800e658 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>
}
 800dea2:	bf00      	nop
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>:

void SwipeContainer::setPageIndicatorXY(int16_t x, int16_t y)
{
 800deaa:	b580      	push	{r7, lr}
 800deac:	b082      	sub	sp, #8
 800deae:	af00      	add	r7, sp, #0
 800deb0:	6078      	str	r0, [r7, #4]
 800deb2:	460b      	mov	r3, r1
 800deb4:	807b      	strh	r3, [r7, #2]
 800deb6:	4613      	mov	r3, r2
 800deb8:	803b      	strh	r3, [r7, #0]
    pageIndicator.setXY(x, y);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	336c      	adds	r3, #108	; 0x6c
 800debe:	f9b7 2000 	ldrsh.w	r2, [r7]
 800dec2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fb fb2d 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
}
 800decc:	bf00      	nop
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>:
{
    pageIndicator.setXY(x - pageIndicator.getWidth() / 2, y);
}

void SwipeContainer::setSelectedPage(uint8_t pageIndex)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b082      	sub	sp, #8
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	460b      	mov	r3, r1
 800dede:	70fb      	strb	r3, [r7, #3]
    currentPage = pageIndex;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	78fa      	ldrb	r2, [r7, #3]
 800dee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    pageIndicator.setHighlightPosition(currentPage);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800def4:	4619      	mov	r1, r3
 800def6:	4610      	mov	r0, r2
 800def8:	f000 fc13 	bl	800e722 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>
    adjustPages();
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f000 f945 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}

0800df0a <_ZN8touchgfx14SwipeContainer15handleTickEventEv>:

void SwipeContainer::handleTickEvent()
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b082      	sub	sp, #8
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
    if (currentState == ANIMATE_SWIPE_CANCELLED_LEFT)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d103      	bne.n	800df24 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x1a>
    {
        animateSwipeCancelledLeft();
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 f959 	bl	800e1d4 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>
    }
    else if (currentState == ANIMATE_RIGHT)
    {
        animateRight();
    }
}
 800df22:	e019      	b.n	800df58 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x4e>
    else if (currentState == ANIMATE_SWIPE_CANCELLED_RIGHT)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d103      	bne.n	800df36 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x2c>
        animateSwipeCancelledRight();
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 f996 	bl	800e260 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>
}
 800df34:	e010      	b.n	800df58 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x4e>
    else if (currentState == ANIMATE_LEFT)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df3c:	2b02      	cmp	r3, #2
 800df3e:	d103      	bne.n	800df48 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x3e>
        animateLeft();
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f9cf 	bl	800e2e4 <_ZN8touchgfx14SwipeContainer11animateLeftEv>
}
 800df46:	e007      	b.n	800df58 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x4e>
    else if (currentState == ANIMATE_RIGHT)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d102      	bne.n	800df58 <_ZN8touchgfx14SwipeContainer15handleTickEventEv+0x4e>
        animateRight();
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 fa20 	bl	800e398 <_ZN8touchgfx14SwipeContainer12animateRightEv>
}
 800df58:	bf00      	nop
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE>:

void SwipeContainer::handleClickEvent(const ClickEvent& evt)
{
 800df60:	b590      	push	{r4, r7, lr}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
    // If an animation is already in progress do not
    // react to clicks
    if (currentState != NO_ANIMATION)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800df70:	2b04      	cmp	r3, #4
 800df72:	d15c      	bne.n	800e02e <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xce>
    {
        return;
    }

    if (evt.getType() == ClickEvent::RELEASED)
 800df74:	6838      	ldr	r0, [r7, #0]
 800df76:	f7fd f837 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	bf0c      	ite	eq
 800df80:	2301      	moveq	r3, #1
 800df82:	2300      	movne	r3, #0
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b00      	cmp	r3, #0
 800df88:	d052      	beq.n	800e030 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xd0>
    {
        // Save current position for use during animation
        animateDistance = dragX;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	869a      	strh	r2, [r3, #52]	; 0x34
        startX = pages.getX();
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	333c      	adds	r3, #60	; 0x3c
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fb fe5c 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	86da      	strh	r2, [r3, #54]	; 0x36

        if (dragX < 0)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	da22      	bge.n	800dff6 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x96>
        {
            if (currentPage == getNumberOfPages() - 1 || dragX > -swipeCutoff)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dfb6:	461c      	mov	r4, r3
 800dfb8:	6878      	ldr	r0, [r7, #4]
 800dfba:	f7ff fe25 	bl	800dc08 <_ZN8touchgfx14SwipeContainer16getNumberOfPagesEv>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	429c      	cmp	r4, r3
 800dfc4:	d008      	beq.n	800dfd8 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x78>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800dfcc:	461a      	mov	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800dfd2:	425b      	negs	r3, r3
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	dd01      	ble.n	800dfdc <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x7c>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	e000      	b.n	800dfde <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x7e>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d004      	beq.n	800dfec <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0x8c>
            {
                currentState = ANIMATE_SWIPE_CANCELLED_LEFT;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800dfea:	e021      	b.n	800e030 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xd0>
            }
            else
            {
                currentState = ANIMATE_LEFT;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2202      	movs	r2, #2
 800dff0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800dff4:	e01c      	b.n	800e030 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xd0>
            }
        }
        else if (dragX > 0)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	dd17      	ble.n	800e030 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xd0>
        {
            if (currentPage == 0 || dragX < swipeCutoff)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e006:	2b00      	cmp	r3, #0
 800e008:	d007      	beq.n	800e01a <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xba>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800e010:	461a      	mov	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800e016:	429a      	cmp	r2, r3
 800e018:	da04      	bge.n	800e024 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xc4>
            {
                currentState = ANIMATE_SWIPE_CANCELLED_RIGHT;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e022:	e005      	b.n	800e030 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xd0>
            }
            else
            {
                currentState = ANIMATE_RIGHT;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2203      	movs	r2, #3
 800e028:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e02c:	e000      	b.n	800e030 <_ZN8touchgfx14SwipeContainer16handleClickEventERKNS_10ClickEventE+0xd0>
        return;
 800e02e:	bf00      	nop
            }
        }
    }
}
 800e030:	370c      	adds	r7, #12
 800e032:	46bd      	mov	sp, r7
 800e034:	bd90      	pop	{r4, r7, pc}

0800e036 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE>:

void SwipeContainer::handleDragEvent(const DragEvent& evt)
{
 800e036:	b590      	push	{r4, r7, lr}
 800e038:	b083      	sub	sp, #12
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	6039      	str	r1, [r7, #0]
    // If an animation is already in progress do not
    // react to drags
    if (currentState != NO_ANIMATION)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e046:	2b04      	cmp	r3, #4
 800e048:	d145      	bne.n	800e0d6 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0xa0>
    {
        return;
    }

    dragX += evt.getDeltaX();
 800e04a:	6838      	ldr	r0, [r7, #0]
 800e04c:	f7fd f864 	bl	800b118 <_ZNK8touchgfx9DragEvent9getDeltaXEv>
 800e050:	4603      	mov	r3, r0
 800e052:	4619      	mov	r1, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	b28b      	uxth	r3, r1
 800e05e:	4413      	add	r3, r2
 800e060:	b29b      	uxth	r3, r3
 800e062:	b21a      	sxth	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	865a      	strh	r2, [r3, #50]	; 0x32

    // Do not show too much background next to end pages
    if (currentPage == 0 && dragX > endElasticWidth)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10d      	bne.n	800e08e <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x58>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800e078:	461a      	mov	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e07e:	429a      	cmp	r2, r3
 800e080:	dd05      	ble.n	800e08e <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x58>
    {
        dragX = static_cast<int16_t>(endElasticWidth);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e086:	b21a      	sxth	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	865a      	strh	r2, [r3, #50]	; 0x32
 800e08c:	e01f      	b.n	800e0ce <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x98>
    }
    else if (currentPage == getNumberOfPages() - 1 && dragX < -endElasticWidth)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e094:	461c      	mov	r4, r3
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f7ff fdb6 	bl	800dc08 <_ZN8touchgfx14SwipeContainer16getNumberOfPagesEv>
 800e09c:	4603      	mov	r3, r0
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	429c      	cmp	r4, r3
 800e0a2:	d10a      	bne.n	800e0ba <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x84>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e0b0:	425b      	negs	r3, r3
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	da01      	bge.n	800e0ba <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x84>
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e000      	b.n	800e0bc <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x86>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d006      	beq.n	800e0ce <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0x98>
    {
        dragX = -static_cast<int16_t>(endElasticWidth);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800e0c4:	425b      	negs	r3, r3
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	b21a      	sxth	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    adjustPages();
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f85c 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 800e0d4:	e000      	b.n	800e0d8 <_ZN8touchgfx14SwipeContainer15handleDragEventERKNS_9DragEventE+0xa2>
        return;
 800e0d6:	bf00      	nop
}
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd90      	pop	{r4, r7, pc}

0800e0de <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE>:

void SwipeContainer::handleGestureEvent(const GestureEvent& evt)
{
 800e0de:	b590      	push	{r4, r7, lr}
 800e0e0:	b083      	sub	sp, #12
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	6039      	str	r1, [r7, #0]
    // Do not accept gestures while animating
    if (currentState != NO_ANIMATION)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e0ee:	2b04      	cmp	r3, #4
 800e0f0:	d148      	bne.n	800e184 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0xa6>
    {
        return;
    }

    if (evt.getType() == evt.SWIPE_HORIZONTAL)
 800e0f2:	6838      	ldr	r0, [r7, #0]
 800e0f4:	f7fd f852 	bl	800b19c <_ZNK8touchgfx12GestureEvent7getTypeEv>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	bf0c      	ite	eq
 800e0fe:	2301      	moveq	r3, #1
 800e100:	2300      	movne	r3, #0
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b00      	cmp	r3, #0
 800e106:	d03e      	beq.n	800e186 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0xa8>
    {
        // Save current position for use during animation
        animateDistance = dragX;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	869a      	strh	r2, [r3, #52]	; 0x34
        startX = pages.getX();
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	333c      	adds	r3, #60	; 0x3c
 800e116:	4618      	mov	r0, r3
 800e118:	f7fb fd9d 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800e11c:	4603      	mov	r3, r0
 800e11e:	461a      	mov	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	86da      	strh	r2, [r3, #54]	; 0x36

        if (evt.getVelocity() < 0 && currentPage < getNumberOfPages() - 1)
 800e124:	6838      	ldr	r0, [r7, #0]
 800e126:	f7fd f82c 	bl	800b182 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	da0c      	bge.n	800e14a <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x6c>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e136:	461c      	mov	r4, r3
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f7ff fd65 	bl	800dc08 <_ZN8touchgfx14SwipeContainer16getNumberOfPagesEv>
 800e13e:	4603      	mov	r3, r0
 800e140:	3b01      	subs	r3, #1
 800e142:	429c      	cmp	r4, r3
 800e144:	da01      	bge.n	800e14a <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x6c>
 800e146:	2301      	movs	r3, #1
 800e148:	e000      	b.n	800e14c <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x6e>
 800e14a:	2300      	movs	r3, #0
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d004      	beq.n	800e15a <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x7c>
        {
            currentState = ANIMATE_LEFT;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2202      	movs	r2, #2
 800e154:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e158:	e015      	b.n	800e186 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0xa8>
        }
        else if (evt.getVelocity() > 0 && currentPage > 0)
 800e15a:	6838      	ldr	r0, [r7, #0]
 800e15c:	f7fd f811 	bl	800b182 <_ZNK8touchgfx12GestureEvent11getVelocityEv>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	dd06      	ble.n	800e174 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x96>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x96>
 800e170:	2301      	movs	r3, #1
 800e172:	e000      	b.n	800e176 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0x98>
 800e174:	2300      	movs	r3, #0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d005      	beq.n	800e186 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0xa8>
        {
            currentState = ANIMATE_RIGHT;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2203      	movs	r2, #3
 800e17e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e182:	e000      	b.n	800e186 <_ZN8touchgfx14SwipeContainer18handleGestureEventERKNS_12GestureEventE+0xa8>
        return;
 800e184:	bf00      	nop
        }
    }
}
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd90      	pop	{r4, r7, pc}

0800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>:

void SwipeContainer::adjustPages()
{
 800e18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
    pages.moveTo(-static_cast<int16_t>(currentPage * getWidth()) + dragX, 0);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800e1a0:	b29c      	uxth	r4, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e1a8:	b29d      	uxth	r5, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fc f820 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	fb15 f303 	smulbb	r3, r5, r3
 800e1ba:	b29b      	uxth	r3, r3
 800e1bc:	1ae3      	subs	r3, r4, r3
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	b21b      	sxth	r3, r3
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	4619      	mov	r1, r3
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	f7fb fa38 	bl	800963c <_ZN8touchgfx8Drawable6moveToEss>
}
 800e1cc:	bf00      	nop
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1d4 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv>:

void SwipeContainer::animateSwipeCancelledLeft()
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
    uint8_t duration = 14;
 800e1dc:	230e      	movs	r3, #14
 800e1de:	73fb      	strb	r3, [r7, #15]

    if (animationCounter <= duration)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e1e6:	7bfa      	ldrb	r2, [r7, #15]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d31f      	bcc.n	800e22c <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x58>
    {
        int16_t delta = EasingEquations::backEaseOut(animationCounter, 0, -animateDistance, duration);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e1f2:	b298      	uxth	r0, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	425b      	negs	r3, r3
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	b21a      	sxth	r2, r3
 800e202:	7bfb      	ldrb	r3, [r7, #15]
 800e204:	b29b      	uxth	r3, r3
 800e206:	2100      	movs	r1, #0
 800e208:	f00d fdf8 	bl	801bdfc <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 800e20c:	4603      	mov	r3, r0
 800e20e:	81bb      	strh	r3, [r7, #12]
        dragX = animateDistance + delta;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e216:	b29a      	uxth	r2, r3
 800e218:	89bb      	ldrh	r3, [r7, #12]
 800e21a:	4413      	add	r3, r2
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	b21a      	sxth	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	865a      	strh	r2, [r3, #50]	; 0x32

        adjustPages();
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7ff ffb1 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 800e22a:	e00d      	b.n	800e248 <_ZN8touchgfx14SwipeContainer25animateSwipeCancelledLeftEv+0x74>
    }
    else
    {
        // Final step: stop the animation
        currentState = NO_ANIMATION;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2204      	movs	r2, #4
 800e230:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        animationCounter = 0;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dragX = 0;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	865a      	strh	r2, [r3, #50]	; 0x32
        adjustPages();
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff ffa2 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
    }
    animationCounter++;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e24e:	3301      	adds	r3, #1
 800e250:	b2da      	uxtb	r2, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800e258:	bf00      	nop
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv>:

void SwipeContainer::animateSwipeCancelledRight()
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
    uint8_t duration = 14;
 800e268:	230e      	movs	r3, #14
 800e26a:	73fb      	strb	r3, [r7, #15]

    if (animationCounter <= duration)
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e272:	7bfa      	ldrb	r2, [r7, #15]
 800e274:	429a      	cmp	r2, r3
 800e276:	d31b      	bcc.n	800e2b0 <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x50>
    {
        int16_t delta = EasingEquations::backEaseOut(animationCounter, 0, animateDistance, duration);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e27e:	b298      	uxth	r0, r3
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 800e286:	7bfb      	ldrb	r3, [r7, #15]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	2100      	movs	r1, #0
 800e28c:	f00d fdb6 	bl	801bdfc <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>
 800e290:	4603      	mov	r3, r0
 800e292:	81bb      	strh	r3, [r7, #12]
        dragX = animateDistance - delta;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	89bb      	ldrh	r3, [r7, #12]
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	b21a      	sxth	r2, r3
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	865a      	strh	r2, [r3, #50]	; 0x32

        adjustPages();
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f7ff ff6f 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 800e2ae:	e00d      	b.n	800e2cc <_ZN8touchgfx14SwipeContainer26animateSwipeCancelledRightEv+0x6c>
    }
    else
    {
        // Final step: stop the animation
        currentState = NO_ANIMATION;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2204      	movs	r2, #4
 800e2b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        animationCounter = 0;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dragX = 0;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	865a      	strh	r2, [r3, #50]	; 0x32
        adjustPages();
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7ff ff60 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
    }
    animationCounter++;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800e2dc:	bf00      	nop
 800e2de:	3710      	adds	r7, #16
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <_ZN8touchgfx14SwipeContainer11animateLeftEv>:

void SwipeContainer::animateLeft()
{
 800e2e4:	b590      	push	{r4, r7, lr}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
    uint8_t duration = 10;
 800e2ec:	230a      	movs	r3, #10
 800e2ee:	73fb      	strb	r3, [r7, #15]

    if (animationCounter <= duration)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e2f6:	7bfa      	ldrb	r2, [r7, #15]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d326      	bcc.n	800e34a <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x66>
    {
        int16_t delta = EasingEquations::cubicEaseOut(animationCounter, 0, getWidth() + animateDistance, duration);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e302:	b29c      	uxth	r4, r3
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4618      	mov	r0, r3
 800e308:	f7fb ff73 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e30c:	4603      	mov	r3, r0
 800e30e:	b29a      	uxth	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e316:	b29b      	uxth	r3, r3
 800e318:	4413      	add	r3, r2
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	b21a      	sxth	r2, r3
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
 800e320:	b29b      	uxth	r3, r3
 800e322:	2100      	movs	r1, #0
 800e324:	4620      	mov	r0, r4
 800e326:	f00d fd9b 	bl	801be60 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800e32a:	4603      	mov	r3, r0
 800e32c:	81bb      	strh	r3, [r7, #12]
        dragX = animateDistance - delta;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e334:	b29a      	uxth	r2, r3
 800e336:	89bb      	ldrh	r3, [r7, #12]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	b21a      	sxth	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	865a      	strh	r2, [r3, #50]	; 0x32

        adjustPages();
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f7ff ff22 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 800e348:	e01a      	b.n	800e380 <_ZN8touchgfx14SwipeContainer11animateLeftEv+0x9c>
    }
    else
    {
        // Final step: stop the animation
        currentState = NO_ANIMATION;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2204      	movs	r2, #4
 800e34e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        animationCounter = 0;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        currentPage++;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e360:	3301      	adds	r3, #1
 800e362:	b2da      	uxtb	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        dragX = 0;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	865a      	strh	r2, [r3, #50]	; 0x32
        adjustPages();
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7ff ff0b 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
        pageIndicator.goRight();
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	336c      	adds	r3, #108	; 0x6c
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 f98e 	bl	800e69c <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>
    }
    animationCounter++;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e386:	3301      	adds	r3, #1
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800e390:	bf00      	nop
 800e392:	3714      	adds	r7, #20
 800e394:	46bd      	mov	sp, r7
 800e396:	bd90      	pop	{r4, r7, pc}

0800e398 <_ZN8touchgfx14SwipeContainer12animateRightEv>:

void SwipeContainer::animateRight()
{
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
    uint8_t duration = 10;
 800e3a0:	230a      	movs	r3, #10
 800e3a2:	73fb      	strb	r3, [r7, #15]

    if (animationCounter <= duration)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e3aa:	7bfa      	ldrb	r2, [r7, #15]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d326      	bcc.n	800e3fe <_ZN8touchgfx14SwipeContainer12animateRightEv+0x66>
    {
        int16_t delta = EasingEquations::cubicEaseOut(animationCounter, 0, getWidth() - animateDistance, duration);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e3b6:	b29c      	uxth	r4, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fb ff19 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	b21a      	sxth	r2, r3
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	2100      	movs	r1, #0
 800e3d8:	4620      	mov	r0, r4
 800e3da:	f00d fd41 	bl	801be60 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	81bb      	strh	r3, [r7, #12]
        dragX = animateDistance + delta;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800e3e8:	b29a      	uxth	r2, r3
 800e3ea:	89bb      	ldrh	r3, [r7, #12]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	b21a      	sxth	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	865a      	strh	r2, [r3, #50]	; 0x32

        adjustPages();
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7ff fec8 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
 800e3fc:	e01a      	b.n	800e434 <_ZN8touchgfx14SwipeContainer12animateRightEv+0x9c>
    }
    else
    {
        // Final step: stop the animation
        currentState = NO_ANIMATION;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2204      	movs	r2, #4
 800e402:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        animationCounter = 0;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2200      	movs	r2, #0
 800e40a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        currentPage--;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e414:	3b01      	subs	r3, #1
 800e416:	b2da      	uxtb	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        dragX = 0;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	865a      	strh	r2, [r3, #50]	; 0x32
        adjustPages();
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f7ff feb1 	bl	800e18c <_ZN8touchgfx14SwipeContainer11adjustPagesEv>
        pageIndicator.goLeft();
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	336c      	adds	r3, #108	; 0x6c
 800e42e:	4618      	mov	r0, r3
 800e430:	f000 f953 	bl	800e6da <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>
    }
    animationCounter++;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800e43a:	3301      	adds	r3, #1
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800e444:	bf00      	nop
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd90      	pop	{r4, r7, pc}

0800e44c <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev>:

SwipeContainer::PageIndicator::PageIndicator() :
 800e44c:	b590      	push	{r4, r7, lr}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
    Container(),
    numberOfPages(0),
    currentPage(0)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	4618      	mov	r0, r3
 800e458:	f7fc fc44 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800e45c:	4a25      	ldr	r2, [pc, #148]	; (800e4f4 <_ZN8touchgfx14SwipeContainer13PageIndicatorC1Ev+0xa8>)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	601a      	str	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e468:	f107 0308 	add.w	r3, r7, #8
 800e46c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e470:	4618      	mov	r0, r3
 800e472:	f7fa ffdc 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800e476:	f107 0308 	add.w	r3, r7, #8
 800e47a:	4619      	mov	r1, r3
 800e47c:	4620      	mov	r0, r4
 800e47e:	f7ff fba9 	bl	800dbd4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 800e488:	f107 030c 	add.w	r3, r7, #12
 800e48c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e490:	4618      	mov	r0, r3
 800e492:	f7fa ffcc 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800e496:	f107 030c 	add.w	r3, r7, #12
 800e49a:	4619      	mov	r1, r3
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7fc fcc3 	bl	800ae28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
{
    unselectedPages.setXY(0, 0);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	332c      	adds	r3, #44	; 0x2c
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fb f833 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    selectedPage.setXY(0, 0);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	335c      	adds	r3, #92	; 0x5c
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fb f82c 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>

    Container::add(unselectedPages);
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	332c      	adds	r3, #44	; 0x2c
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	f7fb fbfa 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Container::add(selectedPage);
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	335c      	adds	r3, #92	; 0x5c
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	f7fb fbf3 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3714      	adds	r7, #20
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd90      	pop	{r4, r7, pc}
 800e4f4:	0802338c 	.word	0x0802338c

0800e4f8 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>:

SwipeContainer::PageIndicator::~PageIndicator()
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	4a0a      	ldr	r2, [pc, #40]	; (800e52c <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev+0x34>)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	335c      	adds	r3, #92	; 0x5c
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7fb f96e 	bl	80097ec <_ZN8touchgfx5ImageD1Ev>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	332c      	adds	r3, #44	; 0x2c
 800e514:	4618      	mov	r0, r3
 800e516:	f000 f941 	bl	800e79c <_ZN8touchgfx10TiledImageD1Ev>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fb f937 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
{
}
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4618      	mov	r0, r3
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	0802338c 	.word	0x0802338c

0800e530 <_ZN8touchgfx14SwipeContainer13PageIndicatorD0Ev>:
SwipeContainer::PageIndicator::~PageIndicator()
 800e530:	b580      	push	{r7, lr}
 800e532:	b082      	sub	sp, #8
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
}
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff ffdd 	bl	800e4f8 <_ZN8touchgfx14SwipeContainer13PageIndicatorD1Ev>
 800e53e:	218c      	movs	r1, #140	; 0x8c
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f012 fa3e 	bl	80209c2 <_ZdlPvj>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4618      	mov	r0, r3
 800e54a:	3708      	adds	r7, #8
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>:

void SwipeContainer::PageIndicator::setNumberOfPages(uint8_t size)
{
 800e550:	b5b0      	push	{r4, r5, r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	70fb      	strb	r3, [r7, #3]
    numberOfPages = size;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	78fa      	ldrb	r2, [r7, #3]
 800e560:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    assert(numberOfPages > 0 && "At least one dot is needed");
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d106      	bne.n	800e57c <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x2c>
 800e56e:	4b37      	ldr	r3, [pc, #220]	; (800e64c <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0xfc>)
 800e570:	4a37      	ldr	r2, [pc, #220]	; (800e650 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x100>)
 800e572:	f240 1161 	movw	r1, #353	; 0x161
 800e576:	4837      	ldr	r0, [pc, #220]	; (800e654 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0x104>)
 800e578:	f012 fa40 	bl	80209fc <__assert_func>

    numberOfPages = size;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	78fa      	ldrb	r2, [r7, #3]
 800e580:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    if (unselectedPages.getBitmap() != BITMAP_INVALID)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	332c      	adds	r3, #44	; 0x2c
 800e588:	4618      	mov	r0, r3
 800e58a:	f7ff fb15 	bl	800dbb8 <_ZNK8touchgfx5Image9getBitmapEv>
 800e58e:	4603      	mov	r3, r0
 800e590:	461a      	mov	r2, r3
 800e592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e596:	429a      	cmp	r2, r3
 800e598:	bf14      	ite	ne
 800e59a:	2301      	movne	r3, #1
 800e59c:	2300      	moveq	r3, #0
 800e59e:	b2db      	uxtb	r3, r3
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d04f      	beq.n	800e644 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh+0xf4>
    {
        int dotWidth = Bitmap(unselectedPages.getBitmap()).getWidth();
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	332c      	adds	r3, #44	; 0x2c
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fb05 	bl	800dbb8 <_ZNK8touchgfx5Image9getBitmapEv>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	f107 0308 	add.w	r3, r7, #8
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fa ff38 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800e5be:	f107 0308 	add.w	r3, r7, #8
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f00e fce2 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	60fb      	str	r3, [r7, #12]
        unselectedPages.setWidth(dotWidth * size);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800e5d2:	78fb      	ldrb	r3, [r7, #3]
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	fb12 f303 	smulbb	r3, r2, r3
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	b21b      	sxth	r3, r3
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	f7fa ffbd 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>

        // adjust size of container according to the actual bitmaps
        setWidth(unselectedPages.getWidth());
 800e5e8:	687d      	ldr	r5, [r7, #4]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	3338      	adds	r3, #56	; 0x38
 800e5f0:	681c      	ldr	r4, [r3, #0]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	332c      	adds	r3, #44	; 0x2c
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fb fdfb 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	4619      	mov	r1, r3
 800e600:	4628      	mov	r0, r5
 800e602:	47a0      	blx	r4
        setHeight(unselectedPages.getHeight());
 800e604:	687d      	ldr	r5, [r7, #4]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	333c      	adds	r3, #60	; 0x3c
 800e60c:	681c      	ldr	r4, [r3, #0]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	332c      	adds	r3, #44	; 0x2c
 800e612:	4618      	mov	r0, r3
 800e614:	f7fb fdfa 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800e618:	4603      	mov	r3, r0
 800e61a:	4619      	mov	r1, r3
 800e61c:	4628      	mov	r0, r5
 800e61e:	47a0      	blx	r4
        setHighlightPosition(currentPage = 0);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e62e:	4619      	mov	r1, r3
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f876 	bl	800e722 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>

        invalidate();
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	3314      	adds	r3, #20
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4610      	mov	r0, r2
 800e642:	4798      	blx	r3
    }
}
 800e644:	bf00      	nop
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bdb0      	pop	{r4, r5, r7, pc}
 800e64c:	080224b4 	.word	0x080224b4
 800e650:	0802344c 	.word	0x0802344c
 800e654:	080224e8 	.word	0x080224e8

0800e658 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_>:

void SwipeContainer::PageIndicator::setBitmaps(const touchgfx::Bitmap& normalPage, const touchgfx::Bitmap& highlightedPage)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
    selectedPage.setBitmap(highlightedPage);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	335c      	adds	r3, #92	; 0x5c
 800e668:	6879      	ldr	r1, [r7, #4]
 800e66a:	4618      	mov	r0, r3
 800e66c:	f001 fc42 	bl	800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    unselectedPages.setBitmap(normalPage);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	332c      	adds	r3, #44	; 0x2c
 800e674:	68b9      	ldr	r1, [r7, #8]
 800e676:	4618      	mov	r0, r3
 800e678:	f001 ff08 	bl	801048c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    if (numberOfPages > 0)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e682:	2b00      	cmp	r3, #0
 800e684:	d006      	beq.n	800e694 <_ZN8touchgfx14SwipeContainer13PageIndicator10setBitmapsERKNS_6BitmapES4_+0x3c>
    {
        setNumberOfPages(numberOfPages);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e68c:	4619      	mov	r1, r3
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7ff ff5e 	bl	800e550 <_ZN8touchgfx14SwipeContainer13PageIndicator16setNumberOfPagesEh>
    }
}
 800e694:	bf00      	nop
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <_ZN8touchgfx14SwipeContainer13PageIndicator7goRightEv>:

void SwipeContainer::PageIndicator::goRight()
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
    setHighlightPosition(currentPage = (currentPage + 1) % numberOfPages);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 800e6b2:	fb93 f1f2 	sdiv	r1, r3, r2
 800e6b6:	fb02 f201 	mul.w	r2, r2, r1
 800e6ba:	1a9b      	subs	r3, r3, r2
 800e6bc:	b2da      	uxtb	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f828 	bl	800e722 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>
}
 800e6d2:	bf00      	nop
 800e6d4:	3708      	adds	r7, #8
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <_ZN8touchgfx14SwipeContainer13PageIndicator6goLeftEv>:

void SwipeContainer::PageIndicator::goLeft()
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b082      	sub	sp, #8
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
    setHighlightPosition(currentPage = (currentPage + numberOfPages - 1) % numberOfPages);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e6f0:	4413      	add	r3, r2
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	f892 2088 	ldrb.w	r2, [r2, #136]	; 0x88
 800e6fa:	fb93 f1f2 	sdiv	r1, r3, r2
 800e6fe:	fb02 f201 	mul.w	r2, r2, r1
 800e702:	1a9b      	subs	r3, r3, r2
 800e704:	b2da      	uxtb	r2, r3
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800e712:	4619      	mov	r1, r3
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f804 	bl	800e722 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>
}
 800e71a:	bf00      	nop
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh>:

void SwipeContainer::PageIndicator::setHighlightPosition(uint8_t index)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b084      	sub	sp, #16
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	460b      	mov	r3, r1
 800e72c:	70fb      	strb	r3, [r7, #3]
    currentPage = index;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	78fa      	ldrb	r2, [r7, #3]
 800e732:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    // note that index is unsigned
    if (index < numberOfPages)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800e73c:	78fa      	ldrb	r2, [r7, #3]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d221      	bcs.n	800e786 <_ZN8touchgfx14SwipeContainer13PageIndicator20setHighlightPositionEh+0x64>
    {
        int dotWidth = Bitmap(unselectedPages.getBitmap()).getWidth();
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	332c      	adds	r3, #44	; 0x2c
 800e746:	4618      	mov	r0, r3
 800e748:	f7ff fa36 	bl	800dbb8 <_ZNK8touchgfx5Image9getBitmapEv>
 800e74c:	4603      	mov	r3, r0
 800e74e:	461a      	mov	r2, r3
 800e750:	f107 0308 	add.w	r3, r7, #8
 800e754:	4611      	mov	r1, r2
 800e756:	4618      	mov	r0, r3
 800e758:	f7fa fe69 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800e75c:	f107 0308 	add.w	r3, r7, #8
 800e760:	4618      	mov	r0, r3
 800e762:	f00e fc13 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e766:	4603      	mov	r3, r0
 800e768:	60fb      	str	r3, [r7, #12]
        selectedPage.setX(index * dotWidth);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800e770:	78fb      	ldrb	r3, [r7, #3]
 800e772:	b29a      	uxth	r2, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	b29b      	uxth	r3, r3
 800e778:	fb12 f303 	smulbb	r3, r2, r3
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	b21b      	sxth	r3, r3
 800e780:	4619      	mov	r1, r3
 800e782:	f7fa feb2 	bl	80094ea <_ZN8touchgfx8Drawable4setXEs>
    }
    invalidate();
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3314      	adds	r3, #20
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4610      	mov	r0, r2
 800e792:	4798      	blx	r3
}
 800e794:	bf00      	nop
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <_ZN8touchgfx10TiledImageD1Ev>:
class TiledImage : public Image
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	4a05      	ldr	r2, [pc, #20]	; (800e7bc <_ZN8touchgfx10TiledImageD1Ev+0x20>)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	601a      	str	r2, [r3, #0]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7fb f81d 	bl	80097ec <_ZN8touchgfx5ImageD1Ev>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	08023be4 	.word	0x08023be4

0800e7c0 <_ZN8touchgfx10TiledImageD0Ev>:
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b082      	sub	sp, #8
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7ff ffe7 	bl	800e79c <_ZN8touchgfx10TiledImageD1Ev>
 800e7ce:	2130      	movs	r1, #48	; 0x30
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f012 f8f6 	bl	80209c2 <_ZdlPvj>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800e7e0:	b480      	push	{r7}
 800e7e2:	b083      	sub	sp, #12
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	601a      	str	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr

0800e7fc <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE>:
         * @param textDirection  The text direction.
         * @param indentation    The indentation of the text from the left and right of the text
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, int16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	607a      	str	r2, [r7, #4]
 800e808:	70fb      	strb	r3, [r7, #3]
        {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	3308      	adds	r3, #8
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff ffe6 	bl	800e7e0 <_ZN8touchgfx9colortypeC1Ev>
            this->font = font;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	601a      	str	r2, [r3, #0]
            this->color = color;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	609a      	str	r2, [r3, #8]
            this->alpha = alpha;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	739a      	strb	r2, [r3, #14]
            this->alignment = alignment;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	7e3a      	ldrb	r2, [r7, #24]
 800e82a:	711a      	strb	r2, [r3, #4]
            this->textDirection = textDirection;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800e832:	715a      	strb	r2, [r3, #5]
            this->rotation = rotation;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f897 2020 	ldrb.w	r2, [r7, #32]
 800e83a:	719a      	strb	r2, [r3, #6]
            this->linespace = linespace;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	8bba      	ldrh	r2, [r7, #28]
 800e840:	819a      	strh	r2, [r3, #12]
            this->indentation = indentation;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e848:	73da      	strb	r2, [r3, #15]
            this->wideTextAction = wideTextAction;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e850:	741a      	strb	r2, [r3, #16]
        }
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	4618      	mov	r0, r3
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <_ZN8touchgfx9TypedTextC1Et>:
     *
     *        Construct a typed text.
     *
     * @param id The id of the TypedText.
     */
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	807b      	strh	r3, [r7, #2]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	887a      	ldrh	r2, [r7, #2]
 800e86c:	801a      	strh	r2, [r3, #0]
    {
    }
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4618      	mov	r0, r3
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>:
     *
     *        Has the TypedText been set to a proper value.
     *
     * @return Is the id valid.
     */
    bool hasValidId() const
 800e87c:	b480      	push	{r7}
 800e87e:	b083      	sub	sp, #12
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e88c:	4293      	cmp	r3, r2
 800e88e:	bf14      	ite	ne
 800e890:	2301      	movne	r3, #1
 800e892:	2300      	moveq	r3, #0
 800e894:	b2db      	uxtb	r3, r3
    }
 800e896:	4618      	mov	r0, r3
 800e898:	370c      	adds	r7, #12
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
	...

0800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>:
     *
     *        Gets the text associated with this TypedText.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText() const
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f85b 	bl	800e968 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800e8b2:	4b06      	ldr	r3, [pc, #24]	; (800e8cc <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	4619      	mov	r1, r3
 800e8bc:	4610      	mov	r0, r2
 800e8be:	f007 fb43 	bl	8015f48 <_ZNK8touchgfx5Texts7getTextEt>
 800e8c2:	4603      	mov	r3, r0
    }
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	2001a91c 	.word	0x2001a91c

0800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f845 	bl	800e968 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800e8de:	4b08      	ldr	r3, [pc, #32]	; (800e900 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	4b08      	ldr	r3, [pc, #32]	; (800e904 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800e8e4:	6819      	ldr	r1, [r3, #0]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	881b      	ldrh	r3, [r3, #0]
 800e8ea:	005b      	lsls	r3, r3, #1
 800e8ec:	440b      	add	r3, r1
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	4413      	add	r3, r2
 800e8f4:	681b      	ldr	r3, [r3, #0]
    }
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	2001a918 	.word	0x2001a918
 800e904:	2001a910 	.word	0x2001a910

0800e908 <_ZNK8touchgfx9TypedText12getAlignmentEv>:
     *
     *        Gets the alignment associated with this TypedText.
     *
     * @return The alignment.
     */
    Alignment getAlignment() const
 800e908:	b580      	push	{r7, lr}
 800e90a:	b082      	sub	sp, #8
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f000 f829 	bl	800e968 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 800e916:	4b07      	ldr	r3, [pc, #28]	; (800e934 <_ZNK8touchgfx9TypedText12getAlignmentEv+0x2c>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	005b      	lsls	r3, r3, #1
 800e920:	4413      	add	r3, r2
 800e922:	785b      	ldrb	r3, [r3, #1]
 800e924:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e928:	b2db      	uxtb	r3, r3
    }
 800e92a:	4618      	mov	r0, r3
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	2001a910 	.word	0x2001a910

0800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 f811 	bl	800e968 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800e946:	4b07      	ldr	r3, [pc, #28]	; (800e964 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	881b      	ldrh	r3, [r3, #0]
 800e94e:	005b      	lsls	r3, r3, #1
 800e950:	4413      	add	r3, r2
 800e952:	785b      	ldrb	r3, [r3, #1]
 800e954:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800e958:	b2db      	uxtb	r3, r3
    }
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	2001a910 	.word	0x2001a910

0800e968 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800e970:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d105      	bne.n	800e984 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800e978:	4b0b      	ldr	r3, [pc, #44]	; (800e9a8 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800e97a:	4a0c      	ldr	r2, [pc, #48]	; (800e9ac <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e97c:	21de      	movs	r1, #222	; 0xde
 800e97e:	480c      	ldr	r0, [pc, #48]	; (800e9b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e980:	f012 f83c 	bl	80209fc <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	881a      	ldrh	r2, [r3, #0]
 800e988:	4b0a      	ldr	r3, [pc, #40]	; (800e9b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800e98a:	881b      	ldrh	r3, [r3, #0]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d305      	bcc.n	800e99c <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800e990:	4b09      	ldr	r3, [pc, #36]	; (800e9b8 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800e992:	4a06      	ldr	r2, [pc, #24]	; (800e9ac <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800e994:	21df      	movs	r1, #223	; 0xdf
 800e996:	4806      	ldr	r0, [pc, #24]	; (800e9b0 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800e998:	f012 f830 	bl	80209fc <__assert_func>
    }
 800e99c:	bf00      	nop
 800e99e:	3708      	adds	r7, #8
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	2001a910 	.word	0x2001a910
 800e9a8:	08022544 	.word	0x08022544
 800e9ac:	080235c0 	.word	0x080235c0
 800e9b0:	08022588 	.word	0x08022588
 800e9b4:	2001a914 	.word	0x2001a914
 800e9b8:	080225d8 	.word	0x080225d8

0800e9bc <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fc f9a2 	bl	800ad10 <_ZN8touchgfx6WidgetC1Ev>
 800e9cc:	4a13      	ldr	r2, [pc, #76]	; (800ea1c <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	601a      	str	r2, [r3, #0]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3326      	adds	r3, #38	; 0x26
 800e9d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7ff ff3e 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	3328      	adds	r3, #40	; 0x28
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7fc f91e 	bl	800ac28 <_ZN8touchgfx9colortypeC1Em>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	859a      	strh	r2, [r3, #44]	; 0x2c
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	22ff      	movs	r2, #255	; 0xff
 800e9f6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    { }
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	08023b68 	.word	0x08023b68

0800ea20 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af02      	add	r7, sp, #8
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	9300      	str	r3, [sp, #0]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	2200      	movs	r2, #0
 800ea32:	2100      	movs	r1, #0
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7fa ff23 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    }
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	683a      	ldr	r2, [r7, #0]
 800ea50:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ea52:	bf00      	nop
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800ea5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea60:	b085      	sub	sp, #20
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	460b      	mov	r3, r1
 800ea68:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800ea6a:	687e      	ldr	r6, [r7, #4]
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	3330      	adds	r3, #48	; 0x30
 800ea72:	681c      	ldr	r4, [r3, #0]
 800ea74:	887d      	ldrh	r5, [r7, #2]
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 f836 	bl	800eae8 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	81bb      	strh	r3, [r7, #12]
 800ea80:	f107 030c 	add.w	r3, r7, #12
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff ff23 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	6813      	ldr	r3, [r2, #0]
 800ea8e:	332c      	adds	r3, #44	; 0x2c
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4610      	mov	r0, r2
 800ea94:	4798      	blx	r3
 800ea96:	4603      	mov	r3, r0
 800ea98:	1aeb      	subs	r3, r5, r3
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	b21b      	sxth	r3, r3
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	47a0      	blx	r4
    }
 800eaa4:	bf00      	nop
 800eaa6:	3714      	adds	r7, #20
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eaac <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	460b      	mov	r3, r1
 800eab6:	807b      	strh	r3, [r7, #2]
 800eab8:	4613      	mov	r3, r2
 800eaba:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	332c      	adds	r3, #44	; 0x2c
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800eaca:	4610      	mov	r0, r2
 800eacc:	4798      	blx	r3
        setBaselineY(baselineY);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	3364      	adds	r3, #100	; 0x64
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eada:	4611      	mov	r1, r2
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	4798      	blx	r3
    }
 800eae0:	bf00      	nop
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <_ZNK8touchgfx8TextArea7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREA.
     */
    virtual uint16_t getType() const
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREA;
 800eb08:	230d      	movs	r3, #13
    }
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	370c      	adds	r7, #12
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
	...

0800eb18 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b082      	sub	sp, #8
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	4a05      	ldr	r2, [pc, #20]	; (800eb38 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	601a      	str	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fa fdd5 	bl	80096d8 <_ZN8touchgfx6WidgetD1Ev>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	4618      	mov	r0, r3
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	08023b68 	.word	0x08023b68

0800eb3c <_ZN8touchgfx8TextAreaD0Ev>:
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b082      	sub	sp, #8
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff ffe7 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 800eb4a:	2134      	movs	r1, #52	; 0x34
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f011 ff38 	bl	80209c2 <_ZdlPvj>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4618      	mov	r0, r3
 800eb56:	3708      	adds	r7, #8
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase() : TextArea() {  }
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4618      	mov	r0, r3
 800eb68:	f7ff ff28 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 800eb6c:	4a03      	ldr	r2, [pc, #12]	; (800eb7c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	601a      	str	r2, [r3, #0]
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	4618      	mov	r0, r3
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}
 800eb7c:	0802354c 	.word	0x0802354c

0800eb80 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	4a05      	ldr	r2, [pc, #20]	; (800eba0 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	601a      	str	r2, [r3, #0]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7ff ffc1 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3708      	adds	r7, #8
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}
 800eba0:	0802354c 	.word	0x0802354c

0800eba4 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b082      	sub	sp, #8
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7ff ffe7 	bl	800eb80 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800ebb2:	2134      	movs	r1, #52	; 0x34
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f011 ff04 	bl	80209c2 <_ZdlPvj>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7ff ffc4 	bl	800eb5c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800ebd4:	4a05      	ldr	r2, [pc, #20]	; (800ebec <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	601a      	str	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	080234d0 	.word	0x080234d0

0800ebf0 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
     *
     *        Gets text height.
     *
     * @return The text height.
     */
    virtual int16_t getTextHeight()
 800ebf0:	b590      	push	{r4, r7, lr}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	3326      	adds	r3, #38	; 0x26
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff fe3d 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00e      	beq.n	800ec26 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x36>
 800ec08:	687c      	ldr	r4, [r7, #4]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	3326      	adds	r3, #38	; 0x26
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff fe48 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 800ec14:	4601      	mov	r1, r0
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f001 fba3 	bl	8010368 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
 800ec22:	4603      	mov	r3, r0
 800ec24:	e000      	b.n	800ec28 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
 800ec26:	2300      	movs	r3, #0
    }
 800ec28:	4618      	mov	r0, r3
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd90      	pop	{r4, r7, pc}

0800ec30 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
     *        Draws TextArea and its text if a Font is set and the TypedText associated with
     *        the TextArea is valid.
     *
     * @param area The invalidated area.
     */
    virtual void draw(const Rect& area) const
 800ec30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec32:	b093      	sub	sp, #76	; 0x4c
 800ec34:	af06      	add	r7, sp, #24
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
    {
        if (typedText.hasValidId())
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3326      	adds	r3, #38	; 0x26
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f7ff fe1c 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d055      	beq.n	800ecf6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc6>
        {
            const Font* fontToDraw = typedText.getFont();
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	3326      	adds	r3, #38	; 0x26
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff fe3e 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 800ec54:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (fontToDraw != 0)
 800ec56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d04c      	beq.n	800ecf6 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc6>
            {
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	3326      	adds	r3, #38	; 0x26
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7ff fe4e 	bl	800e908 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	607b      	str	r3, [r7, #4]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	3326      	adds	r3, #38	; 0x26
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff fe59 	bl	800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800ec86:	4603      	mov	r3, r0
 800ec88:	603b      	str	r3, [r7, #0]
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	f107 0010 	add.w	r0, r7, #16
 800ec9c:	9105      	str	r1, [sp, #20]
 800ec9e:	9304      	str	r3, [sp, #16]
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	9103      	str	r1, [sp, #12]
 800eca4:	9502      	str	r5, [sp, #8]
 800eca6:	9401      	str	r4, [sp, #4]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	9300      	str	r3, [sp, #0]
 800ecac:	4633      	mov	r3, r6
 800ecae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ecb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecb2:	f7ff fda3 	bl	800e7fc <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE>
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard, 0);
 800ecb6:	f7fa fdc7 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800ecba:	4604      	mov	r4, r0
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f00c fc64 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	3326      	adds	r3, #38	; 0x26
 800ecce:	4618      	mov	r0, r3
 800ecd0:	f7ff fde8 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 800ecd4:	4601      	mov	r1, r0
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecda:	2200      	movs	r2, #0
 800ecdc:	9203      	str	r2, [sp, #12]
 800ecde:	9302      	str	r3, [sp, #8]
 800ece0:	9101      	str	r1, [sp, #4]
 800ece2:	f107 0310 	add.w	r3, r7, #16
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ecee:	ca06      	ldmia	r2, {r1, r2}
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f00b f905 	bl	8019f00 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
            }
        }
    }
 800ecf6:	bf00      	nop
 800ecf8:	3734      	adds	r7, #52	; 0x34
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ecfe <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800ecfe:	b480      	push	{r7}
 800ed00:	b083      	sub	sp, #12
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	683a      	ldr	r2, [r7, #0]
 800ed0c:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800ed0e:	bf00      	nop
 800ed10:	370c      	adds	r7, #12
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 800ed1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3326      	adds	r3, #38	; 0x26
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7ff fda8 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d01c      	beq.n	800ed6c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x52>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	3326      	adds	r3, #38	; 0x26
 800ed36:	4618      	mov	r0, r3
 800ed38:	f7ff fdca 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 800ed3c:	4605      	mov	r5, r0
 800ed3e:	682b      	ldr	r3, [r5, #0]
 800ed40:	331c      	adds	r3, #28
 800ed42:	681c      	ldr	r4, [r3, #0]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	3326      	adds	r3, #38	; 0x26
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7ff fdf5 	bl	800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	461e      	mov	r6, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	3326      	adds	r3, #38	; 0x26
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7ff fda4 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed62:	4631      	mov	r1, r6
 800ed64:	4628      	mov	r0, r5
 800ed66:	47a0      	blx	r4
 800ed68:	4603      	mov	r3, r0
 800ed6a:	e000      	b.n	800ed6e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x54>
 800ed6c:	2300      	movs	r3, #0
    }
 800ed6e:	4618      	mov	r0, r3
 800ed70:	370c      	adds	r7, #12
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed76 <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
 800ed76:	b480      	push	{r7}
 800ed78:	b083      	sub	sp, #12
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
 800ed7e:	230e      	movs	r3, #14
    }
 800ed80:	4618      	mov	r0, r3
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	4a05      	ldr	r2, [pc, #20]	; (800edac <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	601a      	str	r2, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7ff feef 	bl	800eb80 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	080234d0 	.word	0x080234d0

0800edb0 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f7ff ffe7 	bl	800ed8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800edbe:	2138      	movs	r1, #56	; 0x38
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f011 fdfe 	bl	80209c2 <_ZdlPvj>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4618      	mov	r0, r3
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>:

#include <touchgfx/containers/progress_indicators/AbstractDirectionProgress.hpp>

namespace touchgfx
{
AbstractDirectionProgress::AbstractDirectionProgress()
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
    : AbstractProgressIndicator()
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4618      	mov	r0, r3
 800eddc:	f000 f85c 	bl	800ee98 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 800ede0:	4a05      	ldr	r2, [pc, #20]	; (800edf8 <_ZN8touchgfx25AbstractDirectionProgressC1Ev+0x28>)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	601a      	str	r2, [r3, #0]
{
    AbstractDirectionProgress::setDirection(RIGHT);
 800ede6:	2100      	movs	r1, #0
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 f829 	bl	800ee40 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
}
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4618      	mov	r0, r3
 800edf2:	3708      	adds	r7, #8
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	080235f8 	.word	0x080235f8

0800edfc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>:

AbstractDirectionProgress::~AbstractDirectionProgress()
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	4a05      	ldr	r2, [pc, #20]	; (800ee1c <_ZN8touchgfx25AbstractDirectionProgressD1Ev+0x20>)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f000 f893 	bl	800ef38 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
{
}
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	080235f8 	.word	0x080235f8

0800ee20 <_ZN8touchgfx25AbstractDirectionProgressD0Ev>:
AbstractDirectionProgress::~AbstractDirectionProgress()
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
}
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7ff ffe7 	bl	800edfc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
 800ee2e:	2190      	movs	r1, #144	; 0x90
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f011 fdc6 	bl	80209c2 <_ZdlPvj>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>:

void AbstractDirectionProgress::setDirection(DirectionType direction)
{
 800ee40:	b5b0      	push	{r4, r5, r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
    progressDirection = direction;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	78fa      	ldrb	r2, [r7, #3]
 800ee50:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    setValue(getValue());
 800ee54:	687d      	ldr	r5, [r7, #4]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	33b0      	adds	r3, #176	; 0xb0
 800ee5c:	681c      	ldr	r4, [r3, #0]
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	33b4      	adds	r3, #180	; 0xb4
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4610      	mov	r0, r2
 800ee6a:	4798      	blx	r3
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	4619      	mov	r1, r3
 800ee70:	4628      	mov	r0, r5
 800ee72:	47a0      	blx	r4
}
 800ee74:	bf00      	nop
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ee7c <_ZNK8touchgfx25AbstractDirectionProgress12getDirectionEv>:

touchgfx::AbstractDirectionProgress::DirectionType AbstractDirectionProgress::getDirection() const
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
    return progressDirection;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
	...

0800ee98 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:

#include <touchgfx/containers/progress_indicators/AbstractProgressIndicator.hpp>

namespace touchgfx
{
AbstractProgressIndicator::AbstractProgressIndicator()
 800ee98:	b590      	push	{r4, r7, lr}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
    : Container(), rangeMin(0), rangeMax(100), currentValue(0), rangeSteps(100), rangeStepsMin(0)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fb ff1e 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800eea8:	4a22      	ldr	r2, [pc, #136]	; (800ef34 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	601a      	str	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800eeb4:	f107 030c 	add.w	r3, r7, #12
 800eeb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fa fab6 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 800eec2:	f107 030c 	add.w	r3, r7, #12
 800eec6:	4619      	mov	r1, r3
 800eec8:	4620      	mov	r0, r4
 800eeca:	f7fb ffad 	bl	800ae28 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	3358      	adds	r3, #88	; 0x58
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fb ff06 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2264      	movs	r2, #100	; 0x64
 800eee4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2264      	movs	r2, #100	; 0x64
 800eef4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
{
    background.setXY(0, 0);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	332c      	adds	r3, #44	; 0x2c
 800ef04:	2200      	movs	r2, #0
 800ef06:	2100      	movs	r1, #0
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fa fb0c 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    Container::add(background);
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	332c      	adds	r3, #44	; 0x2c
 800ef14:	4619      	mov	r1, r3
 800ef16:	4610      	mov	r0, r2
 800ef18:	f7fa feda 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    Container::add(progressIndicatorContainer);
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3358      	adds	r3, #88	; 0x58
 800ef22:	4619      	mov	r1, r3
 800ef24:	4610      	mov	r0, r2
 800ef26:	f7fa fed3 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3714      	adds	r7, #20
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd90      	pop	{r4, r7, pc}
 800ef34:	080236c4 	.word	0x080236c4

0800ef38 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:

touchgfx::AbstractProgressIndicator::~AbstractProgressIndicator()
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	4a0a      	ldr	r2, [pc, #40]	; (800ef6c <_ZN8touchgfx25AbstractProgressIndicatorD1Ev+0x34>)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	601a      	str	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	3358      	adds	r3, #88	; 0x58
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fa fc20 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	332c      	adds	r3, #44	; 0x2c
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fa fc49 	bl	80097ec <_ZN8touchgfx5ImageD1Ev>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7fa fc17 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
{
}
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4618      	mov	r0, r3
 800ef66:	3708      	adds	r7, #8
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	080236c4 	.word	0x080236c4

0800ef70 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
touchgfx::AbstractProgressIndicator::~AbstractProgressIndicator()
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
}
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff ffdd 	bl	800ef38 <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>
 800ef7e:	2190      	movs	r1, #144	; 0x90
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f011 fd1e 	bl	80209c2 <_ZdlPvj>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:

void AbstractProgressIndicator::setBackground(const Bitmap& bmpBackground)
{
 800ef90:	b590      	push	{r4, r7, lr}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
    background.setBitmap(bmpBackground);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	332c      	adds	r3, #44	; 0x2c
 800ef9e:	6839      	ldr	r1, [r7, #0]
 800efa0:	4618      	mov	r0, r3
 800efa2:	f000 ffa7 	bl	800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    Drawable::setWidth(background.getWidth());
 800efa6:	687c      	ldr	r4, [r7, #4]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	332c      	adds	r3, #44	; 0x2c
 800efac:	4618      	mov	r0, r3
 800efae:	f7fb f920 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800efb2:	4603      	mov	r3, r0
 800efb4:	4619      	mov	r1, r3
 800efb6:	4620      	mov	r0, r4
 800efb8:	f7fa fad3 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(background.getHeight());
 800efbc:	687c      	ldr	r4, [r7, #4]
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	332c      	adds	r3, #44	; 0x2c
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fb f922 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800efc8:	4603      	mov	r3, r0
 800efca:	4619      	mov	r1, r3
 800efcc:	4620      	mov	r0, r4
 800efce:	f7fa fad7 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>
}
 800efd2:	bf00      	nop
 800efd4:	370c      	adds	r7, #12
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd90      	pop	{r4, r7, pc}

0800efda <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:

void AbstractProgressIndicator::setProgressIndicatorPosition(int16_t x, int16_t y, int16_t width, int16_t height)
{
 800efda:	b590      	push	{r4, r7, lr}
 800efdc:	b087      	sub	sp, #28
 800efde:	af02      	add	r7, sp, #8
 800efe0:	60f8      	str	r0, [r7, #12]
 800efe2:	4608      	mov	r0, r1
 800efe4:	4611      	mov	r1, r2
 800efe6:	461a      	mov	r2, r3
 800efe8:	4603      	mov	r3, r0
 800efea:	817b      	strh	r3, [r7, #10]
 800efec:	460b      	mov	r3, r1
 800efee:	813b      	strh	r3, [r7, #8]
 800eff0:	4613      	mov	r3, r2
 800eff2:	80fb      	strh	r3, [r7, #6]
    progressIndicatorContainer.setPosition(x, y, width, height);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800effa:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800effe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f002:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f006:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f00a:	9300      	str	r3, [sp, #0]
 800f00c:	4623      	mov	r3, r4
 800f00e:	f7fa fa3f 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>

    if (getWidth() < x + width)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	4618      	mov	r0, r3
 800f016:	f7fb f8ec 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f01a:	4603      	mov	r3, r0
 800f01c:	4619      	mov	r1, r3
 800f01e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f026:	4413      	add	r3, r2
 800f028:	4299      	cmp	r1, r3
 800f02a:	bfb4      	ite	lt
 800f02c:	2301      	movlt	r3, #1
 800f02e:	2300      	movge	r3, #0
 800f030:	b2db      	uxtb	r3, r3
 800f032:	2b00      	cmp	r3, #0
 800f034:	d008      	beq.n	800f048 <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss+0x6e>
    {
        AbstractProgressIndicator::setWidth(x + width);
 800f036:	68f8      	ldr	r0, [r7, #12]
 800f038:	897a      	ldrh	r2, [r7, #10]
 800f03a:	88fb      	ldrh	r3, [r7, #6]
 800f03c:	4413      	add	r3, r2
 800f03e:	b29b      	uxth	r3, r3
 800f040:	b21b      	sxth	r3, r3
 800f042:	4619      	mov	r1, r3
 800f044:	f7fa fa8d 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
    }

    if (getHeight() < y + height)
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fb f8de 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f050:	4603      	mov	r3, r0
 800f052:	4619      	mov	r1, r3
 800f054:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f058:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f05c:	4413      	add	r3, r2
 800f05e:	4299      	cmp	r1, r3
 800f060:	bfb4      	ite	lt
 800f062:	2301      	movlt	r3, #1
 800f064:	2300      	movge	r3, #0
 800f066:	b2db      	uxtb	r3, r3
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d008      	beq.n	800f07e <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss+0xa4>
    {
        AbstractProgressIndicator::setHeight(y + height);
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	893a      	ldrh	r2, [r7, #8]
 800f070:	8c3b      	ldrh	r3, [r7, #32]
 800f072:	4413      	add	r3, r2
 800f074:	b29b      	uxth	r3, r3
 800f076:	b21b      	sxth	r3, r3
 800f078:	4619      	mov	r1, r3
 800f07a:	f7fa fa81 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>
    }
}
 800f07e:	bf00      	nop
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	bd90      	pop	{r4, r7, pc}

0800f086 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorX() const
{
 800f086:	b580      	push	{r7, lr}
 800f088:	b082      	sub	sp, #8
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
    return progressIndicatorContainer.getX();
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	3358      	adds	r3, #88	; 0x58
 800f092:	4618      	mov	r0, r3
 800f094:	f7fa fddf 	bl	8009c56 <_ZNK8touchgfx8Drawable4getXEv>
 800f098:	4603      	mov	r3, r0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3708      	adds	r7, #8
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorY() const
{
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
    return progressIndicatorContainer.getY();
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	3358      	adds	r3, #88	; 0x58
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fa fdde 	bl	8009c70 <_ZNK8touchgfx8Drawable4getYEv>
 800f0b4:	4603      	mov	r3, r0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3708      	adds	r7, #8
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}

0800f0be <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorWidth() const
{
 800f0be:	b580      	push	{r7, lr}
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	af00      	add	r7, sp, #0
 800f0c4:	6078      	str	r0, [r7, #4]
    return progressIndicatorContainer.getWidth();
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3358      	adds	r3, #88	; 0x58
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7fb f891 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f0d0:	4603      	mov	r3, r0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:

int16_t AbstractProgressIndicator::getProgressIndicatorHeight() const
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b082      	sub	sp, #8
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
    return progressIndicatorContainer.getHeight();
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	3358      	adds	r3, #88	; 0x58
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fb f890 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f0ec:	4603      	mov	r3, r0
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
	...

0800f0f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>:

void AbstractProgressIndicator::setRange(int16_t min, int16_t max, uint16_t steps /*= 0*/, uint16_t minStep /*= 0*/)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	4608      	mov	r0, r1
 800f102:	4611      	mov	r1, r2
 800f104:	461a      	mov	r2, r3
 800f106:	4603      	mov	r3, r0
 800f108:	817b      	strh	r3, [r7, #10]
 800f10a:	460b      	mov	r3, r1
 800f10c:	813b      	strh	r3, [r7, #8]
 800f10e:	4613      	mov	r3, r2
 800f110:	80fb      	strh	r3, [r7, #6]
    assert(min < max);
 800f112:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f116:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	db05      	blt.n	800f12a <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x32>
 800f11e:	4b1e      	ldr	r3, [pc, #120]	; (800f198 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0xa0>)
 800f120:	4a1e      	ldr	r2, [pc, #120]	; (800f19c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0xa4>)
 800f122:	214d      	movs	r1, #77	; 0x4d
 800f124:	481e      	ldr	r0, [pc, #120]	; (800f1a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0xa8>)
 800f126:	f011 fc69 	bl	80209fc <__assert_func>
    rangeMin = min;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	897a      	ldrh	r2, [r7, #10]
 800f12e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    rangeMax = max;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	893a      	ldrh	r2, [r7, #8]
 800f136:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    setValue(currentValue);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	33b0      	adds	r3, #176	; 0xb0
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
 800f148:	4611      	mov	r1, r2
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	4798      	blx	r3
    if (steps == 0)
 800f14e:	88fb      	ldrh	r3, [r7, #6]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d107      	bne.n	800f164 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x6c>
    {
        rangeSteps = max - min;
 800f154:	893a      	ldrh	r2, [r7, #8]
 800f156:	897b      	ldrh	r3, [r7, #10]
 800f158:	1ad3      	subs	r3, r2, r3
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800f162:	e003      	b.n	800f16c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x74>
    }
    else
    {
        rangeSteps = steps;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	88fa      	ldrh	r2, [r7, #6]
 800f168:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    }
    rangeStepsMin = minStep;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	8b3a      	ldrh	r2, [r7, #24]
 800f170:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
    assert(rangeStepsMin < rangeSteps);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800f180:	429a      	cmp	r2, r3
 800f182:	d305      	bcc.n	800f190 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0x98>
 800f184:	4b07      	ldr	r3, [pc, #28]	; (800f1a4 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0xac>)
 800f186:	4a05      	ldr	r2, [pc, #20]	; (800f19c <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0xa4>)
 800f188:	215a      	movs	r1, #90	; 0x5a
 800f18a:	4805      	ldr	r0, [pc, #20]	; (800f1a0 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt+0xa8>)
 800f18c:	f011 fc36 	bl	80209fc <__assert_func>
}
 800f190:	bf00      	nop
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}
 800f198:	080226a4 	.word	0x080226a4
 800f19c:	08023780 	.word	0x08023780
 800f1a0:	080226b0 	.word	0x080226b0
 800f1a4:	0802272c 	.word	0x0802272c

0800f1a8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_RtS2_>:

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max, uint16_t& steps, uint16_t& minStep) const
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
 800f1b4:	603b      	str	r3, [r7, #0]
    min = rangeMin;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	801a      	strh	r2, [r3, #0]
    max = rangeMax;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f9b3 2086 	ldrsh.w	r2, [r3, #134]	; 0x86
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	801a      	strh	r2, [r3, #0]
    steps = rangeSteps;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	801a      	strh	r2, [r3, #0]
    minStep = rangeStepsMin;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 800f1da:	69bb      	ldr	r3, [r7, #24]
 800f1dc:	801a      	strh	r2, [r3, #0]
}
 800f1de:	bf00      	nop
 800f1e0:	3714      	adds	r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_Rt>:

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max, uint16_t& steps) const
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b085      	sub	sp, #20
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	60f8      	str	r0, [r7, #12]
 800f1f2:	60b9      	str	r1, [r7, #8]
 800f1f4:	607a      	str	r2, [r7, #4]
 800f1f6:	603b      	str	r3, [r7, #0]
    min = rangeMin;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	801a      	strh	r2, [r3, #0]
    max = rangeMax;
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f9b3 2086 	ldrsh.w	r2, [r3, #134]	; 0x86
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	801a      	strh	r2, [r3, #0]
    steps = rangeSteps;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	801a      	strh	r2, [r3, #0]
}
 800f216:	bf00      	nop
 800f218:	3714      	adds	r7, #20
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr

0800f222 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERsS1_>:

void AbstractProgressIndicator::getRange(int16_t& min, int16_t& max) const
{
 800f222:	b480      	push	{r7}
 800f224:	b085      	sub	sp, #20
 800f226:	af00      	add	r7, sp, #0
 800f228:	60f8      	str	r0, [r7, #12]
 800f22a:	60b9      	str	r1, [r7, #8]
 800f22c:	607a      	str	r2, [r7, #4]
    min = rangeMin;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	f9b3 2084 	ldrsh.w	r2, [r3, #132]	; 0x84
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	801a      	strh	r2, [r3, #0]
    max = rangeMax;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f9b3 2086 	ldrsh.w	r2, [r3, #134]	; 0x86
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	801a      	strh	r2, [r3, #0]
}
 800f242:	bf00      	nop
 800f244:	3714      	adds	r7, #20
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:

void AbstractProgressIndicator::setValue(int value)
{
 800f24e:	b480      	push	{r7}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
    int newValue = MAX(value, rangeMin);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 800f25e:	461a      	mov	r2, r3
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	4293      	cmp	r3, r2
 800f264:	bfb8      	it	lt
 800f266:	4613      	movlt	r3, r2
 800f268:	60fb      	str	r3, [r7, #12]
    newValue = MIN(newValue, rangeMax);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800f270:	461a      	mov	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	4293      	cmp	r3, r2
 800f276:	bfa8      	it	ge
 800f278:	4613      	movge	r3, r2
 800f27a:	60fb      	str	r3, [r7, #12]
    currentValue = newValue;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
}
 800f286:	bf00      	nop
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr

0800f292 <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:

int AbstractProgressIndicator::getValue() const
{
 800f292:	b480      	push	{r7}
 800f294:	b083      	sub	sp, #12
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
    return currentValue;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	370c      	adds	r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:

uint16_t AbstractProgressIndicator::getProgress(uint16_t range /*= 100*/) const
{
 800f2ac:	b590      	push	{r4, r7, lr}
 800f2ae:	b087      	sub	sp, #28
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	807b      	strh	r3, [r7, #2]
    if (range == 0)
 800f2b8:	887b      	ldrh	r3, [r7, #2]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d101      	bne.n	800f2c2 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x16>
    {
        return 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	e02f      	b.n	800f322 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x76>
    }
    int32_t remainder; // Not used here
    // Find out at what step the current value is.
    int32_t step = rangeStepsMin + muldiv(currentValue - rangeMin, rangeSteps - rangeStepsMin, rangeMax - rangeMin, remainder);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f2c8:	461c      	mov	r4, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800f2d0:	461a      	mov	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 800f2d8:	1ad0      	subs	r0, r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 800f2e8:	1ad1      	subs	r1, r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f9b3 3086 	ldrsh.w	r3, [r3, #134]	; 0x86
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f9b3 3084 	ldrsh.w	r3, [r3, #132]	; 0x84
 800f2f8:	1ad2      	subs	r2, r2, r3
 800f2fa:	f107 030c 	add.w	r3, r7, #12
 800f2fe:	f00c f9e2 	bl	801b6c6 <_ZN8touchgfx6muldivElllRl>
 800f302:	4603      	mov	r3, r0
 800f304:	4423      	add	r3, r4
 800f306:	617b      	str	r3, [r7, #20]
    // Scale the step up to [0..range]
    int32_t prog = muldiv(step, range, rangeSteps, remainder);
 800f308:	8879      	ldrh	r1, [r7, #2]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800f310:	461a      	mov	r2, r3
 800f312:	f107 030c 	add.w	r3, r7, #12
 800f316:	6978      	ldr	r0, [r7, #20]
 800f318:	f00c f9d5 	bl	801b6c6 <_ZN8touchgfx6muldivElllRl>
 800f31c:	6138      	str	r0, [r7, #16]
    return (uint16_t)prog;
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	b29b      	uxth	r3, r3
}
 800f322:	4618      	mov	r0, r3
 800f324:	371c      	adds	r7, #28
 800f326:	46bd      	mov	sp, r7
 800f328:	bd90      	pop	{r4, r7, pc}
	...

0800f32c <_ZN8touchgfx11BoxProgressC1Ev>:

#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>

namespace touchgfx
{
BoxProgress::BoxProgress()
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
    : AbstractDirectionProgress(), box()
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4618      	mov	r0, r3
 800f338:	f7ff fd4a 	bl	800edd0 <_ZN8touchgfx25AbstractDirectionProgressC1Ev>
 800f33c:	4a0a      	ldr	r2, [pc, #40]	; (800f368 <_ZN8touchgfx11BoxProgressC1Ev+0x3c>)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	601a      	str	r2, [r3, #0]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	3390      	adds	r3, #144	; 0x90
 800f346:	4618      	mov	r0, r3
 800f348:	f7fb fcf4 	bl	800ad34 <_ZN8touchgfx3BoxC1Ev>
{
    progressIndicatorContainer.add(box);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3390      	adds	r3, #144	; 0x90
 800f356:	4619      	mov	r1, r3
 800f358:	4610      	mov	r0, r2
 800f35a:	f7fa fcb9 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	080237ec 	.word	0x080237ec

0800f36c <_ZN8touchgfx11BoxProgressD1Ev>:

BoxProgress::~BoxProgress()
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	4a08      	ldr	r2, [pc, #32]	; (800f398 <_ZN8touchgfx11BoxProgressD1Ev+0x2c>)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	3390      	adds	r3, #144	; 0x90
 800f37e:	4618      	mov	r0, r3
 800f380:	f7fb fcf8 	bl	800ad74 <_ZN8touchgfx3BoxD1Ev>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fd38 	bl	800edfc <_ZN8touchgfx25AbstractDirectionProgressD1Ev>
{
}
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	080237ec 	.word	0x080237ec

0800f39c <_ZN8touchgfx11BoxProgressD0Ev>:
BoxProgress::~BoxProgress()
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
}
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f7ff ffe1 	bl	800f36c <_ZN8touchgfx11BoxProgressD1Ev>
 800f3aa:	21c0      	movs	r1, #192	; 0xc0
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f011 fb08 	bl	80209c2 <_ZdlPvj>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>:

void BoxProgress::setProgressIndicatorPosition(int16_t x, int16_t y, int16_t width, int16_t height)
{
 800f3bc:	b590      	push	{r4, r7, lr}
 800f3be:	b087      	sub	sp, #28
 800f3c0:	af02      	add	r7, sp, #8
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	4611      	mov	r1, r2
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	817b      	strh	r3, [r7, #10]
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	813b      	strh	r3, [r7, #8]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	80fb      	strh	r3, [r7, #6]
    box.setPosition(0, 0, width, height);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800f3dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f3e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	4613      	mov	r3, r2
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	f7fa f850 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>

    AbstractProgressIndicator::setProgressIndicatorPosition(x, y, width, height);
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800f3f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f3fa:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800f3fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	4623      	mov	r3, r4
 800f406:	f7ff fde8 	bl	800efda <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>
}
 800f40a:	bf00      	nop
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd90      	pop	{r4, r7, pc}

0800f412 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>:

void BoxProgress::setColor(colortype color)
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b082      	sub	sp, #8
 800f416:	af00      	add	r7, sp, #0
 800f418:	6078      	str	r0, [r7, #4]
 800f41a:	6039      	str	r1, [r7, #0]
    box.setColor(color);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	3390      	adds	r3, #144	; 0x90
 800f420:	6839      	ldr	r1, [r7, #0]
 800f422:	4618      	mov	r0, r3
 800f424:	f7fb fcc8 	bl	800adb8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
}
 800f428:	bf00      	nop
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <_ZNK8touchgfx11BoxProgress8getColorEv>:

touchgfx::colortype BoxProgress::getColor() const
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
    return box.getColor();
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	3390      	adds	r3, #144	; 0x90
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7fb fcc9 	bl	800add4 <_ZNK8touchgfx3Box8getColorEv>
 800f442:	4603      	mov	r3, r0
}
 800f444:	4618      	mov	r0, r3
 800f446:	3708      	adds	r7, #8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <_ZN8touchgfx11BoxProgress8setAlphaEh>:

void BoxProgress::setAlpha(uint8_t alpha)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	460b      	mov	r3, r1
 800f456:	70fb      	strb	r3, [r7, #3]
    box.setAlpha(alpha);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3390      	adds	r3, #144	; 0x90
 800f45c:	78fa      	ldrb	r2, [r7, #3]
 800f45e:	4611      	mov	r1, r2
 800f460:	4618      	mov	r0, r3
 800f462:	f7fb fcc3 	bl	800adec <_ZN8touchgfx3Box8setAlphaEh>
}
 800f466:	bf00      	nop
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <_ZNK8touchgfx11BoxProgress8getAlphaEv>:

uint8_t BoxProgress::getAlpha() const
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b082      	sub	sp, #8
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
    return box.getAlpha();
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	3390      	adds	r3, #144	; 0x90
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fb fcc6 	bl	800ae0c <_ZNK8touchgfx3Box8getAlphaEv>
 800f480:	4603      	mov	r3, r0
}
 800f482:	4618      	mov	r0, r3
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
	...

0800f48c <_ZN8touchgfx11BoxProgress8setValueEi>:

void BoxProgress::setValue(int value)
{
 800f48c:	b5b0      	push	{r4, r5, r7, lr}
 800f48e:	b086      	sub	sp, #24
 800f490:	af02      	add	r7, sp, #8
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
    AbstractProgressIndicator::setValue(value);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7ff fed7 	bl	800f24e <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
    box.invalidate();
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3390      	adds	r3, #144	; 0x90
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f00b ffca 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
    int16_t progress = 0;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	81fb      	strh	r3, [r7, #14]
    switch (progressDirection)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d829      	bhi.n	800f50c <_ZN8touchgfx11BoxProgress8setValueEi+0x80>
 800f4b8:	a201      	add	r2, pc, #4	; (adr r2, 800f4c0 <_ZN8touchgfx11BoxProgress8setValueEi+0x34>)
 800f4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4be:	bf00      	nop
 800f4c0:	0800f4d1 	.word	0x0800f4d1
 800f4c4:	0800f4d1 	.word	0x0800f4d1
 800f4c8:	0800f4ef 	.word	0x0800f4ef
 800f4cc:	0800f4ef 	.word	0x0800f4ef
    {
    case AbstractDirectionProgress::RIGHT:
    case AbstractDirectionProgress::LEFT:
        progress = AbstractProgressIndicator::getProgress(progressIndicatorContainer.getWidth());
 800f4d0:	687c      	ldr	r4, [r7, #4]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3358      	adds	r3, #88	; 0x58
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fa fe8b 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f7ff fee2 	bl	800f2ac <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	81fb      	strh	r3, [r7, #14]
        break;
 800f4ec:	e00e      	b.n	800f50c <_ZN8touchgfx11BoxProgress8setValueEi+0x80>
    case AbstractDirectionProgress::DOWN:
    case AbstractDirectionProgress::UP:
        progress = AbstractProgressIndicator::getProgress(progressIndicatorContainer.getHeight());
 800f4ee:	687c      	ldr	r4, [r7, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3358      	adds	r3, #88	; 0x58
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fa fe89 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	b29b      	uxth	r3, r3
 800f4fe:	4619      	mov	r1, r3
 800f500:	4620      	mov	r0, r4
 800f502:	f7ff fed3 	bl	800f2ac <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 800f506:	4603      	mov	r3, r0
 800f508:	81fb      	strh	r3, [r7, #14]
        break;
 800f50a:	bf00      	nop
    }
    switch (progressDirection)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800f512:	2b03      	cmp	r3, #3
 800f514:	d86d      	bhi.n	800f5f2 <_ZN8touchgfx11BoxProgress8setValueEi+0x166>
 800f516:	a201      	add	r2, pc, #4	; (adr r2, 800f51c <_ZN8touchgfx11BoxProgress8setValueEi+0x90>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f52d 	.word	0x0800f52d
 800f520:	0800f553 	.word	0x0800f553
 800f524:	0800f58d 	.word	0x0800f58d
 800f528:	0800f5b5 	.word	0x0800f5b5
    {
    case AbstractDirectionProgress::RIGHT:
        box.setPosition(0, 0, progress, progressIndicatorContainer.getHeight());
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	3358      	adds	r3, #88	; 0x58
 800f536:	4618      	mov	r0, r3
 800f538:	f7fa fe68 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f53c:	4603      	mov	r3, r0
 800f53e:	461a      	mov	r2, r3
 800f540:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f544:	9200      	str	r2, [sp, #0]
 800f546:	2200      	movs	r2, #0
 800f548:	2100      	movs	r1, #0
 800f54a:	4620      	mov	r0, r4
 800f54c:	f7f9 ffa0 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
        break;
 800f550:	e04f      	b.n	800f5f2 <_ZN8touchgfx11BoxProgress8setValueEi+0x166>
    case AbstractDirectionProgress::LEFT:
        box.setPosition(getWidth() - progress, 0, progress, progressIndicatorContainer.getHeight());
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fa fe49 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f560:	4603      	mov	r3, r0
 800f562:	b29a      	uxth	r2, r3
 800f564:	89fb      	ldrh	r3, [r7, #14]
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	b29b      	uxth	r3, r3
 800f56a:	b21d      	sxth	r5, r3
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	3358      	adds	r3, #88	; 0x58
 800f570:	4618      	mov	r0, r3
 800f572:	f7fa fe4b 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f576:	4603      	mov	r3, r0
 800f578:	461a      	mov	r2, r3
 800f57a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f57e:	9200      	str	r2, [sp, #0]
 800f580:	2200      	movs	r2, #0
 800f582:	4629      	mov	r1, r5
 800f584:	4620      	mov	r0, r4
 800f586:	f7f9 ff83 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
        break;
 800f58a:	e032      	b.n	800f5f2 <_ZN8touchgfx11BoxProgress8setValueEi+0x166>
    case AbstractDirectionProgress::DOWN:
        box.setPosition(0, 0, progressIndicatorContainer.getWidth(), progress);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	3358      	adds	r3, #88	; 0x58
 800f596:	4618      	mov	r0, r3
 800f598:	f7fa fe2b 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f59c:	4603      	mov	r3, r0
 800f59e:	461a      	mov	r2, r3
 800f5a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f7f9 ff6f 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
        break;
 800f5b2:	e01e      	b.n	800f5f2 <_ZN8touchgfx11BoxProgress8setValueEi+0x166>
    case AbstractDirectionProgress::UP:
        box.setPosition(0, progressIndicatorContainer.getHeight() - progress, progressIndicatorContainer.getWidth(), progress);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f103 0490 	add.w	r4, r3, #144	; 0x90
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	3358      	adds	r3, #88	; 0x58
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fa fe24 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	89fb      	ldrh	r3, [r7, #14]
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	b21d      	sxth	r5, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	3358      	adds	r3, #88	; 0x58
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fa fe0c 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	461a      	mov	r2, r3
 800f5de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	462a      	mov	r2, r5
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f7f9 ff50 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
        break;
 800f5f0:	bf00      	nop
    }
    box.invalidate();
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	3390      	adds	r3, #144	; 0x90
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f00b ff21 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 800f5fc:	bf00      	nop
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bdb0      	pop	{r4, r5, r7, pc}

0800f604 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800f612:	4618      	mov	r0, r3
 800f614:	370c      	adds	r7, #12
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr

0800f61e <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 800f61e:	b480      	push	{r7}
 800f620:	b083      	sub	sp, #12
 800f622:	af00      	add	r7, sp, #0
 800f624:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 800f626:	2302      	movs	r3, #2
    }
 800f628:	4618      	mov	r0, r3
 800f62a:	370c      	adds	r7, #12
 800f62c:	46bd      	mov	sp, r7
 800f62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f632:	4770      	bx	lr

0800f634 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b084      	sub	sp, #16
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f644:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 800f646:	6838      	ldr	r0, [r7, #0]
 800f648:	f7fb fcce 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	bf0c      	ite	eq
 800f652:	2301      	moveq	r3, #1
 800f654:	2300      	movne	r3, #0
 800f656:	b2da      	uxtb	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f664:	2b00      	cmp	r3, #0
 800f666:	d005      	beq.n	800f674 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 800f668:	7bfb      	ldrb	r3, [r7, #15]
 800f66a:	f083 0301 	eor.w	r3, r3, #1
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	2b00      	cmp	r3, #0
 800f672:	d10a      	bne.n	800f68a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f67a:	f083 0301 	eor.w	r3, r3, #1
 800f67e:	b2db      	uxtb	r3, r3
 800f680:	2b00      	cmp	r3, #0
 800f682:	d009      	beq.n	800f698 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 800f684:	7bfb      	ldrb	r3, [r7, #15]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d006      	beq.n	800f698 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	3314      	adds	r3, #20
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4610      	mov	r0, r2
 800f696:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800f698:	7bfb      	ldrb	r3, [r7, #15]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d00b      	beq.n	800f6b6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f69e:	6838      	ldr	r0, [r7, #0]
 800f6a0:	f7fb fca2 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	2b01      	cmp	r3, #1
 800f6a8:	d105      	bne.n	800f6b6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d001      	beq.n	800f6b6 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e000      	b.n	800f6b8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d015      	beq.n	800f6e8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	330c      	adds	r3, #12
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	4610      	mov	r0, r2
 800f6cc:	4798      	blx	r3
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d009      	beq.n	800f6e8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	3308      	adds	r3, #8
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	6879      	ldr	r1, [r7, #4]
 800f6e4:	4610      	mov	r0, r2
 800f6e6:	4798      	blx	r3
        }
    }
}
 800f6e8:	bf00      	nop
 800f6ea:	3710      	adds	r7, #16
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <_ZNK8touchgfx3Box7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BOX.
     */
    virtual uint16_t getType() const
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800f6f8:	2304      	movs	r3, #4
    }
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <_ZNK8touchgfx3Box12getSolidRectEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
Rect Box::getSolidRect() const
{
 800f706:	b580      	push	{r7, lr}
 800f708:	b084      	sub	sp, #16
 800f70a:	af02      	add	r7, sp, #8
 800f70c:	6078      	str	r0, [r7, #4]
 800f70e:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800f710:	2300      	movs	r3, #0
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	2300      	movs	r3, #0
 800f716:	2200      	movs	r2, #0
 800f718:	2100      	movs	r1, #0
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7fa f8b0 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    if (reportAsSolid || alpha == 255)
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f726:	2b00      	cmp	r3, #0
 800f728:	d104      	bne.n	800f734 <_ZNK8touchgfx3Box12getSolidRectEv+0x2e>
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f730:	2bff      	cmp	r3, #255	; 0xff
 800f732:	d109      	bne.n	800f748 <_ZNK8touchgfx3Box12getSolidRectEv+0x42>
    {
        solidRect.width = rect.width;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800f748:	bf00      	nop
}
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 800f752:	b590      	push	{r4, r7, lr}
 800f754:	b085      	sub	sp, #20
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
 800f75a:	6039      	str	r1, [r7, #0]
    Rect dirty = area;
 800f75c:	683a      	ldr	r2, [r7, #0]
 800f75e:	f107 0308 	add.w	r3, r7, #8
 800f762:	6810      	ldr	r0, [r2, #0]
 800f764:	6851      	ldr	r1, [r2, #4]
 800f766:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	3324      	adds	r3, #36	; 0x24
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f107 0108 	add.w	r1, r7, #8
 800f776:	4610      	mov	r0, r2
 800f778:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800f77a:	f7fa f865 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800f77e:	6803      	ldr	r3, [r0, #0]
 800f780:	331c      	adds	r3, #28
 800f782:	681c      	ldr	r4, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	f107 0108 	add.w	r1, r7, #8
 800f790:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800f792:	47a0      	blx	r4
}
 800f794:	bf00      	nop
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd90      	pop	{r4, r7, pc}

0800f79c <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b082      	sub	sp, #8
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
 800f7a4:	4a05      	ldr	r2, [pc, #20]	; (800f7bc <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	601a      	str	r2, [r3, #0]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7f9 ff93 	bl	80096d8 <_ZN8touchgfx6WidgetD1Ev>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3708      	adds	r7, #8
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}
 800f7bc:	080239a4 	.word	0x080239a4

0800f7c0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff ffe7 	bl	800f79c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f7ce:	2134      	movs	r1, #52	; 0x34
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f011 f8f6 	bl	80209c2 <_ZdlPvj>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3708      	adds	r7, #8
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <_ZNK8touchgfx13BoxWithBorder7getTypeEv>:
     *
     * @brief Gets the type.
     *
     * @return The type.
     */
    virtual uint16_t getType() const
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800f7e8:	2304      	movs	r3, #4
    }
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
Rect BoxWithBorder::getSolidRect() const
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b084      	sub	sp, #16
 800f7fa:	af02      	add	r7, sp, #8
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800f800:	2300      	movs	r3, #0
 800f802:	9300      	str	r3, [sp, #0]
 800f804:	2300      	movs	r3, #0
 800f806:	2200      	movs	r2, #0
 800f808:	2100      	movs	r1, #0
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f7fa f838 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    if (alpha == 255)
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f816:	2bff      	cmp	r3, #255	; 0xff
 800f818:	d109      	bne.n	800f82e <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv+0x38>
    {
        solidRect.width = rect.width;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800f82e:	bf00      	nop
}
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	3708      	adds	r7, #8
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:

void BoxWithBorder::draw(const Rect& area) const
{
 800f838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83c:	b094      	sub	sp, #80	; 0x50
 800f83e:	af02      	add	r7, sp, #8
 800f840:	6078      	str	r0, [r7, #4]
 800f842:	6039      	str	r1, [r7, #0]
    Rect dirty = area & Rect(borderSize, borderSize, getWidth() - (2 * borderSize), getHeight() - (2 * borderSize));
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f84a:	b21c      	sxth	r4, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f852:	b21d      	sxth	r5, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4618      	mov	r0, r3
 800f858:	f7fa fccb 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f85c:	4603      	mov	r3, r0
 800f85e:	b29a      	uxth	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f866:	b29b      	uxth	r3, r3
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	1ad3      	subs	r3, r2, r3
 800f86e:	b29b      	uxth	r3, r3
 800f870:	b21e      	sxth	r6, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	f7fa fcc9 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f87a:	4603      	mov	r3, r0
 800f87c:	b29a      	uxth	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f884:	b29b      	uxth	r3, r3
 800f886:	005b      	lsls	r3, r3, #1
 800f888:	b29b      	uxth	r3, r3
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	b21b      	sxth	r3, r3
 800f890:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	4633      	mov	r3, r6
 800f898:	462a      	mov	r2, r5
 800f89a:	4621      	mov	r1, r4
 800f89c:	f7f9 fff0 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800f8a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f8a4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800f8a8:	6839      	ldr	r1, [r7, #0]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fa f893 	bl	80099d6 <_ZNK8touchgfx4RectanERKS0_>
    translateRectToAbsolute(dirty);
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	3324      	adds	r3, #36	; 0x24
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f8be:	4610      	mov	r0, r2
 800f8c0:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800f8c2:	f7f9 ffc1 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800f8c6:	6803      	ldr	r3, [r0, #0]
 800f8c8:	331c      	adds	r3, #28
 800f8ca:	681c      	ldr	r4, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800f8d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800f8da:	47a0      	blx	r4

    if (borderSize > 0)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	f000 80b3 	beq.w	800fa4e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
        };
 800f8e8:	f107 040c 	add.w	r4, r7, #12
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fa fc7f 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	461a      	mov	r2, r3
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800f8fe:	b21b      	sxth	r3, r3
 800f900:	9300      	str	r3, [sp, #0]
 800f902:	4613      	mov	r3, r2
 800f904:	2200      	movs	r2, #0
 800f906:	2100      	movs	r1, #0
 800f908:	4620      	mov	r0, r4
 800f90a:	f7f9 ffb9 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800f90e:	3408      	adds	r4, #8
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4618      	mov	r0, r3
 800f914:	f7fa fc7a 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f918:	4603      	mov	r3, r0
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f922:	b29b      	uxth	r3, r3
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	b29b      	uxth	r3, r3
        };
 800f928:	b21d      	sxth	r5, r3
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fa fc60 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f932:	4603      	mov	r3, r0
 800f934:	461a      	mov	r2, r3
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800f93c:	b21b      	sxth	r3, r3
 800f93e:	9300      	str	r3, [sp, #0]
 800f940:	4613      	mov	r3, r2
 800f942:	462a      	mov	r2, r5
 800f944:	2100      	movs	r1, #0
 800f946:	4620      	mov	r0, r4
 800f948:	f7f9 ff9a 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800f94c:	3408      	adds	r4, #8
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800f954:	b21d      	sxth	r5, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800f95c:	b21e      	sxth	r6, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4618      	mov	r0, r3
 800f962:	f7fa fc53 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f966:	4603      	mov	r3, r0
 800f968:	b29a      	uxth	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f970:	b29b      	uxth	r3, r3
 800f972:	005b      	lsls	r3, r3, #1
 800f974:	b29b      	uxth	r3, r3
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	b29b      	uxth	r3, r3
        };
 800f97a:	b21b      	sxth	r3, r3
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	4633      	mov	r3, r6
 800f980:	462a      	mov	r2, r5
 800f982:	2100      	movs	r1, #0
 800f984:	4620      	mov	r0, r4
 800f986:	f7f9 ff7b 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800f98a:	3408      	adds	r4, #8
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fa fc2f 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800f994:	4603      	mov	r3, r0
 800f996:	b29a      	uxth	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f99e:	b29b      	uxth	r3, r3
 800f9a0:	1ad3      	subs	r3, r2, r3
 800f9a2:	b29b      	uxth	r3, r3
        };
 800f9a4:	b21d      	sxth	r5, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800f9ac:	b21e      	sxth	r6, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800f9b4:	fa0f f883 	sxth.w	r8, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fa fc26 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	005b      	lsls	r3, r3, #1
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	1ad3      	subs	r3, r2, r3
 800f9d2:	b29b      	uxth	r3, r3
        };
 800f9d4:	b21b      	sxth	r3, r3
 800f9d6:	9300      	str	r3, [sp, #0]
 800f9d8:	4643      	mov	r3, r8
 800f9da:	4632      	mov	r2, r6
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f7f9 ff4e 	bl	8009880 <_ZN8touchgfx4RectC1Essss>

        for (int i = 0; i < 4; i++)
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	647b      	str	r3, [r7, #68]	; 0x44
 800f9e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ea:	2b03      	cmp	r3, #3
 800f9ec:	dc2f      	bgt.n	800fa4e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect borderDirty = borders[i] & area;
 800f9ee:	f107 020c 	add.w	r2, r7, #12
 800f9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9f4:	00db      	lsls	r3, r3, #3
 800f9f6:	18d1      	adds	r1, r2, r3
 800f9f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f9fc:	683a      	ldr	r2, [r7, #0]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f9 ffe9 	bl	80099d6 <_ZNK8touchgfx4RectanERKS0_>
            if (!borderDirty.isEmpty())
 800fa04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7fa f901 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	f083 0301 	eor.w	r3, r3, #1
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d015      	beq.n	800fa46 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x20e>
            {
                translateRectToAbsolute(borderDirty);
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3324      	adds	r3, #36	; 0x24
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fa28:	4610      	mov	r0, r2
 800fa2a:	4798      	blx	r3
                HAL::lcd().fillRect(borderDirty, borderColor, alpha);
 800fa2c:	f7f9 ff0c 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800fa30:	6803      	ldr	r3, [r0, #0]
 800fa32:	331c      	adds	r3, #28
 800fa34:	681c      	ldr	r4, [r3, #0]
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fa42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fa44:	47a0      	blx	r4
        for (int i = 0; i < 4; i++)
 800fa46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa48:	3301      	adds	r3, #1
 800fa4a:	647b      	str	r3, [r7, #68]	; 0x44
 800fa4c:	e7cc      	b.n	800f9e8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x1b0>
            }
        }
    }
}
 800fa4e:	bf00      	nop
 800fa50:	3748      	adds	r7, #72	; 0x48
 800fa52:	46bd      	mov	sp, r7
 800fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fa58 <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 800fa60:	2305      	movs	r3, #5
    }
 800fa62:	4618      	mov	r0, r3
 800fa64:	370c      	adds	r7, #12
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr

0800fa6e <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 800fa6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa70:	b08d      	sub	sp, #52	; 0x34
 800fa72:	af04      	add	r7, sp, #16
 800fa74:	6078      	str	r0, [r7, #4]
 800fa76:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	3330      	adds	r3, #48	; 0x30
 800fa86:	e001      	b.n	800fa8c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	332e      	adds	r3, #46	; 0x2e
 800fa8c:	881b      	ldrh	r3, [r3, #0]
 800fa8e:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 800fa90:	f107 031c 	add.w	r3, r7, #28
 800fa94:	4618      	mov	r0, r3
 800fa96:	f00d fa79 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	b21c      	sxth	r4, r3
 800fa9e:	f107 031c 	add.w	r3, r7, #28
 800faa2:	4618      	mov	r0, r3
 800faa4:	f00d faac 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800faa8:	4603      	mov	r3, r0
 800faaa:	b21b      	sxth	r3, r3
 800faac:	f107 0014 	add.w	r0, r7, #20
 800fab0:	9300      	str	r3, [sp, #0]
 800fab2:	4623      	mov	r3, r4
 800fab4:	2200      	movs	r2, #0
 800fab6:	2100      	movs	r1, #0
 800fab8:	f7f9 fee2 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 800fabc:	f107 0314 	add.w	r3, r7, #20
 800fac0:	6839      	ldr	r1, [r7, #0]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f9 ff9c 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 800fac8:	f107 031c 	add.w	r3, r7, #28
 800facc:	4618      	mov	r0, r3
 800face:	f7fe f81d 	bl	800db0c <_ZNK8touchgfx6Bitmap5getIdEv>
 800fad2:	4603      	mov	r3, r0
 800fad4:	461a      	mov	r2, r3
 800fad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fada:	429a      	cmp	r2, r3
 800fadc:	d00c      	beq.n	800faf8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800fade:	f107 0314 	add.w	r3, r7, #20
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fa f894 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fae8:	4603      	mov	r3, r0
 800faea:	f083 0301 	eor.w	r3, r3, #1
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d001      	beq.n	800faf8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 800faf4:	2301      	movs	r3, #1
 800faf6:	e000      	b.n	800fafa <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 800faf8:	2300      	movs	r3, #0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d024      	beq.n	800fb48 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 800fafe:	f107 030c 	add.w	r3, r7, #12
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7f9 fc7c 	bl	8009400 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3324      	adds	r3, #36	; 0x24
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f107 010c 	add.w	r1, r7, #12
 800fb16:	4610      	mov	r0, r2
 800fb18:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 800fb1a:	f7f9 fe95 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800fb1e:	6803      	ldr	r3, [r0, #0]
 800fb20:	330c      	adds	r3, #12
 800fb22:	681c      	ldr	r4, [r3, #0]
 800fb24:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 800fb28:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fb32:	f107 011c 	add.w	r1, r7, #28
 800fb36:	2201      	movs	r2, #1
 800fb38:	9202      	str	r2, [sp, #8]
 800fb3a:	9301      	str	r3, [sp, #4]
 800fb3c:	f107 0314 	add.w	r3, r7, #20
 800fb40:	9300      	str	r3, [sp, #0]
 800fb42:	4633      	mov	r3, r6
 800fb44:	462a      	mov	r2, r5
 800fb46:	47a0      	blx	r4
    }
}
 800fb48:	bf00      	nop
 800fb4a:	3724      	adds	r7, #36	; 0x24
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb50 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 800fb50:	b590      	push	{r4, r7, lr}
 800fb52:	b085      	sub	sp, #20
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	60f8      	str	r0, [r7, #12]
 800fb58:	60b9      	str	r1, [r7, #8]
 800fb5a:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	68ba      	ldr	r2, [r7, #8]
 800fb60:	8812      	ldrh	r2, [r2, #0]
 800fb62:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	8812      	ldrh	r2, [r2, #0]
 800fb6a:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 800fb6c:	68fc      	ldr	r4, [r7, #12]
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3330      	adds	r3, #48	; 0x30
 800fb72:	4618      	mov	r0, r3
 800fb74:	f00d fa0a 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	b21b      	sxth	r3, r3
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	4620      	mov	r0, r4
 800fb80:	f7f9 fcef 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 800fb84:	68fc      	ldr	r4, [r7, #12]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	3330      	adds	r3, #48	; 0x30
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f00d fa38 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fb90:	4603      	mov	r3, r0
 800fb92:	b21b      	sxth	r3, r3
 800fb94:	4619      	mov	r1, r3
 800fb96:	4620      	mov	r0, r4
 800fb98:	f7f9 fcf2 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>
}
 800fb9c:	bf00      	nop
 800fb9e:	3714      	adds	r7, #20
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd90      	pop	{r4, r7, pc}

0800fba4 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af02      	add	r7, sp, #8
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800fbb4:	2bff      	cmp	r3, #255	; 0xff
 800fbb6:	d008      	beq.n	800fbca <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 800fbb8:	2300      	movs	r3, #0
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f7f9 fe5c 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800fbc8:	e015      	b.n	800fbf6 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d008      	beq.n	800fbe6 <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	4611      	mov	r1, r2
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f00d fa48 	bl	801d074 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fbe4:	e007      	b.n	800fbf6 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	4611      	mov	r1, r2
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f00d fa3f 	bl	801d074 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	3708      	adds	r7, #8
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
        {
            textHeightIncludingSpacing = 0;
        }
    }

    virtual Rect getSolidRect() const
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b082      	sub	sp, #8
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
 800fc06:	6039      	str	r1, [r7, #0]
    {
        return Button::getSolidRect();
 800fc08:	683a      	ldr	r2, [r7, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7ff ffc8 	bl	800fba4 <_ZNK8touchgfx6Button12getSolidRectEv>
    };
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}

0800fc1c <_ZNK8touchgfx15ButtonWithLabel7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTONWITHLABEL.
     */
    virtual uint16_t getType() const
 800fc1c:	b480      	push	{r7}
 800fc1e:	b083      	sub	sp, #12
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTONWITHLABEL;
 800fc24:	2307      	movs	r3, #7
    }
 800fc26:	4618      	mov	r0, r3
 800fc28:	370c      	adds	r7, #12
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
	...

0800fc34 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
#include <touchgfx/FontManager.hpp>
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
ButtonWithLabel::ButtonWithLabel()
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
    : Button(), color(0), colorPressed(0), rotation(TEXT_ROTATE_0), textHeightIncludingSpacing(0)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4618      	mov	r0, r3
 800fc40:	f7fd f8fa 	bl	800ce38 <_ZN8touchgfx6ButtonC1Ev>
 800fc44:	4a11      	ldr	r2, [pc, #68]	; (800fc8c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	601a      	str	r2, [r3, #0]
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	3334      	adds	r3, #52	; 0x34
 800fc4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe fe02 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	3338      	adds	r3, #56	; 0x38
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	4618      	mov	r0, r3
 800fc60:	f7fa ffe2 	bl	800ac28 <_ZN8touchgfx9colortypeC1Em>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	333c      	adds	r3, #60	; 0x3c
 800fc68:	2100      	movs	r1, #0
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fa ffdc 	bl	800ac28 <_ZN8touchgfx9colortypeC1Em>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
{
}
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4618      	mov	r0, r3
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	08023a84 	.word	0x08023a84

0800fc90 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:

void ButtonWithLabel::draw(const Rect& area) const
{
 800fc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc92:	b09b      	sub	sp, #108	; 0x6c
 800fc94:	af06      	add	r7, sp, #24
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
    Button::draw(area);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	68b9      	ldr	r1, [r7, #8]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7ff fee5 	bl	800fa6e <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    if (typedText.hasValidId())
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	3334      	adds	r3, #52	; 0x34
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fe fde7 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f000 80df 	beq.w	800fe74 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1e4>
    {
        const Font* fontToDraw = typedText.getFont(); //never return 0
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	3334      	adds	r3, #52	; 0x34
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7fe fe08 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 800fcc0:	64f8      	str	r0, [r7, #76]	; 0x4c
        uint8_t height = textHeightIncludingSpacing;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcc8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        int16_t offset;
        Rect labelRect;
 800fccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7f9 fb95 	bl	8009400 <_ZN8touchgfx4RectC1Ev>
        switch (rotation)
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d02a      	beq.n	800fd36 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xa6>
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	d028      	beq.n	800fd36 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xa6>
        {
        default:
        case TEXT_ROTATE_0:
        case TEXT_ROTATE_180:
            offset = (this->getHeight() - height) / 2;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7fa fa90 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800fcec:	4603      	mov	r3, r0
 800fcee:	461a      	mov	r2, r3
 800fcf0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	0fda      	lsrs	r2, r3, #31
 800fcf8:	4413      	add	r3, r2
 800fcfa:	105b      	asrs	r3, r3, #1
 800fcfc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(0, offset, this->getWidth(), height);
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fa fa75 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fd10:	b21b      	sxth	r3, r3
 800fd12:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800fd16:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800fd1a:	9300      	str	r3, [sp, #0]
 800fd1c:	460b      	mov	r3, r1
 800fd1e:	2100      	movs	r1, #0
 800fd20:	f7f9 fdae 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800fd24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800fd2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd30:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800fd34:	e027      	b.n	800fd86 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xf6>
        case TEXT_ROTATE_90:
        case TEXT_ROTATE_270:
            offset = (this->getWidth() - height) / 2;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fa fa5a 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	461a      	mov	r2, r3
 800fd42:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	0fda      	lsrs	r2, r3, #31
 800fd4a:	4413      	add	r3, r2
 800fd4c:	105b      	asrs	r3, r3, #1
 800fd4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(offset, 0, height, this->getHeight());
 800fd52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800fd56:	b21c      	sxth	r4, r3
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7fa fa56 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 800fd60:	4603      	mov	r3, r0
 800fd62:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 800fd66:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	4623      	mov	r3, r4
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f7f9 fd86 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 800fd74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd78:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800fd7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fd80:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800fd84:	bf00      	nop
        }
        Rect dirty = labelRect & area;
 800fd86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fd8e:	68ba      	ldr	r2, [r7, #8]
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7f9 fe20 	bl	80099d6 <_ZNK8touchgfx4RectanERKS0_>

        if (!dirty.isEmpty())
 800fd96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7f9 ff38 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fda0:	4603      	mov	r3, r0
 800fda2:	f083 0301 	eor.w	r3, r3, #1
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d063      	beq.n	800fe74 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1e4>
        {
            dirty.x -= labelRect.x;
 800fdac:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800fdb0:	b29a      	uxth	r2, r3
 800fdb2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	b21b      	sxth	r3, r3
 800fdbe:	853b      	strh	r3, [r7, #40]	; 0x28
            dirty.y -= labelRect.y;
 800fdc0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800fdc4:	b29a      	uxth	r2, r3
 800fdc6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	1ad3      	subs	r3, r2, r3
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	b21b      	sxth	r3, r3
 800fdd2:	857b      	strh	r3, [r7, #42]	; 0x2a
            translateRectToAbsolute(labelRect);
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	3324      	adds	r3, #36	; 0x24
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800fde2:	4610      	mov	r0, r2
 800fde4:	4798      	blx	r3
            LCD::StringVisuals visuals(fontToDraw, pressed ? colorPressed : color, alpha, typedText.getAlignment(), 0, rotation, typedText.getTextDirection(), 0, WIDE_TEXT_NONE);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d003      	beq.n	800fdf8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800fdf6:	e002      	b.n	800fdfe <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16e>
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	f893 6032 	ldrb.w	r6, [r3, #50]	; 0x32
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	3334      	adds	r3, #52	; 0x34
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fe fd7d 	bl	800e908 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	607b      	str	r3, [r7, #4]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	3334      	adds	r3, #52	; 0x34
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fe fd8b 	bl	800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fe22:	4603      	mov	r3, r0
 800fe24:	461a      	mov	r2, r3
 800fe26:	f107 0014 	add.w	r0, r7, #20
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	9305      	str	r3, [sp, #20]
 800fe2e:	2300      	movs	r3, #0
 800fe30:	9304      	str	r3, [sp, #16]
 800fe32:	9203      	str	r2, [sp, #12]
 800fe34:	9502      	str	r5, [sp, #8]
 800fe36:	2300      	movs	r3, #0
 800fe38:	9301      	str	r3, [sp, #4]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	4633      	mov	r3, r6
 800fe40:	6822      	ldr	r2, [r4, #0]
 800fe42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fe44:	f7fe fcda 	bl	800e7fc <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(labelRect, dirty, visuals, typedText.getText());
 800fe48:	f7f9 fcfe 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	3334      	adds	r3, #52	; 0x34
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fe fd26 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800fe5e:	9301      	str	r3, [sp, #4]
 800fe60:	f107 0314 	add.w	r3, r7, #20
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	4613      	mov	r3, r2
 800fe68:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fe6c:	ca06      	ldmia	r2, {r1, r2}
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f00a f846 	bl	8019f00 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
        }
    }
}
 800fe74:	bf00      	nop
 800fe76:	3754      	adds	r7, #84	; 0x54
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe7c <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	4a05      	ldr	r2, [pc, #20]	; (800fe9c <_ZN8touchgfx15ButtonWithLabelD1Ev+0x20>)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7fc fff7 	bl	800ce80 <_ZN8touchgfx6ButtonD1Ev>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	08023a84 	.word	0x08023a84

0800fea0 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff ffe7 	bl	800fe7c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 800feae:	2144      	movs	r1, #68	; 0x44
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f010 fd86 	bl	80209c2 <_ZdlPvj>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 800fec0:	b590      	push	{r4, r7, lr}
 800fec2:	b085      	sub	sp, #20
 800fec4:	af02      	add	r7, sp, #8
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 800feca:	6838      	ldr	r0, [r7, #0]
 800fecc:	f00d f85e 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fed0:	4603      	mov	r3, r0
 800fed2:	b21c      	sxth	r4, r3
 800fed4:	6838      	ldr	r0, [r7, #0]
 800fed6:	f00d f893 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800feda:	4603      	mov	r3, r0
 800fedc:	b21b      	sxth	r3, r3
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	4623      	mov	r3, r4
 800fee2:	2200      	movs	r2, #0
 800fee4:	2100      	movs	r1, #0
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f7f9 fcca 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
    }
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd90      	pop	{r4, r7, pc}

0800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 800fef4:	b5b0      	push	{r4, r5, r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	8812      	ldrh	r2, [r2, #0]
 800ff04:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 800ff06:	687d      	ldr	r5, [r7, #4]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	3338      	adds	r3, #56	; 0x38
 800ff0e:	681c      	ldr	r4, [r3, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3326      	adds	r3, #38	; 0x26
 800ff14:	4618      	mov	r0, r3
 800ff16:	f00d f839 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	b21b      	sxth	r3, r3
 800ff1e:	4619      	mov	r1, r3
 800ff20:	4628      	mov	r0, r5
 800ff22:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 800ff24:	687d      	ldr	r5, [r7, #4]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	333c      	adds	r3, #60	; 0x3c
 800ff2c:	681c      	ldr	r4, [r3, #0]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	3326      	adds	r3, #38	; 0x26
 800ff32:	4618      	mov	r0, r3
 800ff34:	f00d f864 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	b21b      	sxth	r3, r3
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	4628      	mov	r0, r5
 800ff40:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	3326      	adds	r3, #38	; 0x26
 800ff46:	4618      	mov	r0, r3
 800ff48:	f00d f8ee 	bl	801d128 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	461a      	mov	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 800ff56:	bf00      	nop
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ff5e <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 800ff5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff60:	b08d      	sub	sp, #52	; 0x34
 800ff62:	af04      	add	r7, sp, #16
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 800ff68:	f107 0310 	add.w	r3, r7, #16
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7f9 fa47 	bl	8009400 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 800ff72:	687a      	ldr	r2, [r7, #4]
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3324      	adds	r3, #36	; 0x24
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f107 0110 	add.w	r1, r7, #16
 800ff80:	4610      	mov	r0, r2
 800ff82:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ff8a:	f107 0318 	add.w	r3, r7, #24
 800ff8e:	4611      	mov	r1, r2
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7ff ff95 	bl	800fec0 <_ZNK8touchgfx6Bitmap7getRectEv>
 800ff96:	f107 0308 	add.w	r3, r7, #8
 800ff9a:	f107 0118 	add.w	r1, r7, #24
 800ff9e:	683a      	ldr	r2, [r7, #0]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7f9 fd18 	bl	80099d6 <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 800ffa6:	f107 0308 	add.w	r3, r7, #8
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7f9 fe30 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	f083 0301 	eor.w	r3, r3, #1
 800ffb6:	b2db      	uxtb	r3, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d017      	beq.n	800ffec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 800ffbc:	f7f9 fc44 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 800ffc0:	6803      	ldr	r3, [r0, #0]
 800ffc2:	330c      	adds	r3, #12
 800ffc4:	681c      	ldr	r4, [r3, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ffcc:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 800ffd0:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ffda:	2201      	movs	r2, #1
 800ffdc:	9202      	str	r2, [sp, #8]
 800ffde:	9301      	str	r3, [sp, #4]
 800ffe0:	f107 0308 	add.w	r3, r7, #8
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	4633      	mov	r3, r6
 800ffe8:	462a      	mov	r2, r5
 800ffea:	47a0      	blx	r4
    }
}
 800ffec:	bf00      	nop
 800ffee:	3724      	adds	r7, #36	; 0x24
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fff4 <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af02      	add	r7, sp, #8
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010004:	2bff      	cmp	r3, #255	; 0xff
 8010006:	d008      	beq.n	801001a <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010008:	2300      	movs	r3, #0
 801000a:	9300      	str	r3, [sp, #0]
 801000c:	2300      	movs	r3, #0
 801000e:	2200      	movs	r2, #0
 8010010:	2100      	movs	r1, #0
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7f9 fc34 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 8010018:	e007      	b.n	801002a <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	4611      	mov	r1, r2
 8010024:	4618      	mov	r0, r3
 8010026:	f00d f825 	bl	801d074 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}

08010032 <_ZN8touchgfx8TextArea13getTextHeightEv>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
int16_t TextArea::getTextHeight()
{
 8010032:	b580      	push	{r7, lr}
 8010034:	b082      	sub	sp, #8
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	3326      	adds	r3, #38	; 0x26
 801003e:	4618      	mov	r0, r3
 8010040:	f7fe fc1c 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010044:	4603      	mov	r3, r0
 8010046:	2b00      	cmp	r3, #0
 8010048:	d00b      	beq.n	8010062 <_ZN8touchgfx8TextArea13getTextHeightEv+0x30>
    {
        return getTextHeightInternal(typedText.getText());
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	3326      	adds	r3, #38	; 0x26
 801004e:	4618      	mov	r0, r3
 8010050:	f7fe fc28 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 8010054:	4603      	mov	r3, r0
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f90b 	bl	8010274 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>
 801005e:	4603      	mov	r3, r0
 8010060:	e000      	b.n	8010064 <_ZN8touchgfx8TextArea13getTextHeightEv+0x32>
    }
    else
    {
        return 0;
 8010062:	2300      	movs	r3, #0
    }
}
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <_ZNK8touchgfx8TextArea12getTextWidthEv>:

uint16_t TextArea::getTextWidth() const
{
 801006c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText()) : 0;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	3326      	adds	r3, #38	; 0x26
 8010078:	4618      	mov	r0, r3
 801007a:	f7fe fbff 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 801007e:	4603      	mov	r3, r0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d01b      	beq.n	80100bc <_ZNK8touchgfx8TextArea12getTextWidthEv+0x50>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	3326      	adds	r3, #38	; 0x26
 8010088:	4618      	mov	r0, r3
 801008a:	f7fe fc21 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801008e:	4605      	mov	r5, r0
 8010090:	682b      	ldr	r3, [r5, #0]
 8010092:	331c      	adds	r3, #28
 8010094:	681c      	ldr	r4, [r3, #0]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	3326      	adds	r3, #38	; 0x26
 801009a:	4618      	mov	r0, r3
 801009c:	f7fe fc4c 	bl	800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80100a0:	4603      	mov	r3, r0
 80100a2:	461e      	mov	r6, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3326      	adds	r3, #38	; 0x26
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fe fbfb 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 80100ae:	4603      	mov	r3, r0
 80100b0:	461a      	mov	r2, r3
 80100b2:	4631      	mov	r1, r6
 80100b4:	4628      	mov	r0, r5
 80100b6:	47a0      	blx	r4
 80100b8:	4603      	mov	r3, r0
 80100ba:	e000      	b.n	80100be <_ZNK8touchgfx8TextArea12getTextWidthEv+0x52>
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	370c      	adds	r7, #12
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080100c6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:

void TextArea::draw(const Rect& area) const
{
 80100c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100c8:	b093      	sub	sp, #76	; 0x4c
 80100ca:	af06      	add	r7, sp, #24
 80100cc:	60f8      	str	r0, [r7, #12]
 80100ce:	60b9      	str	r1, [r7, #8]
    if (typedText.hasValidId())
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	3326      	adds	r3, #38	; 0x26
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7fe fbd1 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d054      	beq.n	801018a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xc4>
    {
        const Font* fontToDraw = typedText.getFont();
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	3326      	adds	r3, #38	; 0x26
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe fbf3 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 80100ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (fontToDraw != 0)
 80100ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d04b      	beq.n	801018a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xc4>
        {
            LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	3326      	adds	r3, #38	; 0x26
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fe fc03 	bl	800e908 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 8010102:	4603      	mov	r3, r0
 8010104:	607b      	str	r3, [r7, #4]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	f9b3 402c 	ldrsh.w	r4, [r3, #44]	; 0x2c
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3326      	adds	r3, #38	; 0x26
 8010116:	4618      	mov	r0, r3
 8010118:	f7fe fc0e 	bl	800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801011c:	4603      	mov	r3, r0
 801011e:	603b      	str	r3, [r7, #0]
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010126:	68fa      	ldr	r2, [r7, #12]
 8010128:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 801012c:	68fa      	ldr	r2, [r7, #12]
 801012e:	f107 0010 	add.w	r0, r7, #16
 8010132:	9105      	str	r1, [sp, #20]
 8010134:	9304      	str	r3, [sp, #16]
 8010136:	6839      	ldr	r1, [r7, #0]
 8010138:	9103      	str	r1, [sp, #12]
 801013a:	9502      	str	r5, [sp, #8]
 801013c:	9401      	str	r4, [sp, #4]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	4633      	mov	r3, r6
 8010144:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010148:	f7fe fb58 	bl	800e7fc <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhsNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), 0, 0);
 801014c:	f7f9 fb7c 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 8010150:	4604      	mov	r4, r0
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010158:	4611      	mov	r1, r2
 801015a:	4618      	mov	r0, r3
 801015c:	f00b fa19 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3326      	adds	r3, #38	; 0x26
 8010164:	4618      	mov	r0, r3
 8010166:	f7fe fb9d 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 801016a:	4602      	mov	r2, r0
 801016c:	2300      	movs	r3, #0
 801016e:	9303      	str	r3, [sp, #12]
 8010170:	2300      	movs	r3, #0
 8010172:	9302      	str	r3, [sp, #8]
 8010174:	9201      	str	r2, [sp, #4]
 8010176:	f107 0310 	add.w	r3, r7, #16
 801017a:	9300      	str	r3, [sp, #0]
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010182:	ca06      	ldmia	r2, {r1, r2}
 8010184:	4620      	mov	r0, r4
 8010186:	f009 febb 	bl	8019f00 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
        }
    }
}
 801018a:	bf00      	nop
 801018c:	3734      	adds	r7, #52	; 0x34
 801018e:	46bd      	mov	sp, r7
 8010190:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:

void TextArea::setTypedText(TypedText t)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	8039      	strh	r1, [r7, #0]
    typedText = t;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	883a      	ldrh	r2, [r7, #0]
 80101a0:	84da      	strh	r2, [r3, #38]	; 0x26
    // If this TextArea does not yet have a width and height,
    // just assign the smallest possible size to fit current text.
    if ((getWidth() == 0) && (getHeight() == 0))
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fa f824 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d108      	bne.n	80101c2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fa f82a 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d101      	bne.n	80101c2 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 80101be:	2301      	movs	r3, #1
 80101c0:	e000      	b.n	80101c4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x32>
 80101c2:	2300      	movs	r3, #0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d002      	beq.n	80101ce <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x3c>
    {
        resizeToCurrentText();
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f804 	bl	80101d6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    }
}
 80101ce:	bf00      	nop
 80101d0:	3708      	adds	r7, #8
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}

080101d6 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:

void TextArea::resizeToCurrentText()
{
 80101d6:	b580      	push	{r7, lr}
 80101d8:	b084      	sub	sp, #16
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	3326      	adds	r3, #38	; 0x26
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe fb4a 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 80101e8:	4603      	mov	r3, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d03e      	beq.n	801026c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
    {
        uint16_t w = getTextWidth();
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3370      	adds	r3, #112	; 0x70
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	4798      	blx	r3
 80101fa:	4603      	mov	r3, r0
 80101fc:	81fb      	strh	r3, [r7, #14]
        uint16_t h = getTextHeight();
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	336c      	adds	r3, #108	; 0x6c
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	4798      	blx	r3
 801020a:	4603      	mov	r3, r0
 801020c:	81bb      	strh	r3, [r7, #12]
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010214:	2b00      	cmp	r3, #0
 8010216:	d004      	beq.n	8010222 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4c>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801021e:	2b02      	cmp	r3, #2
 8010220:	d112      	bne.n	8010248 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x72>
        {
            setWidth(w);
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	3338      	adds	r3, #56	; 0x38
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8010230:	4610      	mov	r0, r2
 8010232:	4798      	blx	r3
            setHeight(h);
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	333c      	adds	r3, #60	; 0x3c
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8010242:	4610      	mov	r0, r2
 8010244:	4798      	blx	r3
        {
            setWidth(h);
            setHeight(w);
        }
    }
}
 8010246:	e011      	b.n	801026c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
            setWidth(h);
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	3338      	adds	r3, #56	; 0x38
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8010256:	4610      	mov	r0, r2
 8010258:	4798      	blx	r3
            setHeight(w);
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	333c      	adds	r3, #60	; 0x3c
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8010268:	4610      	mov	r0, r2
 801026a:	4798      	blx	r3
}
 801026c:	bf00      	nop
 801026e:	3710      	adds	r7, #16
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>:
        }
    }
}

int16_t TextArea::getTextHeightInternal(const Unicode::UnicodeChar* format, ...) const
{
 8010274:	b40e      	push	{r1, r2, r3}
 8010276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010278:	b09e      	sub	sp, #120	; 0x78
 801027a:	af02      	add	r7, sp, #8
 801027c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, format);
 801027e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010282:	667b      	str	r3, [r7, #100]	; 0x64

    const Font* fontToDraw = typedText.getFont();
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	3326      	adds	r3, #38	; 0x26
 8010288:	4618      	mov	r0, r3
 801028a:	f7fe fb21 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801028e:	66f8      	str	r0, [r7, #108]	; 0x6c
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8010290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	3330      	adds	r3, #48	; 0x30
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801029a:	4798      	blx	r3
 801029c:	4603      	mov	r3, r0
 801029e:	b21b      	sxth	r3, r3
 80102a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    TextProvider textProvider;
 80102a4:	f107 0308 	add.w	r3, r7, #8
 80102a8:	4618      	mov	r0, r3
 80102aa:	f00c f88b 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg, fontToDraw->getGSUBTable());
 80102ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	3344      	adds	r3, #68	; 0x44
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80102b8:	4798      	blx	r3
 80102ba:	4603      	mov	r3, r0
 80102bc:	f107 0008 	add.w	r0, r7, #8
 80102c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80102c2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80102c6:	f00c f89a 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>

    int16_t numLines = LCD::getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	3326      	adds	r3, #38	; 0x26
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fe fb2f 	bl	800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80102da:	4603      	mov	r3, r0
 80102dc:	461d      	mov	r5, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	3326      	adds	r3, #38	; 0x26
 80102e2:	4618      	mov	r0, r3
 80102e4:	f7fe faf4 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 80102e8:	4606      	mov	r6, r0
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7f9 ff80 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 80102f2:	4603      	mov	r3, r0
 80102f4:	f107 0008 	add.w	r0, r7, #8
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	4633      	mov	r3, r6
 80102fc:	462a      	mov	r2, r5
 80102fe:	4621      	mov	r1, r4
 8010300:	f00a f84d 	bl	801a39e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010304:	4603      	mov	r3, r0
 8010306:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    va_end(pArg);
    return (textHeight + linespace > 0) ? (numLines * textHeight + (numLines - 1) * linespace) : (numLines > 0) ? (textHeight) : 0;
 801030a:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801030e:	461a      	mov	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010316:	4413      	add	r3, r2
 8010318:	2b00      	cmp	r3, #0
 801031a:	dd16      	ble.n	801034a <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xd6>
 801031c:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8010320:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8010324:	b29b      	uxth	r3, r3
 8010326:	fb12 f303 	smulbb	r3, r2, r3
 801032a:	b29a      	uxth	r2, r3
 801032c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 8010330:	3b01      	subs	r3, #1
 8010332:	b299      	uxth	r1, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801033a:	b29b      	uxth	r3, r3
 801033c:	fb11 f303 	smulbb	r3, r1, r3
 8010340:	b29b      	uxth	r3, r3
 8010342:	4413      	add	r3, r2
 8010344:	b29b      	uxth	r3, r3
 8010346:	b21b      	sxth	r3, r3
 8010348:	e007      	b.n	801035a <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xe6>
 801034a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801034e:	2b00      	cmp	r3, #0
 8010350:	dd02      	ble.n	8010358 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xe4>
 8010352:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8010356:	e000      	b.n	801035a <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz+0xe6>
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3770      	adds	r7, #112	; 0x70
 801035e:	46bd      	mov	sp, r7
 8010360:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010364:	b003      	add	sp, #12
 8010366:	4770      	bx	lr

08010368 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 8010368:	b40e      	push	{r1, r2, r3}
 801036a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801036c:	b09e      	sub	sp, #120	; 0x78
 801036e:	af02      	add	r7, sp, #8
 8010370:	6078      	str	r0, [r7, #4]
    if (!typedText.hasValidId())
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3326      	adds	r3, #38	; 0x26
 8010376:	4618      	mov	r0, r3
 8010378:	f7fe fa80 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 801037c:	4603      	mov	r3, r0
 801037e:	f083 0301 	eor.w	r3, r3, #1
 8010382:	b2db      	uxtb	r3, r3
 8010384:	2b00      	cmp	r3, #0
 8010386:	d001      	beq.n	801038c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x24>
    {
        return 0;
 8010388:	2300      	movs	r3, #0
 801038a:	e06d      	b.n	8010468 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x100>
    }

    va_list pArg;
    va_start(pArg, format);
 801038c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010390:	667b      	str	r3, [r7, #100]	; 0x64

    const Font* fontToDraw = typedText.getFont();
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3326      	adds	r3, #38	; 0x26
 8010396:	4618      	mov	r0, r3
 8010398:	f7fe fa9a 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801039c:	66f8      	str	r0, [r7, #108]	; 0x6c
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 801039e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	3330      	adds	r3, #48	; 0x30
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80103a8:	4798      	blx	r3
 80103aa:	4603      	mov	r3, r0
 80103ac:	b21b      	sxth	r3, r3
 80103ae:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

    TextProvider textProvider;
 80103b2:	f107 0308 	add.w	r3, r7, #8
 80103b6:	4618      	mov	r0, r3
 80103b8:	f00c f804 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg, fontToDraw->getGSUBTable());
 80103bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3344      	adds	r3, #68	; 0x44
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80103c6:	4798      	blx	r3
 80103c8:	4603      	mov	r3, r0
 80103ca:	f107 0008 	add.w	r0, r7, #8
 80103ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80103d0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80103d4:	f00c f813 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>

    int16_t numLines = LCD::getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	3326      	adds	r3, #38	; 0x26
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fe faa8 	bl	800e938 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 80103e8:	4603      	mov	r3, r0
 80103ea:	461d      	mov	r5, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	3326      	adds	r3, #38	; 0x26
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fe fa6d 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 80103f6:	4606      	mov	r6, r0
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f7f9 fef9 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010400:	4603      	mov	r3, r0
 8010402:	f107 0008 	add.w	r0, r7, #8
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	4633      	mov	r3, r6
 801040a:	462a      	mov	r2, r5
 801040c:	4621      	mov	r1, r4
 801040e:	f009 ffc6 	bl	801a39e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010412:	4603      	mov	r3, r0
 8010414:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

    va_end(pArg);
    return (textHeight + linespace > 0) ? (numLines * textHeight + (numLines - 1) * linespace) : (numLines > 0) ? (textHeight) : 0;
 8010418:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 801041c:	461a      	mov	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010424:	4413      	add	r3, r2
 8010426:	2b00      	cmp	r3, #0
 8010428:	dd16      	ble.n	8010458 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xf0>
 801042a:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 801042e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8010432:	b29b      	uxth	r3, r3
 8010434:	fb12 f303 	smulbb	r3, r2, r3
 8010438:	b29a      	uxth	r2, r3
 801043a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801043e:	3b01      	subs	r3, #1
 8010440:	b299      	uxth	r1, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010448:	b29b      	uxth	r3, r3
 801044a:	fb11 f303 	smulbb	r3, r1, r3
 801044e:	b29b      	uxth	r3, r3
 8010450:	4413      	add	r3, r2
 8010452:	b29b      	uxth	r3, r3
 8010454:	b21b      	sxth	r3, r3
 8010456:	e007      	b.n	8010468 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x100>
 8010458:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	; 0x6a
 801045c:	2b00      	cmp	r3, #0
 801045e:	dd02      	ble.n	8010466 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xfe>
 8010460:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8010464:	e000      	b.n	8010468 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x100>
 8010466:	2300      	movs	r3, #0
}
 8010468:	4618      	mov	r0, r3
 801046a:	3770      	adds	r7, #112	; 0x70
 801046c:	46bd      	mov	sp, r7
 801046e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010472:	b003      	add	sp, #12
 8010474:	4770      	bx	lr

08010476 <_ZNK8touchgfx10TiledImage7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 8010476:	b480      	push	{r7}
 8010478:	b083      	sub	sp, #12
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TILEDIMAGE;
 801047e:	2309      	movs	r3, #9
    }
 8010480:	4618      	mov	r0, r3
 8010482:	370c      	adds	r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr

0801048c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
#include <touchgfx/hal/HAL.hpp>

namespace touchgfx
{
void TiledImage::setBitmap(const Bitmap& bmp)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b082      	sub	sp, #8
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
    Image::setBitmap(bmp);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6839      	ldr	r1, [r7, #0]
 801049a:	4618      	mov	r0, r3
 801049c:	f7ff fd2a 	bl	800fef4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    // Make sure the xOffset and yOffset are correct
    setOffset(xOffset, yOffset);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	3368      	adds	r3, #104	; 0x68
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	f9b2 102a 	ldrsh.w	r1, [r2, #42]	; 0x2a
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	f9b2 202c 	ldrsh.w	r2, [r2, #44]	; 0x2c
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	4798      	blx	r3
}
 80104b8:	bf00      	nop
 80104ba:	3708      	adds	r7, #8
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <_ZN8touchgfx10TiledImage9setOffsetEss>:

void TiledImage::setOffset(int16_t x, int16_t y)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	460b      	mov	r3, r1
 80104ca:	807b      	strh	r3, [r7, #2]
 80104cc:	4613      	mov	r3, r2
 80104ce:	803b      	strh	r3, [r7, #0]
    setXOffset(x);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	336c      	adds	r3, #108	; 0x6c
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80104dc:	4611      	mov	r1, r2
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	4798      	blx	r3
    setYOffset(y);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	3370      	adds	r3, #112	; 0x70
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80104ee:	4611      	mov	r1, r2
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	4798      	blx	r3
}
 80104f4:	bf00      	nop
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <_ZN8touchgfx10TiledImage10setXOffsetEs>:

void TiledImage::setXOffset(int16_t x)
{
 80104fc:	b590      	push	{r4, r7, lr}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	460b      	mov	r3, r1
 8010506:	807b      	strh	r3, [r7, #2]
    xOffset = x;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	887a      	ldrh	r2, [r7, #2]
 801050c:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (bitmap.getWidth() != 0)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	3326      	adds	r3, #38	; 0x26
 8010512:	4618      	mov	r0, r3
 8010514:	f00c fd3a 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	bf14      	ite	ne
 801051e:	2301      	movne	r3, #1
 8010520:	2300      	moveq	r3, #0
 8010522:	b2db      	uxtb	r3, r3
 8010524:	2b00      	cmp	r3, #0
 8010526:	d023      	beq.n	8010570 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x74>
    {
        xOffset = ((xOffset % bitmap.getWidth()) + bitmap.getWidth()) % bitmap.getWidth();
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 801052e:	461c      	mov	r4, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	3326      	adds	r3, #38	; 0x26
 8010534:	4618      	mov	r0, r3
 8010536:	f00c fd29 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801053a:	4603      	mov	r3, r0
 801053c:	fb94 f2f3 	sdiv	r2, r4, r3
 8010540:	fb03 f302 	mul.w	r3, r3, r2
 8010544:	1ae4      	subs	r4, r4, r3
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	3326      	adds	r3, #38	; 0x26
 801054a:	4618      	mov	r0, r3
 801054c:	f00c fd1e 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010550:	4603      	mov	r3, r0
 8010552:	441c      	add	r4, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	3326      	adds	r3, #38	; 0x26
 8010558:	4618      	mov	r0, r3
 801055a:	f00c fd17 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801055e:	4603      	mov	r3, r0
 8010560:	fb94 f2f3 	sdiv	r2, r4, r3
 8010564:	fb03 f302 	mul.w	r3, r3, r2
 8010568:	1ae3      	subs	r3, r4, r3
 801056a:	b21a      	sxth	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
}
 8010570:	bf00      	nop
 8010572:	370c      	adds	r7, #12
 8010574:	46bd      	mov	sp, r7
 8010576:	bd90      	pop	{r4, r7, pc}

08010578 <_ZN8touchgfx10TiledImage10setYOffsetEs>:

void TiledImage::setYOffset(int16_t y)
{
 8010578:	b590      	push	{r4, r7, lr}
 801057a:	b083      	sub	sp, #12
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	460b      	mov	r3, r1
 8010582:	807b      	strh	r3, [r7, #2]
    yOffset = y;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	887a      	ldrh	r2, [r7, #2]
 8010588:	859a      	strh	r2, [r3, #44]	; 0x2c
    if (bitmap.getHeight() != 0)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	3326      	adds	r3, #38	; 0x26
 801058e:	4618      	mov	r0, r3
 8010590:	f00c fd36 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	bf14      	ite	ne
 801059a:	2301      	movne	r3, #1
 801059c:	2300      	moveq	r3, #0
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d023      	beq.n	80105ec <_ZN8touchgfx10TiledImage10setYOffsetEs+0x74>
    {
        yOffset = ((yOffset % bitmap.getHeight()) + bitmap.getHeight()) % bitmap.getHeight();
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80105aa:	461c      	mov	r4, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	3326      	adds	r3, #38	; 0x26
 80105b0:	4618      	mov	r0, r3
 80105b2:	f00c fd25 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80105b6:	4603      	mov	r3, r0
 80105b8:	fb94 f2f3 	sdiv	r2, r4, r3
 80105bc:	fb03 f302 	mul.w	r3, r3, r2
 80105c0:	1ae4      	subs	r4, r4, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	3326      	adds	r3, #38	; 0x26
 80105c6:	4618      	mov	r0, r3
 80105c8:	f00c fd1a 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80105cc:	4603      	mov	r3, r0
 80105ce:	441c      	add	r4, r3
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	3326      	adds	r3, #38	; 0x26
 80105d4:	4618      	mov	r0, r3
 80105d6:	f00c fd13 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80105da:	4603      	mov	r3, r0
 80105dc:	fb94 f2f3 	sdiv	r2, r4, r3
 80105e0:	fb03 f302 	mul.w	r3, r3, r2
 80105e4:	1ae3      	subs	r3, r4, r3
 80105e6:	b21a      	sxth	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
}
 80105ec:	bf00      	nop
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	bd90      	pop	{r4, r7, pc}

080105f4 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:

void TiledImage::getOffset(int16_t& x, int16_t& y)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	60f8      	str	r0, [r7, #12]
 80105fc:	60b9      	str	r1, [r7, #8]
 80105fe:	607a      	str	r2, [r7, #4]
    x = getXOffset();
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	3378      	adds	r3, #120	; 0x78
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	4798      	blx	r3
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	801a      	strh	r2, [r3, #0]
    y = getYOffset();
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	337c      	adds	r3, #124	; 0x7c
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	4798      	blx	r3
 8010620:	4603      	mov	r3, r0
 8010622:	461a      	mov	r2, r3
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	801a      	strh	r2, [r3, #0]
}
 8010628:	bf00      	nop
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <_ZN8touchgfx10TiledImage10getXOffsetEv>:

int16_t TiledImage::getXOffset()
{
 8010630:	b480      	push	{r7}
 8010632:	b083      	sub	sp, #12
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
    return xOffset;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
}
 801063e:	4618      	mov	r0, r3
 8010640:	370c      	adds	r7, #12
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr

0801064a <_ZN8touchgfx10TiledImage10getYOffsetEv>:

int16_t TiledImage::getYOffset()
{
 801064a:	b480      	push	{r7}
 801064c:	b083      	sub	sp, #12
 801064e:	af00      	add	r7, sp, #0
 8010650:	6078      	str	r0, [r7, #4]
    return yOffset;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 8010658:	4618      	mov	r0, r3
 801065a:	370c      	adds	r7, #12
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr

08010664 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:

void TiledImage::draw(const Rect& invalidatedArea) const
{
 8010664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010666:	b091      	sub	sp, #68	; 0x44
 8010668:	af04      	add	r7, sp, #16
 801066a:	6078      	str	r0, [r7, #4]
 801066c:	6039      	str	r1, [r7, #0]
    uint16_t bitmapWidth = bitmap.getWidth();
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	3326      	adds	r3, #38	; 0x26
 8010672:	4618      	mov	r0, r3
 8010674:	f00c fc8a 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010678:	4603      	mov	r3, r0
 801067a:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t bitmapHeight = bitmap.getHeight();
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	3326      	adds	r3, #38	; 0x26
 8010680:	4618      	mov	r0, r3
 8010682:	f00c fcbd 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010686:	4603      	mov	r3, r0
 8010688:	853b      	strh	r3, [r7, #40]	; 0x28

    if (bitmapWidth == 0 || bitmapHeight == 0)
 801068a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801068c:	2b00      	cmp	r3, #0
 801068e:	f000 80ca 	beq.w	8010826 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c2>
 8010692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010694:	2b00      	cmp	r3, #0
 8010696:	f000 80c6 	beq.w	8010826 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c2>
    {
        return;
    }

    Rect meAbs;
 801069a:	f107 0310 	add.w	r3, r7, #16
 801069e:	4618      	mov	r0, r3
 80106a0:	f7f8 feae 	bl	8009400 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs);
 80106a4:	687a      	ldr	r2, [r7, #4]
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	3324      	adds	r3, #36	; 0x24
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f107 0110 	add.w	r1, r7, #16
 80106b2:	4610      	mov	r0, r2
 80106b4:	4798      	blx	r3

    const int16_t minX = ((invalidatedArea.x + xOffset) / bitmapWidth) * bitmapWidth - xOffset;
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80106bc:	461a      	mov	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80106c4:	441a      	add	r2, r3
 80106c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80106d0:	fb12 f303 	smulbb	r3, r2, r3
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80106dc:	b29b      	uxth	r3, r3
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	84fb      	strh	r3, [r7, #38]	; 0x26
    const int16_t maxX = (((invalidatedArea.right() + xOffset) - 1) / bitmapWidth) * bitmapWidth;
 80106e4:	6838      	ldr	r0, [r7, #0]
 80106e6:	f7f9 f8eb 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 80106ea:	4603      	mov	r3, r0
 80106ec:	461a      	mov	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80106f4:	4413      	add	r3, r2
 80106f6:	1e5a      	subs	r2, r3, #1
 80106f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80106fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80106fe:	b29b      	uxth	r3, r3
 8010700:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8010702:	fb12 f303 	smulbb	r3, r2, r3
 8010706:	b29b      	uxth	r3, r3
 8010708:	84bb      	strh	r3, [r7, #36]	; 0x24
    const int16_t minY = ((invalidatedArea.y + yOffset) / bitmapHeight) * bitmapHeight - yOffset;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010710:	461a      	mov	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010718:	441a      	add	r2, r3
 801071a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801071c:	fb92 f3f3 	sdiv	r3, r2, r3
 8010720:	b29b      	uxth	r3, r3
 8010722:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010724:	fb12 f303 	smulbb	r3, r2, r3
 8010728:	b29a      	uxth	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010730:	b29b      	uxth	r3, r3
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	b29b      	uxth	r3, r3
 8010736:	847b      	strh	r3, [r7, #34]	; 0x22
    const int16_t maxY = (((invalidatedArea.bottom() + yOffset) - 1) / bitmapHeight) * bitmapHeight;
 8010738:	6838      	ldr	r0, [r7, #0]
 801073a:	f7f9 f8d6 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 801073e:	4603      	mov	r3, r0
 8010740:	461a      	mov	r2, r3
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8010748:	4413      	add	r3, r2
 801074a:	1e5a      	subs	r2, r3, #1
 801074c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801074e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010752:	b29b      	uxth	r3, r3
 8010754:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010756:	fb12 f303 	smulbb	r3, r2, r3
 801075a:	b29b      	uxth	r3, r3
 801075c:	843b      	strh	r3, [r7, #32]
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 801075e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010760:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010762:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8010766:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801076a:	429a      	cmp	r2, r3
 801076c:	dc5c      	bgt.n	8010828 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1c4>
    {
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 801076e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010770:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010772:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8010776:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801077a:	429a      	cmp	r2, r3
 801077c:	dc4d      	bgt.n	801081a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b6>
        {
            Rect dirty = Rect(x, y, bitmapWidth, bitmapHeight) & invalidatedArea;
 801077e:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8010782:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010786:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 801078a:	f9b7 102e 	ldrsh.w	r1, [r7, #46]	; 0x2e
 801078e:	f107 0018 	add.w	r0, r7, #24
 8010792:	9300      	str	r3, [sp, #0]
 8010794:	4623      	mov	r3, r4
 8010796:	f7f9 f873 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 801079a:	f107 0308 	add.w	r3, r7, #8
 801079e:	f107 0118 	add.w	r1, r7, #24
 80107a2:	683a      	ldr	r2, [r7, #0]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f9 f916 	bl	80099d6 <_ZNK8touchgfx4RectanERKS0_>
            dirty.x -= x;
 80107aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80107b2:	1ad3      	subs	r3, r2, r3
 80107b4:	b29b      	uxth	r3, r3
 80107b6:	b21b      	sxth	r3, r3
 80107b8:	813b      	strh	r3, [r7, #8]
            dirty.y -= y;
 80107ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80107be:	b29a      	uxth	r2, r3
 80107c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	b21b      	sxth	r3, r3
 80107c8:	817b      	strh	r3, [r7, #10]
            HAL::lcd().drawPartialBitmap(bitmap, meAbs.x + x, meAbs.y + y, dirty, alpha);
 80107ca:	f7f9 f83d 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 80107ce:	6803      	ldr	r3, [r0, #0]
 80107d0:	330c      	adds	r3, #12
 80107d2:	681c      	ldr	r4, [r3, #0]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80107da:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80107de:	b29a      	uxth	r2, r3
 80107e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80107e2:	4413      	add	r3, r2
 80107e4:	b29b      	uxth	r3, r3
 80107e6:	b21d      	sxth	r5, r3
 80107e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80107ec:	b29a      	uxth	r2, r3
 80107ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80107f0:	4413      	add	r3, r2
 80107f2:	b29b      	uxth	r3, r3
 80107f4:	b21e      	sxth	r6, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107fc:	2201      	movs	r2, #1
 80107fe:	9202      	str	r2, [sp, #8]
 8010800:	9301      	str	r3, [sp, #4]
 8010802:	f107 0308 	add.w	r3, r7, #8
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	4633      	mov	r3, r6
 801080a:	462a      	mov	r2, r5
 801080c:	47a0      	blx	r4
        for (int16_t y = minY; y <= maxY; y += bitmapHeight)
 801080e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010810:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010812:	4413      	add	r3, r2
 8010814:	b29b      	uxth	r3, r3
 8010816:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010818:	e7ab      	b.n	8010772 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x10e>
    for (int16_t x = minX; x <= maxX; x += bitmapWidth)
 801081a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801081c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801081e:	4413      	add	r3, r2
 8010820:	b29b      	uxth	r3, r3
 8010822:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010824:	e79d      	b.n	8010762 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xfe>
        return;
 8010826:	bf00      	nop
        }
    }
}
 8010828:	3734      	adds	r7, #52	; 0x34
 801082a:	46bd      	mov	sp, r7
 801082c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801082e <_ZNK8touchgfx10TiledImage12getSolidRectEv>:

Rect TiledImage::getSolidRect() const
{
 801082e:	b590      	push	{r4, r7, lr}
 8010830:	b08d      	sub	sp, #52	; 0x34
 8010832:	af02      	add	r7, sp, #8
 8010834:	6078      	str	r0, [r7, #4]
 8010836:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801083e:	2bff      	cmp	r3, #255	; 0xff
 8010840:	d008      	beq.n	8010854 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010842:	2300      	movs	r3, #0
 8010844:	9300      	str	r3, [sp, #0]
 8010846:	2300      	movs	r3, #0
 8010848:	2200      	movs	r2, #0
 801084a:	2100      	movs	r1, #0
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f7f9 f817 	bl	8009880 <_ZN8touchgfx4RectC1Essss>
 8010852:	e109      	b.n	8010a68 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x23a>
    }

    Rect solidRect = bitmap.getSolidRect();
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801085a:	f107 0320 	add.w	r3, r7, #32
 801085e:	4611      	mov	r1, r2
 8010860:	4618      	mov	r0, r3
 8010862:	f00c fc07 	bl	801d074 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
    if (solidRect.width == bitmap.getWidth())
 8010866:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801086a:	461c      	mov	r4, r3
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	3326      	adds	r3, #38	; 0x26
 8010870:	4618      	mov	r0, r3
 8010872:	f00c fb8b 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010876:	4603      	mov	r3, r0
 8010878:	429c      	cmp	r4, r3
 801087a:	bf0c      	ite	eq
 801087c:	2301      	moveq	r3, #1
 801087e:	2300      	movne	r3, #0
 8010880:	b2db      	uxtb	r3, r3
 8010882:	2b00      	cmp	r3, #0
 8010884:	d006      	beq.n	8010894 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x66>
    {
        solidRect.width = getWidth();
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	4618      	mov	r0, r3
 801088a:	f7f9 fcb2 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 801088e:	4603      	mov	r3, r0
 8010890:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010892:	e065      	b.n	8010960 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x132>
    }
    else
    {
        solidRect.x -= xOffset;
 8010894:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010898:	b29a      	uxth	r2, r3
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80108a0:	b29b      	uxth	r3, r3
 80108a2:	1ad3      	subs	r3, r2, r3
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	b21b      	sxth	r3, r3
 80108a8:	843b      	strh	r3, [r7, #32]
        Rect solidRect2 = solidRect;
 80108aa:	f107 0318 	add.w	r3, r7, #24
 80108ae:	f107 0220 	add.w	r2, r7, #32
 80108b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80108b6:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.x += bitmap.getWidth();
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	3326      	adds	r3, #38	; 0x26
 80108be:	4618      	mov	r0, r3
 80108c0:	f00c fb64 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80108c4:	4603      	mov	r3, r0
 80108c6:	461a      	mov	r2, r3
 80108c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80108cc:	b29b      	uxth	r3, r3
 80108ce:	4413      	add	r3, r2
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	b21b      	sxth	r3, r3
 80108d4:	833b      	strh	r3, [r7, #24]
        if (solidRect.x < 0)
 80108d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	da0e      	bge.n	80108fc <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xce>
        {
            int16_t right = solidRect.right();
 80108de:	f107 0320 	add.w	r3, r7, #32
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7f8 ffec 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 80108e8:	4603      	mov	r3, r0
 80108ea:	82fb      	strh	r3, [r7, #22]
            solidRect.width = MAX(right, 0);
 80108ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80108f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80108f4:	b21b      	sxth	r3, r3
 80108f6:	84bb      	strh	r3, [r7, #36]	; 0x24
            solidRect.x = 0;
 80108f8:	2300      	movs	r3, #0
 80108fa:	843b      	strh	r3, [r7, #32]
        }
        if (solidRect2.right() > getWidth())
 80108fc:	f107 0318 	add.w	r3, r7, #24
 8010900:	4618      	mov	r0, r3
 8010902:	f7f8 ffdd 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 8010906:	4603      	mov	r3, r0
 8010908:	461c      	mov	r4, r3
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	4618      	mov	r0, r3
 801090e:	f7f9 fc70 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010912:	4603      	mov	r3, r0
 8010914:	429c      	cmp	r4, r3
 8010916:	bfcc      	ite	gt
 8010918:	2301      	movgt	r3, #1
 801091a:	2300      	movle	r3, #0
 801091c:	b2db      	uxtb	r3, r3
 801091e:	2b00      	cmp	r3, #0
 8010920:	d010      	beq.n	8010944 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x116>
        {
            solidRect2.width = solidRect2.right() - getWidth();
 8010922:	f107 0318 	add.w	r3, r7, #24
 8010926:	4618      	mov	r0, r3
 8010928:	f7f8 ffca 	bl	80098c0 <_ZNK8touchgfx4Rect5rightEv>
 801092c:	4603      	mov	r3, r0
 801092e:	b29c      	uxth	r4, r3
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	4618      	mov	r0, r3
 8010934:	f7f9 fc5d 	bl	800a1f2 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010938:	4603      	mov	r3, r0
 801093a:	b29b      	uxth	r3, r3
 801093c:	1ae3      	subs	r3, r4, r3
 801093e:	b29b      	uxth	r3, r3
 8010940:	b21b      	sxth	r3, r3
 8010942:	83bb      	strh	r3, [r7, #28]
        }
        if (solidRect2.width > solidRect.width)
 8010944:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8010948:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801094c:	429a      	cmp	r2, r3
 801094e:	dd07      	ble.n	8010960 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x132>
        {
            solidRect = solidRect2;
 8010950:	f107 0320 	add.w	r3, r7, #32
 8010954:	f107 0218 	add.w	r2, r7, #24
 8010958:	e892 0003 	ldmia.w	r2, {r0, r1}
 801095c:	e883 0003 	stmia.w	r3, {r0, r1}
        }
    }
    if (solidRect.height == bitmap.getHeight())
 8010960:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010964:	461c      	mov	r4, r3
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	3326      	adds	r3, #38	; 0x26
 801096a:	4618      	mov	r0, r3
 801096c:	f00c fb48 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010970:	4603      	mov	r3, r0
 8010972:	429c      	cmp	r4, r3
 8010974:	bf0c      	ite	eq
 8010976:	2301      	moveq	r3, #1
 8010978:	2300      	movne	r3, #0
 801097a:	b2db      	uxtb	r3, r3
 801097c:	2b00      	cmp	r3, #0
 801097e:	d006      	beq.n	801098e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x160>
    {
        solidRect.height = getHeight();
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	4618      	mov	r0, r3
 8010984:	f7f9 fc42 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010988:	4603      	mov	r3, r0
 801098a:	84fb      	strh	r3, [r7, #38]	; 0x26
 801098c:	e065      	b.n	8010a5a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22c>
    }
    else
    {
        solidRect.y -= yOffset;
 801098e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010992:	b29a      	uxth	r2, r3
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 801099a:	b29b      	uxth	r3, r3
 801099c:	1ad3      	subs	r3, r2, r3
 801099e:	b29b      	uxth	r3, r3
 80109a0:	b21b      	sxth	r3, r3
 80109a2:	847b      	strh	r3, [r7, #34]	; 0x22
        Rect solidRect2 = solidRect;
 80109a4:	f107 030c 	add.w	r3, r7, #12
 80109a8:	f107 0220 	add.w	r2, r7, #32
 80109ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80109b0:	e883 0003 	stmia.w	r3, {r0, r1}
        solidRect2.y += bitmap.getHeight();
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	3326      	adds	r3, #38	; 0x26
 80109b8:	4618      	mov	r0, r3
 80109ba:	f00c fb21 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80109be:	4603      	mov	r3, r0
 80109c0:	461a      	mov	r2, r3
 80109c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	4413      	add	r3, r2
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	b21b      	sxth	r3, r3
 80109ce:	81fb      	strh	r3, [r7, #14]
        if (solidRect.y < 0)
 80109d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	da0e      	bge.n	80109f6 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x1c8>
        {
            int16_t bottom = solidRect.bottom();
 80109d8:	f107 0320 	add.w	r3, r7, #32
 80109dc:	4618      	mov	r0, r3
 80109de:	f7f8 ff84 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 80109e2:	4603      	mov	r3, r0
 80109e4:	817b      	strh	r3, [r7, #10]
            solidRect.height = MAX(bottom, 0);
 80109e6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80109ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80109ee:	b21b      	sxth	r3, r3
 80109f0:	84fb      	strh	r3, [r7, #38]	; 0x26
            solidRect.y = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	847b      	strh	r3, [r7, #34]	; 0x22
        }
        if (solidRect2.bottom() > getHeight())
 80109f6:	f107 030c 	add.w	r3, r7, #12
 80109fa:	4618      	mov	r0, r3
 80109fc:	f7f8 ff75 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8010a00:	4603      	mov	r3, r0
 8010a02:	461c      	mov	r4, r3
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7f9 fc00 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	429c      	cmp	r4, r3
 8010a10:	bfcc      	ite	gt
 8010a12:	2301      	movgt	r3, #1
 8010a14:	2300      	movle	r3, #0
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d010      	beq.n	8010a3e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x210>
        {
            solidRect2.height = solidRect2.bottom() - getHeight();
 8010a1c:	f107 030c 	add.w	r3, r7, #12
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7f8 ff62 	bl	80098ea <_ZNK8touchgfx4Rect6bottomEv>
 8010a26:	4603      	mov	r3, r0
 8010a28:	b29c      	uxth	r4, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7f9 fbed 	bl	800a20c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010a32:	4603      	mov	r3, r0
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	1ae3      	subs	r3, r4, r3
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	b21b      	sxth	r3, r3
 8010a3c:	827b      	strh	r3, [r7, #18]
        }
        if (solidRect2.height > solidRect.height)
 8010a3e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8010a42:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8010a46:	429a      	cmp	r2, r3
 8010a48:	dd07      	ble.n	8010a5a <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22c>
        {
            solidRect = solidRect2;
 8010a4a:	f107 0320 	add.w	r3, r7, #32
 8010a4e:	f107 020c 	add.w	r2, r7, #12
 8010a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a56:	e883 0003 	stmia.w	r3, {r0, r1}
        }
    }
    return solidRect;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	f107 0320 	add.w	r3, r7, #32
 8010a62:	cb03      	ldmia	r3!, {r0, r1}
 8010a64:	6010      	str	r0, [r2, #0]
 8010a66:	6051      	str	r1, [r2, #4]
}
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	372c      	adds	r7, #44	; 0x2c
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd90      	pop	{r4, r7, pc}

08010a70 <_ZNK8touchgfx6BitmapeqERKS0_>:
     *
     * @param other The bitmap to compare with.
     *
     * @return True if this bitmap has the same id as the other bitmap.
     */
    bool operator==(const Bitmap& other) const
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
    {
        return (bitmapId == other.bitmapId);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	881a      	ldrh	r2, [r3, #0]
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	bf0c      	ite	eq
 8010a86:	2301      	moveq	r3, #1
 8010a88:	2300      	movne	r3, #0
 8010a8a:	b2db      	uxtb	r3, r3
    }
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	370c      	adds	r7, #12
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
     * @param bmpReleased The bitmap to show in the "normal" state, ie when button is not pressed.
     * @param bmpPressed  The bitmap to show when the button is pressed.
     *
     * @see Button::setBitmaps
     */
    virtual void setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bmpPressed;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	8812      	ldrh	r2, [r2, #0]
 8010aaa:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bmpReleased, bmpPressed);
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	68b9      	ldr	r1, [r7, #8]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7ff f84c 	bl	800fb50 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8010ab8:	bf00      	nop
 8010aba:	3710      	adds	r7, #16
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <_ZNK8touchgfx12ToggleButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TOGGLEBUTTON.
     */
    virtual uint16_t getType() const
 8010ac0:	b480      	push	{r7}
 8010ac2:	b083      	sub	sp, #12
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TOGGLEBUTTON;
 8010ac8:	2310      	movs	r3, #16
    }
 8010aca:	4618      	mov	r0, r3
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr
	...

08010ad8 <_ZN8touchgfx12ToggleButtonC1Ev>:

#include <touchgfx/widgets/ToggleButton.hpp>

namespace touchgfx
{
ToggleButton::ToggleButton() : Button(), originalPressed(BITMAP_INVALID)
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7fc f9a8 	bl	800ce38 <_ZN8touchgfx6ButtonC1Ev>
 8010ae8:	4a07      	ldr	r2, [pc, #28]	; (8010b08 <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	601a      	str	r2, [r3, #0]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	3334      	adds	r3, #52	; 0x34
 8010af2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7f8 fc99 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
{
}
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	4618      	mov	r0, r3
 8010b00:	3708      	adds	r7, #8
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	08023c6c 	.word	0x08023c6c

08010b0c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
        }
    }
}

void ToggleButton::handleClickEvent(const ClickEvent& event)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b084      	sub	sp, #16
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
    if (pressed && (event.getType() == ClickEvent::RELEASED))
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d007      	beq.n	8010b30 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x24>
 8010b20:	6838      	ldr	r0, [r7, #0]
 8010b22:	f7fa fa61 	bl	800afe8 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	d101      	bne.n	8010b30 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x24>
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e000      	b.n	8010b32 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x26>
 8010b30:	2300      	movs	r3, #0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d009      	beq.n	8010b4a <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x3e>
    {
        Bitmap tmp = up;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010b3a:	81bb      	strh	r3, [r7, #12]
        up = down;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	687a      	ldr	r2, [r7, #4]
 8010b40:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8010b42:	85da      	strh	r2, [r3, #46]	; 0x2e
        down = tmp;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	89ba      	ldrh	r2, [r7, #12]
 8010b48:	861a      	strh	r2, [r3, #48]	; 0x30
    }
    Button::handleClickEvent(event);
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6839      	ldr	r1, [r7, #0]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fe fd70 	bl	800f634 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>
}
 8010b54:	bf00      	nop
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <_ZN8touchgfx12ToggleButtonD1Ev>:
class ToggleButton : public Button
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	4a05      	ldr	r2, [pc, #20]	; (8010b7c <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	601a      	str	r2, [r3, #0]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fc f987 	bl	800ce80 <_ZN8touchgfx6ButtonD1Ev>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	08023c6c 	.word	0x08023c6c

08010b80 <_ZN8touchgfx12ToggleButtonD0Ev>:
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b082      	sub	sp, #8
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7ff ffe7 	bl	8010b5c <_ZN8touchgfx12ToggleButtonD1Ev>
 8010b8e:	2138      	movs	r1, #56	; 0x38
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f00f ff16 	bl	80209c2 <_ZdlPvj>
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3708      	adds	r7, #8
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	b29b      	uxth	r3, r3
    }
 8010bae:	4618      	mov	r0, r3
 8010bb0:	370c      	adds	r7, #12
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr
	...

08010bbc <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint8_t dummy = 0x5a;

void OSWrappers::initialize()
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	af00      	add	r7, sp, #0
    vSemaphoreCreateBinary(frame_buffer_sem);
 8010bc0:	2203      	movs	r2, #3
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	2001      	movs	r0, #1
 8010bc6:	f000 fa71 	bl	80110ac <xQueueGenericCreate>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	4b0b      	ldr	r3, [pc, #44]	; (8010bfc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8010bce:	601a      	str	r2, [r3, #0]
 8010bd0:	4b0a      	ldr	r3, [pc, #40]	; (8010bfc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d006      	beq.n	8010be6 <_ZN8touchgfx10OSWrappers10initializeEv+0x2a>
 8010bd8:	4b08      	ldr	r3, [pc, #32]	; (8010bfc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8010bda:	6818      	ldr	r0, [r3, #0]
 8010bdc:	2300      	movs	r3, #0
 8010bde:	2200      	movs	r2, #0
 8010be0:	2100      	movs	r1, #0
 8010be2:	f000 fabf 	bl	8011164 <xQueueGenericSend>
    // Create a queue of length 1
    vsync_q = xQueueGenericCreate(1, 1, 0);
 8010be6:	2200      	movs	r2, #0
 8010be8:	2101      	movs	r1, #1
 8010bea:	2001      	movs	r0, #1
 8010bec:	f000 fa5e 	bl	80110ac <xQueueGenericCreate>
 8010bf0:	4602      	mov	r2, r0
 8010bf2:	4b03      	ldr	r3, [pc, #12]	; (8010c00 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8010bf4:	601a      	str	r2, [r3, #0]
}
 8010bf6:	bf00      	nop
 8010bf8:	bd80      	pop	{r7, pc}
 8010bfa:	bf00      	nop
 8010bfc:	200009d4 	.word	0x200009d4
 8010c00:	200009d8 	.word	0x200009d8

08010c04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, portMAX_DELAY);
 8010c08:	4b04      	ldr	r3, [pc, #16]	; (8010c1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8010c10:	4618      	mov	r0, r3
 8010c12:	f000 fd9b 	bl	801174c <xQueueSemaphoreTake>
}
 8010c16:	bf00      	nop
 8010c18:	bd80      	pop	{r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	200009d4 	.word	0x200009d4

08010c20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
void OSWrappers::giveFrameBufferSemaphore()
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	af00      	add	r7, sp, #0
    xSemaphoreGive(frame_buffer_sem);
 8010c24:	4b04      	ldr	r3, [pc, #16]	; (8010c38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>)
 8010c26:	6818      	ldr	r0, [r3, #0]
 8010c28:	2300      	movs	r3, #0
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	f000 fa99 	bl	8011164 <xQueueGenericSend>
}
 8010c32:	bf00      	nop
 8010c34:	bd80      	pop	{r7, pc}
 8010c36:	bf00      	nop
 8010c38:	200009d4 	.word	0x200009d4

08010c3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	af00      	add	r7, sp, #0
    xSemaphoreTake(frame_buffer_sem, 0);
 8010c40:	4b03      	ldr	r3, [pc, #12]	; (8010c50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2100      	movs	r1, #0
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 fd80 	bl	801174c <xQueueSemaphoreTake>
}
 8010c4c:	bf00      	nop
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	200009d4 	.word	0x200009d4

08010c54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
    // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
    // re-scheduling. May be applicable for other OSes as well.
    portBASE_TYPE px = pdFALSE;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	607b      	str	r3, [r7, #4]
    xSemaphoreGiveFromISR(frame_buffer_sem, &px);
 8010c5e:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x38>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	1d3a      	adds	r2, r7, #4
 8010c64:	4611      	mov	r1, r2
 8010c66:	4618      	mov	r0, r3
 8010c68:	f000 fc0a 	bl	8011480 <xQueueGiveFromISR>
    portEND_SWITCHING_ISR(px);
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d007      	beq.n	8010c82 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2e>
 8010c72:	4b07      	ldr	r3, [pc, #28]	; (8010c90 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x3c>)
 8010c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c78:	601a      	str	r2, [r3, #0]
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	f3bf 8f6f 	isb	sy
}
 8010c82:	bf00      	nop
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	200009d4 	.word	0x200009d4
 8010c90:	e000ed04 	.word	0xe000ed04

08010c94 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
    if (vsync_q)
 8010c9a:	4b0e      	ldr	r3, [pc, #56]	; (8010cd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d013      	beq.n	8010cca <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
    {
        // Since this is called from an interrupt, FreeRTOS requires special handling to trigger a
        // re-scheduling. May be applicable for other OSes as well.
        portBASE_TYPE px = pdFALSE;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	607b      	str	r3, [r7, #4]
        xQueueSendFromISR(vsync_q, &dummy, &px);
 8010ca6:	4b0b      	ldr	r3, [pc, #44]	; (8010cd4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x40>)
 8010ca8:	6818      	ldr	r0, [r3, #0]
 8010caa:	1d3a      	adds	r2, r7, #4
 8010cac:	2300      	movs	r3, #0
 8010cae:	490a      	ldr	r1, [pc, #40]	; (8010cd8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x44>)
 8010cb0:	f000 fb52 	bl	8011358 <xQueueGenericSendFromISR>
        portEND_SWITCHING_ISR(px);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d007      	beq.n	8010cca <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x36>
 8010cba:	4b08      	ldr	r3, [pc, #32]	; (8010cdc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x48>)
 8010cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	f3bf 8f4f 	dsb	sy
 8010cc6:	f3bf 8f6f 	isb	sy
    }
}
 8010cca:	bf00      	nop
 8010ccc:	3708      	adds	r7, #8
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}
 8010cd2:	bf00      	nop
 8010cd4:	200009d8 	.word	0x200009d8
 8010cd8:	20000039 	.word	0x20000039
 8010cdc:	e000ed04 	.word	0xe000ed04

08010ce0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	af00      	add	r7, sp, #0
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    xQueueReceive(vsync_q, &dummy, 0);
 8010ce4:	4b08      	ldr	r3, [pc, #32]	; (8010d08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	2200      	movs	r2, #0
 8010cea:	4908      	ldr	r1, [pc, #32]	; (8010d0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010cec:	4618      	mov	r0, r3
 8010cee:	f000 fc51 	bl	8011594 <xQueueReceive>

    // Then, wait for next VSYNC to occur.
    xQueueReceive(vsync_q, &dummy, portMAX_DELAY);
 8010cf2:	4b05      	ldr	r3, [pc, #20]	; (8010d08 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x28>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cfa:	4904      	ldr	r1, [pc, #16]	; (8010d0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f000 fc49 	bl	8011594 <xQueueReceive>
}
 8010d02:	bf00      	nop
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	200009d8 	.word	0x200009d8
 8010d0c:	20000039 	.word	0x20000039

08010d10 <_ZL12IdleTaskHookPv>:
{
    vTaskDelay(ms);
}

static portBASE_TYPE IdleTaskHook(void* p)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d007      	beq.n	8010d2e <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8010d1e:	f7f8 fd87 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2101      	movs	r1, #1
 8010d26:	4618      	mov	r0, r3
 8010d28:	f008 ff0e 	bl	8019b48 <_ZN8touchgfx3HAL12setMCUActiveEb>
 8010d2c:	e006      	b.n	8010d3c <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8010d2e:	f7f8 fd7f 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2100      	movs	r1, #0
 8010d36:	4618      	mov	r0, r3
 8010d38:	f008 ff06 	bl	8019b48 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 8010d3c:	2301      	movs	r3, #1
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}

08010d46 <vApplicationStackOverflowHook>:
// FreeRTOS specific handlers
extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 8010d46:	b480      	push	{r7}
 8010d48:	b083      	sub	sp, #12
 8010d4a:	af00      	add	r7, sp, #0
 8010d4c:	6078      	str	r0, [r7, #4]
 8010d4e:	6039      	str	r1, [r7, #0]
        while (1);
 8010d50:	e7fe      	b.n	8010d50 <vApplicationStackOverflowHook+0xa>

08010d52 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 8010d52:	b480      	push	{r7}
 8010d54:	b083      	sub	sp, #12
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
 8010d5a:	6039      	str	r1, [r7, #0]
        while (1);
 8010d5c:	e7fe      	b.n	8010d5c <vApplicationMallocFailedHook+0xa>
	...

08010d60 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 8010d60:	b580      	push	{r7, lr}
 8010d62:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8010d64:	4902      	ldr	r1, [pc, #8]	; (8010d70 <vApplicationIdleHook+0x10>)
 8010d66:	2000      	movs	r0, #0
 8010d68:	f001 faaa 	bl	80122c0 <vTaskSetApplicationTaskTag>
    }
 8010d6c:	bf00      	nop
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	08010d11 	.word	0x08010d11

08010d74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010d86:	2b84      	cmp	r3, #132	; 0x84
 8010d88:	d005      	beq.n	8010d96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010d8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	4413      	add	r3, r2
 8010d92:	3303      	adds	r3, #3
 8010d94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010d96:	68fb      	ldr	r3, [r7, #12]
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010da8:	f001 f8c6 	bl	8011f38 <vTaskStartScheduler>
  
  return osOK;
 8010dac:	2300      	movs	r3, #0
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010db4:	b089      	sub	sp, #36	; 0x24
 8010db6:	af04      	add	r7, sp, #16
 8010db8:	6078      	str	r0, [r7, #4]
 8010dba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	695b      	ldr	r3, [r3, #20]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d020      	beq.n	8010e06 <osThreadCreate+0x54>
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	699b      	ldr	r3, [r3, #24]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d01c      	beq.n	8010e06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	685c      	ldr	r4, [r3, #4]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681d      	ldr	r5, [r3, #0]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	691e      	ldr	r6, [r3, #16]
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7ff ffc8 	bl	8010d74 <makeFreeRtosPriority>
 8010de4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	695b      	ldr	r3, [r3, #20]
 8010dea:	687a      	ldr	r2, [r7, #4]
 8010dec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010dee:	9202      	str	r2, [sp, #8]
 8010df0:	9301      	str	r3, [sp, #4]
 8010df2:	9100      	str	r1, [sp, #0]
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	4632      	mov	r2, r6
 8010df8:	4629      	mov	r1, r5
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	f000 fed6 	bl	8011bac <xTaskCreateStatic>
 8010e00:	4603      	mov	r3, r0
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	e01c      	b.n	8010e40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	685c      	ldr	r4, [r3, #4]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010e12:	b29e      	uxth	r6, r3
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff ffaa 	bl	8010d74 <makeFreeRtosPriority>
 8010e20:	4602      	mov	r2, r0
 8010e22:	f107 030c 	add.w	r3, r7, #12
 8010e26:	9301      	str	r3, [sp, #4]
 8010e28:	9200      	str	r2, [sp, #0]
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	4632      	mov	r2, r6
 8010e2e:	4629      	mov	r1, r5
 8010e30:	4620      	mov	r0, r4
 8010e32:	f000 ff14 	bl	8011c5e <xTaskCreate>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b01      	cmp	r3, #1
 8010e3a:	d001      	beq.n	8010e40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	e000      	b.n	8010e42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010e40:	68fb      	ldr	r3, [r7, #12]
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3714      	adds	r7, #20
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010e4a:	b580      	push	{r7, lr}
 8010e4c:	b084      	sub	sp, #16
 8010e4e:	af00      	add	r7, sp, #0
 8010e50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d001      	beq.n	8010e60 <osDelay+0x16>
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	e000      	b.n	8010e62 <osDelay+0x18>
 8010e60:	2301      	movs	r3, #1
 8010e62:	4618      	mov	r0, r3
 8010e64:	f001 f834 	bl	8011ed0 <vTaskDelay>
  
  return osOK;
 8010e68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3710      	adds	r7, #16
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010e72:	b480      	push	{r7}
 8010e74:	b083      	sub	sp, #12
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f103 0208 	add.w	r2, r3, #8
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f04f 32ff 	mov.w	r2, #4294967295
 8010e8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f103 0208 	add.w	r2, r3, #8
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	f103 0208 	add.w	r2, r3, #8
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010ea6:	bf00      	nop
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	b083      	sub	sp, #12
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010ec0:	bf00      	nop
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b085      	sub	sp, #20
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	68fa      	ldr	r2, [r7, #12]
 8010ee0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	689a      	ldr	r2, [r3, #8]
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	683a      	ldr	r2, [r7, #0]
 8010ef6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	1c5a      	adds	r2, r3, #1
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	601a      	str	r2, [r3, #0]
}
 8010f08:	bf00      	nop
 8010f0a:	3714      	adds	r7, #20
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2a:	d103      	bne.n	8010f34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	691b      	ldr	r3, [r3, #16]
 8010f30:	60fb      	str	r3, [r7, #12]
 8010f32:	e00c      	b.n	8010f4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	3308      	adds	r3, #8
 8010f38:	60fb      	str	r3, [r7, #12]
 8010f3a:	e002      	b.n	8010f42 <vListInsert+0x2e>
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	685b      	ldr	r3, [r3, #4]
 8010f40:	60fb      	str	r3, [r7, #12]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	68ba      	ldr	r2, [r7, #8]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d2f6      	bcs.n	8010f3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	685a      	ldr	r2, [r3, #4]
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	683a      	ldr	r2, [r7, #0]
 8010f5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010f5e:	683b      	ldr	r3, [r7, #0]
 8010f60:	68fa      	ldr	r2, [r7, #12]
 8010f62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	683a      	ldr	r2, [r7, #0]
 8010f68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	1c5a      	adds	r2, r3, #1
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	601a      	str	r2, [r3, #0]
}
 8010f7a:	bf00      	nop
 8010f7c:	3714      	adds	r7, #20
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010f86:	b480      	push	{r7}
 8010f88:	b085      	sub	sp, #20
 8010f8a:	af00      	add	r7, sp, #0
 8010f8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	691b      	ldr	r3, [r3, #16]
 8010f92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	6892      	ldr	r2, [r2, #8]
 8010f9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	6852      	ldr	r2, [r2, #4]
 8010fa6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	685b      	ldr	r3, [r3, #4]
 8010fac:	687a      	ldr	r2, [r7, #4]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d103      	bne.n	8010fba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	689a      	ldr	r2, [r3, #8]
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	1e5a      	subs	r2, r3, #1
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3714      	adds	r7, #20
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd8:	4770      	bx	lr
	...

08010fdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b084      	sub	sp, #16
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d109      	bne.n	8011004 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff4:	f383 8811 	msr	BASEPRI, r3
 8010ff8:	f3bf 8f6f 	isb	sy
 8010ffc:	f3bf 8f4f 	dsb	sy
 8011000:	60bb      	str	r3, [r7, #8]
 8011002:	e7fe      	b.n	8011002 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8011004:	f001 ff72 	bl	8012eec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681a      	ldr	r2, [r3, #0]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011010:	68f9      	ldr	r1, [r7, #12]
 8011012:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011014:	fb01 f303 	mul.w	r3, r1, r3
 8011018:	441a      	add	r2, r3
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2200      	movs	r2, #0
 8011022:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681a      	ldr	r2, [r3, #0]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011034:	3b01      	subs	r3, #1
 8011036:	68f9      	ldr	r1, [r7, #12]
 8011038:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801103a:	fb01 f303 	mul.w	r3, r1, r3
 801103e:	441a      	add	r2, r3
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	22ff      	movs	r2, #255	; 0xff
 8011048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	22ff      	movs	r2, #255	; 0xff
 8011050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d114      	bne.n	8011084 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	691b      	ldr	r3, [r3, #16]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d01a      	beq.n	8011098 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	3310      	adds	r3, #16
 8011066:	4618      	mov	r0, r3
 8011068:	f001 fa18 	bl	801249c <xTaskRemoveFromEventList>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d012      	beq.n	8011098 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011072:	4b0d      	ldr	r3, [pc, #52]	; (80110a8 <xQueueGenericReset+0xcc>)
 8011074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011078:	601a      	str	r2, [r3, #0]
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	f3bf 8f6f 	isb	sy
 8011082:	e009      	b.n	8011098 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	3310      	adds	r3, #16
 8011088:	4618      	mov	r0, r3
 801108a:	f7ff fef2 	bl	8010e72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	3324      	adds	r3, #36	; 0x24
 8011092:	4618      	mov	r0, r3
 8011094:	f7ff feed 	bl	8010e72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011098:	f001 ff56 	bl	8012f48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801109c:	2301      	movs	r3, #1
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	e000ed04 	.word	0xe000ed04

080110ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b08a      	sub	sp, #40	; 0x28
 80110b0:	af02      	add	r7, sp, #8
 80110b2:	60f8      	str	r0, [r7, #12]
 80110b4:	60b9      	str	r1, [r7, #8]
 80110b6:	4613      	mov	r3, r2
 80110b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d109      	bne.n	80110d4 <xQueueGenericCreate+0x28>
 80110c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110c4:	f383 8811 	msr	BASEPRI, r3
 80110c8:	f3bf 8f6f 	isb	sy
 80110cc:	f3bf 8f4f 	dsb	sy
 80110d0:	613b      	str	r3, [r7, #16]
 80110d2:	e7fe      	b.n	80110d2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d102      	bne.n	80110e0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80110da:	2300      	movs	r3, #0
 80110dc:	61fb      	str	r3, [r7, #28]
 80110de:	e004      	b.n	80110ea <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	68ba      	ldr	r2, [r7, #8]
 80110e4:	fb02 f303 	mul.w	r3, r2, r3
 80110e8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	3348      	adds	r3, #72	; 0x48
 80110ee:	4618      	mov	r0, r3
 80110f0:	f002 f816 	bl	8013120 <pvPortMalloc>
 80110f4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80110f6:	69bb      	ldr	r3, [r7, #24]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00f      	beq.n	801111c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80110fc:	69bb      	ldr	r3, [r7, #24]
 80110fe:	3348      	adds	r3, #72	; 0x48
 8011100:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	2200      	movs	r2, #0
 8011106:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801110a:	79fa      	ldrb	r2, [r7, #7]
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	9300      	str	r3, [sp, #0]
 8011110:	4613      	mov	r3, r2
 8011112:	697a      	ldr	r2, [r7, #20]
 8011114:	68b9      	ldr	r1, [r7, #8]
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	f000 f805 	bl	8011126 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801111c:	69bb      	ldr	r3, [r7, #24]
	}
 801111e:	4618      	mov	r0, r3
 8011120:	3720      	adds	r7, #32
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}

08011126 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011126:	b580      	push	{r7, lr}
 8011128:	b084      	sub	sp, #16
 801112a:	af00      	add	r7, sp, #0
 801112c:	60f8      	str	r0, [r7, #12]
 801112e:	60b9      	str	r1, [r7, #8]
 8011130:	607a      	str	r2, [r7, #4]
 8011132:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d103      	bne.n	8011142 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	69ba      	ldr	r2, [r7, #24]
 801113e:	601a      	str	r2, [r3, #0]
 8011140:	e002      	b.n	8011148 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	687a      	ldr	r2, [r7, #4]
 8011146:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011148:	69bb      	ldr	r3, [r7, #24]
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	68ba      	ldr	r2, [r7, #8]
 8011152:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011154:	2101      	movs	r1, #1
 8011156:	69b8      	ldr	r0, [r7, #24]
 8011158:	f7ff ff40 	bl	8010fdc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801115c:	bf00      	nop
 801115e:	3710      	adds	r7, #16
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b08e      	sub	sp, #56	; 0x38
 8011168:	af00      	add	r7, sp, #0
 801116a:	60f8      	str	r0, [r7, #12]
 801116c:	60b9      	str	r1, [r7, #8]
 801116e:	607a      	str	r2, [r7, #4]
 8011170:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011172:	2300      	movs	r3, #0
 8011174:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801117c:	2b00      	cmp	r3, #0
 801117e:	d109      	bne.n	8011194 <xQueueGenericSend+0x30>
 8011180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011184:	f383 8811 	msr	BASEPRI, r3
 8011188:	f3bf 8f6f 	isb	sy
 801118c:	f3bf 8f4f 	dsb	sy
 8011190:	62bb      	str	r3, [r7, #40]	; 0x28
 8011192:	e7fe      	b.n	8011192 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d103      	bne.n	80111a2 <xQueueGenericSend+0x3e>
 801119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d101      	bne.n	80111a6 <xQueueGenericSend+0x42>
 80111a2:	2301      	movs	r3, #1
 80111a4:	e000      	b.n	80111a8 <xQueueGenericSend+0x44>
 80111a6:	2300      	movs	r3, #0
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d109      	bne.n	80111c0 <xQueueGenericSend+0x5c>
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	f383 8811 	msr	BASEPRI, r3
 80111b4:	f3bf 8f6f 	isb	sy
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	627b      	str	r3, [r7, #36]	; 0x24
 80111be:	e7fe      	b.n	80111be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	2b02      	cmp	r3, #2
 80111c4:	d103      	bne.n	80111ce <xQueueGenericSend+0x6a>
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d101      	bne.n	80111d2 <xQueueGenericSend+0x6e>
 80111ce:	2301      	movs	r3, #1
 80111d0:	e000      	b.n	80111d4 <xQueueGenericSend+0x70>
 80111d2:	2300      	movs	r3, #0
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d109      	bne.n	80111ec <xQueueGenericSend+0x88>
 80111d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111dc:	f383 8811 	msr	BASEPRI, r3
 80111e0:	f3bf 8f6f 	isb	sy
 80111e4:	f3bf 8f4f 	dsb	sy
 80111e8:	623b      	str	r3, [r7, #32]
 80111ea:	e7fe      	b.n	80111ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80111ec:	f001 fb14 	bl	8012818 <xTaskGetSchedulerState>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d102      	bne.n	80111fc <xQueueGenericSend+0x98>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d101      	bne.n	8011200 <xQueueGenericSend+0x9c>
 80111fc:	2301      	movs	r3, #1
 80111fe:	e000      	b.n	8011202 <xQueueGenericSend+0x9e>
 8011200:	2300      	movs	r3, #0
 8011202:	2b00      	cmp	r3, #0
 8011204:	d109      	bne.n	801121a <xQueueGenericSend+0xb6>
 8011206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120a:	f383 8811 	msr	BASEPRI, r3
 801120e:	f3bf 8f6f 	isb	sy
 8011212:	f3bf 8f4f 	dsb	sy
 8011216:	61fb      	str	r3, [r7, #28]
 8011218:	e7fe      	b.n	8011218 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801121a:	f001 fe67 	bl	8012eec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011226:	429a      	cmp	r2, r3
 8011228:	d302      	bcc.n	8011230 <xQueueGenericSend+0xcc>
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	2b02      	cmp	r3, #2
 801122e:	d129      	bne.n	8011284 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011230:	683a      	ldr	r2, [r7, #0]
 8011232:	68b9      	ldr	r1, [r7, #8]
 8011234:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011236:	f000 fba9 	bl	801198c <prvCopyDataToQueue>
 801123a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011240:	2b00      	cmp	r3, #0
 8011242:	d010      	beq.n	8011266 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011246:	3324      	adds	r3, #36	; 0x24
 8011248:	4618      	mov	r0, r3
 801124a:	f001 f927 	bl	801249c <xTaskRemoveFromEventList>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d013      	beq.n	801127c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011254:	4b3f      	ldr	r3, [pc, #252]	; (8011354 <xQueueGenericSend+0x1f0>)
 8011256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801125a:	601a      	str	r2, [r3, #0]
 801125c:	f3bf 8f4f 	dsb	sy
 8011260:	f3bf 8f6f 	isb	sy
 8011264:	e00a      	b.n	801127c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	2b00      	cmp	r3, #0
 801126a:	d007      	beq.n	801127c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801126c:	4b39      	ldr	r3, [pc, #228]	; (8011354 <xQueueGenericSend+0x1f0>)
 801126e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011272:	601a      	str	r2, [r3, #0]
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801127c:	f001 fe64 	bl	8012f48 <vPortExitCritical>
				return pdPASS;
 8011280:	2301      	movs	r3, #1
 8011282:	e063      	b.n	801134c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d103      	bne.n	8011292 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801128a:	f001 fe5d 	bl	8012f48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801128e:	2300      	movs	r3, #0
 8011290:	e05c      	b.n	801134c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011294:	2b00      	cmp	r3, #0
 8011296:	d106      	bne.n	80112a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011298:	f107 0314 	add.w	r3, r7, #20
 801129c:	4618      	mov	r0, r3
 801129e:	f001 f95f 	bl	8012560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80112a2:	2301      	movs	r3, #1
 80112a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80112a6:	f001 fe4f 	bl	8012f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80112aa:	f000 fea3 	bl	8011ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80112ae:	f001 fe1d 	bl	8012eec <vPortEnterCritical>
 80112b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112b8:	b25b      	sxtb	r3, r3
 80112ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112be:	d103      	bne.n	80112c8 <xQueueGenericSend+0x164>
 80112c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c2:	2200      	movs	r2, #0
 80112c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112ce:	b25b      	sxtb	r3, r3
 80112d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112d4:	d103      	bne.n	80112de <xQueueGenericSend+0x17a>
 80112d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d8:	2200      	movs	r2, #0
 80112da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112de:	f001 fe33 	bl	8012f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80112e2:	1d3a      	adds	r2, r7, #4
 80112e4:	f107 0314 	add.w	r3, r7, #20
 80112e8:	4611      	mov	r1, r2
 80112ea:	4618      	mov	r0, r3
 80112ec:	f001 f94e 	bl	801258c <xTaskCheckForTimeOut>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d124      	bne.n	8011340 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80112f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f8:	f000 fc40 	bl	8011b7c <prvIsQueueFull>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d018      	beq.n	8011334 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011304:	3310      	adds	r3, #16
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	4611      	mov	r1, r2
 801130a:	4618      	mov	r0, r3
 801130c:	f001 f8a2 	bl	8012454 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011312:	f000 fbcb 	bl	8011aac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011316:	f000 fe7b 	bl	8012010 <xTaskResumeAll>
 801131a:	4603      	mov	r3, r0
 801131c:	2b00      	cmp	r3, #0
 801131e:	f47f af7c 	bne.w	801121a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011322:	4b0c      	ldr	r3, [pc, #48]	; (8011354 <xQueueGenericSend+0x1f0>)
 8011324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011328:	601a      	str	r2, [r3, #0]
 801132a:	f3bf 8f4f 	dsb	sy
 801132e:	f3bf 8f6f 	isb	sy
 8011332:	e772      	b.n	801121a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011336:	f000 fbb9 	bl	8011aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801133a:	f000 fe69 	bl	8012010 <xTaskResumeAll>
 801133e:	e76c      	b.n	801121a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011342:	f000 fbb3 	bl	8011aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011346:	f000 fe63 	bl	8012010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801134a:	2300      	movs	r3, #0
		}
	}
}
 801134c:	4618      	mov	r0, r3
 801134e:	3738      	adds	r7, #56	; 0x38
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	e000ed04 	.word	0xe000ed04

08011358 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b08e      	sub	sp, #56	; 0x38
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
 8011364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801136a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801136c:	2b00      	cmp	r3, #0
 801136e:	d109      	bne.n	8011384 <xQueueGenericSendFromISR+0x2c>
 8011370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011374:	f383 8811 	msr	BASEPRI, r3
 8011378:	f3bf 8f6f 	isb	sy
 801137c:	f3bf 8f4f 	dsb	sy
 8011380:	627b      	str	r3, [r7, #36]	; 0x24
 8011382:	e7fe      	b.n	8011382 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d103      	bne.n	8011392 <xQueueGenericSendFromISR+0x3a>
 801138a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801138e:	2b00      	cmp	r3, #0
 8011390:	d101      	bne.n	8011396 <xQueueGenericSendFromISR+0x3e>
 8011392:	2301      	movs	r3, #1
 8011394:	e000      	b.n	8011398 <xQueueGenericSendFromISR+0x40>
 8011396:	2300      	movs	r3, #0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d109      	bne.n	80113b0 <xQueueGenericSendFromISR+0x58>
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	f383 8811 	msr	BASEPRI, r3
 80113a4:	f3bf 8f6f 	isb	sy
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	623b      	str	r3, [r7, #32]
 80113ae:	e7fe      	b.n	80113ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	d103      	bne.n	80113be <xQueueGenericSendFromISR+0x66>
 80113b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d101      	bne.n	80113c2 <xQueueGenericSendFromISR+0x6a>
 80113be:	2301      	movs	r3, #1
 80113c0:	e000      	b.n	80113c4 <xQueueGenericSendFromISR+0x6c>
 80113c2:	2300      	movs	r3, #0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d109      	bne.n	80113dc <xQueueGenericSendFromISR+0x84>
 80113c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113cc:	f383 8811 	msr	BASEPRI, r3
 80113d0:	f3bf 8f6f 	isb	sy
 80113d4:	f3bf 8f4f 	dsb	sy
 80113d8:	61fb      	str	r3, [r7, #28]
 80113da:	e7fe      	b.n	80113da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113dc:	f001 fe62 	bl	80130a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80113e0:	f3ef 8211 	mrs	r2, BASEPRI
 80113e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	61ba      	str	r2, [r7, #24]
 80113f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80113f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80113fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011404:	429a      	cmp	r2, r3
 8011406:	d302      	bcc.n	801140e <xQueueGenericSendFromISR+0xb6>
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	2b02      	cmp	r3, #2
 801140c:	d12c      	bne.n	8011468 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801140e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	68b9      	ldr	r1, [r7, #8]
 801141c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801141e:	f000 fab5 	bl	801198c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011422:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801142a:	d112      	bne.n	8011452 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011430:	2b00      	cmp	r3, #0
 8011432:	d016      	beq.n	8011462 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011436:	3324      	adds	r3, #36	; 0x24
 8011438:	4618      	mov	r0, r3
 801143a:	f001 f82f 	bl	801249c <xTaskRemoveFromEventList>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00e      	beq.n	8011462 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00b      	beq.n	8011462 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	2201      	movs	r2, #1
 801144e:	601a      	str	r2, [r3, #0]
 8011450:	e007      	b.n	8011462 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011452:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011456:	3301      	adds	r3, #1
 8011458:	b2db      	uxtb	r3, r3
 801145a:	b25a      	sxtb	r2, r3
 801145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011462:	2301      	movs	r3, #1
 8011464:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011466:	e001      	b.n	801146c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011468:	2300      	movs	r3, #0
 801146a:	637b      	str	r3, [r7, #52]	; 0x34
 801146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801146e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011478:	4618      	mov	r0, r3
 801147a:	3738      	adds	r7, #56	; 0x38
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}

08011480 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b08e      	sub	sp, #56	; 0x38
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801148e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011490:	2b00      	cmp	r3, #0
 8011492:	d109      	bne.n	80114a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8011494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011498:	f383 8811 	msr	BASEPRI, r3
 801149c:	f3bf 8f6f 	isb	sy
 80114a0:	f3bf 8f4f 	dsb	sy
 80114a4:	623b      	str	r3, [r7, #32]
 80114a6:	e7fe      	b.n	80114a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80114a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d009      	beq.n	80114c4 <xQueueGiveFromISR+0x44>
 80114b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b4:	f383 8811 	msr	BASEPRI, r3
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	f3bf 8f4f 	dsb	sy
 80114c0:	61fb      	str	r3, [r7, #28]
 80114c2:	e7fe      	b.n	80114c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80114c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d103      	bne.n	80114d4 <xQueueGiveFromISR+0x54>
 80114cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ce:	685b      	ldr	r3, [r3, #4]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d101      	bne.n	80114d8 <xQueueGiveFromISR+0x58>
 80114d4:	2301      	movs	r3, #1
 80114d6:	e000      	b.n	80114da <xQueueGiveFromISR+0x5a>
 80114d8:	2300      	movs	r3, #0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d109      	bne.n	80114f2 <xQueueGiveFromISR+0x72>
 80114de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e2:	f383 8811 	msr	BASEPRI, r3
 80114e6:	f3bf 8f6f 	isb	sy
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	61bb      	str	r3, [r7, #24]
 80114f0:	e7fe      	b.n	80114f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80114f2:	f001 fdd7 	bl	80130a4 <vPortValidateInterruptPriority>
	__asm volatile
 80114f6:	f3ef 8211 	mrs	r2, BASEPRI
 80114fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114fe:	f383 8811 	msr	BASEPRI, r3
 8011502:	f3bf 8f6f 	isb	sy
 8011506:	f3bf 8f4f 	dsb	sy
 801150a:	617a      	str	r2, [r7, #20]
 801150c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801150e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011510:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011516:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801151c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801151e:	429a      	cmp	r2, r3
 8011520:	d22b      	bcs.n	801157a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152e:	1c5a      	adds	r2, r3, #1
 8011530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011532:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801153c:	d112      	bne.n	8011564 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011542:	2b00      	cmp	r3, #0
 8011544:	d016      	beq.n	8011574 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011548:	3324      	adds	r3, #36	; 0x24
 801154a:	4618      	mov	r0, r3
 801154c:	f000 ffa6 	bl	801249c <xTaskRemoveFromEventList>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00e      	beq.n	8011574 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d00b      	beq.n	8011574 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	2201      	movs	r2, #1
 8011560:	601a      	str	r2, [r3, #0]
 8011562:	e007      	b.n	8011574 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011568:	3301      	adds	r3, #1
 801156a:	b2db      	uxtb	r3, r3
 801156c:	b25a      	sxtb	r2, r3
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011574:	2301      	movs	r3, #1
 8011576:	637b      	str	r3, [r7, #52]	; 0x34
 8011578:	e001      	b.n	801157e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801157a:	2300      	movs	r3, #0
 801157c:	637b      	str	r3, [r7, #52]	; 0x34
 801157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011580:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801158a:	4618      	mov	r0, r3
 801158c:	3738      	adds	r7, #56	; 0x38
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
	...

08011594 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b08c      	sub	sp, #48	; 0x30
 8011598:	af00      	add	r7, sp, #0
 801159a:	60f8      	str	r0, [r7, #12]
 801159c:	60b9      	str	r1, [r7, #8]
 801159e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80115a0:	2300      	movs	r3, #0
 80115a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80115a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d109      	bne.n	80115c2 <xQueueReceive+0x2e>
	__asm volatile
 80115ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b2:	f383 8811 	msr	BASEPRI, r3
 80115b6:	f3bf 8f6f 	isb	sy
 80115ba:	f3bf 8f4f 	dsb	sy
 80115be:	623b      	str	r3, [r7, #32]
 80115c0:	e7fe      	b.n	80115c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d103      	bne.n	80115d0 <xQueueReceive+0x3c>
 80115c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d101      	bne.n	80115d4 <xQueueReceive+0x40>
 80115d0:	2301      	movs	r3, #1
 80115d2:	e000      	b.n	80115d6 <xQueueReceive+0x42>
 80115d4:	2300      	movs	r3, #0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d109      	bne.n	80115ee <xQueueReceive+0x5a>
 80115da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	e7fe      	b.n	80115ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80115ee:	f001 f913 	bl	8012818 <xTaskGetSchedulerState>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d102      	bne.n	80115fe <xQueueReceive+0x6a>
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d101      	bne.n	8011602 <xQueueReceive+0x6e>
 80115fe:	2301      	movs	r3, #1
 8011600:	e000      	b.n	8011604 <xQueueReceive+0x70>
 8011602:	2300      	movs	r3, #0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d109      	bne.n	801161c <xQueueReceive+0x88>
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	61bb      	str	r3, [r7, #24]
 801161a:	e7fe      	b.n	801161a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 801161c:	f001 fc66 	bl	8012eec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011624:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011628:	2b00      	cmp	r3, #0
 801162a:	d01f      	beq.n	801166c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801162c:	68b9      	ldr	r1, [r7, #8]
 801162e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011630:	f000 fa16 	bl	8011a60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011636:	1e5a      	subs	r2, r3, #1
 8011638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163e:	691b      	ldr	r3, [r3, #16]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d00f      	beq.n	8011664 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011646:	3310      	adds	r3, #16
 8011648:	4618      	mov	r0, r3
 801164a:	f000 ff27 	bl	801249c <xTaskRemoveFromEventList>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d007      	beq.n	8011664 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011654:	4b3c      	ldr	r3, [pc, #240]	; (8011748 <xQueueReceive+0x1b4>)
 8011656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801165a:	601a      	str	r2, [r3, #0]
 801165c:	f3bf 8f4f 	dsb	sy
 8011660:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011664:	f001 fc70 	bl	8012f48 <vPortExitCritical>
				return pdPASS;
 8011668:	2301      	movs	r3, #1
 801166a:	e069      	b.n	8011740 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d103      	bne.n	801167a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011672:	f001 fc69 	bl	8012f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011676:	2300      	movs	r3, #0
 8011678:	e062      	b.n	8011740 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801167a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167c:	2b00      	cmp	r3, #0
 801167e:	d106      	bne.n	801168e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011680:	f107 0310 	add.w	r3, r7, #16
 8011684:	4618      	mov	r0, r3
 8011686:	f000 ff6b 	bl	8012560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801168a:	2301      	movs	r3, #1
 801168c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801168e:	f001 fc5b 	bl	8012f48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011692:	f000 fcaf 	bl	8011ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011696:	f001 fc29 	bl	8012eec <vPortEnterCritical>
 801169a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80116a0:	b25b      	sxtb	r3, r3
 80116a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116a6:	d103      	bne.n	80116b0 <xQueueReceive+0x11c>
 80116a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116aa:	2200      	movs	r2, #0
 80116ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80116b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116b6:	b25b      	sxtb	r3, r3
 80116b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116bc:	d103      	bne.n	80116c6 <xQueueReceive+0x132>
 80116be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c0:	2200      	movs	r2, #0
 80116c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116c6:	f001 fc3f 	bl	8012f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80116ca:	1d3a      	adds	r2, r7, #4
 80116cc:	f107 0310 	add.w	r3, r7, #16
 80116d0:	4611      	mov	r1, r2
 80116d2:	4618      	mov	r0, r3
 80116d4:	f000 ff5a 	bl	801258c <xTaskCheckForTimeOut>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d123      	bne.n	8011726 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116e0:	f000 fa36 	bl	8011b50 <prvIsQueueEmpty>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d017      	beq.n	801171a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80116ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ec:	3324      	adds	r3, #36	; 0x24
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	4611      	mov	r1, r2
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 feae 	bl	8012454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80116f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116fa:	f000 f9d7 	bl	8011aac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80116fe:	f000 fc87 	bl	8012010 <xTaskResumeAll>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	d189      	bne.n	801161c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011708:	4b0f      	ldr	r3, [pc, #60]	; (8011748 <xQueueReceive+0x1b4>)
 801170a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801170e:	601a      	str	r2, [r3, #0]
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	f3bf 8f6f 	isb	sy
 8011718:	e780      	b.n	801161c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801171a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801171c:	f000 f9c6 	bl	8011aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011720:	f000 fc76 	bl	8012010 <xTaskResumeAll>
 8011724:	e77a      	b.n	801161c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011728:	f000 f9c0 	bl	8011aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801172c:	f000 fc70 	bl	8012010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011732:	f000 fa0d 	bl	8011b50 <prvIsQueueEmpty>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	f43f af6f 	beq.w	801161c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801173e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011740:	4618      	mov	r0, r3
 8011742:	3730      	adds	r7, #48	; 0x30
 8011744:	46bd      	mov	sp, r7
 8011746:	bd80      	pop	{r7, pc}
 8011748:	e000ed04 	.word	0xe000ed04

0801174c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b08e      	sub	sp, #56	; 0x38
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011756:	2300      	movs	r3, #0
 8011758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801175e:	2300      	movs	r3, #0
 8011760:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011764:	2b00      	cmp	r3, #0
 8011766:	d109      	bne.n	801177c <xQueueSemaphoreTake+0x30>
 8011768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	623b      	str	r3, [r7, #32]
 801177a:	e7fe      	b.n	801177a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011780:	2b00      	cmp	r3, #0
 8011782:	d009      	beq.n	8011798 <xQueueSemaphoreTake+0x4c>
 8011784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011788:	f383 8811 	msr	BASEPRI, r3
 801178c:	f3bf 8f6f 	isb	sy
 8011790:	f3bf 8f4f 	dsb	sy
 8011794:	61fb      	str	r3, [r7, #28]
 8011796:	e7fe      	b.n	8011796 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011798:	f001 f83e 	bl	8012818 <xTaskGetSchedulerState>
 801179c:	4603      	mov	r3, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d102      	bne.n	80117a8 <xQueueSemaphoreTake+0x5c>
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d101      	bne.n	80117ac <xQueueSemaphoreTake+0x60>
 80117a8:	2301      	movs	r3, #1
 80117aa:	e000      	b.n	80117ae <xQueueSemaphoreTake+0x62>
 80117ac:	2300      	movs	r3, #0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d109      	bne.n	80117c6 <xQueueSemaphoreTake+0x7a>
 80117b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	61bb      	str	r3, [r7, #24]
 80117c4:	e7fe      	b.n	80117c4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80117c6:	f001 fb91 	bl	8012eec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80117ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80117d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d024      	beq.n	8011820 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80117d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d8:	1e5a      	subs	r2, r3, #1
 80117da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80117de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d104      	bne.n	80117f0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80117e6:	f001 f9dd 	bl	8012ba4 <pvTaskIncrementMutexHeldCount>
 80117ea:	4602      	mov	r2, r0
 80117ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f2:	691b      	ldr	r3, [r3, #16]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d00f      	beq.n	8011818 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fa:	3310      	adds	r3, #16
 80117fc:	4618      	mov	r0, r3
 80117fe:	f000 fe4d 	bl	801249c <xTaskRemoveFromEventList>
 8011802:	4603      	mov	r3, r0
 8011804:	2b00      	cmp	r3, #0
 8011806:	d007      	beq.n	8011818 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011808:	4b53      	ldr	r3, [pc, #332]	; (8011958 <xQueueSemaphoreTake+0x20c>)
 801180a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801180e:	601a      	str	r2, [r3, #0]
 8011810:	f3bf 8f4f 	dsb	sy
 8011814:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011818:	f001 fb96 	bl	8012f48 <vPortExitCritical>
				return pdPASS;
 801181c:	2301      	movs	r3, #1
 801181e:	e096      	b.n	801194e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d110      	bne.n	8011848 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011828:	2b00      	cmp	r3, #0
 801182a:	d009      	beq.n	8011840 <xQueueSemaphoreTake+0xf4>
 801182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011830:	f383 8811 	msr	BASEPRI, r3
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	f3bf 8f4f 	dsb	sy
 801183c:	617b      	str	r3, [r7, #20]
 801183e:	e7fe      	b.n	801183e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011840:	f001 fb82 	bl	8012f48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011844:	2300      	movs	r3, #0
 8011846:	e082      	b.n	801194e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801184a:	2b00      	cmp	r3, #0
 801184c:	d106      	bne.n	801185c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801184e:	f107 030c 	add.w	r3, r7, #12
 8011852:	4618      	mov	r0, r3
 8011854:	f000 fe84 	bl	8012560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011858:	2301      	movs	r3, #1
 801185a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801185c:	f001 fb74 	bl	8012f48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011860:	f000 fbc8 	bl	8011ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011864:	f001 fb42 	bl	8012eec <vPortEnterCritical>
 8011868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801186e:	b25b      	sxtb	r3, r3
 8011870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011874:	d103      	bne.n	801187e <xQueueSemaphoreTake+0x132>
 8011876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011878:	2200      	movs	r2, #0
 801187a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011884:	b25b      	sxtb	r3, r3
 8011886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801188a:	d103      	bne.n	8011894 <xQueueSemaphoreTake+0x148>
 801188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188e:	2200      	movs	r2, #0
 8011890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011894:	f001 fb58 	bl	8012f48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011898:	463a      	mov	r2, r7
 801189a:	f107 030c 	add.w	r3, r7, #12
 801189e:	4611      	mov	r1, r2
 80118a0:	4618      	mov	r0, r3
 80118a2:	f000 fe73 	bl	801258c <xTaskCheckForTimeOut>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d132      	bne.n	8011912 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80118ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118ae:	f000 f94f 	bl	8011b50 <prvIsQueueEmpty>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d026      	beq.n	8011906 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80118b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d109      	bne.n	80118d4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80118c0:	f001 fb14 	bl	8012eec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80118c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	4618      	mov	r0, r3
 80118ca:	f000 ffc3 	bl	8012854 <xTaskPriorityInherit>
 80118ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80118d0:	f001 fb3a 	bl	8012f48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80118d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d6:	3324      	adds	r3, #36	; 0x24
 80118d8:	683a      	ldr	r2, [r7, #0]
 80118da:	4611      	mov	r1, r2
 80118dc:	4618      	mov	r0, r3
 80118de:	f000 fdb9 	bl	8012454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80118e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118e4:	f000 f8e2 	bl	8011aac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80118e8:	f000 fb92 	bl	8012010 <xTaskResumeAll>
 80118ec:	4603      	mov	r3, r0
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	f47f af69 	bne.w	80117c6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80118f4:	4b18      	ldr	r3, [pc, #96]	; (8011958 <xQueueSemaphoreTake+0x20c>)
 80118f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118fa:	601a      	str	r2, [r3, #0]
 80118fc:	f3bf 8f4f 	dsb	sy
 8011900:	f3bf 8f6f 	isb	sy
 8011904:	e75f      	b.n	80117c6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011908:	f000 f8d0 	bl	8011aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801190c:	f000 fb80 	bl	8012010 <xTaskResumeAll>
 8011910:	e759      	b.n	80117c6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011914:	f000 f8ca 	bl	8011aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011918:	f000 fb7a 	bl	8012010 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801191c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801191e:	f000 f917 	bl	8011b50 <prvIsQueueEmpty>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	f43f af4e 	beq.w	80117c6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801192a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00d      	beq.n	801194c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011930:	f001 fadc 	bl	8012eec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011936:	f000 f811 	bl	801195c <prvGetDisinheritPriorityAfterTimeout>
 801193a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801193c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193e:	685b      	ldr	r3, [r3, #4]
 8011940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011942:	4618      	mov	r0, r3
 8011944:	f001 f890 	bl	8012a68 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011948:	f001 fafe 	bl	8012f48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801194c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801194e:	4618      	mov	r0, r3
 8011950:	3738      	adds	r7, #56	; 0x38
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	e000ed04 	.word	0xe000ed04

0801195c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801195c:	b480      	push	{r7}
 801195e:	b085      	sub	sp, #20
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011968:	2b00      	cmp	r3, #0
 801196a:	d006      	beq.n	801197a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	f1c3 0307 	rsb	r3, r3, #7
 8011976:	60fb      	str	r3, [r7, #12]
 8011978:	e001      	b.n	801197e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801197a:	2300      	movs	r3, #0
 801197c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801197e:	68fb      	ldr	r3, [r7, #12]
	}
 8011980:	4618      	mov	r0, r3
 8011982:	3714      	adds	r7, #20
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b086      	sub	sp, #24
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	60b9      	str	r1, [r7, #8]
 8011996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011998:	2300      	movs	r3, #0
 801199a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d10d      	bne.n	80119c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d14d      	bne.n	8011a4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	4618      	mov	r0, r3
 80119b8:	f000 ffd2 	bl	8012960 <xTaskPriorityDisinherit>
 80119bc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2200      	movs	r2, #0
 80119c2:	605a      	str	r2, [r3, #4]
 80119c4:	e043      	b.n	8011a4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d119      	bne.n	8011a00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	6898      	ldr	r0, [r3, #8]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119d4:	461a      	mov	r2, r3
 80119d6:	68b9      	ldr	r1, [r7, #8]
 80119d8:	f00f f880 	bl	8020adc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	689a      	ldr	r2, [r3, #8]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119e4:	441a      	add	r2, r3
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	689a      	ldr	r2, [r3, #8]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d32b      	bcc.n	8011a4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	609a      	str	r2, [r3, #8]
 80119fe:	e026      	b.n	8011a4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	68d8      	ldr	r0, [r3, #12]
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a08:	461a      	mov	r2, r3
 8011a0a:	68b9      	ldr	r1, [r7, #8]
 8011a0c:	f00f f866 	bl	8020adc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	68da      	ldr	r2, [r3, #12]
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a18:	425b      	negs	r3, r3
 8011a1a:	441a      	add	r2, r3
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	68da      	ldr	r2, [r3, #12]
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d207      	bcs.n	8011a3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	685a      	ldr	r2, [r3, #4]
 8011a30:	68fb      	ldr	r3, [r7, #12]
 8011a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a34:	425b      	negs	r3, r3
 8011a36:	441a      	add	r2, r3
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b02      	cmp	r3, #2
 8011a40:	d105      	bne.n	8011a4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d002      	beq.n	8011a4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	3b01      	subs	r3, #1
 8011a4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011a4e:	693b      	ldr	r3, [r7, #16]
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011a56:	697b      	ldr	r3, [r7, #20]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3718      	adds	r7, #24
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d018      	beq.n	8011aa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	68da      	ldr	r2, [r3, #12]
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a7a:	441a      	add	r2, r3
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	68da      	ldr	r2, [r3, #12]
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	685b      	ldr	r3, [r3, #4]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d303      	bcc.n	8011a94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	68d9      	ldr	r1, [r3, #12]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	6838      	ldr	r0, [r7, #0]
 8011aa0:	f00f f81c 	bl	8020adc <memcpy>
	}
}
 8011aa4:	bf00      	nop
 8011aa6:	3708      	adds	r7, #8
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b084      	sub	sp, #16
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011ab4:	f001 fa1a 	bl	8012eec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011abe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ac0:	e011      	b.n	8011ae6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d012      	beq.n	8011af0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	3324      	adds	r3, #36	; 0x24
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f000 fce4 	bl	801249c <xTaskRemoveFromEventList>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d001      	beq.n	8011ade <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011ada:	f000 fdb7 	bl	801264c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011ade:	7bfb      	ldrb	r3, [r7, #15]
 8011ae0:	3b01      	subs	r3, #1
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	dce9      	bgt.n	8011ac2 <prvUnlockQueue+0x16>
 8011aee:	e000      	b.n	8011af2 <prvUnlockQueue+0x46>
					break;
 8011af0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	22ff      	movs	r2, #255	; 0xff
 8011af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011afa:	f001 fa25 	bl	8012f48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011afe:	f001 f9f5 	bl	8012eec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b0a:	e011      	b.n	8011b30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	691b      	ldr	r3, [r3, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d012      	beq.n	8011b3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	3310      	adds	r3, #16
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f000 fcbf 	bl	801249c <xTaskRemoveFromEventList>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d001      	beq.n	8011b28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011b24:	f000 fd92 	bl	801264c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011b28:	7bbb      	ldrb	r3, [r7, #14]
 8011b2a:	3b01      	subs	r3, #1
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	dce9      	bgt.n	8011b0c <prvUnlockQueue+0x60>
 8011b38:	e000      	b.n	8011b3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011b3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	22ff      	movs	r2, #255	; 0xff
 8011b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011b44:	f001 fa00 	bl	8012f48 <vPortExitCritical>
}
 8011b48:	bf00      	nop
 8011b4a:	3710      	adds	r7, #16
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b58:	f001 f9c8 	bl	8012eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d102      	bne.n	8011b6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011b64:	2301      	movs	r3, #1
 8011b66:	60fb      	str	r3, [r7, #12]
 8011b68:	e001      	b.n	8011b6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b6e:	f001 f9eb 	bl	8012f48 <vPortExitCritical>

	return xReturn;
 8011b72:	68fb      	ldr	r3, [r7, #12]
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3710      	adds	r7, #16
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011b84:	f001 f9b2 	bl	8012eec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b90:	429a      	cmp	r2, r3
 8011b92:	d102      	bne.n	8011b9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011b94:	2301      	movs	r3, #1
 8011b96:	60fb      	str	r3, [r7, #12]
 8011b98:	e001      	b.n	8011b9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011b9e:	f001 f9d3 	bl	8012f48 <vPortExitCritical>

	return xReturn;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}

08011bac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b08e      	sub	sp, #56	; 0x38
 8011bb0:	af04      	add	r7, sp, #16
 8011bb2:	60f8      	str	r0, [r7, #12]
 8011bb4:	60b9      	str	r1, [r7, #8]
 8011bb6:	607a      	str	r2, [r7, #4]
 8011bb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d109      	bne.n	8011bd4 <xTaskCreateStatic+0x28>
 8011bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc4:	f383 8811 	msr	BASEPRI, r3
 8011bc8:	f3bf 8f6f 	isb	sy
 8011bcc:	f3bf 8f4f 	dsb	sy
 8011bd0:	623b      	str	r3, [r7, #32]
 8011bd2:	e7fe      	b.n	8011bd2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d109      	bne.n	8011bee <xTaskCreateStatic+0x42>
 8011bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bde:	f383 8811 	msr	BASEPRI, r3
 8011be2:	f3bf 8f6f 	isb	sy
 8011be6:	f3bf 8f4f 	dsb	sy
 8011bea:	61fb      	str	r3, [r7, #28]
 8011bec:	e7fe      	b.n	8011bec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011bee:	2358      	movs	r3, #88	; 0x58
 8011bf0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	2b58      	cmp	r3, #88	; 0x58
 8011bf6:	d009      	beq.n	8011c0c <xTaskCreateStatic+0x60>
 8011bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bfc:	f383 8811 	msr	BASEPRI, r3
 8011c00:	f3bf 8f6f 	isb	sy
 8011c04:	f3bf 8f4f 	dsb	sy
 8011c08:	61bb      	str	r3, [r7, #24]
 8011c0a:	e7fe      	b.n	8011c0a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d01e      	beq.n	8011c50 <xTaskCreateStatic+0xa4>
 8011c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d01b      	beq.n	8011c50 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c24:	2202      	movs	r2, #2
 8011c26:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	9303      	str	r3, [sp, #12]
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c30:	9302      	str	r3, [sp, #8]
 8011c32:	f107 0314 	add.w	r3, r7, #20
 8011c36:	9301      	str	r3, [sp, #4]
 8011c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	68b9      	ldr	r1, [r7, #8]
 8011c42:	68f8      	ldr	r0, [r7, #12]
 8011c44:	f000 f850 	bl	8011ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c4a:	f000 f8d7 	bl	8011dfc <prvAddNewTaskToReadyList>
 8011c4e:	e001      	b.n	8011c54 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8011c50:	2300      	movs	r3, #0
 8011c52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011c54:	697b      	ldr	r3, [r7, #20]
	}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3728      	adds	r7, #40	; 0x28
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}

08011c5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011c5e:	b580      	push	{r7, lr}
 8011c60:	b08c      	sub	sp, #48	; 0x30
 8011c62:	af04      	add	r7, sp, #16
 8011c64:	60f8      	str	r0, [r7, #12]
 8011c66:	60b9      	str	r1, [r7, #8]
 8011c68:	603b      	str	r3, [r7, #0]
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c6e:	88fb      	ldrh	r3, [r7, #6]
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	4618      	mov	r0, r3
 8011c74:	f001 fa54 	bl	8013120 <pvPortMalloc>
 8011c78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d00e      	beq.n	8011c9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011c80:	2058      	movs	r0, #88	; 0x58
 8011c82:	f001 fa4d 	bl	8013120 <pvPortMalloc>
 8011c86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d003      	beq.n	8011c96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	697a      	ldr	r2, [r7, #20]
 8011c92:	631a      	str	r2, [r3, #48]	; 0x30
 8011c94:	e005      	b.n	8011ca2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011c96:	6978      	ldr	r0, [r7, #20]
 8011c98:	f001 fb08 	bl	80132ac <vPortFree>
 8011c9c:	e001      	b.n	8011ca2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d017      	beq.n	8011cd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	2200      	movs	r2, #0
 8011cac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011cb0:	88fa      	ldrh	r2, [r7, #6]
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	9303      	str	r3, [sp, #12]
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	9302      	str	r3, [sp, #8]
 8011cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cbc:	9301      	str	r3, [sp, #4]
 8011cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc0:	9300      	str	r3, [sp, #0]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	68b9      	ldr	r1, [r7, #8]
 8011cc6:	68f8      	ldr	r0, [r7, #12]
 8011cc8:	f000 f80e 	bl	8011ce8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011ccc:	69f8      	ldr	r0, [r7, #28]
 8011cce:	f000 f895 	bl	8011dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	61bb      	str	r3, [r7, #24]
 8011cd6:	e002      	b.n	8011cde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cdc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011cde:	69bb      	ldr	r3, [r7, #24]
	}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3720      	adds	r7, #32
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b088      	sub	sp, #32
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	60b9      	str	r1, [r7, #8]
 8011cf2:	607a      	str	r2, [r7, #4]
 8011cf4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	461a      	mov	r2, r3
 8011d00:	21a5      	movs	r1, #165	; 0xa5
 8011d02:	f00e fef6 	bl	8020af2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8011d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011d10:	3b01      	subs	r3, #1
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4413      	add	r3, r2
 8011d16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	f023 0307 	bic.w	r3, r3, #7
 8011d1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	f003 0307 	and.w	r3, r3, #7
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d009      	beq.n	8011d3e <prvInitialiseNewTask+0x56>
 8011d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2e:	f383 8811 	msr	BASEPRI, r3
 8011d32:	f3bf 8f6f 	isb	sy
 8011d36:	f3bf 8f4f 	dsb	sy
 8011d3a:	617b      	str	r3, [r7, #20]
 8011d3c:	e7fe      	b.n	8011d3c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d3e:	2300      	movs	r3, #0
 8011d40:	61fb      	str	r3, [r7, #28]
 8011d42:	e012      	b.n	8011d6a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011d44:	68ba      	ldr	r2, [r7, #8]
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	4413      	add	r3, r2
 8011d4a:	7819      	ldrb	r1, [r3, #0]
 8011d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d4e:	69fb      	ldr	r3, [r7, #28]
 8011d50:	4413      	add	r3, r2
 8011d52:	3334      	adds	r3, #52	; 0x34
 8011d54:	460a      	mov	r2, r1
 8011d56:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011d58:	68ba      	ldr	r2, [r7, #8]
 8011d5a:	69fb      	ldr	r3, [r7, #28]
 8011d5c:	4413      	add	r3, r2
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d006      	beq.n	8011d72 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	3301      	adds	r3, #1
 8011d68:	61fb      	str	r3, [r7, #28]
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	2b0f      	cmp	r3, #15
 8011d6e:	d9e9      	bls.n	8011d44 <prvInitialiseNewTask+0x5c>
 8011d70:	e000      	b.n	8011d74 <prvInitialiseNewTask+0x8c>
		{
			break;
 8011d72:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d76:	2200      	movs	r2, #0
 8011d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7e:	2b06      	cmp	r3, #6
 8011d80:	d901      	bls.n	8011d86 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011d82:	2306      	movs	r3, #6
 8011d84:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d8a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d90:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d94:	2200      	movs	r2, #0
 8011d96:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9a:	3304      	adds	r3, #4
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7ff f888 	bl	8010eb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da4:	3318      	adds	r3, #24
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7ff f883 	bl	8010eb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011db0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db4:	f1c3 0207 	rsb	r2, r3, #7
 8011db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dc0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc4:	2200      	movs	r2, #0
 8011dc6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dca:	2200      	movs	r2, #0
 8011dcc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011dd6:	683a      	ldr	r2, [r7, #0]
 8011dd8:	68f9      	ldr	r1, [r7, #12]
 8011dda:	69b8      	ldr	r0, [r7, #24]
 8011ddc:	f000 ff5c 	bl	8012c98 <pxPortInitialiseStack>
 8011de0:	4602      	mov	r2, r0
 8011de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d002      	beq.n	8011df2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011df2:	bf00      	nop
 8011df4:	3720      	adds	r7, #32
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
	...

08011dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011e04:	f001 f872 	bl	8012eec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011e08:	4b2a      	ldr	r3, [pc, #168]	; (8011eb4 <prvAddNewTaskToReadyList+0xb8>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	4a29      	ldr	r2, [pc, #164]	; (8011eb4 <prvAddNewTaskToReadyList+0xb8>)
 8011e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011e12:	4b29      	ldr	r3, [pc, #164]	; (8011eb8 <prvAddNewTaskToReadyList+0xbc>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d109      	bne.n	8011e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011e1a:	4a27      	ldr	r2, [pc, #156]	; (8011eb8 <prvAddNewTaskToReadyList+0xbc>)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011e20:	4b24      	ldr	r3, [pc, #144]	; (8011eb4 <prvAddNewTaskToReadyList+0xb8>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d110      	bne.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011e28:	f000 fc36 	bl	8012698 <prvInitialiseTaskLists>
 8011e2c:	e00d      	b.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011e2e:	4b23      	ldr	r3, [pc, #140]	; (8011ebc <prvAddNewTaskToReadyList+0xc0>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d109      	bne.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011e36:	4b20      	ldr	r3, [pc, #128]	; (8011eb8 <prvAddNewTaskToReadyList+0xbc>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d802      	bhi.n	8011e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011e44:	4a1c      	ldr	r2, [pc, #112]	; (8011eb8 <prvAddNewTaskToReadyList+0xbc>)
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011e4a:	4b1d      	ldr	r3, [pc, #116]	; (8011ec0 <prvAddNewTaskToReadyList+0xc4>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	3301      	adds	r3, #1
 8011e50:	4a1b      	ldr	r2, [pc, #108]	; (8011ec0 <prvAddNewTaskToReadyList+0xc4>)
 8011e52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e58:	2201      	movs	r2, #1
 8011e5a:	409a      	lsls	r2, r3
 8011e5c:	4b19      	ldr	r3, [pc, #100]	; (8011ec4 <prvAddNewTaskToReadyList+0xc8>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4313      	orrs	r3, r2
 8011e62:	4a18      	ldr	r2, [pc, #96]	; (8011ec4 <prvAddNewTaskToReadyList+0xc8>)
 8011e64:	6013      	str	r3, [r2, #0]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e6a:	4613      	mov	r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4413      	add	r3, r2
 8011e70:	009b      	lsls	r3, r3, #2
 8011e72:	4a15      	ldr	r2, [pc, #84]	; (8011ec8 <prvAddNewTaskToReadyList+0xcc>)
 8011e74:	441a      	add	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	3304      	adds	r3, #4
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	f7ff f825 	bl	8010ecc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011e82:	f001 f861 	bl	8012f48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011e86:	4b0d      	ldr	r3, [pc, #52]	; (8011ebc <prvAddNewTaskToReadyList+0xc0>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d00e      	beq.n	8011eac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011e8e:	4b0a      	ldr	r3, [pc, #40]	; (8011eb8 <prvAddNewTaskToReadyList+0xbc>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d207      	bcs.n	8011eac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011e9c:	4b0b      	ldr	r3, [pc, #44]	; (8011ecc <prvAddNewTaskToReadyList+0xd0>)
 8011e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ea2:	601a      	str	r2, [r3, #0]
 8011ea4:	f3bf 8f4f 	dsb	sy
 8011ea8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011eac:	bf00      	nop
 8011eae:	3708      	adds	r7, #8
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	20000adc 	.word	0x20000adc
 8011eb8:	200009dc 	.word	0x200009dc
 8011ebc:	20000ae8 	.word	0x20000ae8
 8011ec0:	20000af8 	.word	0x20000af8
 8011ec4:	20000ae4 	.word	0x20000ae4
 8011ec8:	200009e0 	.word	0x200009e0
 8011ecc:	e000ed04 	.word	0xe000ed04

08011ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d016      	beq.n	8011f10 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011ee2:	4b13      	ldr	r3, [pc, #76]	; (8011f30 <vTaskDelay+0x60>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d009      	beq.n	8011efe <vTaskDelay+0x2e>
 8011eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eee:	f383 8811 	msr	BASEPRI, r3
 8011ef2:	f3bf 8f6f 	isb	sy
 8011ef6:	f3bf 8f4f 	dsb	sy
 8011efa:	60bb      	str	r3, [r7, #8]
 8011efc:	e7fe      	b.n	8011efc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011efe:	f000 f879 	bl	8011ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011f02:	2100      	movs	r1, #0
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 fe61 	bl	8012bcc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011f0a:	f000 f881 	bl	8012010 <xTaskResumeAll>
 8011f0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d107      	bne.n	8011f26 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8011f16:	4b07      	ldr	r3, [pc, #28]	; (8011f34 <vTaskDelay+0x64>)
 8011f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f1c:	601a      	str	r2, [r3, #0]
 8011f1e:	f3bf 8f4f 	dsb	sy
 8011f22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011f26:	bf00      	nop
 8011f28:	3710      	adds	r7, #16
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	20000b04 	.word	0x20000b04
 8011f34:	e000ed04 	.word	0xe000ed04

08011f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b08a      	sub	sp, #40	; 0x28
 8011f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011f42:	2300      	movs	r3, #0
 8011f44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011f46:	463a      	mov	r2, r7
 8011f48:	1d39      	adds	r1, r7, #4
 8011f4a:	f107 0308 	add.w	r3, r7, #8
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f7ef f940 	bl	80011d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011f54:	6839      	ldr	r1, [r7, #0]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	9202      	str	r2, [sp, #8]
 8011f5c:	9301      	str	r3, [sp, #4]
 8011f5e:	2300      	movs	r3, #0
 8011f60:	9300      	str	r3, [sp, #0]
 8011f62:	2300      	movs	r3, #0
 8011f64:	460a      	mov	r2, r1
 8011f66:	491d      	ldr	r1, [pc, #116]	; (8011fdc <vTaskStartScheduler+0xa4>)
 8011f68:	481d      	ldr	r0, [pc, #116]	; (8011fe0 <vTaskStartScheduler+0xa8>)
 8011f6a:	f7ff fe1f 	bl	8011bac <xTaskCreateStatic>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	4b1c      	ldr	r3, [pc, #112]	; (8011fe4 <vTaskStartScheduler+0xac>)
 8011f72:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011f74:	4b1b      	ldr	r3, [pc, #108]	; (8011fe4 <vTaskStartScheduler+0xac>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d002      	beq.n	8011f82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	617b      	str	r3, [r7, #20]
 8011f80:	e001      	b.n	8011f86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011f82:	2300      	movs	r3, #0
 8011f84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d115      	bne.n	8011fb8 <vTaskStartScheduler+0x80>
 8011f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f90:	f383 8811 	msr	BASEPRI, r3
 8011f94:	f3bf 8f6f 	isb	sy
 8011f98:	f3bf 8f4f 	dsb	sy
 8011f9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011f9e:	4b12      	ldr	r3, [pc, #72]	; (8011fe8 <vTaskStartScheduler+0xb0>)
 8011fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8011fa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011fa6:	4b11      	ldr	r3, [pc, #68]	; (8011fec <vTaskStartScheduler+0xb4>)
 8011fa8:	2201      	movs	r2, #1
 8011faa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011fac:	4b10      	ldr	r3, [pc, #64]	; (8011ff0 <vTaskStartScheduler+0xb8>)
 8011fae:	2200      	movs	r2, #0
 8011fb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011fb2:	f000 fefd 	bl	8012db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011fb6:	e00d      	b.n	8011fd4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fbe:	d109      	bne.n	8011fd4 <vTaskStartScheduler+0x9c>
 8011fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc4:	f383 8811 	msr	BASEPRI, r3
 8011fc8:	f3bf 8f6f 	isb	sy
 8011fcc:	f3bf 8f4f 	dsb	sy
 8011fd0:	60fb      	str	r3, [r7, #12]
 8011fd2:	e7fe      	b.n	8011fd2 <vTaskStartScheduler+0x9a>
}
 8011fd4:	bf00      	nop
 8011fd6:	3718      	adds	r7, #24
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	08022748 	.word	0x08022748
 8011fe0:	08012665 	.word	0x08012665
 8011fe4:	20000b00 	.word	0x20000b00
 8011fe8:	20000afc 	.word	0x20000afc
 8011fec:	20000ae8 	.word	0x20000ae8
 8011ff0:	20000ae0 	.word	0x20000ae0

08011ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011ff4:	b480      	push	{r7}
 8011ff6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011ff8:	4b04      	ldr	r3, [pc, #16]	; (801200c <vTaskSuspendAll+0x18>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	4a03      	ldr	r2, [pc, #12]	; (801200c <vTaskSuspendAll+0x18>)
 8012000:	6013      	str	r3, [r2, #0]
}
 8012002:	bf00      	nop
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	20000b04 	.word	0x20000b04

08012010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012016:	2300      	movs	r3, #0
 8012018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801201a:	2300      	movs	r3, #0
 801201c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801201e:	4b41      	ldr	r3, [pc, #260]	; (8012124 <xTaskResumeAll+0x114>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d109      	bne.n	801203a <xTaskResumeAll+0x2a>
 8012026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202a:	f383 8811 	msr	BASEPRI, r3
 801202e:	f3bf 8f6f 	isb	sy
 8012032:	f3bf 8f4f 	dsb	sy
 8012036:	603b      	str	r3, [r7, #0]
 8012038:	e7fe      	b.n	8012038 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801203a:	f000 ff57 	bl	8012eec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801203e:	4b39      	ldr	r3, [pc, #228]	; (8012124 <xTaskResumeAll+0x114>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	3b01      	subs	r3, #1
 8012044:	4a37      	ldr	r2, [pc, #220]	; (8012124 <xTaskResumeAll+0x114>)
 8012046:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012048:	4b36      	ldr	r3, [pc, #216]	; (8012124 <xTaskResumeAll+0x114>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d161      	bne.n	8012114 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012050:	4b35      	ldr	r3, [pc, #212]	; (8012128 <xTaskResumeAll+0x118>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d05d      	beq.n	8012114 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012058:	e02e      	b.n	80120b8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801205a:	4b34      	ldr	r3, [pc, #208]	; (801212c <xTaskResumeAll+0x11c>)
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	68db      	ldr	r3, [r3, #12]
 8012060:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	3318      	adds	r3, #24
 8012066:	4618      	mov	r0, r3
 8012068:	f7fe ff8d 	bl	8010f86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	3304      	adds	r3, #4
 8012070:	4618      	mov	r0, r3
 8012072:	f7fe ff88 	bl	8010f86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801207a:	2201      	movs	r2, #1
 801207c:	409a      	lsls	r2, r3
 801207e:	4b2c      	ldr	r3, [pc, #176]	; (8012130 <xTaskResumeAll+0x120>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	4313      	orrs	r3, r2
 8012084:	4a2a      	ldr	r2, [pc, #168]	; (8012130 <xTaskResumeAll+0x120>)
 8012086:	6013      	str	r3, [r2, #0]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801208c:	4613      	mov	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	4413      	add	r3, r2
 8012092:	009b      	lsls	r3, r3, #2
 8012094:	4a27      	ldr	r2, [pc, #156]	; (8012134 <xTaskResumeAll+0x124>)
 8012096:	441a      	add	r2, r3
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	3304      	adds	r3, #4
 801209c:	4619      	mov	r1, r3
 801209e:	4610      	mov	r0, r2
 80120a0:	f7fe ff14 	bl	8010ecc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120a8:	4b23      	ldr	r3, [pc, #140]	; (8012138 <xTaskResumeAll+0x128>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ae:	429a      	cmp	r2, r3
 80120b0:	d302      	bcc.n	80120b8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80120b2:	4b22      	ldr	r3, [pc, #136]	; (801213c <xTaskResumeAll+0x12c>)
 80120b4:	2201      	movs	r2, #1
 80120b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80120b8:	4b1c      	ldr	r3, [pc, #112]	; (801212c <xTaskResumeAll+0x11c>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d1cc      	bne.n	801205a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d001      	beq.n	80120ca <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80120c6:	f000 fb81 	bl	80127cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80120ca:	4b1d      	ldr	r3, [pc, #116]	; (8012140 <xTaskResumeAll+0x130>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d010      	beq.n	80120f8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80120d6:	f000 f837 	bl	8012148 <xTaskIncrementTick>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d002      	beq.n	80120e6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80120e0:	4b16      	ldr	r3, [pc, #88]	; (801213c <xTaskResumeAll+0x12c>)
 80120e2:	2201      	movs	r2, #1
 80120e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	3b01      	subs	r3, #1
 80120ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1f1      	bne.n	80120d6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80120f2:	4b13      	ldr	r3, [pc, #76]	; (8012140 <xTaskResumeAll+0x130>)
 80120f4:	2200      	movs	r2, #0
 80120f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80120f8:	4b10      	ldr	r3, [pc, #64]	; (801213c <xTaskResumeAll+0x12c>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d009      	beq.n	8012114 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012100:	2301      	movs	r3, #1
 8012102:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012104:	4b0f      	ldr	r3, [pc, #60]	; (8012144 <xTaskResumeAll+0x134>)
 8012106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012114:	f000 ff18 	bl	8012f48 <vPortExitCritical>

	return xAlreadyYielded;
 8012118:	68bb      	ldr	r3, [r7, #8]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	20000b04 	.word	0x20000b04
 8012128:	20000adc 	.word	0x20000adc
 801212c:	20000a9c 	.word	0x20000a9c
 8012130:	20000ae4 	.word	0x20000ae4
 8012134:	200009e0 	.word	0x200009e0
 8012138:	200009dc 	.word	0x200009dc
 801213c:	20000af0 	.word	0x20000af0
 8012140:	20000aec 	.word	0x20000aec
 8012144:	e000ed04 	.word	0xe000ed04

08012148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b086      	sub	sp, #24
 801214c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801214e:	2300      	movs	r3, #0
 8012150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012152:	4b50      	ldr	r3, [pc, #320]	; (8012294 <xTaskIncrementTick+0x14c>)
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	f040 808c 	bne.w	8012274 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801215c:	4b4e      	ldr	r3, [pc, #312]	; (8012298 <xTaskIncrementTick+0x150>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	3301      	adds	r3, #1
 8012162:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012164:	4a4c      	ldr	r2, [pc, #304]	; (8012298 <xTaskIncrementTick+0x150>)
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d11f      	bne.n	80121b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012170:	4b4a      	ldr	r3, [pc, #296]	; (801229c <xTaskIncrementTick+0x154>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d009      	beq.n	801218e <xTaskIncrementTick+0x46>
 801217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801217e:	f383 8811 	msr	BASEPRI, r3
 8012182:	f3bf 8f6f 	isb	sy
 8012186:	f3bf 8f4f 	dsb	sy
 801218a:	603b      	str	r3, [r7, #0]
 801218c:	e7fe      	b.n	801218c <xTaskIncrementTick+0x44>
 801218e:	4b43      	ldr	r3, [pc, #268]	; (801229c <xTaskIncrementTick+0x154>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	60fb      	str	r3, [r7, #12]
 8012194:	4b42      	ldr	r3, [pc, #264]	; (80122a0 <xTaskIncrementTick+0x158>)
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	4a40      	ldr	r2, [pc, #256]	; (801229c <xTaskIncrementTick+0x154>)
 801219a:	6013      	str	r3, [r2, #0]
 801219c:	4a40      	ldr	r2, [pc, #256]	; (80122a0 <xTaskIncrementTick+0x158>)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	6013      	str	r3, [r2, #0]
 80121a2:	4b40      	ldr	r3, [pc, #256]	; (80122a4 <xTaskIncrementTick+0x15c>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	3301      	adds	r3, #1
 80121a8:	4a3e      	ldr	r2, [pc, #248]	; (80122a4 <xTaskIncrementTick+0x15c>)
 80121aa:	6013      	str	r3, [r2, #0]
 80121ac:	f000 fb0e 	bl	80127cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80121b0:	4b3d      	ldr	r3, [pc, #244]	; (80122a8 <xTaskIncrementTick+0x160>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	693a      	ldr	r2, [r7, #16]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d34d      	bcc.n	8012256 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121ba:	4b38      	ldr	r3, [pc, #224]	; (801229c <xTaskIncrementTick+0x154>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d101      	bne.n	80121c8 <xTaskIncrementTick+0x80>
 80121c4:	2301      	movs	r3, #1
 80121c6:	e000      	b.n	80121ca <xTaskIncrementTick+0x82>
 80121c8:	2300      	movs	r3, #0
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d004      	beq.n	80121d8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121ce:	4b36      	ldr	r3, [pc, #216]	; (80122a8 <xTaskIncrementTick+0x160>)
 80121d0:	f04f 32ff 	mov.w	r2, #4294967295
 80121d4:	601a      	str	r2, [r3, #0]
					break;
 80121d6:	e03e      	b.n	8012256 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80121d8:	4b30      	ldr	r3, [pc, #192]	; (801229c <xTaskIncrementTick+0x154>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	68db      	ldr	r3, [r3, #12]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80121e8:	693a      	ldr	r2, [r7, #16]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d203      	bcs.n	80121f8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80121f0:	4a2d      	ldr	r2, [pc, #180]	; (80122a8 <xTaskIncrementTick+0x160>)
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	6013      	str	r3, [r2, #0]
						break;
 80121f6:	e02e      	b.n	8012256 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	3304      	adds	r3, #4
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7fe fec2 	bl	8010f86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012202:	68bb      	ldr	r3, [r7, #8]
 8012204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012206:	2b00      	cmp	r3, #0
 8012208:	d004      	beq.n	8012214 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	3318      	adds	r3, #24
 801220e:	4618      	mov	r0, r3
 8012210:	f7fe feb9 	bl	8010f86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012218:	2201      	movs	r2, #1
 801221a:	409a      	lsls	r2, r3
 801221c:	4b23      	ldr	r3, [pc, #140]	; (80122ac <xTaskIncrementTick+0x164>)
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4313      	orrs	r3, r2
 8012222:	4a22      	ldr	r2, [pc, #136]	; (80122ac <xTaskIncrementTick+0x164>)
 8012224:	6013      	str	r3, [r2, #0]
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801222a:	4613      	mov	r3, r2
 801222c:	009b      	lsls	r3, r3, #2
 801222e:	4413      	add	r3, r2
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	4a1f      	ldr	r2, [pc, #124]	; (80122b0 <xTaskIncrementTick+0x168>)
 8012234:	441a      	add	r2, r3
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	3304      	adds	r3, #4
 801223a:	4619      	mov	r1, r3
 801223c:	4610      	mov	r0, r2
 801223e:	f7fe fe45 	bl	8010ecc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012246:	4b1b      	ldr	r3, [pc, #108]	; (80122b4 <xTaskIncrementTick+0x16c>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224c:	429a      	cmp	r2, r3
 801224e:	d3b4      	bcc.n	80121ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012250:	2301      	movs	r3, #1
 8012252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012254:	e7b1      	b.n	80121ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012256:	4b17      	ldr	r3, [pc, #92]	; (80122b4 <xTaskIncrementTick+0x16c>)
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801225c:	4914      	ldr	r1, [pc, #80]	; (80122b0 <xTaskIncrementTick+0x168>)
 801225e:	4613      	mov	r3, r2
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	4413      	add	r3, r2
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	440b      	add	r3, r1
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	2b01      	cmp	r3, #1
 801226c:	d907      	bls.n	801227e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 801226e:	2301      	movs	r3, #1
 8012270:	617b      	str	r3, [r7, #20]
 8012272:	e004      	b.n	801227e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012274:	4b10      	ldr	r3, [pc, #64]	; (80122b8 <xTaskIncrementTick+0x170>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	3301      	adds	r3, #1
 801227a:	4a0f      	ldr	r2, [pc, #60]	; (80122b8 <xTaskIncrementTick+0x170>)
 801227c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801227e:	4b0f      	ldr	r3, [pc, #60]	; (80122bc <xTaskIncrementTick+0x174>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d001      	beq.n	801228a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8012286:	2301      	movs	r3, #1
 8012288:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801228a:	697b      	ldr	r3, [r7, #20]
}
 801228c:	4618      	mov	r0, r3
 801228e:	3718      	adds	r7, #24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	20000b04 	.word	0x20000b04
 8012298:	20000ae0 	.word	0x20000ae0
 801229c:	20000a94 	.word	0x20000a94
 80122a0:	20000a98 	.word	0x20000a98
 80122a4:	20000af4 	.word	0x20000af4
 80122a8:	20000afc 	.word	0x20000afc
 80122ac:	20000ae4 	.word	0x20000ae4
 80122b0:	200009e0 	.word	0x200009e0
 80122b4:	200009dc 	.word	0x200009dc
 80122b8:	20000aec 	.word	0x20000aec
 80122bc:	20000af0 	.word	0x20000af0

080122c0 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d103      	bne.n	80122d8 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 80122d0:	4b08      	ldr	r3, [pc, #32]	; (80122f4 <vTaskSetApplicationTaskTag+0x34>)
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	60fb      	str	r3, [r7, #12]
 80122d6:	e001      	b.n	80122dc <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 80122dc:	f000 fe06 	bl	8012eec <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	683a      	ldr	r2, [r7, #0]
 80122e4:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 80122e6:	f000 fe2f 	bl	8012f48 <vPortExitCritical>
	}
 80122ea:	bf00      	nop
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	200009dc 	.word	0x200009dc

080122f8 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
 8012300:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d103      	bne.n	8012310 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012308:	4b0b      	ldr	r3, [pc, #44]	; (8012338 <xTaskCallApplicationTaskHook+0x40>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	60fb      	str	r3, [r7, #12]
 801230e:	e001      	b.n	8012314 <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012318:	2b00      	cmp	r3, #0
 801231a:	d005      	beq.n	8012328 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012320:	6838      	ldr	r0, [r7, #0]
 8012322:	4798      	blx	r3
 8012324:	60b8      	str	r0, [r7, #8]
 8012326:	e001      	b.n	801232c <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8012328:	2300      	movs	r3, #0
 801232a:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 801232c:	68bb      	ldr	r3, [r7, #8]
	}
 801232e:	4618      	mov	r0, r3
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	200009dc 	.word	0x200009dc

0801233c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b088      	sub	sp, #32
 8012340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012342:	4b3f      	ldr	r3, [pc, #252]	; (8012440 <vTaskSwitchContext+0x104>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d003      	beq.n	8012352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801234a:	4b3e      	ldr	r3, [pc, #248]	; (8012444 <vTaskSwitchContext+0x108>)
 801234c:	2201      	movs	r2, #1
 801234e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012350:	e071      	b.n	8012436 <vTaskSwitchContext+0xfa>
		xYieldPending = pdFALSE;
 8012352:	4b3c      	ldr	r3, [pc, #240]	; (8012444 <vTaskSwitchContext+0x108>)
 8012354:	2200      	movs	r2, #0
 8012356:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8012358:	4b3b      	ldr	r3, [pc, #236]	; (8012448 <vTaskSwitchContext+0x10c>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2101      	movs	r1, #1
 801235e:	4618      	mov	r0, r3
 8012360:	f7ff ffca 	bl	80122f8 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 8012364:	4b38      	ldr	r3, [pc, #224]	; (8012448 <vTaskSwitchContext+0x10c>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801236a:	61fb      	str	r3, [r7, #28]
 801236c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012370:	61bb      	str	r3, [r7, #24]
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	69ba      	ldr	r2, [r7, #24]
 8012378:	429a      	cmp	r2, r3
 801237a:	d111      	bne.n	80123a0 <vTaskSwitchContext+0x64>
 801237c:	69fb      	ldr	r3, [r7, #28]
 801237e:	3304      	adds	r3, #4
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	69ba      	ldr	r2, [r7, #24]
 8012384:	429a      	cmp	r2, r3
 8012386:	d10b      	bne.n	80123a0 <vTaskSwitchContext+0x64>
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	3308      	adds	r3, #8
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	69ba      	ldr	r2, [r7, #24]
 8012390:	429a      	cmp	r2, r3
 8012392:	d105      	bne.n	80123a0 <vTaskSwitchContext+0x64>
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	330c      	adds	r3, #12
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	69ba      	ldr	r2, [r7, #24]
 801239c:	429a      	cmp	r2, r3
 801239e:	d008      	beq.n	80123b2 <vTaskSwitchContext+0x76>
 80123a0:	4b29      	ldr	r3, [pc, #164]	; (8012448 <vTaskSwitchContext+0x10c>)
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	4b28      	ldr	r3, [pc, #160]	; (8012448 <vTaskSwitchContext+0x10c>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	3334      	adds	r3, #52	; 0x34
 80123aa:	4619      	mov	r1, r3
 80123ac:	4610      	mov	r0, r2
 80123ae:	f7fe fcca 	bl	8010d46 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80123b2:	4b26      	ldr	r3, [pc, #152]	; (801244c <vTaskSwitchContext+0x110>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	fab3 f383 	clz	r3, r3
 80123be:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80123c0:	7afb      	ldrb	r3, [r7, #11]
 80123c2:	f1c3 031f 	rsb	r3, r3, #31
 80123c6:	617b      	str	r3, [r7, #20]
 80123c8:	4921      	ldr	r1, [pc, #132]	; (8012450 <vTaskSwitchContext+0x114>)
 80123ca:	697a      	ldr	r2, [r7, #20]
 80123cc:	4613      	mov	r3, r2
 80123ce:	009b      	lsls	r3, r3, #2
 80123d0:	4413      	add	r3, r2
 80123d2:	009b      	lsls	r3, r3, #2
 80123d4:	440b      	add	r3, r1
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d109      	bne.n	80123f0 <vTaskSwitchContext+0xb4>
	__asm volatile
 80123dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123e0:	f383 8811 	msr	BASEPRI, r3
 80123e4:	f3bf 8f6f 	isb	sy
 80123e8:	f3bf 8f4f 	dsb	sy
 80123ec:	607b      	str	r3, [r7, #4]
 80123ee:	e7fe      	b.n	80123ee <vTaskSwitchContext+0xb2>
 80123f0:	697a      	ldr	r2, [r7, #20]
 80123f2:	4613      	mov	r3, r2
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	4a15      	ldr	r2, [pc, #84]	; (8012450 <vTaskSwitchContext+0x114>)
 80123fc:	4413      	add	r3, r2
 80123fe:	613b      	str	r3, [r7, #16]
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	685b      	ldr	r3, [r3, #4]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	605a      	str	r2, [r3, #4]
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	685a      	ldr	r2, [r3, #4]
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	3308      	adds	r3, #8
 8012412:	429a      	cmp	r2, r3
 8012414:	d104      	bne.n	8012420 <vTaskSwitchContext+0xe4>
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	685b      	ldr	r3, [r3, #4]
 801241a:	685a      	ldr	r2, [r3, #4]
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	605a      	str	r2, [r3, #4]
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	685b      	ldr	r3, [r3, #4]
 8012424:	68db      	ldr	r3, [r3, #12]
 8012426:	4a08      	ldr	r2, [pc, #32]	; (8012448 <vTaskSwitchContext+0x10c>)
 8012428:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 801242a:	4b07      	ldr	r3, [pc, #28]	; (8012448 <vTaskSwitchContext+0x10c>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	2100      	movs	r1, #0
 8012430:	4618      	mov	r0, r3
 8012432:	f7ff ff61 	bl	80122f8 <xTaskCallApplicationTaskHook>
}
 8012436:	bf00      	nop
 8012438:	3720      	adds	r7, #32
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	20000b04 	.word	0x20000b04
 8012444:	20000af0 	.word	0x20000af0
 8012448:	200009dc 	.word	0x200009dc
 801244c:	20000ae4 	.word	0x20000ae4
 8012450:	200009e0 	.word	0x200009e0

08012454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d109      	bne.n	8012478 <vTaskPlaceOnEventList+0x24>
 8012464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012468:	f383 8811 	msr	BASEPRI, r3
 801246c:	f3bf 8f6f 	isb	sy
 8012470:	f3bf 8f4f 	dsb	sy
 8012474:	60fb      	str	r3, [r7, #12]
 8012476:	e7fe      	b.n	8012476 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012478:	4b07      	ldr	r3, [pc, #28]	; (8012498 <vTaskPlaceOnEventList+0x44>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	3318      	adds	r3, #24
 801247e:	4619      	mov	r1, r3
 8012480:	6878      	ldr	r0, [r7, #4]
 8012482:	f7fe fd47 	bl	8010f14 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012486:	2101      	movs	r1, #1
 8012488:	6838      	ldr	r0, [r7, #0]
 801248a:	f000 fb9f 	bl	8012bcc <prvAddCurrentTaskToDelayedList>
}
 801248e:	bf00      	nop
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	200009dc 	.word	0x200009dc

0801249c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801249c:	b580      	push	{r7, lr}
 801249e:	b086      	sub	sp, #24
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	68db      	ldr	r3, [r3, #12]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d109      	bne.n	80124c6 <xTaskRemoveFromEventList+0x2a>
 80124b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b6:	f383 8811 	msr	BASEPRI, r3
 80124ba:	f3bf 8f6f 	isb	sy
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	60fb      	str	r3, [r7, #12]
 80124c4:	e7fe      	b.n	80124c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	3318      	adds	r3, #24
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fe fd5b 	bl	8010f86 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80124d0:	4b1d      	ldr	r3, [pc, #116]	; (8012548 <xTaskRemoveFromEventList+0xac>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d11c      	bne.n	8012512 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	3304      	adds	r3, #4
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fe fd52 	bl	8010f86 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80124e2:	693b      	ldr	r3, [r7, #16]
 80124e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e6:	2201      	movs	r2, #1
 80124e8:	409a      	lsls	r2, r3
 80124ea:	4b18      	ldr	r3, [pc, #96]	; (801254c <xTaskRemoveFromEventList+0xb0>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	4a16      	ldr	r2, [pc, #88]	; (801254c <xTaskRemoveFromEventList+0xb0>)
 80124f2:	6013      	str	r3, [r2, #0]
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f8:	4613      	mov	r3, r2
 80124fa:	009b      	lsls	r3, r3, #2
 80124fc:	4413      	add	r3, r2
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	4a13      	ldr	r2, [pc, #76]	; (8012550 <xTaskRemoveFromEventList+0xb4>)
 8012502:	441a      	add	r2, r3
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	3304      	adds	r3, #4
 8012508:	4619      	mov	r1, r3
 801250a:	4610      	mov	r0, r2
 801250c:	f7fe fcde 	bl	8010ecc <vListInsertEnd>
 8012510:	e005      	b.n	801251e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	3318      	adds	r3, #24
 8012516:	4619      	mov	r1, r3
 8012518:	480e      	ldr	r0, [pc, #56]	; (8012554 <xTaskRemoveFromEventList+0xb8>)
 801251a:	f7fe fcd7 	bl	8010ecc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801251e:	693b      	ldr	r3, [r7, #16]
 8012520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012522:	4b0d      	ldr	r3, [pc, #52]	; (8012558 <xTaskRemoveFromEventList+0xbc>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012528:	429a      	cmp	r2, r3
 801252a:	d905      	bls.n	8012538 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801252c:	2301      	movs	r3, #1
 801252e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012530:	4b0a      	ldr	r3, [pc, #40]	; (801255c <xTaskRemoveFromEventList+0xc0>)
 8012532:	2201      	movs	r2, #1
 8012534:	601a      	str	r2, [r3, #0]
 8012536:	e001      	b.n	801253c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8012538:	2300      	movs	r3, #0
 801253a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 801253c:	697b      	ldr	r3, [r7, #20]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3718      	adds	r7, #24
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	20000b04 	.word	0x20000b04
 801254c:	20000ae4 	.word	0x20000ae4
 8012550:	200009e0 	.word	0x200009e0
 8012554:	20000a9c 	.word	0x20000a9c
 8012558:	200009dc 	.word	0x200009dc
 801255c:	20000af0 	.word	0x20000af0

08012560 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012568:	4b06      	ldr	r3, [pc, #24]	; (8012584 <vTaskInternalSetTimeOutState+0x24>)
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012570:	4b05      	ldr	r3, [pc, #20]	; (8012588 <vTaskInternalSetTimeOutState+0x28>)
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	605a      	str	r2, [r3, #4]
}
 8012578:	bf00      	nop
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr
 8012584:	20000af4 	.word	0x20000af4
 8012588:	20000ae0 	.word	0x20000ae0

0801258c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b088      	sub	sp, #32
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d109      	bne.n	80125b0 <xTaskCheckForTimeOut+0x24>
 801259c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a0:	f383 8811 	msr	BASEPRI, r3
 80125a4:	f3bf 8f6f 	isb	sy
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	613b      	str	r3, [r7, #16]
 80125ae:	e7fe      	b.n	80125ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d109      	bne.n	80125ca <xTaskCheckForTimeOut+0x3e>
 80125b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ba:	f383 8811 	msr	BASEPRI, r3
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f3bf 8f4f 	dsb	sy
 80125c6:	60fb      	str	r3, [r7, #12]
 80125c8:	e7fe      	b.n	80125c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80125ca:	f000 fc8f 	bl	8012eec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80125ce:	4b1d      	ldr	r3, [pc, #116]	; (8012644 <xTaskCheckForTimeOut+0xb8>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	69ba      	ldr	r2, [r7, #24]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125e6:	d102      	bne.n	80125ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80125e8:	2300      	movs	r3, #0
 80125ea:	61fb      	str	r3, [r7, #28]
 80125ec:	e023      	b.n	8012636 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681a      	ldr	r2, [r3, #0]
 80125f2:	4b15      	ldr	r3, [pc, #84]	; (8012648 <xTaskCheckForTimeOut+0xbc>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d007      	beq.n	801260a <xTaskCheckForTimeOut+0x7e>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	69ba      	ldr	r2, [r7, #24]
 8012600:	429a      	cmp	r2, r3
 8012602:	d302      	bcc.n	801260a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012604:	2301      	movs	r3, #1
 8012606:	61fb      	str	r3, [r7, #28]
 8012608:	e015      	b.n	8012636 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	697a      	ldr	r2, [r7, #20]
 8012610:	429a      	cmp	r2, r3
 8012612:	d20b      	bcs.n	801262c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	1ad2      	subs	r2, r2, r3
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7ff ff9d 	bl	8012560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012626:	2300      	movs	r3, #0
 8012628:	61fb      	str	r3, [r7, #28]
 801262a:	e004      	b.n	8012636 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	2200      	movs	r2, #0
 8012630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012632:	2301      	movs	r3, #1
 8012634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012636:	f000 fc87 	bl	8012f48 <vPortExitCritical>

	return xReturn;
 801263a:	69fb      	ldr	r3, [r7, #28]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3720      	adds	r7, #32
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	20000ae0 	.word	0x20000ae0
 8012648:	20000af4 	.word	0x20000af4

0801264c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801264c:	b480      	push	{r7}
 801264e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012650:	4b03      	ldr	r3, [pc, #12]	; (8012660 <vTaskMissedYield+0x14>)
 8012652:	2201      	movs	r2, #1
 8012654:	601a      	str	r2, [r3, #0]
}
 8012656:	bf00      	nop
 8012658:	46bd      	mov	sp, r7
 801265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265e:	4770      	bx	lr
 8012660:	20000af0 	.word	0x20000af0

08012664 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012664:	b580      	push	{r7, lr}
 8012666:	b082      	sub	sp, #8
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801266c:	f000 f854 	bl	8012718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012670:	4b07      	ldr	r3, [pc, #28]	; (8012690 <prvIdleTask+0x2c>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	2b01      	cmp	r3, #1
 8012676:	d907      	bls.n	8012688 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012678:	4b06      	ldr	r3, [pc, #24]	; (8012694 <prvIdleTask+0x30>)
 801267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	f3bf 8f4f 	dsb	sy
 8012684:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012688:	f7fe fb6a 	bl	8010d60 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801268c:	e7ee      	b.n	801266c <prvIdleTask+0x8>
 801268e:	bf00      	nop
 8012690:	200009e0 	.word	0x200009e0
 8012694:	e000ed04 	.word	0xe000ed04

08012698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801269e:	2300      	movs	r3, #0
 80126a0:	607b      	str	r3, [r7, #4]
 80126a2:	e00c      	b.n	80126be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	4613      	mov	r3, r2
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	4413      	add	r3, r2
 80126ac:	009b      	lsls	r3, r3, #2
 80126ae:	4a12      	ldr	r2, [pc, #72]	; (80126f8 <prvInitialiseTaskLists+0x60>)
 80126b0:	4413      	add	r3, r2
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fe fbdd 	bl	8010e72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	3301      	adds	r3, #1
 80126bc:	607b      	str	r3, [r7, #4]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	2b06      	cmp	r3, #6
 80126c2:	d9ef      	bls.n	80126a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80126c4:	480d      	ldr	r0, [pc, #52]	; (80126fc <prvInitialiseTaskLists+0x64>)
 80126c6:	f7fe fbd4 	bl	8010e72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80126ca:	480d      	ldr	r0, [pc, #52]	; (8012700 <prvInitialiseTaskLists+0x68>)
 80126cc:	f7fe fbd1 	bl	8010e72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80126d0:	480c      	ldr	r0, [pc, #48]	; (8012704 <prvInitialiseTaskLists+0x6c>)
 80126d2:	f7fe fbce 	bl	8010e72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80126d6:	480c      	ldr	r0, [pc, #48]	; (8012708 <prvInitialiseTaskLists+0x70>)
 80126d8:	f7fe fbcb 	bl	8010e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80126dc:	480b      	ldr	r0, [pc, #44]	; (801270c <prvInitialiseTaskLists+0x74>)
 80126de:	f7fe fbc8 	bl	8010e72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80126e2:	4b0b      	ldr	r3, [pc, #44]	; (8012710 <prvInitialiseTaskLists+0x78>)
 80126e4:	4a05      	ldr	r2, [pc, #20]	; (80126fc <prvInitialiseTaskLists+0x64>)
 80126e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80126e8:	4b0a      	ldr	r3, [pc, #40]	; (8012714 <prvInitialiseTaskLists+0x7c>)
 80126ea:	4a05      	ldr	r2, [pc, #20]	; (8012700 <prvInitialiseTaskLists+0x68>)
 80126ec:	601a      	str	r2, [r3, #0]
}
 80126ee:	bf00      	nop
 80126f0:	3708      	adds	r7, #8
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	200009e0 	.word	0x200009e0
 80126fc:	20000a6c 	.word	0x20000a6c
 8012700:	20000a80 	.word	0x20000a80
 8012704:	20000a9c 	.word	0x20000a9c
 8012708:	20000ab0 	.word	0x20000ab0
 801270c:	20000ac8 	.word	0x20000ac8
 8012710:	20000a94 	.word	0x20000a94
 8012714:	20000a98 	.word	0x20000a98

08012718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801271e:	e019      	b.n	8012754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012720:	f000 fbe4 	bl	8012eec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012724:	4b0f      	ldr	r3, [pc, #60]	; (8012764 <prvCheckTasksWaitingTermination+0x4c>)
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	68db      	ldr	r3, [r3, #12]
 801272a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	3304      	adds	r3, #4
 8012730:	4618      	mov	r0, r3
 8012732:	f7fe fc28 	bl	8010f86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012736:	4b0c      	ldr	r3, [pc, #48]	; (8012768 <prvCheckTasksWaitingTermination+0x50>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	3b01      	subs	r3, #1
 801273c:	4a0a      	ldr	r2, [pc, #40]	; (8012768 <prvCheckTasksWaitingTermination+0x50>)
 801273e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012740:	4b0a      	ldr	r3, [pc, #40]	; (801276c <prvCheckTasksWaitingTermination+0x54>)
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	3b01      	subs	r3, #1
 8012746:	4a09      	ldr	r2, [pc, #36]	; (801276c <prvCheckTasksWaitingTermination+0x54>)
 8012748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801274a:	f000 fbfd 	bl	8012f48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 f80e 	bl	8012770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012754:	4b05      	ldr	r3, [pc, #20]	; (801276c <prvCheckTasksWaitingTermination+0x54>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d1e1      	bne.n	8012720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801275c:	bf00      	nop
 801275e:	3708      	adds	r7, #8
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}
 8012764:	20000ab0 	.word	0x20000ab0
 8012768:	20000adc 	.word	0x20000adc
 801276c:	20000ac4 	.word	0x20000ac4

08012770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012770:	b580      	push	{r7, lr}
 8012772:	b084      	sub	sp, #16
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801277e:	2b00      	cmp	r3, #0
 8012780:	d108      	bne.n	8012794 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012786:	4618      	mov	r0, r3
 8012788:	f000 fd90 	bl	80132ac <vPortFree>
				vPortFree( pxTCB );
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f000 fd8d 	bl	80132ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012792:	e017      	b.n	80127c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801279a:	2b01      	cmp	r3, #1
 801279c:	d103      	bne.n	80127a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f000 fd84 	bl	80132ac <vPortFree>
	}
 80127a4:	e00e      	b.n	80127c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80127ac:	2b02      	cmp	r3, #2
 80127ae:	d009      	beq.n	80127c4 <prvDeleteTCB+0x54>
 80127b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b4:	f383 8811 	msr	BASEPRI, r3
 80127b8:	f3bf 8f6f 	isb	sy
 80127bc:	f3bf 8f4f 	dsb	sy
 80127c0:	60fb      	str	r3, [r7, #12]
 80127c2:	e7fe      	b.n	80127c2 <prvDeleteTCB+0x52>
	}
 80127c4:	bf00      	nop
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80127d2:	4b0f      	ldr	r3, [pc, #60]	; (8012810 <prvResetNextTaskUnblockTime+0x44>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d101      	bne.n	80127e0 <prvResetNextTaskUnblockTime+0x14>
 80127dc:	2301      	movs	r3, #1
 80127de:	e000      	b.n	80127e2 <prvResetNextTaskUnblockTime+0x16>
 80127e0:	2300      	movs	r3, #0
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d004      	beq.n	80127f0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80127e6:	4b0b      	ldr	r3, [pc, #44]	; (8012814 <prvResetNextTaskUnblockTime+0x48>)
 80127e8:	f04f 32ff 	mov.w	r2, #4294967295
 80127ec:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80127ee:	e008      	b.n	8012802 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80127f0:	4b07      	ldr	r3, [pc, #28]	; (8012810 <prvResetNextTaskUnblockTime+0x44>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	68db      	ldr	r3, [r3, #12]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	685b      	ldr	r3, [r3, #4]
 80127fe:	4a05      	ldr	r2, [pc, #20]	; (8012814 <prvResetNextTaskUnblockTime+0x48>)
 8012800:	6013      	str	r3, [r2, #0]
}
 8012802:	bf00      	nop
 8012804:	370c      	adds	r7, #12
 8012806:	46bd      	mov	sp, r7
 8012808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280c:	4770      	bx	lr
 801280e:	bf00      	nop
 8012810:	20000a94 	.word	0x20000a94
 8012814:	20000afc 	.word	0x20000afc

08012818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801281e:	4b0b      	ldr	r3, [pc, #44]	; (801284c <xTaskGetSchedulerState+0x34>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d102      	bne.n	801282c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012826:	2301      	movs	r3, #1
 8012828:	607b      	str	r3, [r7, #4]
 801282a:	e008      	b.n	801283e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801282c:	4b08      	ldr	r3, [pc, #32]	; (8012850 <xTaskGetSchedulerState+0x38>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d102      	bne.n	801283a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012834:	2302      	movs	r3, #2
 8012836:	607b      	str	r3, [r7, #4]
 8012838:	e001      	b.n	801283e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801283a:	2300      	movs	r3, #0
 801283c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801283e:	687b      	ldr	r3, [r7, #4]
	}
 8012840:	4618      	mov	r0, r3
 8012842:	370c      	adds	r7, #12
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	20000ae8 	.word	0x20000ae8
 8012850:	20000b04 	.word	0x20000b04

08012854 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012860:	2300      	movs	r3, #0
 8012862:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d06e      	beq.n	8012948 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801286e:	4b39      	ldr	r3, [pc, #228]	; (8012954 <xTaskPriorityInherit+0x100>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012874:	429a      	cmp	r2, r3
 8012876:	d25e      	bcs.n	8012936 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	699b      	ldr	r3, [r3, #24]
 801287c:	2b00      	cmp	r3, #0
 801287e:	db06      	blt.n	801288e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012880:	4b34      	ldr	r3, [pc, #208]	; (8012954 <xTaskPriorityInherit+0x100>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012886:	f1c3 0207 	rsb	r2, r3, #7
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	6959      	ldr	r1, [r3, #20]
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012896:	4613      	mov	r3, r2
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	4413      	add	r3, r2
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	4a2e      	ldr	r2, [pc, #184]	; (8012958 <xTaskPriorityInherit+0x104>)
 80128a0:	4413      	add	r3, r2
 80128a2:	4299      	cmp	r1, r3
 80128a4:	d101      	bne.n	80128aa <xTaskPriorityInherit+0x56>
 80128a6:	2301      	movs	r3, #1
 80128a8:	e000      	b.n	80128ac <xTaskPriorityInherit+0x58>
 80128aa:	2300      	movs	r3, #0
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d03a      	beq.n	8012926 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	3304      	adds	r3, #4
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fe fb66 	bl	8010f86 <uxListRemove>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d115      	bne.n	80128ec <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c4:	4924      	ldr	r1, [pc, #144]	; (8012958 <xTaskPriorityInherit+0x104>)
 80128c6:	4613      	mov	r3, r2
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	4413      	add	r3, r2
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	440b      	add	r3, r1
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d10a      	bne.n	80128ec <xTaskPriorityInherit+0x98>
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128da:	2201      	movs	r2, #1
 80128dc:	fa02 f303 	lsl.w	r3, r2, r3
 80128e0:	43da      	mvns	r2, r3
 80128e2:	4b1e      	ldr	r3, [pc, #120]	; (801295c <xTaskPriorityInherit+0x108>)
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	4013      	ands	r3, r2
 80128e8:	4a1c      	ldr	r2, [pc, #112]	; (801295c <xTaskPriorityInherit+0x108>)
 80128ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80128ec:	4b19      	ldr	r3, [pc, #100]	; (8012954 <xTaskPriorityInherit+0x100>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128fa:	2201      	movs	r2, #1
 80128fc:	409a      	lsls	r2, r3
 80128fe:	4b17      	ldr	r3, [pc, #92]	; (801295c <xTaskPriorityInherit+0x108>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	4313      	orrs	r3, r2
 8012904:	4a15      	ldr	r2, [pc, #84]	; (801295c <xTaskPriorityInherit+0x108>)
 8012906:	6013      	str	r3, [r2, #0]
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801290c:	4613      	mov	r3, r2
 801290e:	009b      	lsls	r3, r3, #2
 8012910:	4413      	add	r3, r2
 8012912:	009b      	lsls	r3, r3, #2
 8012914:	4a10      	ldr	r2, [pc, #64]	; (8012958 <xTaskPriorityInherit+0x104>)
 8012916:	441a      	add	r2, r3
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	3304      	adds	r3, #4
 801291c:	4619      	mov	r1, r3
 801291e:	4610      	mov	r0, r2
 8012920:	f7fe fad4 	bl	8010ecc <vListInsertEnd>
 8012924:	e004      	b.n	8012930 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012926:	4b0b      	ldr	r3, [pc, #44]	; (8012954 <xTaskPriorityInherit+0x100>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012930:	2301      	movs	r3, #1
 8012932:	60fb      	str	r3, [r7, #12]
 8012934:	e008      	b.n	8012948 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801293a:	4b06      	ldr	r3, [pc, #24]	; (8012954 <xTaskPriorityInherit+0x100>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012940:	429a      	cmp	r2, r3
 8012942:	d201      	bcs.n	8012948 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012944:	2301      	movs	r3, #1
 8012946:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012948:	68fb      	ldr	r3, [r7, #12]
	}
 801294a:	4618      	mov	r0, r3
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop
 8012954:	200009dc 	.word	0x200009dc
 8012958:	200009e0 	.word	0x200009e0
 801295c:	20000ae4 	.word	0x20000ae4

08012960 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801296c:	2300      	movs	r3, #0
 801296e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d06c      	beq.n	8012a50 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012976:	4b39      	ldr	r3, [pc, #228]	; (8012a5c <xTaskPriorityDisinherit+0xfc>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	693a      	ldr	r2, [r7, #16]
 801297c:	429a      	cmp	r2, r3
 801297e:	d009      	beq.n	8012994 <xTaskPriorityDisinherit+0x34>
 8012980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012984:	f383 8811 	msr	BASEPRI, r3
 8012988:	f3bf 8f6f 	isb	sy
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	60fb      	str	r3, [r7, #12]
 8012992:	e7fe      	b.n	8012992 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012998:	2b00      	cmp	r3, #0
 801299a:	d109      	bne.n	80129b0 <xTaskPriorityDisinherit+0x50>
 801299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a0:	f383 8811 	msr	BASEPRI, r3
 80129a4:	f3bf 8f6f 	isb	sy
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	60bb      	str	r3, [r7, #8]
 80129ae:	e7fe      	b.n	80129ae <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129b4:	1e5a      	subs	r2, r3, #1
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d044      	beq.n	8012a50 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d140      	bne.n	8012a50 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	3304      	adds	r3, #4
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7fe fad7 	bl	8010f86 <uxListRemove>
 80129d8:	4603      	mov	r3, r0
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d115      	bne.n	8012a0a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129e2:	491f      	ldr	r1, [pc, #124]	; (8012a60 <xTaskPriorityDisinherit+0x100>)
 80129e4:	4613      	mov	r3, r2
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	4413      	add	r3, r2
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	440b      	add	r3, r1
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d10a      	bne.n	8012a0a <xTaskPriorityDisinherit+0xaa>
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129f8:	2201      	movs	r2, #1
 80129fa:	fa02 f303 	lsl.w	r3, r2, r3
 80129fe:	43da      	mvns	r2, r3
 8012a00:	4b18      	ldr	r3, [pc, #96]	; (8012a64 <xTaskPriorityDisinherit+0x104>)
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	4013      	ands	r3, r2
 8012a06:	4a17      	ldr	r2, [pc, #92]	; (8012a64 <xTaskPriorityDisinherit+0x104>)
 8012a08:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a16:	f1c3 0207 	rsb	r2, r3, #7
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a22:	2201      	movs	r2, #1
 8012a24:	409a      	lsls	r2, r3
 8012a26:	4b0f      	ldr	r3, [pc, #60]	; (8012a64 <xTaskPriorityDisinherit+0x104>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	4313      	orrs	r3, r2
 8012a2c:	4a0d      	ldr	r2, [pc, #52]	; (8012a64 <xTaskPriorityDisinherit+0x104>)
 8012a2e:	6013      	str	r3, [r2, #0]
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a34:	4613      	mov	r3, r2
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	4413      	add	r3, r2
 8012a3a:	009b      	lsls	r3, r3, #2
 8012a3c:	4a08      	ldr	r2, [pc, #32]	; (8012a60 <xTaskPriorityDisinherit+0x100>)
 8012a3e:	441a      	add	r2, r3
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	3304      	adds	r3, #4
 8012a44:	4619      	mov	r1, r3
 8012a46:	4610      	mov	r0, r2
 8012a48:	f7fe fa40 	bl	8010ecc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012a50:	697b      	ldr	r3, [r7, #20]
	}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3718      	adds	r7, #24
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}
 8012a5a:	bf00      	nop
 8012a5c:	200009dc 	.word	0x200009dc
 8012a60:	200009e0 	.word	0x200009e0
 8012a64:	20000ae4 	.word	0x20000ae4

08012a68 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b088      	sub	sp, #32
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012a76:	2301      	movs	r3, #1
 8012a78:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f000 8086 	beq.w	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012a82:	69bb      	ldr	r3, [r7, #24]
 8012a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d109      	bne.n	8012a9e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8012a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a8e:	f383 8811 	msr	BASEPRI, r3
 8012a92:	f3bf 8f6f 	isb	sy
 8012a96:	f3bf 8f4f 	dsb	sy
 8012a9a:	60fb      	str	r3, [r7, #12]
 8012a9c:	e7fe      	b.n	8012a9c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012a9e:	69bb      	ldr	r3, [r7, #24]
 8012aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aa2:	683a      	ldr	r2, [r7, #0]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d902      	bls.n	8012aae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	61fb      	str	r3, [r7, #28]
 8012aac:	e002      	b.n	8012ab4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ab2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab8:	69fa      	ldr	r2, [r7, #28]
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d067      	beq.n	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012abe:	69bb      	ldr	r3, [r7, #24]
 8012ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ac2:	697a      	ldr	r2, [r7, #20]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d162      	bne.n	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012ac8:	4b33      	ldr	r3, [pc, #204]	; (8012b98 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	69ba      	ldr	r2, [r7, #24]
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d109      	bne.n	8012ae6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8012ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad6:	f383 8811 	msr	BASEPRI, r3
 8012ada:	f3bf 8f6f 	isb	sy
 8012ade:	f3bf 8f4f 	dsb	sy
 8012ae2:	60bb      	str	r3, [r7, #8]
 8012ae4:	e7fe      	b.n	8012ae4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012ae6:	69bb      	ldr	r3, [r7, #24]
 8012ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	69fa      	ldr	r2, [r7, #28]
 8012af0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	699b      	ldr	r3, [r3, #24]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	db04      	blt.n	8012b04 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012afa:	69fb      	ldr	r3, [r7, #28]
 8012afc:	f1c3 0207 	rsb	r2, r3, #7
 8012b00:	69bb      	ldr	r3, [r7, #24]
 8012b02:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	6959      	ldr	r1, [r3, #20]
 8012b08:	693a      	ldr	r2, [r7, #16]
 8012b0a:	4613      	mov	r3, r2
 8012b0c:	009b      	lsls	r3, r3, #2
 8012b0e:	4413      	add	r3, r2
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	4a22      	ldr	r2, [pc, #136]	; (8012b9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012b14:	4413      	add	r3, r2
 8012b16:	4299      	cmp	r1, r3
 8012b18:	d101      	bne.n	8012b1e <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e000      	b.n	8012b20 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d034      	beq.n	8012b8e <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	3304      	adds	r3, #4
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fe fa2c 	bl	8010f86 <uxListRemove>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d115      	bne.n	8012b60 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b38:	4918      	ldr	r1, [pc, #96]	; (8012b9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012b3a:	4613      	mov	r3, r2
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	4413      	add	r3, r2
 8012b40:	009b      	lsls	r3, r3, #2
 8012b42:	440b      	add	r3, r1
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d10a      	bne.n	8012b60 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b4e:	2201      	movs	r2, #1
 8012b50:	fa02 f303 	lsl.w	r3, r2, r3
 8012b54:	43da      	mvns	r2, r3
 8012b56:	4b12      	ldr	r3, [pc, #72]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	4a10      	ldr	r2, [pc, #64]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b5e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b64:	2201      	movs	r2, #1
 8012b66:	409a      	lsls	r2, r3
 8012b68:	4b0d      	ldr	r3, [pc, #52]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4313      	orrs	r3, r2
 8012b6e:	4a0c      	ldr	r2, [pc, #48]	; (8012ba0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012b70:	6013      	str	r3, [r2, #0]
 8012b72:	69bb      	ldr	r3, [r7, #24]
 8012b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b76:	4613      	mov	r3, r2
 8012b78:	009b      	lsls	r3, r3, #2
 8012b7a:	4413      	add	r3, r2
 8012b7c:	009b      	lsls	r3, r3, #2
 8012b7e:	4a07      	ldr	r2, [pc, #28]	; (8012b9c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012b80:	441a      	add	r2, r3
 8012b82:	69bb      	ldr	r3, [r7, #24]
 8012b84:	3304      	adds	r3, #4
 8012b86:	4619      	mov	r1, r3
 8012b88:	4610      	mov	r0, r2
 8012b8a:	f7fe f99f 	bl	8010ecc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b8e:	bf00      	nop
 8012b90:	3720      	adds	r7, #32
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	200009dc 	.word	0x200009dc
 8012b9c:	200009e0 	.word	0x200009e0
 8012ba0:	20000ae4 	.word	0x20000ae4

08012ba4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012ba4:	b480      	push	{r7}
 8012ba6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012ba8:	4b07      	ldr	r3, [pc, #28]	; (8012bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d004      	beq.n	8012bba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012bb0:	4b05      	ldr	r3, [pc, #20]	; (8012bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012bb6:	3201      	adds	r2, #1
 8012bb8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012bba:	4b03      	ldr	r3, [pc, #12]	; (8012bc8 <pvTaskIncrementMutexHeldCount+0x24>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
	}
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr
 8012bc8:	200009dc 	.word	0x200009dc

08012bcc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012bd6:	4b29      	ldr	r3, [pc, #164]	; (8012c7c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012bdc:	4b28      	ldr	r3, [pc, #160]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	3304      	adds	r3, #4
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fe f9cf 	bl	8010f86 <uxListRemove>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d10b      	bne.n	8012c06 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8012bee:	4b24      	ldr	r3, [pc, #144]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8012bfa:	43da      	mvns	r2, r3
 8012bfc:	4b21      	ldr	r3, [pc, #132]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4013      	ands	r3, r2
 8012c02:	4a20      	ldr	r2, [pc, #128]	; (8012c84 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012c04:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0c:	d10a      	bne.n	8012c24 <prvAddCurrentTaskToDelayedList+0x58>
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d007      	beq.n	8012c24 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c14:	4b1a      	ldr	r3, [pc, #104]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	3304      	adds	r3, #4
 8012c1a:	4619      	mov	r1, r3
 8012c1c:	481a      	ldr	r0, [pc, #104]	; (8012c88 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012c1e:	f7fe f955 	bl	8010ecc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012c22:	e026      	b.n	8012c72 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012c24:	68fa      	ldr	r2, [r7, #12]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	4413      	add	r3, r2
 8012c2a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012c2c:	4b14      	ldr	r3, [pc, #80]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	68ba      	ldr	r2, [r7, #8]
 8012c32:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012c34:	68ba      	ldr	r2, [r7, #8]
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d209      	bcs.n	8012c50 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c3c:	4b13      	ldr	r3, [pc, #76]	; (8012c8c <prvAddCurrentTaskToDelayedList+0xc0>)
 8012c3e:	681a      	ldr	r2, [r3, #0]
 8012c40:	4b0f      	ldr	r3, [pc, #60]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	3304      	adds	r3, #4
 8012c46:	4619      	mov	r1, r3
 8012c48:	4610      	mov	r0, r2
 8012c4a:	f7fe f963 	bl	8010f14 <vListInsert>
}
 8012c4e:	e010      	b.n	8012c72 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012c50:	4b0f      	ldr	r3, [pc, #60]	; (8012c90 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	4b0a      	ldr	r3, [pc, #40]	; (8012c80 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	3304      	adds	r3, #4
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	f7fe f959 	bl	8010f14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012c62:	4b0c      	ldr	r3, [pc, #48]	; (8012c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	68ba      	ldr	r2, [r7, #8]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d202      	bcs.n	8012c72 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012c6c:	4a09      	ldr	r2, [pc, #36]	; (8012c94 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	6013      	str	r3, [r2, #0]
}
 8012c72:	bf00      	nop
 8012c74:	3710      	adds	r7, #16
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	20000ae0 	.word	0x20000ae0
 8012c80:	200009dc 	.word	0x200009dc
 8012c84:	20000ae4 	.word	0x20000ae4
 8012c88:	20000ac8 	.word	0x20000ac8
 8012c8c:	20000a98 	.word	0x20000a98
 8012c90:	20000a94 	.word	0x20000a94
 8012c94:	20000afc 	.word	0x20000afc

08012c98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b085      	sub	sp, #20
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	60b9      	str	r1, [r7, #8]
 8012ca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	3b04      	subs	r3, #4
 8012ca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	3b04      	subs	r3, #4
 8012cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	f023 0201 	bic.w	r2, r3, #1
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	3b04      	subs	r3, #4
 8012cc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012cc8:	4a0c      	ldr	r2, [pc, #48]	; (8012cfc <pxPortInitialiseStack+0x64>)
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	3b14      	subs	r3, #20
 8012cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012cd4:	687a      	ldr	r2, [r7, #4]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	3b04      	subs	r3, #4
 8012cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f06f 0202 	mvn.w	r2, #2
 8012ce6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	3b20      	subs	r3, #32
 8012cec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012cee:	68fb      	ldr	r3, [r7, #12]
}
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	3714      	adds	r7, #20
 8012cf4:	46bd      	mov	sp, r7
 8012cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfa:	4770      	bx	lr
 8012cfc:	08012d01 	.word	0x08012d01

08012d00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012d00:	b480      	push	{r7}
 8012d02:	b085      	sub	sp, #20
 8012d04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012d06:	2300      	movs	r3, #0
 8012d08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012d0a:	4b11      	ldr	r3, [pc, #68]	; (8012d50 <prvTaskExitError+0x50>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d12:	d009      	beq.n	8012d28 <prvTaskExitError+0x28>
 8012d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d18:	f383 8811 	msr	BASEPRI, r3
 8012d1c:	f3bf 8f6f 	isb	sy
 8012d20:	f3bf 8f4f 	dsb	sy
 8012d24:	60fb      	str	r3, [r7, #12]
 8012d26:	e7fe      	b.n	8012d26 <prvTaskExitError+0x26>
 8012d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d2c:	f383 8811 	msr	BASEPRI, r3
 8012d30:	f3bf 8f6f 	isb	sy
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012d3a:	bf00      	nop
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d0fc      	beq.n	8012d3c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012d42:	bf00      	nop
 8012d44:	3714      	adds	r7, #20
 8012d46:	46bd      	mov	sp, r7
 8012d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4c:	4770      	bx	lr
 8012d4e:	bf00      	nop
 8012d50:	2000003c 	.word	0x2000003c
	...

08012d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012d60:	4b07      	ldr	r3, [pc, #28]	; (8012d80 <pxCurrentTCBConst2>)
 8012d62:	6819      	ldr	r1, [r3, #0]
 8012d64:	6808      	ldr	r0, [r1, #0]
 8012d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d6a:	f380 8809 	msr	PSP, r0
 8012d6e:	f3bf 8f6f 	isb	sy
 8012d72:	f04f 0000 	mov.w	r0, #0
 8012d76:	f380 8811 	msr	BASEPRI, r0
 8012d7a:	4770      	bx	lr
 8012d7c:	f3af 8000 	nop.w

08012d80 <pxCurrentTCBConst2>:
 8012d80:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d84:	bf00      	nop
 8012d86:	bf00      	nop

08012d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d88:	4808      	ldr	r0, [pc, #32]	; (8012dac <prvPortStartFirstTask+0x24>)
 8012d8a:	6800      	ldr	r0, [r0, #0]
 8012d8c:	6800      	ldr	r0, [r0, #0]
 8012d8e:	f380 8808 	msr	MSP, r0
 8012d92:	f04f 0000 	mov.w	r0, #0
 8012d96:	f380 8814 	msr	CONTROL, r0
 8012d9a:	b662      	cpsie	i
 8012d9c:	b661      	cpsie	f
 8012d9e:	f3bf 8f4f 	dsb	sy
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	df00      	svc	0
 8012da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012daa:	bf00      	nop
 8012dac:	e000ed08 	.word	0xe000ed08

08012db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b086      	sub	sp, #24
 8012db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012db6:	4b44      	ldr	r3, [pc, #272]	; (8012ec8 <xPortStartScheduler+0x118>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a44      	ldr	r2, [pc, #272]	; (8012ecc <xPortStartScheduler+0x11c>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d109      	bne.n	8012dd4 <xPortStartScheduler+0x24>
 8012dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc4:	f383 8811 	msr	BASEPRI, r3
 8012dc8:	f3bf 8f6f 	isb	sy
 8012dcc:	f3bf 8f4f 	dsb	sy
 8012dd0:	613b      	str	r3, [r7, #16]
 8012dd2:	e7fe      	b.n	8012dd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012dd4:	4b3c      	ldr	r3, [pc, #240]	; (8012ec8 <xPortStartScheduler+0x118>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4a3d      	ldr	r2, [pc, #244]	; (8012ed0 <xPortStartScheduler+0x120>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d109      	bne.n	8012df2 <xPortStartScheduler+0x42>
 8012dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de2:	f383 8811 	msr	BASEPRI, r3
 8012de6:	f3bf 8f6f 	isb	sy
 8012dea:	f3bf 8f4f 	dsb	sy
 8012dee:	60fb      	str	r3, [r7, #12]
 8012df0:	e7fe      	b.n	8012df0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012df2:	4b38      	ldr	r3, [pc, #224]	; (8012ed4 <xPortStartScheduler+0x124>)
 8012df4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	781b      	ldrb	r3, [r3, #0]
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	22ff      	movs	r2, #255	; 0xff
 8012e02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	781b      	ldrb	r3, [r3, #0]
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012e0c:	78fb      	ldrb	r3, [r7, #3]
 8012e0e:	b2db      	uxtb	r3, r3
 8012e10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012e14:	b2da      	uxtb	r2, r3
 8012e16:	4b30      	ldr	r3, [pc, #192]	; (8012ed8 <xPortStartScheduler+0x128>)
 8012e18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012e1a:	4b30      	ldr	r3, [pc, #192]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e1c:	2207      	movs	r2, #7
 8012e1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e20:	e009      	b.n	8012e36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012e22:	4b2e      	ldr	r3, [pc, #184]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	3b01      	subs	r3, #1
 8012e28:	4a2c      	ldr	r2, [pc, #176]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012e2c:	78fb      	ldrb	r3, [r7, #3]
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	005b      	lsls	r3, r3, #1
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012e36:	78fb      	ldrb	r3, [r7, #3]
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012e3e:	2b80      	cmp	r3, #128	; 0x80
 8012e40:	d0ef      	beq.n	8012e22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012e42:	4b26      	ldr	r3, [pc, #152]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f1c3 0307 	rsb	r3, r3, #7
 8012e4a:	2b04      	cmp	r3, #4
 8012e4c:	d009      	beq.n	8012e62 <xPortStartScheduler+0xb2>
 8012e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e52:	f383 8811 	msr	BASEPRI, r3
 8012e56:	f3bf 8f6f 	isb	sy
 8012e5a:	f3bf 8f4f 	dsb	sy
 8012e5e:	60bb      	str	r3, [r7, #8]
 8012e60:	e7fe      	b.n	8012e60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012e62:	4b1e      	ldr	r3, [pc, #120]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	021b      	lsls	r3, r3, #8
 8012e68:	4a1c      	ldr	r2, [pc, #112]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012e6c:	4b1b      	ldr	r3, [pc, #108]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012e74:	4a19      	ldr	r2, [pc, #100]	; (8012edc <xPortStartScheduler+0x12c>)
 8012e76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	b2da      	uxtb	r2, r3
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012e80:	4b17      	ldr	r3, [pc, #92]	; (8012ee0 <xPortStartScheduler+0x130>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a16      	ldr	r2, [pc, #88]	; (8012ee0 <xPortStartScheduler+0x130>)
 8012e86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012e8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012e8c:	4b14      	ldr	r3, [pc, #80]	; (8012ee0 <xPortStartScheduler+0x130>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	4a13      	ldr	r2, [pc, #76]	; (8012ee0 <xPortStartScheduler+0x130>)
 8012e92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012e96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012e98:	f000 f8d6 	bl	8013048 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012e9c:	4b11      	ldr	r3, [pc, #68]	; (8012ee4 <xPortStartScheduler+0x134>)
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012ea2:	f000 f8f5 	bl	8013090 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012ea6:	4b10      	ldr	r3, [pc, #64]	; (8012ee8 <xPortStartScheduler+0x138>)
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	4a0f      	ldr	r2, [pc, #60]	; (8012ee8 <xPortStartScheduler+0x138>)
 8012eac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012eb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012eb2:	f7ff ff69 	bl	8012d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012eb6:	f7ff fa41 	bl	801233c <vTaskSwitchContext>
	prvTaskExitError();
 8012eba:	f7ff ff21 	bl	8012d00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012ebe:	2300      	movs	r3, #0
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3718      	adds	r7, #24
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}
 8012ec8:	e000ed00 	.word	0xe000ed00
 8012ecc:	410fc271 	.word	0x410fc271
 8012ed0:	410fc270 	.word	0x410fc270
 8012ed4:	e000e400 	.word	0xe000e400
 8012ed8:	20000b08 	.word	0x20000b08
 8012edc:	20000b0c 	.word	0x20000b0c
 8012ee0:	e000ed20 	.word	0xe000ed20
 8012ee4:	2000003c 	.word	0x2000003c
 8012ee8:	e000ef34 	.word	0xe000ef34

08012eec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef6:	f383 8811 	msr	BASEPRI, r3
 8012efa:	f3bf 8f6f 	isb	sy
 8012efe:	f3bf 8f4f 	dsb	sy
 8012f02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012f04:	4b0e      	ldr	r3, [pc, #56]	; (8012f40 <vPortEnterCritical+0x54>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	3301      	adds	r3, #1
 8012f0a:	4a0d      	ldr	r2, [pc, #52]	; (8012f40 <vPortEnterCritical+0x54>)
 8012f0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012f0e:	4b0c      	ldr	r3, [pc, #48]	; (8012f40 <vPortEnterCritical+0x54>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d10e      	bne.n	8012f34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012f16:	4b0b      	ldr	r3, [pc, #44]	; (8012f44 <vPortEnterCritical+0x58>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d009      	beq.n	8012f34 <vPortEnterCritical+0x48>
 8012f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f24:	f383 8811 	msr	BASEPRI, r3
 8012f28:	f3bf 8f6f 	isb	sy
 8012f2c:	f3bf 8f4f 	dsb	sy
 8012f30:	603b      	str	r3, [r7, #0]
 8012f32:	e7fe      	b.n	8012f32 <vPortEnterCritical+0x46>
	}
}
 8012f34:	bf00      	nop
 8012f36:	370c      	adds	r7, #12
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr
 8012f40:	2000003c 	.word	0x2000003c
 8012f44:	e000ed04 	.word	0xe000ed04

08012f48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012f4e:	4b11      	ldr	r3, [pc, #68]	; (8012f94 <vPortExitCritical+0x4c>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d109      	bne.n	8012f6a <vPortExitCritical+0x22>
 8012f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f5a:	f383 8811 	msr	BASEPRI, r3
 8012f5e:	f3bf 8f6f 	isb	sy
 8012f62:	f3bf 8f4f 	dsb	sy
 8012f66:	607b      	str	r3, [r7, #4]
 8012f68:	e7fe      	b.n	8012f68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8012f6a:	4b0a      	ldr	r3, [pc, #40]	; (8012f94 <vPortExitCritical+0x4c>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	3b01      	subs	r3, #1
 8012f70:	4a08      	ldr	r2, [pc, #32]	; (8012f94 <vPortExitCritical+0x4c>)
 8012f72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012f74:	4b07      	ldr	r3, [pc, #28]	; (8012f94 <vPortExitCritical+0x4c>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d104      	bne.n	8012f86 <vPortExitCritical+0x3e>
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012f86:	bf00      	nop
 8012f88:	370c      	adds	r7, #12
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr
 8012f92:	bf00      	nop
 8012f94:	2000003c 	.word	0x2000003c
	...

08012fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012fa0:	f3ef 8009 	mrs	r0, PSP
 8012fa4:	f3bf 8f6f 	isb	sy
 8012fa8:	4b15      	ldr	r3, [pc, #84]	; (8013000 <pxCurrentTCBConst>)
 8012faa:	681a      	ldr	r2, [r3, #0]
 8012fac:	f01e 0f10 	tst.w	lr, #16
 8012fb0:	bf08      	it	eq
 8012fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fba:	6010      	str	r0, [r2, #0]
 8012fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012fc4:	f380 8811 	msr	BASEPRI, r0
 8012fc8:	f3bf 8f4f 	dsb	sy
 8012fcc:	f3bf 8f6f 	isb	sy
 8012fd0:	f7ff f9b4 	bl	801233c <vTaskSwitchContext>
 8012fd4:	f04f 0000 	mov.w	r0, #0
 8012fd8:	f380 8811 	msr	BASEPRI, r0
 8012fdc:	bc09      	pop	{r0, r3}
 8012fde:	6819      	ldr	r1, [r3, #0]
 8012fe0:	6808      	ldr	r0, [r1, #0]
 8012fe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fe6:	f01e 0f10 	tst.w	lr, #16
 8012fea:	bf08      	it	eq
 8012fec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012ff0:	f380 8809 	msr	PSP, r0
 8012ff4:	f3bf 8f6f 	isb	sy
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	f3af 8000 	nop.w

08013000 <pxCurrentTCBConst>:
 8013000:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013004:	bf00      	nop
 8013006:	bf00      	nop

08013008 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013012:	f383 8811 	msr	BASEPRI, r3
 8013016:	f3bf 8f6f 	isb	sy
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013020:	f7ff f892 	bl	8012148 <xTaskIncrementTick>
 8013024:	4603      	mov	r3, r0
 8013026:	2b00      	cmp	r3, #0
 8013028:	d003      	beq.n	8013032 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801302a:	4b06      	ldr	r3, [pc, #24]	; (8013044 <SysTick_Handler+0x3c>)
 801302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013030:	601a      	str	r2, [r3, #0]
 8013032:	2300      	movs	r3, #0
 8013034:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801303c:	bf00      	nop
 801303e:	3708      	adds	r7, #8
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	e000ed04 	.word	0xe000ed04

08013048 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013048:	b480      	push	{r7}
 801304a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801304c:	4b0b      	ldr	r3, [pc, #44]	; (801307c <vPortSetupTimerInterrupt+0x34>)
 801304e:	2200      	movs	r2, #0
 8013050:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013052:	4b0b      	ldr	r3, [pc, #44]	; (8013080 <vPortSetupTimerInterrupt+0x38>)
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013058:	4b0a      	ldr	r3, [pc, #40]	; (8013084 <vPortSetupTimerInterrupt+0x3c>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4a0a      	ldr	r2, [pc, #40]	; (8013088 <vPortSetupTimerInterrupt+0x40>)
 801305e:	fba2 2303 	umull	r2, r3, r2, r3
 8013062:	099b      	lsrs	r3, r3, #6
 8013064:	4a09      	ldr	r2, [pc, #36]	; (801308c <vPortSetupTimerInterrupt+0x44>)
 8013066:	3b01      	subs	r3, #1
 8013068:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801306a:	4b04      	ldr	r3, [pc, #16]	; (801307c <vPortSetupTimerInterrupt+0x34>)
 801306c:	2207      	movs	r2, #7
 801306e:	601a      	str	r2, [r3, #0]
}
 8013070:	bf00      	nop
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
 801307a:	bf00      	nop
 801307c:	e000e010 	.word	0xe000e010
 8013080:	e000e018 	.word	0xe000e018
 8013084:	20000000 	.word	0x20000000
 8013088:	10624dd3 	.word	0x10624dd3
 801308c:	e000e014 	.word	0xe000e014

08013090 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013090:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80130a0 <vPortEnableVFP+0x10>
 8013094:	6801      	ldr	r1, [r0, #0]
 8013096:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801309a:	6001      	str	r1, [r0, #0]
 801309c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801309e:	bf00      	nop
 80130a0:	e000ed88 	.word	0xe000ed88

080130a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80130aa:	f3ef 8305 	mrs	r3, IPSR
 80130ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2b0f      	cmp	r3, #15
 80130b4:	d913      	bls.n	80130de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80130b6:	4a16      	ldr	r2, [pc, #88]	; (8013110 <vPortValidateInterruptPriority+0x6c>)
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	4413      	add	r3, r2
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80130c0:	4b14      	ldr	r3, [pc, #80]	; (8013114 <vPortValidateInterruptPriority+0x70>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	7afa      	ldrb	r2, [r7, #11]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d209      	bcs.n	80130de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80130ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ce:	f383 8811 	msr	BASEPRI, r3
 80130d2:	f3bf 8f6f 	isb	sy
 80130d6:	f3bf 8f4f 	dsb	sy
 80130da:	607b      	str	r3, [r7, #4]
 80130dc:	e7fe      	b.n	80130dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80130de:	4b0e      	ldr	r3, [pc, #56]	; (8013118 <vPortValidateInterruptPriority+0x74>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80130e6:	4b0d      	ldr	r3, [pc, #52]	; (801311c <vPortValidateInterruptPriority+0x78>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d909      	bls.n	8013102 <vPortValidateInterruptPriority+0x5e>
 80130ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130f2:	f383 8811 	msr	BASEPRI, r3
 80130f6:	f3bf 8f6f 	isb	sy
 80130fa:	f3bf 8f4f 	dsb	sy
 80130fe:	603b      	str	r3, [r7, #0]
 8013100:	e7fe      	b.n	8013100 <vPortValidateInterruptPriority+0x5c>
	}
 8013102:	bf00      	nop
 8013104:	3714      	adds	r7, #20
 8013106:	46bd      	mov	sp, r7
 8013108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310c:	4770      	bx	lr
 801310e:	bf00      	nop
 8013110:	e000e3f0 	.word	0xe000e3f0
 8013114:	20000b08 	.word	0x20000b08
 8013118:	e000ed0c 	.word	0xe000ed0c
 801311c:	20000b0c 	.word	0x20000b0c

08013120 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b08a      	sub	sp, #40	; 0x28
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013128:	2300      	movs	r3, #0
 801312a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801312c:	f7fe ff62 	bl	8011ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013130:	4b59      	ldr	r3, [pc, #356]	; (8013298 <pvPortMalloc+0x178>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d101      	bne.n	801313c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013138:	f000 f910 	bl	801335c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801313c:	4b57      	ldr	r3, [pc, #348]	; (801329c <pvPortMalloc+0x17c>)
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	4013      	ands	r3, r2
 8013144:	2b00      	cmp	r3, #0
 8013146:	f040 808c 	bne.w	8013262 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d01c      	beq.n	801318a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013150:	2208      	movs	r2, #8
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	4413      	add	r3, r2
 8013156:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f003 0307 	and.w	r3, r3, #7
 801315e:	2b00      	cmp	r3, #0
 8013160:	d013      	beq.n	801318a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f023 0307 	bic.w	r3, r3, #7
 8013168:	3308      	adds	r3, #8
 801316a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	f003 0307 	and.w	r3, r3, #7
 8013172:	2b00      	cmp	r3, #0
 8013174:	d009      	beq.n	801318a <pvPortMalloc+0x6a>
 8013176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317a:	f383 8811 	msr	BASEPRI, r3
 801317e:	f3bf 8f6f 	isb	sy
 8013182:	f3bf 8f4f 	dsb	sy
 8013186:	617b      	str	r3, [r7, #20]
 8013188:	e7fe      	b.n	8013188 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d068      	beq.n	8013262 <pvPortMalloc+0x142>
 8013190:	4b43      	ldr	r3, [pc, #268]	; (80132a0 <pvPortMalloc+0x180>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	429a      	cmp	r2, r3
 8013198:	d863      	bhi.n	8013262 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801319a:	4b42      	ldr	r3, [pc, #264]	; (80132a4 <pvPortMalloc+0x184>)
 801319c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801319e:	4b41      	ldr	r3, [pc, #260]	; (80132a4 <pvPortMalloc+0x184>)
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80131a4:	e004      	b.n	80131b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80131a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80131aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80131b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	687a      	ldr	r2, [r7, #4]
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d903      	bls.n	80131c2 <pvPortMalloc+0xa2>
 80131ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1f1      	bne.n	80131a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80131c2:	4b35      	ldr	r3, [pc, #212]	; (8013298 <pvPortMalloc+0x178>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d04a      	beq.n	8013262 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80131cc:	6a3b      	ldr	r3, [r7, #32]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	2208      	movs	r2, #8
 80131d2:	4413      	add	r3, r2
 80131d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80131d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d8:	681a      	ldr	r2, [r3, #0]
 80131da:	6a3b      	ldr	r3, [r7, #32]
 80131dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80131de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e0:	685a      	ldr	r2, [r3, #4]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	1ad2      	subs	r2, r2, r3
 80131e6:	2308      	movs	r3, #8
 80131e8:	005b      	lsls	r3, r3, #1
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d91e      	bls.n	801322c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80131ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	4413      	add	r3, r2
 80131f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80131f6:	69bb      	ldr	r3, [r7, #24]
 80131f8:	f003 0307 	and.w	r3, r3, #7
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d009      	beq.n	8013214 <pvPortMalloc+0xf4>
 8013200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013204:	f383 8811 	msr	BASEPRI, r3
 8013208:	f3bf 8f6f 	isb	sy
 801320c:	f3bf 8f4f 	dsb	sy
 8013210:	613b      	str	r3, [r7, #16]
 8013212:	e7fe      	b.n	8013212 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	685a      	ldr	r2, [r3, #4]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	1ad2      	subs	r2, r2, r3
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013226:	69b8      	ldr	r0, [r7, #24]
 8013228:	f000 f8fa 	bl	8013420 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801322c:	4b1c      	ldr	r3, [pc, #112]	; (80132a0 <pvPortMalloc+0x180>)
 801322e:	681a      	ldr	r2, [r3, #0]
 8013230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	4a1a      	ldr	r2, [pc, #104]	; (80132a0 <pvPortMalloc+0x180>)
 8013238:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801323a:	4b19      	ldr	r3, [pc, #100]	; (80132a0 <pvPortMalloc+0x180>)
 801323c:	681a      	ldr	r2, [r3, #0]
 801323e:	4b1a      	ldr	r3, [pc, #104]	; (80132a8 <pvPortMalloc+0x188>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	429a      	cmp	r2, r3
 8013244:	d203      	bcs.n	801324e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013246:	4b16      	ldr	r3, [pc, #88]	; (80132a0 <pvPortMalloc+0x180>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	4a17      	ldr	r2, [pc, #92]	; (80132a8 <pvPortMalloc+0x188>)
 801324c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013250:	685a      	ldr	r2, [r3, #4]
 8013252:	4b12      	ldr	r3, [pc, #72]	; (801329c <pvPortMalloc+0x17c>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	431a      	orrs	r2, r3
 8013258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	2200      	movs	r2, #0
 8013260:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013262:	f7fe fed5 	bl	8012010 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d101      	bne.n	8013270 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801326c:	f7fd fd71 	bl	8010d52 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013270:	69fb      	ldr	r3, [r7, #28]
 8013272:	f003 0307 	and.w	r3, r3, #7
 8013276:	2b00      	cmp	r3, #0
 8013278:	d009      	beq.n	801328e <pvPortMalloc+0x16e>
 801327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327e:	f383 8811 	msr	BASEPRI, r3
 8013282:	f3bf 8f6f 	isb	sy
 8013286:	f3bf 8f4f 	dsb	sy
 801328a:	60fb      	str	r3, [r7, #12]
 801328c:	e7fe      	b.n	801328c <pvPortMalloc+0x16c>
	return pvReturn;
 801328e:	69fb      	ldr	r3, [r7, #28]
}
 8013290:	4618      	mov	r0, r3
 8013292:	3728      	adds	r7, #40	; 0x28
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	20008b18 	.word	0x20008b18
 801329c:	20008b24 	.word	0x20008b24
 80132a0:	20008b1c 	.word	0x20008b1c
 80132a4:	20008b10 	.word	0x20008b10
 80132a8:	20008b20 	.word	0x20008b20

080132ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b086      	sub	sp, #24
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d046      	beq.n	801334c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80132be:	2308      	movs	r3, #8
 80132c0:	425b      	negs	r3, r3
 80132c2:	697a      	ldr	r2, [r7, #20]
 80132c4:	4413      	add	r3, r2
 80132c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80132cc:	693b      	ldr	r3, [r7, #16]
 80132ce:	685a      	ldr	r2, [r3, #4]
 80132d0:	4b20      	ldr	r3, [pc, #128]	; (8013354 <vPortFree+0xa8>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	4013      	ands	r3, r2
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d109      	bne.n	80132ee <vPortFree+0x42>
 80132da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132de:	f383 8811 	msr	BASEPRI, r3
 80132e2:	f3bf 8f6f 	isb	sy
 80132e6:	f3bf 8f4f 	dsb	sy
 80132ea:	60fb      	str	r3, [r7, #12]
 80132ec:	e7fe      	b.n	80132ec <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d009      	beq.n	801330a <vPortFree+0x5e>
 80132f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132fa:	f383 8811 	msr	BASEPRI, r3
 80132fe:	f3bf 8f6f 	isb	sy
 8013302:	f3bf 8f4f 	dsb	sy
 8013306:	60bb      	str	r3, [r7, #8]
 8013308:	e7fe      	b.n	8013308 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	685a      	ldr	r2, [r3, #4]
 801330e:	4b11      	ldr	r3, [pc, #68]	; (8013354 <vPortFree+0xa8>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	4013      	ands	r3, r2
 8013314:	2b00      	cmp	r3, #0
 8013316:	d019      	beq.n	801334c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d115      	bne.n	801334c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	685a      	ldr	r2, [r3, #4]
 8013324:	4b0b      	ldr	r3, [pc, #44]	; (8013354 <vPortFree+0xa8>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	43db      	mvns	r3, r3
 801332a:	401a      	ands	r2, r3
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013330:	f7fe fe60 	bl	8011ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	685a      	ldr	r2, [r3, #4]
 8013338:	4b07      	ldr	r3, [pc, #28]	; (8013358 <vPortFree+0xac>)
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	4413      	add	r3, r2
 801333e:	4a06      	ldr	r2, [pc, #24]	; (8013358 <vPortFree+0xac>)
 8013340:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013342:	6938      	ldr	r0, [r7, #16]
 8013344:	f000 f86c 	bl	8013420 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013348:	f7fe fe62 	bl	8012010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801334c:	bf00      	nop
 801334e:	3718      	adds	r7, #24
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	20008b24 	.word	0x20008b24
 8013358:	20008b1c 	.word	0x20008b1c

0801335c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801335c:	b480      	push	{r7}
 801335e:	b085      	sub	sp, #20
 8013360:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013366:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013368:	4b27      	ldr	r3, [pc, #156]	; (8013408 <prvHeapInit+0xac>)
 801336a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	f003 0307 	and.w	r3, r3, #7
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00c      	beq.n	8013390 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	3307      	adds	r3, #7
 801337a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	f023 0307 	bic.w	r3, r3, #7
 8013382:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013384:	68ba      	ldr	r2, [r7, #8]
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	1ad3      	subs	r3, r2, r3
 801338a:	4a1f      	ldr	r2, [pc, #124]	; (8013408 <prvHeapInit+0xac>)
 801338c:	4413      	add	r3, r2
 801338e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013394:	4a1d      	ldr	r2, [pc, #116]	; (801340c <prvHeapInit+0xb0>)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801339a:	4b1c      	ldr	r3, [pc, #112]	; (801340c <prvHeapInit+0xb0>)
 801339c:	2200      	movs	r2, #0
 801339e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	68ba      	ldr	r2, [r7, #8]
 80133a4:	4413      	add	r3, r2
 80133a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80133a8:	2208      	movs	r2, #8
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	1a9b      	subs	r3, r3, r2
 80133ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	f023 0307 	bic.w	r3, r3, #7
 80133b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	4a15      	ldr	r2, [pc, #84]	; (8013410 <prvHeapInit+0xb4>)
 80133bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80133be:	4b14      	ldr	r3, [pc, #80]	; (8013410 <prvHeapInit+0xb4>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	2200      	movs	r2, #0
 80133c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80133c6:	4b12      	ldr	r3, [pc, #72]	; (8013410 <prvHeapInit+0xb4>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	2200      	movs	r2, #0
 80133cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	68fa      	ldr	r2, [r7, #12]
 80133d6:	1ad2      	subs	r2, r2, r3
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80133dc:	4b0c      	ldr	r3, [pc, #48]	; (8013410 <prvHeapInit+0xb4>)
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	4a0a      	ldr	r2, [pc, #40]	; (8013414 <prvHeapInit+0xb8>)
 80133ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	685b      	ldr	r3, [r3, #4]
 80133f0:	4a09      	ldr	r2, [pc, #36]	; (8013418 <prvHeapInit+0xbc>)
 80133f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80133f4:	4b09      	ldr	r3, [pc, #36]	; (801341c <prvHeapInit+0xc0>)
 80133f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80133fa:	601a      	str	r2, [r3, #0]
}
 80133fc:	bf00      	nop
 80133fe:	3714      	adds	r7, #20
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr
 8013408:	20000b10 	.word	0x20000b10
 801340c:	20008b10 	.word	0x20008b10
 8013410:	20008b18 	.word	0x20008b18
 8013414:	20008b20 	.word	0x20008b20
 8013418:	20008b1c 	.word	0x20008b1c
 801341c:	20008b24 	.word	0x20008b24

08013420 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013428:	4b28      	ldr	r3, [pc, #160]	; (80134cc <prvInsertBlockIntoFreeList+0xac>)
 801342a:	60fb      	str	r3, [r7, #12]
 801342c:	e002      	b.n	8013434 <prvInsertBlockIntoFreeList+0x14>
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	60fb      	str	r3, [r7, #12]
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	687a      	ldr	r2, [r7, #4]
 801343a:	429a      	cmp	r2, r3
 801343c:	d8f7      	bhi.n	801342e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	68ba      	ldr	r2, [r7, #8]
 8013448:	4413      	add	r3, r2
 801344a:	687a      	ldr	r2, [r7, #4]
 801344c:	429a      	cmp	r2, r3
 801344e:	d108      	bne.n	8013462 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	685a      	ldr	r2, [r3, #4]
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	685b      	ldr	r3, [r3, #4]
 8013458:	441a      	add	r2, r3
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	68ba      	ldr	r2, [r7, #8]
 801346c:	441a      	add	r2, r3
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	429a      	cmp	r2, r3
 8013474:	d118      	bne.n	80134a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	4b15      	ldr	r3, [pc, #84]	; (80134d0 <prvInsertBlockIntoFreeList+0xb0>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	429a      	cmp	r2, r3
 8013480:	d00d      	beq.n	801349e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	685a      	ldr	r2, [r3, #4]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	441a      	add	r2, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	681a      	ldr	r2, [r3, #0]
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	601a      	str	r2, [r3, #0]
 801349c:	e008      	b.n	80134b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801349e:	4b0c      	ldr	r3, [pc, #48]	; (80134d0 <prvInsertBlockIntoFreeList+0xb0>)
 80134a0:	681a      	ldr	r2, [r3, #0]
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	601a      	str	r2, [r3, #0]
 80134a6:	e003      	b.n	80134b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80134b0:	68fa      	ldr	r2, [r7, #12]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d002      	beq.n	80134be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80134be:	bf00      	nop
 80134c0:	3714      	adds	r7, #20
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	20008b10 	.word	0x20008b10
 80134d0:	20008b18 	.word	0x20008b18

080134d4 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
    {
 80134dc:	4a04      	ldr	r2, [pc, #16]	; (80134f0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	601a      	str	r2, [r3, #0]
    }
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	4618      	mov	r0, r3
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr
 80134f0:	08023cf4 	.word	0x08023cf4

080134f4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
    }
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7ff ffe9 	bl	80134d4 <_ZN8touchgfx12FontProviderD1Ev>
 8013502:	2104      	movs	r1, #4
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f00d fa5c 	bl	80209c2 <_ZdlPvj>
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4618      	mov	r0, r3
 801350e:	3708      	adds	r7, #8
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}

08013514 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
 801351c:	460b      	mov	r3, r1
 801351e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8013520:	887b      	ldrh	r3, [r7, #2]
 8013522:	2b01      	cmp	r3, #1
 8013524:	d008      	beq.n	8013538 <_ZN23ApplicationFontProvider7getFontEt+0x24>
 8013526:	2b02      	cmp	r3, #2
 8013528:	d00b      	beq.n	8013542 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 801352a:	2b00      	cmp	r3, #0
 801352c:	d10e      	bne.n	801354c <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 801352e:	f002 fd2d 	bl	8015f8c <_ZN17TypedTextDatabase8getFontsEv>
 8013532:	4603      	mov	r3, r0
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	e00a      	b.n	801354e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8013538:	f002 fd28 	bl	8015f8c <_ZN17TypedTextDatabase8getFontsEv>
 801353c:	4603      	mov	r3, r0
 801353e:	685b      	ldr	r3, [r3, #4]
 8013540:	e005      	b.n	801354e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8013542:	f002 fd23 	bl	8015f8c <_ZN17TypedTextDatabase8getFontsEv>
 8013546:	4603      	mov	r3, r0
 8013548:	689b      	ldr	r3, [r3, #8]
 801354a:	e000      	b.n	801354e <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 801354c:	2300      	movs	r3, #0
    }
}
 801354e:	4618      	mov	r0, r3
 8013550:	3708      	adds	r7, #8
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
	...

08013558 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	4a05      	ldr	r2, [pc, #20]	; (8013578 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	601a      	str	r2, [r3, #0]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4618      	mov	r0, r3
 801356a:	f7ff ffb3 	bl	80134d4 <_ZN8touchgfx12FontProviderD1Ev>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	4618      	mov	r0, r3
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	08023ce0 	.word	0x08023ce0

0801357c <_ZN23ApplicationFontProviderD0Ev>:
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f7ff ffe7 	bl	8013558 <_ZN23ApplicationFontProviderD1Ev>
 801358a:	2104      	movs	r1, #4
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f00d fa18 	bl	80209c2 <_ZdlPvj>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4618      	mov	r0, r3
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}

0801359c <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 801359c:	b480      	push	{r7}
 801359e:	b083      	sub	sp, #12
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	4a04      	ldr	r2, [pc, #16]	; (80135b8 <_ZN8touchgfx4FontD1Ev+0x1c>)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	601a      	str	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4618      	mov	r0, r3
 80135ae:	370c      	adds	r7, #12
 80135b0:	46bd      	mov	sp, r7
 80135b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b6:	4770      	bx	lr
 80135b8:	080250b4 	.word	0x080250b4

080135bc <_ZN8touchgfx4FontD0Ev>:
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f7ff ffe9 	bl	801359c <_ZN8touchgfx4FontD1Ev>
 80135ca:	2110      	movs	r1, #16
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f00d f9f8 	bl	80209c2 <_ZdlPvj>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	4618      	mov	r0, r3
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getGlyph
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80135dc:	b590      	push	{r4, r7, lr}
 80135de:	b087      	sub	sp, #28
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	460b      	mov	r3, r1
 80135e6:	807b      	strh	r3, [r7, #2]
    {
        const uint8_t* dummyPixelDataPointer = 0;
 80135e8:	2300      	movs	r3, #0
 80135ea:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80135ec:	2300      	movs	r3, #0
 80135ee:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	3308      	adds	r3, #8
 80135f6:	681c      	ldr	r4, [r3, #0]
 80135f8:	f107 030f 	add.w	r3, r7, #15
 80135fc:	f107 0210 	add.w	r2, r7, #16
 8013600:	8879      	ldrh	r1, [r7, #2]
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	47a0      	blx	r4
 8013606:	6178      	str	r0, [r7, #20]
        return glyph;
 8013608:	697b      	ldr	r3, [r7, #20]
    }
 801360a:	4618      	mov	r0, r3
 801360c:	371c      	adds	r7, #28
 801360e:	46bd      	mov	sp, r7
 8013610:	bd90      	pop	{r4, r7, pc}

08013612 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     *        character, use the glyph for the character returned by this function. If 0 (zero)
     *        is returned, there is no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8013612:	b480      	push	{r7}
 8013614:	b083      	sub	sp, #12
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
    {
        return falllbackCharacter;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	895b      	ldrh	r3, [r3, #10]
    }
 801361e:	4618      	mov	r0, r3
 8013620:	370c      	adds	r7, #12
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr

0801362a <_ZNK8touchgfx4Font15getEllipsisCharEv>:
    *        Gets ellipsis character for the given font. This is the character which is used
    *        when truncating long lines.
    *
    * @return The ellipsis character for the typography.
    */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 801362a:	b480      	push	{r7}
 801362c:	b083      	sub	sp, #12
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	899b      	ldrh	r3, [r3, #12]
    }
 8013636:	4618      	mov	r0, r3
 8013638:	370c      	adds	r7, #12
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     *
     * @return The height in pixels of this font.
     */
    virtual uint16_t getFontHeight() const
 8013642:	b480      	push	{r7}
 8013644:	b083      	sub	sp, #12
 8013646:	af00      	add	r7, sp, #0
 8013648:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	889b      	ldrh	r3, [r3, #4]
    }
 801364e:	4618      	mov	r0, r3
 8013650:	370c      	adds	r7, #12
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr

0801365a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *        into account that certain characters (eg 'g') have pixels below the baseline,
     *        thus making the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    virtual uint16_t getMinimumTextHeight() const
 801365a:	b480      	push	{r7}
 801365c:	b083      	sub	sp, #12
 801365e:	af00      	add	r7, sp, #0
 8013660:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	889a      	ldrh	r2, [r3, #4]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	799b      	ldrb	r3, [r3, #6]
 801366a:	b29b      	uxth	r3, r3
 801366c:	4413      	add	r3, r2
 801366e:	b29b      	uxth	r3, r3
    }
 8013670:	4618      	mov	r0, r3
 8013672:	370c      	adds	r7, #12
 8013674:	46bd      	mov	sp, r7
 8013676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367a:	4770      	bx	lr

0801367c <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     *        Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    virtual uint8_t getBitsPerPixel() const
 801367c:	b480      	push	{r7}
 801367e:	b083      	sub	sp, #12
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	79db      	ldrb	r3, [r3, #7]
 8013688:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801368c:	b2db      	uxtb	r3, r3
    }
 801368e:	4618      	mov	r0, r3
 8013690:	370c      	adds	r7, #12
 8013692:	46bd      	mov	sp, r7
 8013694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013698:	4770      	bx	lr

0801369a <_ZNK8touchgfx4Font15getDataFormatA4Ev>:
     *
     *        Are the glyphs saved using ST A4 format.
     *
     * @return True if the font is stored using A4 format, false otherwise.
     */
    virtual uint8_t getDataFormatA4() const
 801369a:	b480      	push	{r7}
 801369c:	b083      	sub	sp, #12
 801369e:	af00      	add	r7, sp, #0
 80136a0:	6078      	str	r0, [r7, #4]
    {
        return a4;
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	79db      	ldrb	r3, [r3, #7]
 80136a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80136aa:	b2db      	uxtb	r3, r3
    }
 80136ac:	4618      	mov	r0, r3
 80136ae:	370c      	adds	r7, #12
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr

080136b8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
     *
     *        Gets GSUB table.
     *
     * @return The GSUB table or null if font has GSUB no table
     */
    virtual const uint16_t* getGSUBTable() const
 80136b8:	b480      	push	{r7}
 80136ba:	b083      	sub	sp, #12
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6a1b      	ldr	r3, [r3, #32]
    }
 80136c4:	4618      	mov	r0, r3
 80136c6:	370c      	adds	r7, #12
 80136c8:	46bd      	mov	sp, r7
 80136ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ce:	4770      	bx	lr

080136d0 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
 80136d8:	4a05      	ldr	r2, [pc, #20]	; (80136f0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	601a      	str	r2, [r3, #0]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7ff ff5b 	bl	801359c <_ZN8touchgfx4FontD1Ev>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	4618      	mov	r0, r3
 80136ea:	3708      	adds	r7, #8
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	08025170 	.word	0x08025170

080136f4 <_ZN8touchgfx9ConstFontD0Ev>:
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f7ff ffe7 	bl	80136d0 <_ZN8touchgfx9ConstFontD1Ev>
 8013702:	2118      	movs	r1, #24
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f00d f95c 	bl	80209c2 <_ZdlPvj>
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	4618      	mov	r0, r3
 801370e:	3708      	adds	r7, #8
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}

08013714 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8013714:	b580      	push	{r7, lr}
 8013716:	b082      	sub	sp, #8
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]
 801371c:	4a05      	ldr	r2, [pc, #20]	; (8013734 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	601a      	str	r2, [r3, #0]
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	4618      	mov	r0, r3
 8013726:	f7ff ffd3 	bl	80136d0 <_ZN8touchgfx9ConstFontD1Ev>
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	4618      	mov	r0, r3
 801372e:	3708      	adds	r7, #8
 8013730:	46bd      	mov	sp, r7
 8013732:	bd80      	pop	{r7, pc}
 8013734:	08023d08 	.word	0x08023d08

08013738 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7ff ffe7 	bl	8013714 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013746:	2124      	movs	r1, #36	; 0x24
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f00d f93a 	bl	80209c2 <_ZdlPvj>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	4618      	mov	r0, r3
 8013752:	3708      	adds	r7, #8
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>:
    uint16_t kerningTablePos() const
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
        return (((uint16_t)(flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10)) << 8) | (uint16_t)_kerningTablePos;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	7b5b      	ldrb	r3, [r3, #13]
 8013764:	021b      	lsls	r3, r3, #8
 8013766:	b21b      	sxth	r3, r3
 8013768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801376c:	b21a      	sxth	r2, r3
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	7adb      	ldrb	r3, [r3, #11]
 8013772:	b21b      	sxth	r3, r3
 8013774:	4313      	orrs	r3, r2
 8013776:	b21b      	sxth	r3, r3
 8013778:	b29b      	uxth	r3, r3
    }
 801377a:	4618      	mov	r0, r3
 801377c:	370c      	adds	r7, #12
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr
	...

08013788 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t dataFormatA4, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData) :
 8013788:	b580      	push	{r7, lr}
 801378a:	b08c      	sub	sp, #48	; 0x30
 801378c:	af08      	add	r7, sp, #32
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	4611      	mov	r1, r2
 8013794:	461a      	mov	r2, r3
 8013796:	460b      	mov	r3, r1
 8013798:	80fb      	strh	r3, [r7, #6]
 801379a:	4613      	mov	r3, r2
 801379c:	80bb      	strh	r3, [r7, #4]
    ConstFont(list, size, height, pixBelowBase, bitsPerPixel, dataFormatA4, maxLeft, maxRight, fallbackChar, ellipsisChar),
    glyphData(glyphDataInternalFlash),
    kerningData(kerningList),
    gsubTable(gsubData)
 801379e:	68f8      	ldr	r0, [r7, #12]
 80137a0:	88b9      	ldrh	r1, [r7, #4]
 80137a2:	88fa      	ldrh	r2, [r7, #6]
 80137a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80137a6:	9306      	str	r3, [sp, #24]
 80137a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80137aa:	9305      	str	r3, [sp, #20]
 80137ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80137b0:	9304      	str	r3, [sp, #16]
 80137b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80137b6:	9303      	str	r3, [sp, #12]
 80137b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80137bc:	9302      	str	r3, [sp, #8]
 80137be:	7f3b      	ldrb	r3, [r7, #28]
 80137c0:	9301      	str	r3, [sp, #4]
 80137c2:	7e3b      	ldrb	r3, [r7, #24]
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	460b      	mov	r3, r1
 80137c8:	68b9      	ldr	r1, [r7, #8]
 80137ca:	f007 fef5 	bl	801b5b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80137ce:	4a08      	ldr	r2, [pc, #32]	; (80137f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt+0x68>)
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	601a      	str	r2, [r3, #0]
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137d8:	619a      	str	r2, [r3, #24]
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137de:	61da      	str	r2, [r3, #28]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137e4:	621a      	str	r2, [r3, #32]
{
}
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	4618      	mov	r0, r3
 80137ea:	3710      	adds	r7, #16
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	08023d08 	.word	0x08023d08

080137f4 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80137f4:	b480      	push	{r7}
 80137f6:	b085      	sub	sp, #20
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	889b      	ldrh	r3, [r3, #4]
 8013808:	0adb      	lsrs	r3, r3, #11
 801380a:	b29b      	uxth	r3, r3
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	68fa      	ldr	r2, [r7, #12]
 8013810:	4413      	add	r3, r2
 8013812:	681a      	ldr	r2, [r3, #0]
 8013814:	683b      	ldr	r3, [r7, #0]
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	4413      	add	r3, r2
}
 801381a:	4618      	mov	r0, r3
 801381c:	3714      	adds	r7, #20
 801381e:	46bd      	mov	sp, r7
 8013820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013824:	4770      	bx	lr

08013826 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8013826:	b580      	push	{r7, lr}
 8013828:	b086      	sub	sp, #24
 801382a:	af00      	add	r7, sp, #0
 801382c:	60f8      	str	r0, [r7, #12]
 801382e:	460b      	mov	r3, r1
 8013830:	607a      	str	r2, [r7, #4]
 8013832:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d003      	beq.n	8013842 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	7b1b      	ldrb	r3, [r3, #12]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8013842:	2300      	movs	r3, #0
 8013844:	e023      	b.n	801388e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    }

    uint16_t kerningTablePos = glyph->kerningTablePos();
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f7ff ff86 	bl	8013758 <_ZNK8touchgfx9GlyphNode15kerningTablePosEv>
 801384c:	4603      	mov	r3, r0
 801384e:	82bb      	strh	r3, [r7, #20]
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8013850:	8abb      	ldrh	r3, [r7, #20]
 8013852:	82fb      	strh	r3, [r7, #22]
 8013854:	8afa      	ldrh	r2, [r7, #22]
 8013856:	8abb      	ldrh	r3, [r7, #20]
 8013858:	6879      	ldr	r1, [r7, #4]
 801385a:	7b09      	ldrb	r1, [r1, #12]
 801385c:	440b      	add	r3, r1
 801385e:	429a      	cmp	r2, r3
 8013860:	da14      	bge.n	801388c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
    {
        if (prevChar == kerningData[i].unicodePrevChar)
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	69da      	ldr	r2, [r3, #28]
 8013866:	8afb      	ldrh	r3, [r7, #22]
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	4413      	add	r3, r2
 801386c:	881b      	ldrh	r3, [r3, #0]
 801386e:	897a      	ldrh	r2, [r7, #10]
 8013870:	429a      	cmp	r2, r3
 8013872:	d107      	bne.n	8013884 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x5e>
        {
            return kerningData[i].distance;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	69da      	ldr	r2, [r3, #28]
 8013878:	8afb      	ldrh	r3, [r7, #22]
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	4413      	add	r3, r2
 801387e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013882:	e004      	b.n	801388e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x68>
    for (uint16_t i = kerningTablePos; i < kerningTablePos + glyph->kerningTableSize; i++)
 8013884:	8afb      	ldrh	r3, [r7, #22]
 8013886:	3301      	adds	r3, #1
 8013888:	82fb      	strh	r3, [r7, #22]
 801388a:	e7e3      	b.n	8013854 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x2e>
        }
    }
    return 0;
 801388c:	2300      	movs	r3, #0
}
 801388e:	4618      	mov	r0, r3
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}
	...

08013898 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 95, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 8013898:	b580      	push	{r7, lr}
 801389a:	af00      	add	r7, sp, #0
 801389c:	4801      	ldr	r0, [pc, #4]	; (80138a4 <__tcf_0+0xc>)
 801389e:	f7ff ff39 	bl	8013714 <_ZN8touchgfx13GeneratedFontD1Ev>
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	20008b28 	.word	0x20008b28

080138a8 <_Z23getFont_verdana_10_4bppv>:
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08a      	sub	sp, #40	; 0x28
 80138ac:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 95, 10, 2, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0);
 80138ae:	4b15      	ldr	r3, [pc, #84]	; (8013904 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f003 0301 	and.w	r3, r3, #1
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d11f      	bne.n	80138fa <_Z23getFont_verdana_10_4bppv+0x52>
 80138ba:	2300      	movs	r3, #0
 80138bc:	9309      	str	r3, [sp, #36]	; 0x24
 80138be:	2300      	movs	r3, #0
 80138c0:	9308      	str	r3, [sp, #32]
 80138c2:	233f      	movs	r3, #63	; 0x3f
 80138c4:	9307      	str	r3, [sp, #28]
 80138c6:	4b10      	ldr	r3, [pc, #64]	; (8013908 <_Z23getFont_verdana_10_4bppv+0x60>)
 80138c8:	9306      	str	r3, [sp, #24]
 80138ca:	4b10      	ldr	r3, [pc, #64]	; (801390c <_Z23getFont_verdana_10_4bppv+0x64>)
 80138cc:	9305      	str	r3, [sp, #20]
 80138ce:	2301      	movs	r3, #1
 80138d0:	9304      	str	r3, [sp, #16]
 80138d2:	2301      	movs	r3, #1
 80138d4:	9303      	str	r3, [sp, #12]
 80138d6:	2301      	movs	r3, #1
 80138d8:	9302      	str	r3, [sp, #8]
 80138da:	2304      	movs	r3, #4
 80138dc:	9301      	str	r3, [sp, #4]
 80138de:	2302      	movs	r3, #2
 80138e0:	9300      	str	r3, [sp, #0]
 80138e2:	230a      	movs	r3, #10
 80138e4:	225f      	movs	r2, #95	; 0x5f
 80138e6:	490a      	ldr	r1, [pc, #40]	; (8013910 <_Z23getFont_verdana_10_4bppv+0x68>)
 80138e8:	480a      	ldr	r0, [pc, #40]	; (8013914 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80138ea:	f7ff ff4d 	bl	8013788 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80138ee:	4b05      	ldr	r3, [pc, #20]	; (8013904 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80138f0:	2201      	movs	r2, #1
 80138f2:	601a      	str	r2, [r3, #0]
 80138f4:	4808      	ldr	r0, [pc, #32]	; (8013918 <_Z23getFont_verdana_10_4bppv+0x70>)
 80138f6:	f00d f89f 	bl	8020a38 <atexit>
    return verdana_10_4bpp;
 80138fa:	4b06      	ldr	r3, [pc, #24]	; (8013914 <_Z23getFont_verdana_10_4bppv+0x6c>)
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}
 8013902:	bf00      	nop
 8013904:	20008b4c 	.word	0x20008b4c
 8013908:	0802f2b8 	.word	0x0802f2b8
 801390c:	08023d54 	.word	0x08023d54
 8013910:	0802f774 	.word	0x0802f774
 8013914:	20008b28 	.word	0x20008b28
 8013918:	08013899 	.word	0x08013899

0801391c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 801391c:	b580      	push	{r7, lr}
 801391e:	af00      	add	r7, sp, #0
 8013920:	4801      	ldr	r0, [pc, #4]	; (8013928 <__tcf_0+0xc>)
 8013922:	f7ff fef7 	bl	8013714 <_ZN8touchgfx13GeneratedFontD1Ev>
 8013926:	bd80      	pop	{r7, pc}
 8013928:	20008b50 	.word	0x20008b50

0801392c <_Z23getFont_verdana_20_4bppv>:
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b08a      	sub	sp, #40	; 0x28
 8013930:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0);
 8013932:	4b15      	ldr	r3, [pc, #84]	; (8013988 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	f003 0301 	and.w	r3, r3, #1
 801393a:	2b00      	cmp	r3, #0
 801393c:	d11f      	bne.n	801397e <_Z23getFont_verdana_20_4bppv+0x52>
 801393e:	2300      	movs	r3, #0
 8013940:	9309      	str	r3, [sp, #36]	; 0x24
 8013942:	2300      	movs	r3, #0
 8013944:	9308      	str	r3, [sp, #32]
 8013946:	233f      	movs	r3, #63	; 0x3f
 8013948:	9307      	str	r3, [sp, #28]
 801394a:	4b10      	ldr	r3, [pc, #64]	; (801398c <_Z23getFont_verdana_20_4bppv+0x60>)
 801394c:	9306      	str	r3, [sp, #24]
 801394e:	4b10      	ldr	r3, [pc, #64]	; (8013990 <_Z23getFont_verdana_20_4bppv+0x64>)
 8013950:	9305      	str	r3, [sp, #20]
 8013952:	2301      	movs	r3, #1
 8013954:	9304      	str	r3, [sp, #16]
 8013956:	2301      	movs	r3, #1
 8013958:	9303      	str	r3, [sp, #12]
 801395a:	2301      	movs	r3, #1
 801395c:	9302      	str	r3, [sp, #8]
 801395e:	2304      	movs	r3, #4
 8013960:	9301      	str	r3, [sp, #4]
 8013962:	2304      	movs	r3, #4
 8013964:	9300      	str	r3, [sp, #0]
 8013966:	2314      	movs	r3, #20
 8013968:	225f      	movs	r2, #95	; 0x5f
 801396a:	490a      	ldr	r1, [pc, #40]	; (8013994 <_Z23getFont_verdana_20_4bppv+0x68>)
 801396c:	480a      	ldr	r0, [pc, #40]	; (8013998 <_Z23getFont_verdana_20_4bppv+0x6c>)
 801396e:	f7ff ff0b 	bl	8013788 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 8013972:	4b05      	ldr	r3, [pc, #20]	; (8013988 <_Z23getFont_verdana_20_4bppv+0x5c>)
 8013974:	2201      	movs	r2, #1
 8013976:	601a      	str	r2, [r3, #0]
 8013978:	4808      	ldr	r0, [pc, #32]	; (801399c <_Z23getFont_verdana_20_4bppv+0x70>)
 801397a:	f00d f85d 	bl	8020a38 <atexit>
    return verdana_20_4bpp;
 801397e:	4b06      	ldr	r3, [pc, #24]	; (8013998 <_Z23getFont_verdana_20_4bppv+0x6c>)
}
 8013980:	4618      	mov	r0, r3
 8013982:	46bd      	mov	sp, r7
 8013984:	bd80      	pop	{r7, pc}
 8013986:	bf00      	nop
 8013988:	20008b74 	.word	0x20008b74
 801398c:	0802f2ec 	.word	0x0802f2ec
 8013990:	08023d58 	.word	0x08023d58
 8013994:	0802fca8 	.word	0x0802fca8
 8013998:	20008b50 	.word	0x20008b50
 801399c:	0801391d 	.word	0x0801391d

080139a0 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80139a0:	b580      	push	{r7, lr}
 80139a2:	af00      	add	r7, sp, #0
 80139a4:	4801      	ldr	r0, [pc, #4]	; (80139ac <__tcf_0+0xc>)
 80139a6:	f7ff feb5 	bl	8013714 <_ZN8touchgfx13GeneratedFontD1Ev>
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	20008b78 	.word	0x20008b78

080139b0 <_Z23getFont_verdana_40_4bppv>:
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b08a      	sub	sp, #40	; 0x28
 80139b4:	af0a      	add	r7, sp, #40	; 0x28
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 40, 8, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0);
 80139b6:	4b15      	ldr	r3, [pc, #84]	; (8013a0c <_Z23getFont_verdana_40_4bppv+0x5c>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 0301 	and.w	r3, r3, #1
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d11f      	bne.n	8013a02 <_Z23getFont_verdana_40_4bppv+0x52>
 80139c2:	2300      	movs	r3, #0
 80139c4:	9309      	str	r3, [sp, #36]	; 0x24
 80139c6:	2300      	movs	r3, #0
 80139c8:	9308      	str	r3, [sp, #32]
 80139ca:	233f      	movs	r3, #63	; 0x3f
 80139cc:	9307      	str	r3, [sp, #28]
 80139ce:	4b10      	ldr	r3, [pc, #64]	; (8013a10 <_Z23getFont_verdana_40_4bppv+0x60>)
 80139d0:	9306      	str	r3, [sp, #24]
 80139d2:	4b10      	ldr	r3, [pc, #64]	; (8013a14 <_Z23getFont_verdana_40_4bppv+0x64>)
 80139d4:	9305      	str	r3, [sp, #20]
 80139d6:	2302      	movs	r3, #2
 80139d8:	9304      	str	r3, [sp, #16]
 80139da:	2302      	movs	r3, #2
 80139dc:	9303      	str	r3, [sp, #12]
 80139de:	2301      	movs	r3, #1
 80139e0:	9302      	str	r3, [sp, #8]
 80139e2:	2304      	movs	r3, #4
 80139e4:	9301      	str	r3, [sp, #4]
 80139e6:	2308      	movs	r3, #8
 80139e8:	9300      	str	r3, [sp, #0]
 80139ea:	2328      	movs	r3, #40	; 0x28
 80139ec:	225f      	movs	r2, #95	; 0x5f
 80139ee:	490a      	ldr	r1, [pc, #40]	; (8013a18 <_Z23getFont_verdana_40_4bppv+0x68>)
 80139f0:	480a      	ldr	r0, [pc, #40]	; (8013a1c <_Z23getFont_verdana_40_4bppv+0x6c>)
 80139f2:	f7ff fec9 	bl	8013788 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKt>
 80139f6:	4b05      	ldr	r3, [pc, #20]	; (8013a0c <_Z23getFont_verdana_40_4bppv+0x5c>)
 80139f8:	2201      	movs	r2, #1
 80139fa:	601a      	str	r2, [r3, #0]
 80139fc:	4808      	ldr	r0, [pc, #32]	; (8013a20 <_Z23getFont_verdana_40_4bppv+0x70>)
 80139fe:	f00d f81b 	bl	8020a38 <atexit>
    return verdana_40_4bpp;
 8013a02:	4b06      	ldr	r3, [pc, #24]	; (8013a1c <_Z23getFont_verdana_40_4bppv+0x6c>)
}
 8013a04:	4618      	mov	r0, r3
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bd80      	pop	{r7, pc}
 8013a0a:	bf00      	nop
 8013a0c:	20008b9c 	.word	0x20008b9c
 8013a10:	0802f490 	.word	0x0802f490
 8013a14:	08023d5c 	.word	0x08023d5c
 8013a18:	080301dc 	.word	0x080301dc
 8013a1c:	20008b78 	.word	0x20008b78
 8013a20:	080139a1 	.word	0x080139a1

08013a24 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8013a24:	b480      	push	{r7}
 8013a26:	b083      	sub	sp, #12
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
 8013a2c:	6039      	str	r1, [r7, #0]
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8013a3c:	b480      	push	{r7}
 8013a3e:	b083      	sub	sp, #12
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	6039      	str	r1, [r7, #0]
    {
    }
 8013a46:	bf00      	nop
 8013a48:	370c      	adds	r7, #12
 8013a4a:	46bd      	mov	sp, r7
 8013a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a50:	4770      	bx	lr

08013a52 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8013a52:	b480      	push	{r7}
 8013a54:	b083      	sub	sp, #12
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
 8013a5a:	6039      	str	r1, [r7, #0]
    {
    }
 8013a5c:	bf00      	nop
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a66:	4770      	bx	lr

08013a68 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8013a68:	b480      	push	{r7}
 8013a6a:	b083      	sub	sp, #12
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
 8013a70:	6039      	str	r1, [r7, #0]
    {
    }
 8013a72:	bf00      	nop
 8013a74:	370c      	adds	r7, #12
 8013a76:	46bd      	mov	sp, r7
 8013a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a7c:	4770      	bx	lr

08013a7e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8013a7e:	b480      	push	{r7}
 8013a80:	b083      	sub	sp, #12
 8013a82:	af00      	add	r7, sp, #0
 8013a84:	6078      	str	r0, [r7, #4]
 8013a86:	460b      	mov	r3, r1
 8013a88:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013a8a:	bf00      	nop
 8013a8c:	370c      	adds	r7, #12
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr

08013a96 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8013a96:	b480      	push	{r7}
 8013a98:	b083      	sub	sp, #12
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	6078      	str	r0, [r7, #4]
    {
    }
 8013a9e:	bf00      	nop
 8013aa0:	370c      	adds	r7, #12
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa8:	4770      	bx	lr

08013aaa <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 8013aaa:	b480      	push	{r7}
 8013aac:	b083      	sub	sp, #12
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
    {
    }
 8013ab2:	bf00      	nop
 8013ab4:	370c      	adds	r7, #12
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr
	...

08013ac0 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 8013ac0:	b480      	push	{r7}
 8013ac2:	b083      	sub	sp, #12
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
    {
 8013ac8:	4a04      	ldr	r2, [pc, #16]	; (8013adc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	601a      	str	r2, [r3, #0]
    }
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	370c      	adds	r7, #12
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr
 8013adc:	08023e50 	.word	0x08023e50

08013ae0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b082      	sub	sp, #8
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
    }
 8013ae8:	6878      	ldr	r0, [r7, #4]
 8013aea:	f7ff ffe9 	bl	8013ac0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8013aee:	2104      	movs	r1, #4
 8013af0:	6878      	ldr	r0, [r7, #4]
 8013af2:	f00c ff66 	bl	80209c2 <_ZdlPvj>
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	4618      	mov	r0, r3
 8013afa:	3708      	adds	r7, #8
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}

08013b00 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 8013b00:	b480      	push	{r7}
 8013b02:	b083      	sub	sp, #12
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 8013b08:	4a07      	ldr	r2, [pc, #28]	; (8013b28 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	601a      	str	r2, [r3, #0]
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2200      	movs	r2, #0
 8013b12:	605a      	str	r2, [r3, #4]
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	2200      	movs	r2, #0
 8013b18:	721a      	strb	r2, [r3, #8]
    {
    }
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	370c      	adds	r7, #12
 8013b20:	46bd      	mov	sp, r7
 8013b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b26:	4770      	bx	lr
 8013b28:	08023e30 	.word	0x08023e30

08013b2c <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
    {
 8013b34:	4a04      	ldr	r2, [pc, #16]	; (8013b48 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	601a      	str	r2, [r3, #0]
    }
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	370c      	adds	r7, #12
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr
 8013b48:	08023e30 	.word	0x08023e30

08013b4c <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b082      	sub	sp, #8
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
    }
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f7ff ffe9 	bl	8013b2c <_ZN8touchgfx10TransitionD1Ev>
 8013b5a:	210c      	movs	r1, #12
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f00c ff30 	bl	80209c2 <_ZdlPvj>
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
 8013b74:	bf00      	nop
 8013b76:	370c      	adds	r7, #12
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr

08013b80 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 8013b80:	b480      	push	{r7}
 8013b82:	b083      	sub	sp, #12
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	6078      	str	r0, [r7, #4]
 8013b88:	bf00      	nop
 8013b8a:	370c      	adds	r7, #12
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b92:	4770      	bx	lr

08013b94 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	bf00      	nop
 8013b9e:	370c      	adds	r7, #12
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba6:	4770      	bx	lr

08013ba8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8013ba8:	b480      	push	{r7}
 8013baa:	b083      	sub	sp, #12
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	683a      	ldr	r2, [r7, #0]
 8013bb6:	605a      	str	r2, [r3, #4]
    }
 8013bb8:	bf00      	nop
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	460b      	mov	r3, r1
 8013bce:	70fb      	strb	r3, [r7, #3]
    {
    }
 8013bd0:	bf00      	nop
 8013bd2:	370c      	adds	r7, #12
 8013bd4:	46bd      	mov	sp, r7
 8013bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
    virtual ~GenericCallback()
 8013bdc:	b480      	push	{r7}
 8013bde:	b083      	sub	sp, #12
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
    {
 8013be4:	4a04      	ldr	r2, [pc, #16]	; (8013bf8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	601a      	str	r2, [r3, #0]
    }
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	4618      	mov	r0, r3
 8013bee:	370c      	adds	r7, #12
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf6:	4770      	bx	lr
 8013bf8:	08023e18 	.word	0x08023e18

08013bfc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
    }
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7ff ffe9 	bl	8013bdc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013c0a:	2104      	movs	r1, #4
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f00c fed8 	bl	80209c2 <_ZdlPvj>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	4618      	mov	r0, r3
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	4a05      	ldr	r2, [pc, #20]	; (8013c3c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	601a      	str	r2, [r3, #0]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7ff ff47 	bl	8013ac0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	4618      	mov	r0, r3
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	08024f88 	.word	0x08024f88

08013c40 <_ZN8touchgfx11ApplicationD0Ev>:
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7ff ffe7 	bl	8013c1c <_ZN8touchgfx11ApplicationD1Ev>
 8013c4e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f00c feb5 	bl	80209c2 <_ZdlPvj>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
	...

08013c64 <_ZN8touchgfx14MVPApplicationC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    MVPApplication() :
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
        currentPresenter(0),
        pendingScreenTransitionCallback(0)
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f006 ffa6 	bl	801abc0 <_ZN8touchgfx11ApplicationC1Ev>
 8013c74:	4a09      	ldr	r2, [pc, #36]	; (8013c9c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	601a      	str	r2, [r3, #0]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2200      	movs	r2, #0
 8013c86:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    {
        instance = this;
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	4a04      	ldr	r2, [pc, #16]	; (8013ca0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8013c8e:	6013      	str	r3, [r2, #0]
    }
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	4618      	mov	r0, r3
 8013c94:	3708      	adds	r7, #8
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	08023ddc 	.word	0x08023ddc
 8013ca0:	2001a90c 	.word	0x2001a90c

08013ca4 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b082      	sub	sp, #8
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
 8013cac:	4a05      	ldr	r2, [pc, #20]	; (8013cc4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	601a      	str	r2, [r3, #0]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7ff ffb1 	bl	8013c1c <_ZN8touchgfx11ApplicationD1Ev>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	08023ddc 	.word	0x08023ddc

08013cc8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	6878      	ldr	r0, [r7, #4]
 8013cd2:	f7ff ffe7 	bl	8013ca4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8013cd6:	f44f 719c 	mov.w	r1, #312	; 0x138
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f00c fe71 	bl	80209c2 <_ZdlPvj>
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3708      	adds	r7, #8
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b082      	sub	sp, #8
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 f804 	bl	8013d00 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8013cf8:	bf00      	nop
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d00f      	beq.n	8013d32 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	330c      	adds	r3, #12
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	4610      	mov	r0, r2
 8013d26:	4798      	blx	r3
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d001      	beq.n	8013d32 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8013d2e:	2301      	movs	r3, #1
 8013d30:	e000      	b.n	8013d34 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8013d32:	2300      	movs	r3, #0
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d00e      	beq.n	8013d56 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	3308      	adds	r3, #8
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4610      	mov	r0, r2
 8013d4c:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8013d56:	bf00      	nop
 8013d58:	3708      	adds	r7, #8
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	bd80      	pop	{r7, pc}

08013d5e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 8013d5e:	b580      	push	{r7, lr}
 8013d60:	b084      	sub	sp, #16
 8013d62:	af00      	add	r7, sp, #0
 8013d64:	60f8      	str	r0, [r7, #12]
 8013d66:	60b9      	str	r1, [r7, #8]
 8013d68:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 8013d6a:	f006 fec3 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	4618      	mov	r0, r3
 8013d72:	f006 ff0c 	bl	801ab8e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d008      	beq.n	8013d90 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	330c      	adds	r3, #12
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	4610      	mov	r0, r2
 8013d8e:	4798      	blx	r3
    }
    if (*currentTrans)
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d007      	beq.n	8013da8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4610      	mov	r0, r2
 8013da6:	4798      	blx	r3
    }
    if (*currentScreen)
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d008      	beq.n	8013dc2 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	681a      	ldr	r2, [r3, #0]
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	3314      	adds	r3, #20
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	4610      	mov	r0, r2
 8013dc0:	4798      	blx	r3
    }
    if (*currentPresenter)
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d008      	beq.n	8013ddc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 8013dca:	68bb      	ldr	r3, [r7, #8]
 8013dcc:	681a      	ldr	r2, [r3, #0]
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	3304      	adds	r3, #4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	4610      	mov	r0, r2
 8013dda:	4798      	blx	r3
    }
    if (*currentScreen)
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d007      	beq.n	8013df4 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	681a      	ldr	r2, [r3, #0]
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4610      	mov	r0, r2
 8013df2:	4798      	blx	r3
    }
    if (*currentPresenter)
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d008      	beq.n	8013e0e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	3308      	adds	r3, #8
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	4610      	mov	r0, r2
 8013e0c:	4798      	blx	r3
    }
}
 8013e0e:	bf00      	nop
 8013e10:	3710      	adds	r7, #16
 8013e12:	46bd      	mov	sp, r7
 8013e14:	bd80      	pop	{r7, pc}

08013e16 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 8013e16:	b580      	push	{r7, lr}
 8013e18:	b084      	sub	sp, #16
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	60f8      	str	r0, [r7, #12]
 8013e1e:	60b9      	str	r1, [r7, #8]
 8013e20:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	330c      	adds	r3, #12
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	4798      	blx	r3
    newPresenter->activate();
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	68b8      	ldr	r0, [r7, #8]
 8013e36:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8013e38:	6879      	ldr	r1, [r7, #4]
 8013e3a:	68f8      	ldr	r0, [r7, #12]
 8013e3c:	f007 ffc4 	bl	801bdc8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	3310      	adds	r3, #16
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	4798      	blx	r3

    Application::getInstance()->draw();
 8013e4c:	f006 fe52 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 8013e50:	4602      	mov	r2, r0
 8013e52:	6813      	ldr	r3, [r2, #0]
 8013e54:	3328      	adds	r3, #40	; 0x28
 8013e56:	681b      	ldr	r3, [r3, #0]
 8013e58:	4610      	mov	r0, r2
 8013e5a:	4798      	blx	r3
}
 8013e5c:	bf00      	nop
 8013e5e:	3710      	adds	r7, #16
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 8013e64:	b480      	push	{r7}
 8013e66:	b083      	sub	sp, #12
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	683a      	ldr	r2, [r7, #0]
 8013e72:	605a      	str	r2, [r3, #4]
    }
 8013e74:	bf00      	nop
 8013e76:	370c      	adds	r7, #12
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
 8013e88:	4a08      	ldr	r2, [pc, #32]	; (8013eac <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	601a      	str	r2, [r3, #0]
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013e94:	4618      	mov	r0, r3
 8013e96:	f000 fa5b 	bl	8014350 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	f7ff ff01 	bl	8013ca4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	08023d88 	.word	0x08023d88

08013eb0 <_ZN23FrontendApplicationBaseD0Ev>:
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b082      	sub	sp, #8
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f7ff ffe1 	bl	8013e80 <_ZN23FrontendApplicationBaseD1Ev>
 8013ebe:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f00c fd7d 	bl	80209c2 <_ZdlPvj>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	3708      	adds	r7, #8
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
	...

08013ed4 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	4618      	mov	r0, r3
 8013ee0:	f7ff fe0e 	bl	8013b00 <_ZN8touchgfx10TransitionC1Ev>
 8013ee4:	4a03      	ldr	r2, [pc, #12]	; (8013ef4 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	601a      	str	r2, [r3, #0]
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}
 8013ef4:	08023d68 	.word	0x08023d68

08013ef8 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b082      	sub	sp, #8
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	4a05      	ldr	r2, [pc, #20]	; (8013f18 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	601a      	str	r2, [r3, #0]
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7ff fe0f 	bl	8013b2c <_ZN8touchgfx10TransitionD1Ev>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	4618      	mov	r0, r3
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	08023d68 	.word	0x08023d68

08013f1c <_ZN8touchgfx12NoTransitionD0Ev>:
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b082      	sub	sp, #8
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f7ff ffe7 	bl	8013ef8 <_ZN8touchgfx12NoTransitionD1Ev>
 8013f2a:	210c      	movs	r1, #12
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f00c fd48 	bl	80209c2 <_ZdlPvj>
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	4618      	mov	r0, r3
 8013f36:	3708      	adds	r7, #8
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}

08013f3c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 8013f3c:	b480      	push	{r7}
 8013f3e:	b083      	sub	sp, #12
 8013f40:	af00      	add	r7, sp, #0
 8013f42:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2201      	movs	r2, #1
 8013f48:	721a      	strb	r2, [r3, #8]
    }
 8013f4a:	bf00      	nop
 8013f4c:	370c      	adds	r7, #12
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f54:	4770      	bx	lr

08013f56 <_ZN13ModelListener4bindEP5Model>:
	virtual void setui_log_append(const char* str) {};
    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 8013f56:	b480      	push	{r7}
 8013f58:	b083      	sub	sp, #12
 8013f5a:	af00      	add	r7, sp, #0
 8013f5c:	6078      	str	r0, [r7, #4]
 8013f5e:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	683a      	ldr	r2, [r7, #0]
 8013f64:	605a      	str	r2, [r3, #4]
    }
 8013f66:	bf00      	nop
 8013f68:	370c      	adds	r7, #12
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f70:	4770      	bx	lr
	...

08013f74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7ff fe6e 	bl	8013c64 <_ZN8touchgfx14MVPApplicationC1Ev>
 8013f88:	4a10      	ldr	r2, [pc, #64]	; (8013fcc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	601a      	str	r2, [r3, #0]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8013f94:	4618      	mov	r0, r3
 8013f96:	f000 f899 	bl	80140cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	68ba      	ldr	r2, [r7, #8]
 8013fa6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8013faa:	f7f5 fc41 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 8013fae:	4602      	mov	r2, r0
 8013fb0:	6813      	ldr	r3, [r2, #0]
 8013fb2:	3308      	adds	r3, #8
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	2101      	movs	r1, #1
 8013fb8:	4610      	mov	r0, r2
 8013fba:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	f001 ff6d 	bl	8015e9c <_ZN8touchgfx5Texts11setLanguageEt>
}
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3710      	adds	r7, #16
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	08023d88 	.word	0x08023d88

08013fd0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8013fd0:	b480      	push	{r7}
 8013fd2:	b083      	sub	sp, #12
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	4618      	mov	r0, r3
 8013fde:	370c      	adds	r7, #12
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe6:	4770      	bx	lr

08013fe8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	6039      	str	r1, [r7, #0]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	4611      	mov	r1, r2
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7ff ffe9 	bl	8013fd0 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	685a      	ldr	r2, [r3, #4]
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	605a      	str	r2, [r3, #4]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	683a      	ldr	r2, [r7, #0]
 801400a:	3308      	adds	r3, #8
 801400c:	3208      	adds	r2, #8
 801400e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014012:	e883 0003 	stmia.w	r3, {r0, r1}
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	4618      	mov	r0, r3
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}

08014020 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8014020:	b590      	push	{r4, r7, lr}
 8014022:	b089      	sub	sp, #36	; 0x24
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801402e:	4b10      	ldr	r3, [pc, #64]	; (8014070 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8014030:	61bb      	str	r3, [r7, #24]
 8014032:	2300      	movs	r3, #0
 8014034:	61fb      	str	r3, [r7, #28]
 8014036:	f107 0008 	add.w	r0, r7, #8
 801403a:	f107 0318 	add.w	r3, r7, #24
 801403e:	cb0c      	ldmia	r3, {r2, r3}
 8014040:	6879      	ldr	r1, [r7, #4]
 8014042:	f000 f85f 	bl	8014104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8014046:	f107 0308 	add.w	r3, r7, #8
 801404a:	4619      	mov	r1, r3
 801404c:	4620      	mov	r0, r4
 801404e:	f7ff ffcb 	bl	8013fe8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8014052:	f107 0308 	add.w	r3, r7, #8
 8014056:	4618      	mov	r0, r3
 8014058:	f000 f97a 	bl	8014350 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8014068:	bf00      	nop
 801406a:	3724      	adds	r7, #36	; 0x24
 801406c:	46bd      	mov	sp, r7
 801406e:	bd90      	pop	{r4, r7, pc}
 8014070:	08014075 	.word	0x08014075

08014074 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af02      	add	r7, sp, #8
 801407a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f503 7198 	add.w	r1, r3, #304	; 0x130
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8014088:	461a      	mov	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014090:	9300      	str	r3, [sp, #0]
 8014092:	4b04      	ldr	r3, [pc, #16]	; (80140a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8014094:	4804      	ldr	r0, [pc, #16]	; (80140a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8014096:	f000 f855 	bl	8014144 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801409a:	bf00      	nop
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop
 80140a4:	2001a908 	.word	0x2001a908
 80140a8:	2001a904 	.word	0x2001a904

080140ac <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80140ac:	b480      	push	{r7}
 80140ae:	b083      	sub	sp, #12
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
 80140b4:	4a04      	ldr	r2, [pc, #16]	; (80140c8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	370c      	adds	r7, #12
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr
 80140c8:	08023e18 	.word	0x08023e18

080140cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Initializes an empty callback.
     */
    Callback() : pobject(0), pmemfun_0(0) { }
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7ff ffe8 	bl	80140ac <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 80140dc:	4a08      	ldr	r2, [pc, #32]	; (8014100 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2200      	movs	r2, #0
 80140e6:	605a      	str	r2, [r3, #4]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	609a      	str	r2, [r3, #8]
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	2200      	movs	r2, #0
 80140f2:	60da      	str	r2, [r3, #12]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	4618      	mov	r0, r3
 80140f8:	3708      	adds	r7, #8
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	08023dc4 	.word	0x08023dc4

08014104 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pobject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function
     *                       takes zero arguments.
     */
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	4639      	mov	r1, r7
 8014110:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	4618      	mov	r0, r3
 8014118:	f7ff ffc8 	bl	80140ac <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801411c:	4a08      	ldr	r2, [pc, #32]	; (8014140 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	68ba      	ldr	r2, [r7, #8]
 8014126:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	3308      	adds	r3, #8
 801412c:	463a      	mov	r2, r7
 801412e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014132:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	4618      	mov	r0, r3
 801413a:	3710      	adds	r7, #16
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}
 8014140:	08023dc4 	.word	0x08023dc4

08014144 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8014144:	b590      	push	{r4, r7, lr}
 8014146:	b089      	sub	sp, #36	; 0x24
 8014148:	af00      	add	r7, sp, #0
 801414a:	60f8      	str	r0, [r7, #12]
 801414c:	60b9      	str	r1, [r7, #8]
 801414e:	607a      	str	r2, [r7, #4]
 8014150:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	689a      	ldr	r2, [r3, #8]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	689b      	ldr	r3, [r3, #8]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	3320      	adds	r3, #32
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	4610      	mov	r0, r2
 8014162:	4798      	blx	r3
 8014164:	4602      	mov	r2, r0
 8014166:	4b4f      	ldr	r3, [pc, #316]	; (80142a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 8014168:	429a      	cmp	r2, r3
 801416a:	d805      	bhi.n	8014178 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801416c:	4b4e      	ldr	r3, [pc, #312]	; (80142a8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801416e:	4a4f      	ldr	r2, [pc, #316]	; (80142ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014170:	21c2      	movs	r1, #194	; 0xc2
 8014172:	484f      	ldr	r0, [pc, #316]	; (80142b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 8014174:	f00c fc42 	bl	80209fc <__assert_func>
 8014178:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	685a      	ldr	r2, [r3, #4]
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	3320      	adds	r3, #32
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	4610      	mov	r0, r2
 801418a:	4798      	blx	r3
 801418c:	4603      	mov	r3, r0
 801418e:	2b0f      	cmp	r3, #15
 8014190:	d805      	bhi.n	801419e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 8014192:	4b48      	ldr	r3, [pc, #288]	; (80142b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 8014194:	4a45      	ldr	r2, [pc, #276]	; (80142ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 8014196:	21c3      	movs	r1, #195	; 0xc3
 8014198:	4845      	ldr	r0, [pc, #276]	; (80142b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801419a:	f00c fc2f 	bl	80209fc <__assert_func>
 801419e:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	68da      	ldr	r2, [r3, #12]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	68db      	ldr	r3, [r3, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	3320      	adds	r3, #32
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	4610      	mov	r0, r2
 80141b0:	4798      	blx	r3
 80141b2:	4603      	mov	r3, r0
 80141b4:	2b0b      	cmp	r3, #11
 80141b6:	d805      	bhi.n	80141c4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80141b8:	4b3f      	ldr	r3, [pc, #252]	; (80142b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 80141ba:	4a3c      	ldr	r2, [pc, #240]	; (80142ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 80141bc:	21c4      	movs	r1, #196	; 0xc4
 80141be:	483c      	ldr	r0, [pc, #240]	; (80142b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 80141c0:	f00c fc1c 	bl	80209fc <__assert_func>
 80141c4:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 80141c6:	683a      	ldr	r2, [r7, #0]
 80141c8:	68b9      	ldr	r1, [r7, #8]
 80141ca:	68f8      	ldr	r0, [r7, #12]
 80141cc:	f7ff fdc7 	bl	8013d5e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	68db      	ldr	r3, [r3, #12]
 80141d4:	2100      	movs	r1, #0
 80141d6:	4618      	mov	r0, r3
 80141d8:	f000 f872 	bl	80142c0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80141dc:	4603      	mov	r3, r0
 80141de:	4619      	mov	r1, r3
 80141e0:	200c      	movs	r0, #12
 80141e2:	f7ff fc1f 	bl	8013a24 <_ZnwjPv>
 80141e6:	4604      	mov	r4, r0
 80141e8:	2c00      	cmp	r4, #0
 80141ea:	d004      	beq.n	80141f6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 80141ec:	4620      	mov	r0, r4
 80141ee:	f7ff fe71 	bl	8013ed4 <_ZN8touchgfx12NoTransitionC1Ev>
 80141f2:	4623      	mov	r3, r4
 80141f4:	e000      	b.n	80141f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 80141f6:	4623      	mov	r3, r4
 80141f8:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	689b      	ldr	r3, [r3, #8]
 80141fe:	2100      	movs	r1, #0
 8014200:	4618      	mov	r0, r3
 8014202:	f000 f870 	bl	80142e6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8014206:	4603      	mov	r3, r0
 8014208:	4619      	mov	r1, r3
 801420a:	482c      	ldr	r0, [pc, #176]	; (80142bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x178>)
 801420c:	f7ff fc0a 	bl	8013a24 <_ZnwjPv>
 8014210:	4604      	mov	r4, r0
 8014212:	2c00      	cmp	r4, #0
 8014214:	d004      	beq.n	8014220 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xdc>
 8014216:	4620      	mov	r0, r4
 8014218:	f002 fa20 	bl	801665c <_ZN11Screen1ViewC1Ev>
 801421c:	4623      	mov	r3, r4
 801421e:	e000      	b.n	8014222 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 8014220:	4623      	mov	r3, r4
 8014222:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	2100      	movs	r1, #0
 801422a:	4618      	mov	r0, r3
 801422c:	f000 f86e 	bl	801430c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8014230:	4603      	mov	r3, r0
 8014232:	4619      	mov	r1, r3
 8014234:	2010      	movs	r0, #16
 8014236:	f7ff fbf5 	bl	8013a24 <_ZnwjPv>
 801423a:	4604      	mov	r4, r0
 801423c:	2c00      	cmp	r4, #0
 801423e:	d005      	beq.n	801424c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x108>
 8014240:	69b9      	ldr	r1, [r7, #24]
 8014242:	4620      	mov	r0, r4
 8014244:	f002 f8da 	bl	80163fc <_ZN16Screen1PresenterC1ER11Screen1View>
 8014248:	4623      	mov	r3, r4
 801424a:	e000      	b.n	801424e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 801424c:	4623      	mov	r3, r4
 801424e:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	69fa      	ldr	r2, [r7, #28]
 8014254:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	697a      	ldr	r2, [r7, #20]
 801425a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	69ba      	ldr	r2, [r7, #24]
 8014260:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d002      	beq.n	801426e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12a>
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	3304      	adds	r3, #4
 801426c:	e000      	b.n	8014270 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 801426e:	2300      	movs	r3, #0
 8014270:	4619      	mov	r1, r3
 8014272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014274:	f7ff fdf6 	bl	8013e64 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	3304      	adds	r3, #4
 801427c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801427e:	4618      	mov	r0, r3
 8014280:	f7ff fe69 	bl	8013f56 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8014284:	69bb      	ldr	r3, [r7, #24]
 8014286:	6979      	ldr	r1, [r7, #20]
 8014288:	4618      	mov	r0, r3
 801428a:	f000 f852 	bl	8014332 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801428e:	69fa      	ldr	r2, [r7, #28]
 8014290:	6979      	ldr	r1, [r7, #20]
 8014292:	69b8      	ldr	r0, [r7, #24]
 8014294:	f7ff fdbf 	bl	8013e16 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 8014298:	697b      	ldr	r3, [r7, #20]
}
 801429a:	4618      	mov	r0, r3
 801429c:	3724      	adds	r7, #36	; 0x24
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd90      	pop	{r4, r7, pc}
 80142a2:	bf00      	nop
 80142a4:	00010d07 	.word	0x00010d07
 80142a8:	08022750 	.word	0x08022750
 80142ac:	08023e70 	.word	0x08023e70
 80142b0:	080227e0 	.word	0x080227e0
 80142b4:	08022830 	.word	0x08022830
 80142b8:	080228d4 	.word	0x080228d4
 80142bc:	00010d08 	.word	0x00010d08

080142c0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	460b      	mov	r3, r1
 80142ca:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	3324      	adds	r3, #36	; 0x24
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	887a      	ldrh	r2, [r7, #2]
 80142d6:	4611      	mov	r1, r2
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	4798      	blx	r3
 80142dc:	4603      	mov	r3, r0
    }
 80142de:	4618      	mov	r0, r3
 80142e0:	3708      	adds	r7, #8
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}

080142e6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 80142e6:	b580      	push	{r7, lr}
 80142e8:	b082      	sub	sp, #8
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
 80142ee:	460b      	mov	r3, r1
 80142f0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	3324      	adds	r3, #36	; 0x24
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	887a      	ldrh	r2, [r7, #2]
 80142fc:	4611      	mov	r1, r2
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	4798      	blx	r3
 8014302:	4603      	mov	r3, r0
    }
 8014304:	4618      	mov	r0, r3
 8014306:	3708      	adds	r7, #8
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}

0801430c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	460b      	mov	r3, r1
 8014316:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	3324      	adds	r3, #36	; 0x24
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	887a      	ldrh	r2, [r7, #2]
 8014322:	4611      	mov	r1, r2
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	4798      	blx	r3
 8014328:	4603      	mov	r3, r0
    }
 801432a:	4618      	mov	r0, r3
 801432c:	3708      	adds	r7, #8
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}

08014332 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 8014332:	b480      	push	{r7}
 8014334:	b083      	sub	sp, #12
 8014336:	af00      	add	r7, sp, #0
 8014338:	6078      	str	r0, [r7, #4]
 801433a:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	683a      	ldr	r2, [r7, #0]
 8014340:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014342:	bf00      	nop
 8014344:	370c      	adds	r7, #12
 8014346:	46bd      	mov	sp, r7
 8014348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434c:	4770      	bx	lr
	...

08014350 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8014350:	b580      	push	{r7, lr}
 8014352:	b082      	sub	sp, #8
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	4a05      	ldr	r2, [pc, #20]	; (8014370 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	601a      	str	r2, [r3, #0]
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	4618      	mov	r0, r3
 8014362:	f7ff fc3b 	bl	8013bdc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	4618      	mov	r0, r3
 801436a:	3708      	adds	r7, #8
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}
 8014370:	08023dc4 	.word	0x08023dc4

08014374 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8014374:	b580      	push	{r7, lr}
 8014376:	b082      	sub	sp, #8
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f7ff ffe7 	bl	8014350 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8014382:	2110      	movs	r1, #16
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f00c fb1c 	bl	80209c2 <_ZdlPvj>
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	4618      	mov	r0, r3
 801438e:	3708      	adds	r7, #8
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}

08014394 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	68d2      	ldr	r2, [r2, #12]
 80143a4:	1052      	asrs	r2, r2, #1
 80143a6:	1899      	adds	r1, r3, r2
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	f003 0301 	and.w	r3, r3, #1
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d102      	bne.n	80143ba <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	689b      	ldr	r3, [r3, #8]
 80143b8:	e00a      	b.n	80143d0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	687a      	ldr	r2, [r7, #4]
 80143c0:	68d2      	ldr	r2, [r2, #12]
 80143c2:	1052      	asrs	r2, r2, #1
 80143c4:	4413      	add	r3, r2
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	687a      	ldr	r2, [r7, #4]
 80143ca:	6892      	ldr	r2, [r2, #8]
 80143cc:	4413      	add	r3, r2
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4608      	mov	r0, r1
 80143d2:	4798      	blx	r3
    }
 80143d4:	bf00      	nop
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}

080143dc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80143dc:	b480      	push	{r7}
 80143de:	b083      	sub	sp, #12
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d010      	beq.n	801440e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	689b      	ldr	r3, [r3, #8]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d107      	bne.n	8014404 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	68db      	ldr	r3, [r3, #12]
 80143f8:	f003 0301 	and.w	r3, r3, #1
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d101      	bne.n	8014404 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8014400:	2301      	movs	r3, #1
 8014402:	e000      	b.n	8014406 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8014404:	2300      	movs	r3, #0
 8014406:	2b01      	cmp	r3, #1
 8014408:	d001      	beq.n	801440e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801440a:	2301      	movs	r3, #1
 801440c:	e000      	b.n	8014410 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801440e:	2300      	movs	r3, #0
    }
 8014410:	4618      	mov	r0, r3
 8014412:	370c      	adds	r7, #12
 8014414:	46bd      	mov	sp, r7
 8014416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441a:	4770      	bx	lr

0801441c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	4a06      	ldr	r2, [pc, #24]	; (8014440 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	601a      	str	r2, [r3, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	3304      	adds	r3, #4
 801442e:	4618      	mov	r0, r3
 8014430:	f7f5 f9ae 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	4618      	mov	r0, r3
 8014438:	3708      	adds	r7, #8
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	080251d8 	.word	0x080251d8

08014444 <_ZN8touchgfx6ScreenD0Ev>:
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6878      	ldr	r0, [r7, #4]
 801444e:	f7ff ffe5 	bl	801441c <_ZN8touchgfx6ScreenD1Ev>
 8014452:	213c      	movs	r1, #60	; 0x3c
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f00c fab4 	bl	80209c2 <_ZdlPvj>
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	4618      	mov	r0, r3
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 8014464:	b480      	push	{r7}
 8014466:	b083      	sub	sp, #12
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	bf00      	nop
 801446e:	370c      	adds	r7, #12
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr

08014478 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	bf00      	nop
 8014482:	370c      	adds	r7, #12
 8014484:	46bd      	mov	sp, r7
 8014486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448a:	4770      	bx	lr

0801448c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801448c:	b480      	push	{r7}
 801448e:	b083      	sub	sp, #12
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	bf00      	nop
 8014496:	370c      	adds	r7, #12
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80144a0:	b480      	push	{r7}
 80144a2:	b083      	sub	sp, #12
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
    {
    }
 80144a8:	bf00      	nop
 80144aa:	370c      	adds	r7, #12
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80144b4:	b480      	push	{r7}
 80144b6:	b083      	sub	sp, #12
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	460b      	mov	r3, r1
 80144be:	70fb      	strb	r3, [r7, #3]
    {
    }
 80144c0:	bf00      	nop
 80144c2:	370c      	adds	r7, #12
 80144c4:	46bd      	mov	sp, r7
 80144c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ca:	4770      	bx	lr

080144cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
 80144d4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	3304      	adds	r3, #4
 80144da:	6839      	ldr	r1, [r7, #0]
 80144dc:	4618      	mov	r0, r3
 80144de:	f7f5 fbf7 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80144e2:	bf00      	nop
 80144e4:	3708      	adds	r7, #8
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}

080144ea <_ZN8touchgfx8TextArea14setLinespacingEs>:
    inline void setLinespacing(int16_t space)
 80144ea:	b480      	push	{r7}
 80144ec:	b083      	sub	sp, #12
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	6078      	str	r0, [r7, #4]
 80144f2:	460b      	mov	r3, r1
 80144f4:	807b      	strh	r3, [r7, #2]
        linespace = space;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	887a      	ldrh	r2, [r7, #2]
 80144fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 80144fc:	bf00      	nop
 80144fe:	370c      	adds	r7, #12
 8014500:	46bd      	mov	sp, r7
 8014502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014506:	4770      	bx	lr

08014508 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 8014508:	b580      	push	{r7, lr}
 801450a:	b082      	sub	sp, #8
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	4618      	mov	r0, r3
 8014514:	f7f6 fbfc 	bl	800ad10 <_ZN8touchgfx6WidgetC1Ev>
 8014518:	4a0d      	ldr	r2, [pc, #52]	; (8014550 <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	601a      	str	r2, [r3, #0]
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	22ff      	movs	r2, #255	; 0xff
 8014522:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	3328      	adds	r3, #40	; 0x28
 801452a:	2100      	movs	r1, #0
 801452c:	4618      	mov	r0, r3
 801452e:	f7f6 fb7b 	bl	800ac28 <_ZN8touchgfx9colortypeC1Em>
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	332c      	adds	r3, #44	; 0x2c
 8014536:	2100      	movs	r1, #0
 8014538:	4618      	mov	r0, r3
 801453a:	f7f6 fb75 	bl	800ac28 <_ZN8touchgfx9colortypeC1Em>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2200      	movs	r2, #0
 8014542:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	4618      	mov	r0, r3
 801454a:	3708      	adds	r7, #8
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	080239a4 	.word	0x080239a4

08014554 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
    void setColor(colortype color)
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
        this->color = color;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	683a      	ldr	r2, [r7, #0]
 8014562:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8014564:	bf00      	nop
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
    void setBorderColor(colortype color)
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
        this->borderColor = color;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	683a      	ldr	r2, [r7, #0]
 801457e:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 8014580:	bf00      	nop
 8014582:	370c      	adds	r7, #12
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr

0801458c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
 8014594:	460b      	mov	r3, r1
 8014596:	70fb      	strb	r3, [r7, #3]
        borderSize = size;
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	78fa      	ldrb	r2, [r7, #3]
 801459c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 80145a0:	bf00      	nop
 80145a2:	370c      	adds	r7, #12
 80145a4:	46bd      	mov	sp, r7
 80145a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145aa:	4770      	bx	lr

080145ac <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
    void setAlpha(uint8_t alpha)
 80145ac:	b480      	push	{r7}
 80145ae:	b083      	sub	sp, #12
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	460b      	mov	r3, r1
 80145b6:	70fb      	strb	r3, [r7, #3]
        this->alpha = alpha;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	78fa      	ldrb	r2, [r7, #3]
 80145bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 80145c0:	bf00      	nop
 80145c2:	370c      	adds	r7, #12
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr

080145cc <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
    void setLabelText(TypedText t)
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
 80145d4:	8039      	strh	r1, [r7, #0]
        typedText = t;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	883a      	ldrh	r2, [r7, #0]
 80145da:	869a      	strh	r2, [r3, #52]	; 0x34
        updateTextPosition();
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f000 f834 	bl	801464a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 80145e2:	bf00      	nop
 80145e4:	3708      	adds	r7, #8
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>:
    void setLabelColor(colortype col, bool performInvalidate = false)
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b084      	sub	sp, #16
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	60f8      	str	r0, [r7, #12]
 80145f2:	60b9      	str	r1, [r7, #8]
 80145f4:	4613      	mov	r3, r2
 80145f6:	71fb      	strb	r3, [r7, #7]
        color = col;
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	68ba      	ldr	r2, [r7, #8]
 80145fc:	639a      	str	r2, [r3, #56]	; 0x38
        if (performInvalidate)
 80145fe:	79fb      	ldrb	r3, [r7, #7]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d006      	beq.n	8014612 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb+0x28>
            invalidate();
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	3314      	adds	r3, #20
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	4610      	mov	r0, r2
 8014610:	4798      	blx	r3
    }
 8014612:	bf00      	nop
 8014614:	3710      	adds	r7, #16
 8014616:	46bd      	mov	sp, r7
 8014618:	bd80      	pop	{r7, pc}

0801461a <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>:
    void setLabelColorPressed(colortype col, bool performInvalidate = false)
 801461a:	b580      	push	{r7, lr}
 801461c:	b084      	sub	sp, #16
 801461e:	af00      	add	r7, sp, #0
 8014620:	60f8      	str	r0, [r7, #12]
 8014622:	60b9      	str	r1, [r7, #8]
 8014624:	4613      	mov	r3, r2
 8014626:	71fb      	strb	r3, [r7, #7]
        colorPressed = col;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	68ba      	ldr	r2, [r7, #8]
 801462c:	63da      	str	r2, [r3, #60]	; 0x3c
        if (performInvalidate)
 801462e:	79fb      	ldrb	r3, [r7, #7]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d006      	beq.n	8014642 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb+0x28>
            invalidate();
 8014634:	68fa      	ldr	r2, [r7, #12]
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	3314      	adds	r3, #20
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	4610      	mov	r0, r2
 8014640:	4798      	blx	r3
    }
 8014642:	bf00      	nop
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
    void updateTextPosition()
 801464a:	b590      	push	{r4, r7, lr}
 801464c:	b085      	sub	sp, #20
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
        if (typedText.hasValidId())
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	3334      	adds	r3, #52	; 0x34
 8014656:	4618      	mov	r0, r3
 8014658:	f7fa f910 	bl	800e87c <_ZNK8touchgfx9TypedText10hasValidIdEv>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d02e      	beq.n	80146c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x76>
            const Font* f = typedText.getFont();
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	3334      	adds	r3, #52	; 0x34
 8014666:	4618      	mov	r0, r3
 8014668:	f7fa f932 	bl	800e8d0 <_ZNK8touchgfx9TypedText7getFontEv>
 801466c:	60f8      	str	r0, [r7, #12]
            const Unicode::UnicodeChar* s = typedText.getText();
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	3334      	adds	r3, #52	; 0x34
 8014672:	4618      	mov	r0, r3
 8014674:	f7fa f916 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014678:	60b8      	str	r0, [r7, #8]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	3328      	adds	r3, #40	; 0x28
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68b9      	ldr	r1, [r7, #8]
 8014684:	68f8      	ldr	r0, [r7, #12]
 8014686:	4798      	blx	r3
 8014688:	4603      	mov	r3, r0
 801468a:	b2dc      	uxtb	r4, r3
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	3340      	adds	r3, #64	; 0x40
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	68b9      	ldr	r1, [r7, #8]
 8014696:	68f8      	ldr	r0, [r7, #12]
 8014698:	4798      	blx	r3
 801469a:	4603      	mov	r3, r0
 801469c:	b2db      	uxtb	r3, r3
 801469e:	fb14 f303 	smulbb	r3, r4, r3
 80146a2:	b2dc      	uxtb	r4, r3
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	3324      	adds	r3, #36	; 0x24
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	68b9      	ldr	r1, [r7, #8]
 80146ae:	68f8      	ldr	r0, [r7, #12]
 80146b0:	4798      	blx	r3
 80146b2:	4603      	mov	r3, r0
 80146b4:	4423      	add	r3, r4
 80146b6:	b2da      	uxtb	r2, r3
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 80146be:	e003      	b.n	80146c8 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7e>
            textHeightIncludingSpacing = 0;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2200      	movs	r2, #0
 80146c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 80146c8:	bf00      	nop
 80146ca:	3714      	adds	r7, #20
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd90      	pop	{r4, r7, pc}

080146d0 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>:
    void setNewValueCallback(GenericCallback< const Slider&, int >& callback)
 80146d0:	b480      	push	{r7}
 80146d2:	b083      	sub	sp, #12
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
 80146d8:	6039      	str	r1, [r7, #0]
        newValueCallback = &callback;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	683a      	ldr	r2, [r7, #0]
 80146de:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    }
 80146e2:	bf00      	nop
 80146e4:	370c      	adds	r7, #12
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr
	...

080146f0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80146f0:	b580      	push	{r7, lr}
 80146f2:	b082      	sub	sp, #8
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
 80146f8:	4a05      	ldr	r2, [pc, #20]	; (8014710 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	601a      	str	r2, [r3, #0]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	4618      	mov	r0, r3
 8014702:	f7ff fe8b 	bl	801441c <_ZN8touchgfx6ScreenD1Ev>
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	4618      	mov	r0, r3
 801470a:	3708      	adds	r7, #8
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	08023ffc 	.word	0x08023ffc

08014714 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8014714:	b580      	push	{r7, lr}
 8014716:	b082      	sub	sp, #8
 8014718:	af00      	add	r7, sp, #0
 801471a:	6078      	str	r0, [r7, #4]
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7ff ffe7 	bl	80146f0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8014722:	2140      	movs	r1, #64	; 0x40
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f00c f94c 	bl	80209c2 <_ZdlPvj>
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}

08014734 <_ZN15Screen1ViewBaseD1Ev>:
#include <touchgfx/containers/progress_indicators/BoxProgress.hpp>
class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
 801473c:	4a68      	ldr	r2, [pc, #416]	; (80148e0 <_ZN15Screen1ViewBaseD1Ev+0x1ac>)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	601a      	str	r2, [r3, #0]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8014748:	33f4      	adds	r3, #244	; 0xf4
 801474a:	4618      	mov	r0, r3
 801474c:	f001 faa8 	bl	8015ca0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8014756:	33e4      	adds	r3, #228	; 0xe4
 8014758:	4618      	mov	r0, r3
 801475a:	f001 fac3 	bl	8015ce4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8014764:	4618      	mov	r0, r3
 8014766:	f7fa fb11 	bl	800ed8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8014770:	4618      	mov	r0, r3
 8014772:	f7fa fb0b 	bl	800ed8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801477c:	4618      	mov	r0, r3
 801477e:	f7fa fb05 	bl	800ed8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8014788:	4618      	mov	r0, r3
 801478a:	f7fa fdef 	bl	800f36c <_ZN8touchgfx11BoxProgressD1Ev>
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8014794:	4618      	mov	r0, r3
 8014796:	f7fa fde9 	bl	800f36c <_ZN8touchgfx11BoxProgressD1Ev>
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7fa fde3 	bl	800f36c <_ZN8touchgfx11BoxProgressD1Ev>
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f603 138c 	addw	r3, r3, #2444	; 0x98c
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7fa f9b3 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f603 1358 	addw	r3, r3, #2392	; 0x958
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7fa f9ad 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f603 1324 	addw	r3, r3, #2340	; 0x924
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7fa f9a7 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fa f9a1 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 80147dc:	4618      	mov	r0, r3
 80147de:	f7fa f99b 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f603 0384 	addw	r3, r3, #2180	; 0x884
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fc f9b7 	bl	8010b5c <_ZN8touchgfx12ToggleButtonD1Ev>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7f4 ffcb 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8014800:	4618      	mov	r0, r3
 8014802:	f7fa f989 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 801480c:	4618      	mov	r0, r3
 801480e:	f7fa f983 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014818:	4618      	mov	r0, r3
 801481a:	f7fa f97d 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8014824:	4618      	mov	r0, r3
 8014826:	f7fa f977 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8014830:	4618      	mov	r0, r3
 8014832:	f7f8 fc49 	bl	800d0c8 <_ZN8touchgfx6SliderD1Ev>
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 801483c:	4618      	mov	r0, r3
 801483e:	f7f8 fc43 	bl	800d0c8 <_ZN8touchgfx6SliderD1Ev>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8014848:	4618      	mov	r0, r3
 801484a:	f7f8 fc3d 	bl	800d0c8 <_ZN8touchgfx6SliderD1Ev>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8014854:	4618      	mov	r0, r3
 8014856:	f7f8 fc37 	bl	800d0c8 <_ZN8touchgfx6SliderD1Ev>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014860:	4618      	mov	r0, r3
 8014862:	f7fa f959 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801486c:	4618      	mov	r0, r3
 801486e:	f7f4 ff8f 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014878:	4618      	mov	r0, r3
 801487a:	f7fb faff 	bl	800fe7c <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014884:	4618      	mov	r0, r3
 8014886:	f7fa fa81 	bl	800ed8c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8014890:	4618      	mov	r0, r3
 8014892:	f7f6 fcc5 	bl	800b220 <_ZN8touchgfx19ScrollableContainerD1Ev>
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 801489c:	4618      	mov	r0, r3
 801489e:	f7fa ff7d 	bl	800f79c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80148a8:	4618      	mov	r0, r3
 80148aa:	f7fa f935 	bl	800eb18 <_ZN8touchgfx8TextAreaD1Ev>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7f4 ff6b 	bl	8009790 <_ZN8touchgfx9ContainerD1Ev>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	3370      	adds	r3, #112	; 0x70
 80148be:	4618      	mov	r0, r3
 80148c0:	f7f9 fa08 	bl	800dcd4 <_ZN8touchgfx14SwipeContainerD1Ev>
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	3340      	adds	r3, #64	; 0x40
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7f9 ff67 	bl	800e79c <_ZN8touchgfx10TiledImageD1Ev>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7ff ff0d 	bl	80146f0 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	4618      	mov	r0, r3
 80148da:	3708      	adds	r7, #8
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}
 80148e0:	08023f7c 	.word	0x08023f7c

080148e4 <_ZN15Screen1ViewBaseD0Ev>:
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b082      	sub	sp, #8
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	6078      	str	r0, [r7, #4]
 80148ec:	6878      	ldr	r0, [r7, #4]
 80148ee:	f7ff ff21 	bl	8014734 <_ZN15Screen1ViewBaseD1Ev>
 80148f2:	4904      	ldr	r1, [pc, #16]	; (8014904 <_ZN15Screen1ViewBaseD0Ev+0x20>)
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f00c f864 	bl	80209c2 <_ZdlPvj>
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	4618      	mov	r0, r3
 80148fe:	3708      	adds	r7, #8
 8014900:	46bd      	mov	sp, r7
 8014902:	bd80      	pop	{r7, pc}
 8014904:	00010d04 	.word	0x00010d04

08014908 <_ZN15Screen1ViewBase11on_change_REi>:
    virtual void afterTransition();

    /*
     * Virtual Action Handlers
     */
    virtual void on_change_R(int value)
 8014908:	b480      	push	{r7}
 801490a:	b083      	sub	sp, #12
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 8014912:	bf00      	nop
 8014914:	370c      	adds	r7, #12
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr

0801491e <_ZN15Screen1ViewBase11on_change_GEi>:

    virtual void on_change_G(int value)
 801491e:	b480      	push	{r7}
 8014920:	b083      	sub	sp, #12
 8014922:	af00      	add	r7, sp, #0
 8014924:	6078      	str	r0, [r7, #4]
 8014926:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 8014928:	bf00      	nop
 801492a:	370c      	adds	r7, #12
 801492c:	46bd      	mov	sp, r7
 801492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014932:	4770      	bx	lr

08014934 <_ZN15Screen1ViewBase11on_change_BEi>:

    virtual void on_change_B(int value)
 8014934:	b480      	push	{r7}
 8014936:	b083      	sub	sp, #12
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
 801493c:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 801493e:	bf00      	nop
 8014940:	370c      	adds	r7, #12
 8014942:	46bd      	mov	sp, r7
 8014944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014948:	4770      	bx	lr

0801494a <_ZN15Screen1ViewBase11on_change_VEi>:

    virtual void on_change_V(int value)
 801494a:	b480      	push	{r7}
 801494c:	b083      	sub	sp, #12
 801494e:	af00      	add	r7, sp, #0
 8014950:	6078      	str	r0, [r7, #4]
 8014952:	6039      	str	r1, [r7, #0]
    {
        // Override and implement this function in Screen1
    }
 8014954:	bf00      	nop
 8014956:	370c      	adds	r7, #12
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr

08014960 <_ZN15Screen1ViewBase15on_enter_screenEv>:

    virtual void on_enter_screen()
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8014968:	bf00      	nop
 801496a:	370c      	adds	r7, #12
 801496c:	46bd      	mov	sp, r7
 801496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014972:	4770      	bx	lr

08014974 <_ZN15Screen1ViewBase21on_click_clear_buttonEv>:

    virtual void on_click_clear_button()
 8014974:	b480      	push	{r7}
 8014976:	b083      	sub	sp, #12
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 801497c:	bf00      	nop
 801497e:	370c      	adds	r7, #12
 8014980:	46bd      	mov	sp, r7
 8014982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014986:	4770      	bx	lr

08014988 <_ZN15Screen1ViewBase13on_click_modeEv>:

    virtual void on_click_mode()
 8014988:	b480      	push	{r7}
 801498a:	b083      	sub	sp, #12
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1
    }
 8014990:	bf00      	nop
 8014992:	370c      	adds	r7, #12
 8014994:	46bd      	mov	sp, r7
 8014996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499a:	4770      	bx	lr

0801499c <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

Screen1ViewBase::Screen1ViewBase() :
 801499c:	b590      	push	{r4, r7, lr}
 801499e:	b0b5      	sub	sp, #212	; 0xd4
 80149a0:	af02      	add	r7, sp, #8
 80149a2:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &Screen1ViewBase::sliderValueChangedCallbackHandler)
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f001 f8f4 	bl	8015b94 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80149ac:	4ad9      	ldr	r2, [pc, #868]	; (8014d14 <_ZN15Screen1ViewBaseC1Ev+0x378>)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	601a      	str	r2, [r3, #0]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80149b8:	f107 030c 	add.w	r3, r7, #12
 80149bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7f4 fd34 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 80149c6:	f107 030c 	add.w	r3, r7, #12
 80149ca:	4619      	mov	r1, r3
 80149cc:	4620      	mov	r0, r4
 80149ce:	f7f9 f901 	bl	800dbd4 <_ZN8touchgfx10TiledImageC1ERKNS_6BitmapE>
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	3370      	adds	r3, #112	; 0x70
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7f9 f924 	bl	800dc24 <_ZN8touchgfx14SwipeContainerC1Ev>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7f6 f97e 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7f9 ffe4 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7ff fd84 	bl	8014508 <_ZN8touchgfx13BoxWithBorderC1Ev>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7f6 fcaa 	bl	800b360 <_ZN8touchgfx19ScrollableContainerC1Ev>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7fa f8d6 	bl	800ebc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7fb f908 	bl	800fc34 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7f6 f95a 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7f9 ffc0 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7f8 fab0 	bl	800cfa8 <_ZN8touchgfx6SliderC1Ev>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7f8 faaa 	bl	800cfa8 <_ZN8touchgfx6SliderC1Ev>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7f8 faa4 	bl	800cfa8 <_ZN8touchgfx6SliderC1Ev>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7f8 fa9e 	bl	800cfa8 <_ZN8touchgfx6SliderC1Ev>
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7f9 ffa2 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7f9 ff9c 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7f9 ff96 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8014a96:	4618      	mov	r0, r3
 8014a98:	f7f9 ff90 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f7f6 f91e 	bl	800ace4 <_ZN8touchgfx9ContainerC1Ev>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7fc f812 	bl	8010ad8 <_ZN8touchgfx12ToggleButtonC1Ev>
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7f9 ff7e 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7f9 ff78 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7f9 ff72 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f603 1358 	addw	r3, r3, #2392	; 0x958
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7f9 ff6c 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f603 138c 	addw	r3, r3, #2444	; 0x98c
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7f9 ff66 	bl	800e9bc <_ZN8touchgfx8TextAreaC1Ev>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7fa fc18 	bl	800f32c <_ZN8touchgfx11BoxProgressC1Ev>
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7fa fc12 	bl	800f32c <_ZN8touchgfx11BoxProgressC1Ev>
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fa fc0c 	bl	800f32c <_ZN8touchgfx11BoxProgressC1Ev>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7fa f852 	bl	800ebc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8014b26:	4618      	mov	r0, r3
 8014b28:	f7fa f84c 	bl	800ebc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fa f846 	bl	800ebc4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	f503 3086 	add.w	r0, r3, #68608	; 0x10c00
 8014b3e:	30e4      	adds	r0, #228	; 0xe4
 8014b40:	4b75      	ldr	r3, [pc, #468]	; (8014d18 <_ZN15Screen1ViewBaseC1Ev+0x37c>)
 8014b42:	613b      	str	r3, [r7, #16]
 8014b44:	2300      	movs	r3, #0
 8014b46:	617b      	str	r3, [r7, #20]
 8014b48:	f107 0310 	add.w	r3, r7, #16
 8014b4c:	cb0c      	ldmia	r3, {r2, r3}
 8014b4e:	6879      	ldr	r1, [r7, #4]
 8014b50:	f001 f836 	bl	8015bc0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f503 3086 	add.w	r0, r3, #68608	; 0x10c00
 8014b5a:	30f4      	adds	r0, #244	; 0xf4
 8014b5c:	4b6f      	ldr	r3, [pc, #444]	; (8014d1c <_ZN15Screen1ViewBaseC1Ev+0x380>)
 8014b5e:	61bb      	str	r3, [r7, #24]
 8014b60:	2300      	movs	r3, #0
 8014b62:	61fb      	str	r3, [r7, #28]
 8014b64:	f107 0318 	add.w	r3, r7, #24
 8014b68:	cb0c      	ldmia	r3, {r2, r3}
 8014b6a:	6879      	ldr	r1, [r7, #4]
 8014b6c:	f001 f858 	bl	8015c20 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>
{
    background.setBitmap(touchgfx::Bitmap(BITMAP_BG2_ID));
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014b76:	f107 0320 	add.w	r3, r7, #32
 8014b7a:	2100      	movs	r1, #0
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	f7f4 fc56 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014b82:	f107 0320 	add.w	r3, r7, #32
 8014b86:	4619      	mov	r1, r3
 8014b88:	4620      	mov	r0, r4
 8014b8a:	f7fb fc7f 	bl	801048c <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    background.setPosition(0, 0, 240, 320);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014b94:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8014b98:	9300      	str	r3, [sp, #0]
 8014b9a:	23f0      	movs	r3, #240	; 0xf0
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	2100      	movs	r1, #0
 8014ba0:	f7f4 fc76 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    background.setOffset(0, 0);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	3340      	adds	r3, #64	; 0x40
 8014ba8:	2200      	movs	r2, #0
 8014baa:	2100      	movs	r1, #0
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7fb fc87 	bl	80104c0 <_ZN8touchgfx10TiledImage9setOffsetEss>

    mainPage.setXY(0, 0);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	3370      	adds	r3, #112	; 0x70
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	2100      	movs	r1, #0
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7f4 fcb3 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>

    logPanel.setWidth(240);
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014bc6:	21f0      	movs	r1, #240	; 0xf0
 8014bc8:	4618      	mov	r0, r3
 8014bca:	f7f4 fcca 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
    logPanel.setHeight(320);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014bd4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7f4 fcd1 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>

    logTitle.setXY(85, 40);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8014be4:	2228      	movs	r2, #40	; 0x28
 8014be6:	2155      	movs	r1, #85	; 0x55
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7f4 fc9c 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    logTitle.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 8014bf4:	2250      	movs	r2, #80	; 0x50
 8014bf6:	213e      	movs	r1, #62	; 0x3e
 8014bf8:	202c      	movs	r0, #44	; 0x2c
 8014bfa:	f7f6 f937 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	4619      	mov	r1, r3
 8014c02:	4620      	mov	r0, r4
 8014c04:	f7f9 ff1d 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    logTitle.setLinespacing(0);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8014c0e:	2100      	movs	r1, #0
 8014c10:	4618      	mov	r0, r3
 8014c12:	f7ff fc6a 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    logTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f503 74ca 	add.w	r4, r3, #404	; 0x194
 8014c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014c20:	2102      	movs	r1, #2
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7f9 fe1a 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8014c28:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	f7fb fab1 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    logPanel.add(logTitle);
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	4610      	mov	r0, r2
 8014c40:	f7f5 f846 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    boxWithBorder1.setPosition(20, 120, 200, 180);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8014c4a:	23b4      	movs	r3, #180	; 0xb4
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	23c8      	movs	r3, #200	; 0xc8
 8014c50:	2278      	movs	r2, #120	; 0x78
 8014c52:	2114      	movs	r1, #20
 8014c54:	f7f4 fc1c 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    boxWithBorder1.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 8014c5e:	22ff      	movs	r2, #255	; 0xff
 8014c60:	21ff      	movs	r1, #255	; 0xff
 8014c62:	20ff      	movs	r0, #255	; 0xff
 8014c64:	f7f6 f902 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	f7ff fc71 	bl	8014554 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
    boxWithBorder1.setBorderColor(touchgfx::Color::getColorFrom24BitRGB(149, 165, 166));
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f503 74e4 	add.w	r4, r3, #456	; 0x1c8
 8014c78:	22a6      	movs	r2, #166	; 0xa6
 8014c7a:	21a5      	movs	r1, #165	; 0xa5
 8014c7c:	2095      	movs	r0, #149	; 0x95
 8014c7e:	f7f6 f8f5 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014c82:	4603      	mov	r3, r0
 8014c84:	4619      	mov	r1, r3
 8014c86:	4620      	mov	r0, r4
 8014c88:	f7ff fc72 	bl	8014570 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    boxWithBorder1.setBorderSize(5);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014c92:	2105      	movs	r1, #5
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7ff fc79 	bl	801458c <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    boxWithBorder1.setAlpha(127);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014ca0:	217f      	movs	r1, #127	; 0x7f
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7ff fc82 	bl	80145ac <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
    logPanel.add(boxWithBorder1);
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	4610      	mov	r0, r2
 8014cb8:	f7f5 f80a 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    scrollableContainer1.setPosition(25, 125, 190, 170);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f503 70fe 	add.w	r0, r3, #508	; 0x1fc
 8014cc2:	23aa      	movs	r3, #170	; 0xaa
 8014cc4:	9300      	str	r3, [sp, #0]
 8014cc6:	23be      	movs	r3, #190	; 0xbe
 8014cc8:	227d      	movs	r2, #125	; 0x7d
 8014cca:	2119      	movs	r1, #25
 8014ccc:	f7f4 fbe0 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    scrollableContainer1.setScrollbarsColor(touchgfx::Color::getColorFrom24BitRGB(0, 128, 255));
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f503 74fe 	add.w	r4, r3, #508	; 0x1fc
 8014cd6:	22ff      	movs	r2, #255	; 0xff
 8014cd8:	2180      	movs	r1, #128	; 0x80
 8014cda:	2000      	movs	r0, #0
 8014cdc:	f7f6 f8c6 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	4619      	mov	r1, r3
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	f7f8 f80c 	bl	800cd02 <_ZN8touchgfx19ScrollableContainer18setScrollbarsColorENS_9colortypeE>

    logContent.setPosition(0, 0, 190, 1000);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8014cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014cf4:	9300      	str	r3, [sp, #0]
 8014cf6:	23be      	movs	r3, #190	; 0xbe
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	2100      	movs	r1, #0
 8014cfc:	f7f4 fbc8 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    logContent.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8014d06:	2250      	movs	r2, #80	; 0x50
 8014d08:	213e      	movs	r1, #62	; 0x3e
 8014d0a:	202c      	movs	r0, #44	; 0x2c
 8014d0c:	f7f6 f8ae 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014d10:	e006      	b.n	8014d20 <_ZN15Screen1ViewBaseC1Ev+0x384>
 8014d12:	bf00      	nop
 8014d14:	08023f7c 	.word	0x08023f7c
 8014d18:	08015acd 	.word	0x08015acd
 8014d1c:	08015b11 	.word	0x08015b11
 8014d20:	4603      	mov	r3, r0
 8014d22:	4619      	mov	r1, r3
 8014d24:	4620      	mov	r0, r4
 8014d26:	f7f9 fe8c 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    logContent.setLinespacing(0);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014d30:	2100      	movs	r1, #0
 8014d32:	4618      	mov	r0, r3
 8014d34:	f7ff fbd9 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(logContentBuffer, LOGCONTENT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID15).getText());
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f603 44a8 	addw	r4, r3, #3240	; 0xca8
 8014d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d42:	2108      	movs	r1, #8
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7f9 fd89 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8014d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7f9 fda8 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 8014d54:	4603      	mov	r3, r0
 8014d56:	4ae1      	ldr	r2, [pc, #900]	; (80150dc <_ZN15Screen1ViewBaseC1Ev+0x740>)
 8014d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f008 f841 	bl	801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    logContent.setWildcard(logContentBuffer);
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 8014d6e:	4619      	mov	r1, r3
 8014d70:	4610      	mov	r0, r2
 8014d72:	f7f9 ffc4 	bl	800ecfe <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    logContent.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	f503 742f 	add.w	r4, r3, #700	; 0x2bc
 8014d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014d80:	2103      	movs	r1, #3
 8014d82:	4618      	mov	r0, r3
 8014d84:	f7f9 fd6a 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8014d88:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f7fb fa01 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    scrollableContainer1.add(logContent);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8014d9c:	4619      	mov	r1, r3
 8014d9e:	4610      	mov	r0, r2
 8014da0:	f7f7 fe70 	bl	800ca84 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>

    clearButton.setXY(10, 960);
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014daa:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8014dae:	210a      	movs	r1, #10
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7f4 fbb8 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    clearButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8014dbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014dc0:	2101      	movs	r1, #1
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7f4 fb33 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014dcc:	2102      	movs	r1, #2
 8014dce:	4618      	mov	r0, r3
 8014dd0:	f7f4 fb2d 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014dd4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8014dd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014ddc:	4619      	mov	r1, r3
 8014dde:	4620      	mov	r0, r4
 8014de0:	f7fa feb6 	bl	800fb50 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    clearButton.setLabelText(touchgfx::TypedText(T_SINGLEUSEID30));
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8014dea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014dee:	2114      	movs	r1, #20
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7f9 fd33 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8014df6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7ff fbe7 	bl	80145cc <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    clearButton.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8014e04:	22ff      	movs	r2, #255	; 0xff
 8014e06:	21ff      	movs	r1, #255	; 0xff
 8014e08:	20ff      	movs	r0, #255	; 0xff
 8014e0a:	f7f6 f82f 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2200      	movs	r2, #0
 8014e12:	4619      	mov	r1, r3
 8014e14:	4620      	mov	r0, r4
 8014e16:	f7ff fbe8 	bl	80145ea <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    clearButton.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f503 743d 	add.w	r4, r3, #756	; 0x2f4
 8014e20:	22ff      	movs	r2, #255	; 0xff
 8014e22:	21ff      	movs	r1, #255	; 0xff
 8014e24:	20ff      	movs	r0, #255	; 0xff
 8014e26:	f7f6 f821 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014e2a:	4603      	mov	r3, r0
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	4619      	mov	r1, r3
 8014e30:	4620      	mov	r0, r4
 8014e32:	f7ff fbf2 	bl	801461a <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    clearButton.setAction(buttonCallback);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f503 723d 	add.w	r2, r3, #756	; 0x2f4
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8014e42:	33e4      	adds	r3, #228	; 0xe4
 8014e44:	4619      	mov	r1, r3
 8014e46:	4610      	mov	r0, r2
 8014e48:	f7f7 ffc6 	bl	800cdd8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    scrollableContainer1.add(clearButton);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8014e58:	4619      	mov	r1, r3
 8014e5a:	4610      	mov	r0, r2
 8014e5c:	f7f7 fe12 	bl	800ca84 <_ZN8touchgfx19ScrollableContainer3addERNS_8DrawableE>
    scrollableContainer1.setScrollbarsPermanentlyVisible();
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7f7 ff67 	bl	800cd3a <_ZN8touchgfx19ScrollableContainer31setScrollbarsPermanentlyVisibleEv>
    logPanel.add(scrollableContainer1);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8014e78:	4619      	mov	r1, r3
 8014e7a:	4610      	mov	r0, r2
 8014e7c:	f7f4 ff28 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mainPage.add(logPanel);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	4610      	mov	r0, r2
 8014e90:	f7f8 ff54 	bl	800dd3c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    controlPanel.setWidth(240);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014e9a:	21f0      	movs	r1, #240	; 0xf0
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7f4 fb60 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
    controlPanel.setHeight(320);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8014ea8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7f4 fb67 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>

    contolTitle.setXY(47, 40);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014eb8:	2228      	movs	r2, #40	; 0x28
 8014eba:	212f      	movs	r1, #47	; 0x2f
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7f4 fb32 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    contolTitle.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8014ec8:	2250      	movs	r2, #80	; 0x50
 8014eca:	213e      	movs	r1, #62	; 0x3e
 8014ecc:	202c      	movs	r0, #44	; 0x2c
 8014ece:	f7f5 ffcd 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f7f9 fdb3 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    contolTitle.setLinespacing(0);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014ee2:	2100      	movs	r1, #0
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7ff fb00 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    contolTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f503 7459 	add.w	r4, r3, #868	; 0x364
 8014ef0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014ef4:	2101      	movs	r1, #1
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7f9 fcb0 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8014efc:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8014efe:	4620      	mov	r0, r4
 8014f00:	f7fb f947 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    controlPanel.add(contolTitle);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f503 7359 	add.w	r3, r3, #868	; 0x364
 8014f10:	4619      	mov	r1, r3
 8014f12:	4610      	mov	r0, r2
 8014f14:	f7f4 fedc 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    vibSlider.setXY(45, 240);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8014f1e:	22f0      	movs	r2, #240	; 0xf0
 8014f20:	212d      	movs	r1, #45	; 0x2d
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7f4 faff 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    vibSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f503 7466 	add.w	r4, r3, #920	; 0x398
 8014f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014f32:	2107      	movs	r1, #7
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7f4 fa7a 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014f3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014f3e:	2108      	movs	r1, #8
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7f4 fa74 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014f46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f4a:	2106      	movs	r1, #6
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f4 fa6e 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014f56:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8014f5a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f7f8 f8e8 	bl	800d134 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    vibSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f503 7066 	add.w	r0, r3, #920	; 0x398
 8014f6a:	237d      	movs	r3, #125	; 0x7d
 8014f6c:	9301      	str	r3, [sp, #4]
 8014f6e:	2300      	movs	r3, #0
 8014f70:	9300      	str	r3, [sp, #0]
 8014f72:	2300      	movs	r3, #0
 8014f74:	2207      	movs	r2, #7
 8014f76:	2103      	movs	r1, #3
 8014f78:	f7f8 f936 	bl	800d1e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    vibSlider.setValueRange(0, 1024);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8014f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014f86:	2100      	movs	r1, #0
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7f8 fd79 	bl	800da80 <_ZN8touchgfx6Slider13setValueRangeEii>
    vibSlider.setValue(0);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8014f94:	2100      	movs	r1, #0
 8014f96:	4618      	mov	r0, r3
 8014f98:	f7f8 fa76 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
    vibSlider.setNewValueCallback(sliderValueChangedCallback);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f503 7266 	add.w	r2, r3, #920	; 0x398
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8014fa8:	33f4      	adds	r3, #244	; 0xf4
 8014faa:	4619      	mov	r1, r3
 8014fac:	4610      	mov	r0, r2
 8014fae:	f7ff fb8f 	bl	80146d0 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    controlPanel.add(vibSlider);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	4610      	mov	r0, r2
 8014fc2:	f7f4 fe85 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    blueSlider.setXY(45, 200);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8014fcc:	22c8      	movs	r2, #200	; 0xc8
 8014fce:	212d      	movs	r1, #45	; 0x2d
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7f4 faa8 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    blueSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f203 4494 	addw	r4, r3, #1172	; 0x494
 8014fdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014fe0:	2107      	movs	r1, #7
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7f4 fa23 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014fe8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014fec:	2108      	movs	r1, #8
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f7f4 fa1d 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8014ff4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014ff8:	2106      	movs	r1, #6
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7f4 fa17 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015000:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8015004:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8015008:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801500c:	4620      	mov	r0, r4
 801500e:	f7f8 f891 	bl	800d134 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    blueSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f203 4094 	addw	r0, r3, #1172	; 0x494
 8015018:	237d      	movs	r3, #125	; 0x7d
 801501a:	9301      	str	r3, [sp, #4]
 801501c:	2300      	movs	r3, #0
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	2300      	movs	r3, #0
 8015022:	2207      	movs	r2, #7
 8015024:	2103      	movs	r1, #3
 8015026:	f7f8 f8df 	bl	800d1e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    blueSlider.setValueRange(0, 1024);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8015030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015034:	2100      	movs	r1, #0
 8015036:	4618      	mov	r0, r3
 8015038:	f7f8 fd22 	bl	800da80 <_ZN8touchgfx6Slider13setValueRangeEii>
    blueSlider.setValue(0);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8015042:	2100      	movs	r1, #0
 8015044:	4618      	mov	r0, r3
 8015046:	f7f8 fa1f 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
    blueSlider.setNewValueCallback(sliderValueChangedCallback);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f203 4294 	addw	r2, r3, #1172	; 0x494
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8015056:	33f4      	adds	r3, #244	; 0xf4
 8015058:	4619      	mov	r1, r3
 801505a:	4610      	mov	r0, r2
 801505c:	f7ff fb38 	bl	80146d0 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    controlPanel.add(blueSlider);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801506c:	4619      	mov	r1, r3
 801506e:	4610      	mov	r0, r2
 8015070:	f7f4 fe2e 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    greenSlider.setXY(45, 160);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 801507a:	22a0      	movs	r2, #160	; 0xa0
 801507c:	212d      	movs	r1, #45	; 0x2d
 801507e:	4618      	mov	r0, r3
 8015080:	f7f4 fa51 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    greenSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	f503 64b2 	add.w	r4, r3, #1424	; 0x590
 801508a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801508e:	2107      	movs	r1, #7
 8015090:	4618      	mov	r0, r3
 8015092:	f7f4 f9cc 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015096:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801509a:	2108      	movs	r1, #8
 801509c:	4618      	mov	r0, r3
 801509e:	f7f4 f9c6 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 80150a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80150a6:	2106      	movs	r1, #6
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7f4 f9c0 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 80150ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80150b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80150b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80150ba:	4620      	mov	r0, r4
 80150bc:	f7f8 f83a 	bl	800d134 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    greenSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f503 60b2 	add.w	r0, r3, #1424	; 0x590
 80150c6:	237d      	movs	r3, #125	; 0x7d
 80150c8:	9301      	str	r3, [sp, #4]
 80150ca:	2300      	movs	r3, #0
 80150cc:	9300      	str	r3, [sp, #0]
 80150ce:	2300      	movs	r3, #0
 80150d0:	2207      	movs	r2, #7
 80150d2:	2103      	movs	r1, #3
 80150d4:	f7f8 f888 	bl	800d1e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
 80150d8:	e002      	b.n	80150e0 <_ZN15Screen1ViewBaseC1Ev+0x744>
 80150da:	bf00      	nop
 80150dc:	08022af0 	.word	0x08022af0
    greenSlider.setValueRange(0, 1024);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80150e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80150ea:	2100      	movs	r1, #0
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7f8 fcc7 	bl	800da80 <_ZN8touchgfx6Slider13setValueRangeEii>
    greenSlider.setValue(0);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 80150f8:	2100      	movs	r1, #0
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7f8 f9c4 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
    greenSlider.setNewValueCallback(sliderValueChangedCallback);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f503 62b2 	add.w	r2, r3, #1424	; 0x590
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 801510c:	33f4      	adds	r3, #244	; 0xf4
 801510e:	4619      	mov	r1, r3
 8015110:	4610      	mov	r0, r2
 8015112:	f7ff fadd 	bl	80146d0 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    controlPanel.add(greenSlider);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f503 724e 	add.w	r2, r3, #824	; 0x338
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8015122:	4619      	mov	r1, r3
 8015124:	4610      	mov	r0, r2
 8015126:	f7f4 fdd3 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    redSlider.setXY(45, 120);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8015130:	2278      	movs	r2, #120	; 0x78
 8015132:	212d      	movs	r1, #45	; 0x2d
 8015134:	4618      	mov	r0, r3
 8015136:	f7f4 f9f6 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    redSlider.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f203 648c 	addw	r4, r3, #1676	; 0x68c
 8015140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015144:	2107      	movs	r1, #7
 8015146:	4618      	mov	r0, r3
 8015148:	f7f4 f971 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 801514c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015150:	2108      	movs	r1, #8
 8015152:	4618      	mov	r0, r3
 8015154:	f7f4 f96b 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015158:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801515c:	2106      	movs	r1, #6
 801515e:	4618      	mov	r0, r3
 8015160:	f7f4 f965 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015164:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8015168:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801516c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8015170:	4620      	mov	r0, r4
 8015172:	f7f7 ffdf 	bl	800d134 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    redSlider.setupHorizontalSlider(3, 7, 0, 0, 125);
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	f203 608c 	addw	r0, r3, #1676	; 0x68c
 801517c:	237d      	movs	r3, #125	; 0x7d
 801517e:	9301      	str	r3, [sp, #4]
 8015180:	2300      	movs	r3, #0
 8015182:	9300      	str	r3, [sp, #0]
 8015184:	2300      	movs	r3, #0
 8015186:	2207      	movs	r2, #7
 8015188:	2103      	movs	r1, #3
 801518a:	f7f8 f82d 	bl	800d1e8 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    redSlider.setValueRange(0, 1024);
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8015194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015198:	2100      	movs	r1, #0
 801519a:	4618      	mov	r0, r3
 801519c:	f7f8 fc70 	bl	800da80 <_ZN8touchgfx6Slider13setValueRangeEii>
    redSlider.setValue(0);
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80151a6:	2100      	movs	r1, #0
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7f8 f96d 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
    redSlider.setNewValueCallback(sliderValueChangedCallback);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f203 628c 	addw	r2, r3, #1676	; 0x68c
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80151ba:	33f4      	adds	r3, #244	; 0xf4
 80151bc:	4619      	mov	r1, r3
 80151be:	4610      	mov	r0, r2
 80151c0:	f7ff fa86 	bl	80146d0 <_ZN8touchgfx6Slider19setNewValueCallbackERNS_15GenericCallbackIRKS0_ivEE>
    controlPanel.add(redSlider);
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	f503 724e 	add.w	r2, r3, #824	; 0x338
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 80151d0:	4619      	mov	r1, r3
 80151d2:	4610      	mov	r0, r2
 80151d4:	f7f4 fd7c 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    vibText.setXY(16, 245);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 80151de:	22f5      	movs	r2, #245	; 0xf5
 80151e0:	2110      	movs	r1, #16
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7f4 f99f 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    vibText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f503 64f1 	add.w	r4, r3, #1928	; 0x788
 80151ee:	2250      	movs	r2, #80	; 0x50
 80151f0:	213e      	movs	r1, #62	; 0x3e
 80151f2:	202c      	movs	r0, #44	; 0x2c
 80151f4:	f7f5 fe3a 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80151f8:	4603      	mov	r3, r0
 80151fa:	4619      	mov	r1, r3
 80151fc:	4620      	mov	r0, r4
 80151fe:	f7f9 fc20 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    vibText.setLinespacing(0);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8015208:	2100      	movs	r1, #0
 801520a:	4618      	mov	r0, r3
 801520c:	f7ff f96d 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    vibText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f503 64f1 	add.w	r4, r3, #1928	; 0x788
 8015216:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801521a:	2104      	movs	r1, #4
 801521c:	4618      	mov	r0, r3
 801521e:	f7f9 fb1d 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8015222:	f8b7 1070 	ldrh.w	r1, [r7, #112]	; 0x70
 8015226:	4620      	mov	r0, r4
 8015228:	f7fa ffb3 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    controlPanel.add(vibText);
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f503 63f1 	add.w	r3, r3, #1928	; 0x788
 8015238:	4619      	mov	r1, r3
 801523a:	4610      	mov	r0, r2
 801523c:	f7f4 fd48 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    blueText.setXY(16, 205);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8015246:	22cd      	movs	r2, #205	; 0xcd
 8015248:	2110      	movs	r1, #16
 801524a:	4618      	mov	r0, r3
 801524c:	f7f4 f96b 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    blueText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 8015256:	2250      	movs	r2, #80	; 0x50
 8015258:	213e      	movs	r1, #62	; 0x3e
 801525a:	202c      	movs	r0, #44	; 0x2c
 801525c:	f7f5 fe06 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015260:	4603      	mov	r3, r0
 8015262:	4619      	mov	r1, r3
 8015264:	4620      	mov	r0, r4
 8015266:	f7f9 fbec 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    blueText.setLinespacing(0);
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8015270:	2100      	movs	r1, #0
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff f939 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    blueText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 801527e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8015282:	2105      	movs	r1, #5
 8015284:	4618      	mov	r0, r3
 8015286:	f7f9 fae9 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 801528a:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 801528e:	4620      	mov	r0, r4
 8015290:	f7fa ff7f 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    controlPanel.add(blueText);
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f503 724e 	add.w	r2, r3, #824	; 0x338
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 80152a0:	4619      	mov	r1, r3
 80152a2:	4610      	mov	r0, r2
 80152a4:	f7f4 fd14 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    greenText.setXY(16, 165);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 80152ae:	22a5      	movs	r2, #165	; 0xa5
 80152b0:	2110      	movs	r1, #16
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7f4 f937 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    greenText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f503 64fe 	add.w	r4, r3, #2032	; 0x7f0
 80152be:	2250      	movs	r2, #80	; 0x50
 80152c0:	213e      	movs	r1, #62	; 0x3e
 80152c2:	202c      	movs	r0, #44	; 0x2c
 80152c4:	f7f5 fdd2 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80152c8:	4603      	mov	r3, r0
 80152ca:	4619      	mov	r1, r3
 80152cc:	4620      	mov	r0, r4
 80152ce:	f7f9 fbb8 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    greenText.setLinespacing(0);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 80152d8:	2100      	movs	r1, #0
 80152da:	4618      	mov	r0, r3
 80152dc:	f7ff f905 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    greenText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID13));
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f503 64fe 	add.w	r4, r3, #2032	; 0x7f0
 80152e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80152ea:	2106      	movs	r1, #6
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7f9 fab5 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 80152f2:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80152f6:	4620      	mov	r0, r4
 80152f8:	f7fa ff4b 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    controlPanel.add(greenText);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
 8015308:	4619      	mov	r1, r3
 801530a:	4610      	mov	r0, r2
 801530c:	f7f4 fce0 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    redText.setXY(16, 125);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8015316:	227d      	movs	r2, #125	; 0x7d
 8015318:	2110      	movs	r1, #16
 801531a:	4618      	mov	r0, r3
 801531c:	f7f4 f903 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    redText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	f603 0424 	addw	r4, r3, #2084	; 0x824
 8015326:	2250      	movs	r2, #80	; 0x50
 8015328:	213e      	movs	r1, #62	; 0x3e
 801532a:	202c      	movs	r0, #44	; 0x2c
 801532c:	f7f5 fd9e 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015330:	4603      	mov	r3, r0
 8015332:	4619      	mov	r1, r3
 8015334:	4620      	mov	r0, r4
 8015336:	f7f9 fb84 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    redText.setLinespacing(0);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8015340:	2100      	movs	r1, #0
 8015342:	4618      	mov	r0, r3
 8015344:	f7ff f8d1 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    redText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	f603 0424 	addw	r4, r3, #2084	; 0x824
 801534e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8015352:	2107      	movs	r1, #7
 8015354:	4618      	mov	r0, r3
 8015356:	f7f9 fa81 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 801535a:	f8b7 107c 	ldrh.w	r1, [r7, #124]	; 0x7c
 801535e:	4620      	mov	r0, r4
 8015360:	f7fa ff17 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    controlPanel.add(redText);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f503 724e 	add.w	r2, r3, #824	; 0x338
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8015370:	4619      	mov	r1, r3
 8015372:	4610      	mov	r0, r2
 8015374:	f7f4 fcac 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mainPage.add(controlPanel);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8015384:	4619      	mov	r1, r3
 8015386:	4610      	mov	r0, r2
 8015388:	f7f8 fcd8 	bl	800dd3c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    statusPanel.setWidth(240);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8015392:	21f0      	movs	r1, #240	; 0xf0
 8015394:	4618      	mov	r0, r3
 8015396:	f7f4 f8e4 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
    statusPanel.setHeight(320);
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	f603 0358 	addw	r3, r3, #2136	; 0x858
 80153a0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7f4 f8eb 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>

    autoModeButton.setXY(90, 118);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f603 0384 	addw	r3, r3, #2180	; 0x884
 80153b0:	2276      	movs	r2, #118	; 0x76
 80153b2:	215a      	movs	r1, #90	; 0x5a
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7f4 f8b6 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    autoModeButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_RE_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_RE_LARGE_BUTTON_ON_ID));
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	f603 0484 	addw	r4, r3, #2180	; 0x884
 80153c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80153c4:	2109      	movs	r1, #9
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7f4 f831 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 80153cc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80153d0:	210a      	movs	r1, #10
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7f4 f82b 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 80153d8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80153dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80153e0:	4619      	mov	r1, r3
 80153e2:	4620      	mov	r0, r4
 80153e4:	f7fb fb58 	bl	8010a98 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>
    autoModeButton.setAction(buttonCallback);
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	f603 0284 	addw	r2, r3, #2180	; 0x884
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80153f4:	33e4      	adds	r3, #228	; 0xe4
 80153f6:	4619      	mov	r1, r3
 80153f8:	4610      	mov	r0, r2
 80153fa:	f7f7 fced 	bl	800cdd8 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
    statusPanel.add(autoModeButton);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f603 0258 	addw	r2, r3, #2136	; 0x858
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	f603 0384 	addw	r3, r3, #2180	; 0x884
 801540a:	4619      	mov	r1, r3
 801540c:	4610      	mov	r0, r2
 801540e:	f7f4 fc5f 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    statusTitle.setXY(56, 40);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8015418:	2228      	movs	r2, #40	; 0x28
 801541a:	2138      	movs	r1, #56	; 0x38
 801541c:	4618      	mov	r0, r3
 801541e:	f7f4 f882 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    statusTitle.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f603 04bc 	addw	r4, r3, #2236	; 0x8bc
 8015428:	2250      	movs	r2, #80	; 0x50
 801542a:	213e      	movs	r1, #62	; 0x3e
 801542c:	202c      	movs	r0, #44	; 0x2c
 801542e:	f7f5 fd1d 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015432:	4603      	mov	r3, r0
 8015434:	4619      	mov	r1, r3
 8015436:	4620      	mov	r0, r4
 8015438:	f7f9 fb03 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    statusTitle.setLinespacing(0);
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8015442:	2100      	movs	r1, #0
 8015444:	4618      	mov	r0, r3
 8015446:	f7ff f850 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    statusTitle.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	f603 04bc 	addw	r4, r3, #2236	; 0x8bc
 8015450:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015454:	2109      	movs	r1, #9
 8015456:	4618      	mov	r0, r3
 8015458:	f7f9 fa00 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 801545c:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8015460:	4620      	mov	r0, r4
 8015462:	f7fa fe96 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(statusTitle);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	f603 0258 	addw	r2, r3, #2136	; 0x858
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8015472:	4619      	mov	r1, r3
 8015474:	4610      	mov	r0, r2
 8015476:	f7f4 fc2b 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    ambiText.setXY(38, 255);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 8015480:	22ff      	movs	r2, #255	; 0xff
 8015482:	2126      	movs	r1, #38	; 0x26
 8015484:	4618      	mov	r0, r3
 8015486:	f7f4 f84e 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    ambiText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f503 640f 	add.w	r4, r3, #2288	; 0x8f0
 8015490:	2250      	movs	r2, #80	; 0x50
 8015492:	213e      	movs	r1, #62	; 0x3e
 8015494:	202c      	movs	r0, #44	; 0x2c
 8015496:	f7f5 fce9 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801549a:	4603      	mov	r3, r0
 801549c:	4619      	mov	r1, r3
 801549e:	4620      	mov	r0, r4
 80154a0:	f7f9 facf 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ambiText.setLinespacing(0);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 80154aa:	2100      	movs	r1, #0
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7ff f81c 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    ambiText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID17));
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	f503 640f 	add.w	r4, r3, #2288	; 0x8f0
 80154b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80154bc:	210a      	movs	r1, #10
 80154be:	4618      	mov	r0, r3
 80154c0:	f7f9 f9cc 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 80154c4:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 80154c8:	4620      	mov	r0, r4
 80154ca:	f7fa fe62 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(ambiText);
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f603 0258 	addw	r2, r3, #2136	; 0x858
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 80154da:	4619      	mov	r1, r3
 80154dc:	4610      	mov	r0, r2
 80154de:	f7f4 fbf7 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    humiText.setXY(38, 215);
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f603 1324 	addw	r3, r3, #2340	; 0x924
 80154e8:	22d7      	movs	r2, #215	; 0xd7
 80154ea:	2126      	movs	r1, #38	; 0x26
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7f4 f81a 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    humiText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f603 1424 	addw	r4, r3, #2340	; 0x924
 80154f8:	2250      	movs	r2, #80	; 0x50
 80154fa:	213e      	movs	r1, #62	; 0x3e
 80154fc:	202c      	movs	r0, #44	; 0x2c
 80154fe:	f7f5 fcb5 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015502:	4603      	mov	r3, r0
 8015504:	4619      	mov	r1, r3
 8015506:	4620      	mov	r0, r4
 8015508:	f7f9 fa9b 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    humiText.setLinespacing(0);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8015512:	2100      	movs	r1, #0
 8015514:	4618      	mov	r0, r3
 8015516:	f7fe ffe8 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    humiText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID18));
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f603 1424 	addw	r4, r3, #2340	; 0x924
 8015520:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015524:	210b      	movs	r1, #11
 8015526:	4618      	mov	r0, r3
 8015528:	f7f9 f998 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 801552c:	f8b7 1090 	ldrh.w	r1, [r7, #144]	; 0x90
 8015530:	4620      	mov	r0, r4
 8015532:	f7fa fe2e 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(humiText);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f603 0258 	addw	r2, r3, #2136	; 0x858
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	f603 1324 	addw	r3, r3, #2340	; 0x924
 8015542:	4619      	mov	r1, r3
 8015544:	4610      	mov	r0, r2
 8015546:	f7f4 fbc3 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    tempText.setXY(38, 175);
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f603 1358 	addw	r3, r3, #2392	; 0x958
 8015550:	22af      	movs	r2, #175	; 0xaf
 8015552:	2126      	movs	r1, #38	; 0x26
 8015554:	4618      	mov	r0, r3
 8015556:	f7f3 ffe6 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    tempText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f603 1458 	addw	r4, r3, #2392	; 0x958
 8015560:	2250      	movs	r2, #80	; 0x50
 8015562:	213e      	movs	r1, #62	; 0x3e
 8015564:	202c      	movs	r0, #44	; 0x2c
 8015566:	f7f5 fc81 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801556a:	4603      	mov	r3, r0
 801556c:	4619      	mov	r1, r3
 801556e:	4620      	mov	r0, r4
 8015570:	f7f9 fa67 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    tempText.setLinespacing(0);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f603 1358 	addw	r3, r3, #2392	; 0x958
 801557a:	2100      	movs	r1, #0
 801557c:	4618      	mov	r0, r3
 801557e:	f7fe ffb4 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    tempText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID19));
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	f603 1458 	addw	r4, r3, #2392	; 0x958
 8015588:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801558c:	210c      	movs	r1, #12
 801558e:	4618      	mov	r0, r3
 8015590:	f7f9 f964 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8015594:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
 8015598:	4620      	mov	r0, r4
 801559a:	f7fa fdfa 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(tempText);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	f603 0258 	addw	r2, r3, #2136	; 0x858
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	f603 1358 	addw	r3, r3, #2392	; 0x958
 80155aa:	4619      	mov	r1, r3
 80155ac:	4610      	mov	r0, r2
 80155ae:	f7f4 fb8f 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    modeText.setXY(30, 125);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f603 138c 	addw	r3, r3, #2444	; 0x98c
 80155b8:	227d      	movs	r2, #125	; 0x7d
 80155ba:	211e      	movs	r1, #30
 80155bc:	4618      	mov	r0, r3
 80155be:	f7f3 ffb2 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    modeText.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f603 148c 	addw	r4, r3, #2444	; 0x98c
 80155c8:	2250      	movs	r2, #80	; 0x50
 80155ca:	213e      	movs	r1, #62	; 0x3e
 80155cc:	202c      	movs	r0, #44	; 0x2c
 80155ce:	f7f5 fc4d 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80155d2:	4603      	mov	r3, r0
 80155d4:	4619      	mov	r1, r3
 80155d6:	4620      	mov	r0, r4
 80155d8:	f7f9 fa33 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    modeText.setLinespacing(0);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f603 138c 	addw	r3, r3, #2444	; 0x98c
 80155e2:	2100      	movs	r1, #0
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7fe ff80 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    modeText.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	f603 148c 	addw	r4, r3, #2444	; 0x98c
 80155f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80155f4:	210d      	movs	r1, #13
 80155f6:	4618      	mov	r0, r3
 80155f8:	f7f9 f930 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 80155fc:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8015600:	4620      	mov	r0, r4
 8015602:	f7fa fdc6 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(modeText);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f603 0258 	addw	r2, r3, #2136	; 0x858
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f603 138c 	addw	r3, r3, #2444	; 0x98c
 8015612:	4619      	mov	r1, r3
 8015614:	4610      	mov	r0, r2
 8015616:	f7f4 fb5b 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    ambiBgBar.setXY(118, 250);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8015620:	22fa      	movs	r2, #250	; 0xfa
 8015622:	2176      	movs	r1, #118	; 0x76
 8015624:	4618      	mov	r0, r3
 8015626:	f7f3 ff7e 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    ambiBgBar.setProgressIndicatorPosition(2, 2, 80, 30);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f503 601c 	add.w	r0, r3, #2496	; 0x9c0
 8015630:	231e      	movs	r3, #30
 8015632:	9300      	str	r3, [sp, #0]
 8015634:	2350      	movs	r3, #80	; 0x50
 8015636:	2202      	movs	r2, #2
 8015638:	2102      	movs	r1, #2
 801563a:	f7f9 febf 	bl	800f3bc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    ambiBgBar.setRange(0, 100);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f503 601c 	add.w	r0, r3, #2496	; 0x9c0
 8015644:	2300      	movs	r3, #0
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	2300      	movs	r3, #0
 801564a:	2264      	movs	r2, #100	; 0x64
 801564c:	2100      	movs	r1, #0
 801564e:	f7f9 fd53 	bl	800f0f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    ambiBgBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8015658:	2100      	movs	r1, #0
 801565a:	4618      	mov	r0, r3
 801565c:	f7f9 fbf0 	bl	800ee40 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    ambiBgBar.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
 8015666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801566a:	2105      	movs	r1, #5
 801566c:	4618      	mov	r0, r3
 801566e:	f7f3 fede 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015672:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015676:	4619      	mov	r1, r3
 8015678:	4620      	mov	r0, r4
 801567a:	f7f9 fc89 	bl	800ef90 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    ambiBgBar.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 234, 167));
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	f503 641c 	add.w	r4, r3, #2496	; 0x9c0
 8015684:	22a7      	movs	r2, #167	; 0xa7
 8015686:	21ea      	movs	r1, #234	; 0xea
 8015688:	20ff      	movs	r0, #255	; 0xff
 801568a:	f7f5 fbef 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801568e:	4603      	mov	r3, r0
 8015690:	4619      	mov	r1, r3
 8015692:	4620      	mov	r0, r4
 8015694:	f7f9 febd 	bl	800f412 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    ambiBgBar.setValue(60);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 801569e:	213c      	movs	r1, #60	; 0x3c
 80156a0:	4618      	mov	r0, r3
 80156a2:	f7f9 fef3 	bl	800f48c <_ZN8touchgfx11BoxProgress8setValueEi>
    statusPanel.add(ambiBgBar);
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	f603 0258 	addw	r2, r3, #2136	; 0x858
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 80156b2:	4619      	mov	r1, r3
 80156b4:	4610      	mov	r0, r2
 80156b6:	f7f4 fb0b 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    humiBgBar.setXY(118, 210);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 80156c0:	22d2      	movs	r2, #210	; 0xd2
 80156c2:	2176      	movs	r1, #118	; 0x76
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7f3 ff2e 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    humiBgBar.setProgressIndicatorPosition(2, 2, 80, 30);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f503 6028 	add.w	r0, r3, #2688	; 0xa80
 80156d0:	231e      	movs	r3, #30
 80156d2:	9300      	str	r3, [sp, #0]
 80156d4:	2350      	movs	r3, #80	; 0x50
 80156d6:	2202      	movs	r2, #2
 80156d8:	2102      	movs	r1, #2
 80156da:	f7f9 fe6f 	bl	800f3bc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    humiBgBar.setRange(0, 100);
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f503 6028 	add.w	r0, r3, #2688	; 0xa80
 80156e4:	2300      	movs	r3, #0
 80156e6:	9300      	str	r3, [sp, #0]
 80156e8:	2300      	movs	r3, #0
 80156ea:	2264      	movs	r2, #100	; 0x64
 80156ec:	2100      	movs	r1, #0
 80156ee:	f7f9 fd03 	bl	800f0f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    humiBgBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 80156f8:	2100      	movs	r1, #0
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7f9 fba0 	bl	800ee40 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    humiBgBar.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	f503 6428 	add.w	r4, r3, #2688	; 0xa80
 8015706:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801570a:	2105      	movs	r1, #5
 801570c:	4618      	mov	r0, r3
 801570e:	f7f3 fe8e 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015712:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015716:	4619      	mov	r1, r3
 8015718:	4620      	mov	r0, r4
 801571a:	f7f9 fc39 	bl	800ef90 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    humiBgBar.setColor(touchgfx::Color::getColorFrom24BitRGB(85, 239, 196));
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f503 6428 	add.w	r4, r3, #2688	; 0xa80
 8015724:	22c4      	movs	r2, #196	; 0xc4
 8015726:	21ef      	movs	r1, #239	; 0xef
 8015728:	2055      	movs	r0, #85	; 0x55
 801572a:	f7f5 fb9f 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801572e:	4603      	mov	r3, r0
 8015730:	4619      	mov	r1, r3
 8015732:	4620      	mov	r0, r4
 8015734:	f7f9 fe6d 	bl	800f412 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    humiBgBar.setValue(60);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 801573e:	213c      	movs	r1, #60	; 0x3c
 8015740:	4618      	mov	r0, r3
 8015742:	f7f9 fea3 	bl	800f48c <_ZN8touchgfx11BoxProgress8setValueEi>
    statusPanel.add(humiBgBar);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f603 0258 	addw	r2, r3, #2136	; 0x858
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8015752:	4619      	mov	r1, r3
 8015754:	4610      	mov	r0, r2
 8015756:	f7f4 fabb 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    tempBgBar.setXY(118, 170);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8015760:	22aa      	movs	r2, #170	; 0xaa
 8015762:	2176      	movs	r1, #118	; 0x76
 8015764:	4618      	mov	r0, r3
 8015766:	f7f3 fede 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
    tempBgBar.setProgressIndicatorPosition(2, 2, 80, 30);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f503 6034 	add.w	r0, r3, #2880	; 0xb40
 8015770:	231e      	movs	r3, #30
 8015772:	9300      	str	r3, [sp, #0]
 8015774:	2350      	movs	r3, #80	; 0x50
 8015776:	2202      	movs	r2, #2
 8015778:	2102      	movs	r1, #2
 801577a:	f7f9 fe1f 	bl	800f3bc <_ZN8touchgfx11BoxProgress28setProgressIndicatorPositionEssss>
    tempBgBar.setRange(0, 100);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f503 6034 	add.w	r0, r3, #2880	; 0xb40
 8015784:	2300      	movs	r3, #0
 8015786:	9300      	str	r3, [sp, #0]
 8015788:	2300      	movs	r3, #0
 801578a:	2264      	movs	r2, #100	; 0x64
 801578c:	2100      	movs	r1, #0
 801578e:	f7f9 fcb3 	bl	800f0f8 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEsstt>
    tempBgBar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8015798:	2100      	movs	r1, #0
 801579a:	4618      	mov	r0, r3
 801579c:	f7f9 fb50 	bl	800ee40 <_ZN8touchgfx25AbstractDirectionProgress12setDirectionENS0_13DirectionTypeE>
    tempBgBar.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_TEXT_PROGRESS_BG_SQUARE_ID));
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f503 6434 	add.w	r4, r3, #2880	; 0xb40
 80157a6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80157aa:	2105      	movs	r1, #5
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7f3 fe3e 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 80157b2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80157b6:	4619      	mov	r1, r3
 80157b8:	4620      	mov	r0, r4
 80157ba:	f7f9 fbe9 	bl	800ef90 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    tempBgBar.setColor(touchgfx::Color::getColorFrom24BitRGB(250, 177, 160));
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f503 6434 	add.w	r4, r3, #2880	; 0xb40
 80157c4:	22a0      	movs	r2, #160	; 0xa0
 80157c6:	21b1      	movs	r1, #177	; 0xb1
 80157c8:	20fa      	movs	r0, #250	; 0xfa
 80157ca:	f7f5 fb4f 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80157ce:	4603      	mov	r3, r0
 80157d0:	4619      	mov	r1, r3
 80157d2:	4620      	mov	r0, r4
 80157d4:	f7f9 fe1d 	bl	800f412 <_ZN8touchgfx11BoxProgress8setColorENS_9colortypeE>
    tempBgBar.setValue(60);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80157de:	213c      	movs	r1, #60	; 0x3c
 80157e0:	4618      	mov	r0, r3
 80157e2:	f7f9 fe53 	bl	800f48c <_ZN8touchgfx11BoxProgress8setValueEi>
    statusPanel.add(tempBgBar);
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f603 0258 	addw	r2, r3, #2136	; 0x858
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80157f2:	4619      	mov	r1, r3
 80157f4:	4610      	mov	r0, r2
 80157f6:	f7f4 fa6b 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    ambiVal.setPosition(118, 255, 84, 25);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f503 6040 	add.w	r0, r3, #3072	; 0xc00
 8015800:	2319      	movs	r3, #25
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	2354      	movs	r3, #84	; 0x54
 8015806:	22ff      	movs	r2, #255	; 0xff
 8015808:	2176      	movs	r1, #118	; 0x76
 801580a:	f7f3 fe41 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    ambiVal.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f503 6440 	add.w	r4, r3, #3072	; 0xc00
 8015814:	2250      	movs	r2, #80	; 0x50
 8015816:	213e      	movs	r1, #62	; 0x3e
 8015818:	202c      	movs	r0, #44	; 0x2c
 801581a:	f7f5 fb27 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801581e:	4603      	mov	r3, r0
 8015820:	4619      	mov	r1, r3
 8015822:	4620      	mov	r0, r4
 8015824:	f7f9 f90d 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    ambiVal.setLinespacing(0);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801582e:	2100      	movs	r1, #0
 8015830:	4618      	mov	r0, r3
 8015832:	f7fe fe5a 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(ambiValBuffer, AMBIVAL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID27).getText());
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f503 3486 	add.w	r4, r3, #68608	; 0x10c00
 801583c:	34a8      	adds	r4, #168	; 0xa8
 801583e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015842:	2111      	movs	r1, #17
 8015844:	4618      	mov	r0, r3
 8015846:	f7f9 f809 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 801584a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801584e:	4618      	mov	r0, r3
 8015850:	f7f9 f828 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 8015854:	4603      	mov	r3, r0
 8015856:	4a90      	ldr	r2, [pc, #576]	; (8015a98 <_ZN15Screen1ViewBaseC1Ev+0x10fc>)
 8015858:	210a      	movs	r1, #10
 801585a:	4620      	mov	r0, r4
 801585c:	f007 fac2 	bl	801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    ambiVal.setWildcard(ambiValBuffer);
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	f503 6240 	add.w	r2, r3, #3072	; 0xc00
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 801586c:	33a8      	adds	r3, #168	; 0xa8
 801586e:	4619      	mov	r1, r3
 8015870:	4610      	mov	r0, r2
 8015872:	f7f9 fa44 	bl	800ecfe <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    ambiVal.setTypedText(touchgfx::TypedText(T_SINGLEUSEID26));
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	f503 6440 	add.w	r4, r3, #3072	; 0xc00
 801587c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015880:	2110      	movs	r1, #16
 8015882:	4618      	mov	r0, r3
 8015884:	f7f8 ffea 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8015888:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 801588c:	4620      	mov	r0, r4
 801588e:	f7fa fc80 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(ambiVal);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f603 0258 	addw	r2, r3, #2136	; 0x858
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801589e:	4619      	mov	r1, r3
 80158a0:	4610      	mov	r0, r2
 80158a2:	f7f4 fa15 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    humiVal.setPosition(118, 215, 84, 25);
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	f603 4038 	addw	r0, r3, #3128	; 0xc38
 80158ac:	2319      	movs	r3, #25
 80158ae:	9300      	str	r3, [sp, #0]
 80158b0:	2354      	movs	r3, #84	; 0x54
 80158b2:	22d7      	movs	r2, #215	; 0xd7
 80158b4:	2176      	movs	r1, #118	; 0x76
 80158b6:	f7f3 fdeb 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    humiVal.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	f603 4438 	addw	r4, r3, #3128	; 0xc38
 80158c0:	2250      	movs	r2, #80	; 0x50
 80158c2:	213e      	movs	r1, #62	; 0x3e
 80158c4:	202c      	movs	r0, #44	; 0x2c
 80158c6:	f7f5 fad1 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 80158ca:	4603      	mov	r3, r0
 80158cc:	4619      	mov	r1, r3
 80158ce:	4620      	mov	r0, r4
 80158d0:	f7f9 f8b7 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    humiVal.setLinespacing(0);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 80158da:	2100      	movs	r1, #0
 80158dc:	4618      	mov	r0, r3
 80158de:	f7fe fe04 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(humiValBuffer, HUMIVAL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID29).getText());
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f503 3486 	add.w	r4, r3, #68608	; 0x10c00
 80158e8:	34bc      	adds	r4, #188	; 0xbc
 80158ea:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158ee:	2113      	movs	r1, #19
 80158f0:	4618      	mov	r0, r3
 80158f2:	f7f8 ffb3 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 80158f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7f8 ffd2 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 8015900:	4603      	mov	r3, r0
 8015902:	4a65      	ldr	r2, [pc, #404]	; (8015a98 <_ZN15Screen1ViewBaseC1Ev+0x10fc>)
 8015904:	210a      	movs	r1, #10
 8015906:	4620      	mov	r0, r4
 8015908:	f007 fa6c 	bl	801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    humiVal.setWildcard(humiValBuffer);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f603 4238 	addw	r2, r3, #3128	; 0xc38
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8015918:	33bc      	adds	r3, #188	; 0xbc
 801591a:	4619      	mov	r1, r3
 801591c:	4610      	mov	r0, r2
 801591e:	f7f9 f9ee 	bl	800ecfe <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    humiVal.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f603 4438 	addw	r4, r3, #3128	; 0xc38
 8015928:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801592c:	2112      	movs	r1, #18
 801592e:	4618      	mov	r0, r3
 8015930:	f7f8 ff94 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 8015934:	f8b7 10b4 	ldrh.w	r1, [r7, #180]	; 0xb4
 8015938:	4620      	mov	r0, r4
 801593a:	f7fa fc2a 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(humiVal);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f603 0258 	addw	r2, r3, #2136	; 0x858
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 801594a:	4619      	mov	r1, r3
 801594c:	4610      	mov	r0, r2
 801594e:	f7f4 f9bf 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>

    tempVal.setPosition(118, 175, 84, 25);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	f503 6047 	add.w	r0, r3, #3184	; 0xc70
 8015958:	2319      	movs	r3, #25
 801595a:	9300      	str	r3, [sp, #0]
 801595c:	2354      	movs	r3, #84	; 0x54
 801595e:	22af      	movs	r2, #175	; 0xaf
 8015960:	2176      	movs	r1, #118	; 0x76
 8015962:	f7f3 fd95 	bl	8009490 <_ZN8touchgfx8Drawable11setPositionEssss>
    tempVal.setColor(touchgfx::Color::getColorFrom24BitRGB(44, 62, 80));
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	f503 6447 	add.w	r4, r3, #3184	; 0xc70
 801596c:	2250      	movs	r2, #80	; 0x50
 801596e:	213e      	movs	r1, #62	; 0x3e
 8015970:	202c      	movs	r0, #44	; 0x2c
 8015972:	f7f5 fa7b 	bl	800ae6c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 8015976:	4603      	mov	r3, r0
 8015978:	4619      	mov	r1, r3
 801597a:	4620      	mov	r0, r4
 801597c:	f7f9 f861 	bl	800ea42 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    tempVal.setLinespacing(0);
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 8015986:	2100      	movs	r1, #0
 8015988:	4618      	mov	r0, r3
 801598a:	f7fe fdae 	bl	80144ea <_ZN8touchgfx8TextArea14setLinespacingEs>
    Unicode::snprintf(tempValBuffer, TEMPVAL_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f503 3486 	add.w	r4, r3, #68608	; 0x10c00
 8015994:	34d0      	adds	r4, #208	; 0xd0
 8015996:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801599a:	210f      	movs	r1, #15
 801599c:	4618      	mov	r0, r3
 801599e:	f7f8 ff5d 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 80159a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7f8 ff7c 	bl	800e8a4 <_ZNK8touchgfx9TypedText7getTextEv>
 80159ac:	4603      	mov	r3, r0
 80159ae:	4a3a      	ldr	r2, [pc, #232]	; (8015a98 <_ZN15Screen1ViewBaseC1Ev+0x10fc>)
 80159b0:	210a      	movs	r1, #10
 80159b2:	4620      	mov	r0, r4
 80159b4:	f007 fa16 	bl	801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    tempVal.setWildcard(tempValBuffer);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f503 6247 	add.w	r2, r3, #3184	; 0xc70
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80159c4:	33d0      	adds	r3, #208	; 0xd0
 80159c6:	4619      	mov	r1, r3
 80159c8:	4610      	mov	r0, r2
 80159ca:	f7f9 f998 	bl	800ecfe <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    tempVal.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f503 6447 	add.w	r4, r3, #3184	; 0xc70
 80159d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80159d8:	210e      	movs	r1, #14
 80159da:	4618      	mov	r0, r3
 80159dc:	f7f8 ff3e 	bl	800e85c <_ZN8touchgfx9TypedTextC1Et>
 80159e0:	f8b7 10bc 	ldrh.w	r1, [r7, #188]	; 0xbc
 80159e4:	4620      	mov	r0, r4
 80159e6:	f7fa fbd4 	bl	8010192 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>
    statusPanel.add(tempVal);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f603 0258 	addw	r2, r3, #2136	; 0x858
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 80159f6:	4619      	mov	r1, r3
 80159f8:	4610      	mov	r0, r2
 80159fa:	f7f4 f969 	bl	8009cd0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    mainPage.add(statusPanel);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f603 0358 	addw	r3, r3, #2136	; 0x858
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	4610      	mov	r0, r2
 8015a0e:	f7f8 f995 	bl	800dd3c <_ZN8touchgfx14SwipeContainer3addERNS_8DrawableE>

    mainPage.setPageIndicatorBitmaps(touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_NORMAL_ID), touchgfx::Bitmap(BITMAP_BLUE_PAGEINDICATOR_DOT_INDICATOR_SMALL_HIGHLIGHT_ID));
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8015a18:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015a1c:	2104      	movs	r1, #4
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f7f3 fd05 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015a24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015a28:	2103      	movs	r1, #3
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7f3 fcff 	bl	800942e <_ZN8touchgfx6BitmapC1Et>
 8015a30:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8015a34:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015a38:	4619      	mov	r1, r3
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	f7f8 fa24 	bl	800de88 <_ZN8touchgfx14SwipeContainer23setPageIndicatorBitmapsERKNS_6BitmapES3_>
    mainPage.setPageIndicatorXY(98, 0);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	3370      	adds	r3, #112	; 0x70
 8015a44:	2200      	movs	r2, #0
 8015a46:	2162      	movs	r1, #98	; 0x62
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7f8 fa2e 	bl	800deaa <_ZN8touchgfx14SwipeContainer18setPageIndicatorXYEss>
    mainPage.setSwipeCutoff(50);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	3370      	adds	r3, #112	; 0x70
 8015a52:	2132      	movs	r1, #50	; 0x32
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7f8 fa08 	bl	800de6a <_ZN8touchgfx14SwipeContainer14setSwipeCutoffEt>
    mainPage.setEndSwipeElasticWidth(50);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	3370      	adds	r3, #112	; 0x70
 8015a5e:	2132      	movs	r1, #50	; 0x32
 8015a60:	4618      	mov	r0, r3
 8015a62:	f7f8 f9f3 	bl	800de4c <_ZN8touchgfx14SwipeContainer23setEndSwipeElasticWidthEt>
    mainPage.setSelectedPage(2);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	3370      	adds	r3, #112	; 0x70
 8015a6a:	2102      	movs	r1, #2
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7f8 fa31 	bl	800ded4 <_ZN8touchgfx14SwipeContainer15setSelectedPageEh>

    add(background);
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	3340      	adds	r3, #64	; 0x40
 8015a78:	4619      	mov	r1, r3
 8015a7a:	4610      	mov	r0, r2
 8015a7c:	f7fe fd26 	bl	80144cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(mainPage);
 8015a80:	687a      	ldr	r2, [r7, #4]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	3370      	adds	r3, #112	; 0x70
 8015a86:	4619      	mov	r1, r3
 8015a88:	4610      	mov	r0, r2
 8015a8a:	f7fe fd1f 	bl	80144cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	4618      	mov	r0, r3
 8015a92:	37cc      	adds	r7, #204	; 0xcc
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd90      	pop	{r4, r7, pc}
 8015a98:	08022af0 	.word	0x08022af0

08015a9c <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b083      	sub	sp, #12
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]

}
 8015aa4:	bf00      	nop
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr

08015ab0 <_ZN15Screen1ViewBase15afterTransitionEv>:

//Called when the screen is done with transition/load
void Screen1ViewBase::afterTransition()
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
    //enterScreen
    //When screen is entered call virtual function
    //Call on_enter_screen
    on_enter_screen();
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	333c      	adds	r3, #60	; 0x3c
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	4798      	blx	r3
}
 8015ac4:	bf00      	nop
 8015ac6:	3708      	adds	r7, #8
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}

08015acc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	6039      	str	r1, [r7, #0]
    if (&src == &clearButton)
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8015adc:	683a      	ldr	r2, [r7, #0]
 8015ade:	429a      	cmp	r2, r3
 8015ae0:	d106      	bne.n	8015af0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //clearLog
        //When clearButton clicked call virtual function
        //Call on_click_clear_button
        on_click_clear_button();
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	3340      	adds	r3, #64	; 0x40
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	4798      	blx	r3
        //switchMode
        //When autoModeButton clicked call virtual function
        //Call on_click_mode
        on_click_mode();
    }
}
 8015aee:	e00b      	b.n	8015b08 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &autoModeButton)
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8015af6:	683a      	ldr	r2, [r7, #0]
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d105      	bne.n	8015b08 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        on_click_mode();
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	3344      	adds	r3, #68	; 0x44
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	4798      	blx	r3
}
 8015b08:	bf00      	nop
 8015b0a:	3708      	adds	r7, #8
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bd80      	pop	{r7, pc}

08015b10 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b084      	sub	sp, #16
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	60f8      	str	r0, [r7, #12]
 8015b18:	60b9      	str	r1, [r7, #8]
 8015b1a:	607a      	str	r2, [r7, #4]
    if (&src == &vibSlider)
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	f503 7366 	add.w	r3, r3, #920	; 0x398
 8015b22:	68ba      	ldr	r2, [r7, #8]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d107      	bne.n	8015b38 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x28>
    {
        //changeV
        //When vibSlider value changed call virtual function
        //Call on_change_V
        on_change_V(value);
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	3338      	adds	r3, #56	; 0x38
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	6879      	ldr	r1, [r7, #4]
 8015b32:	68f8      	ldr	r0, [r7, #12]
 8015b34:	4798      	blx	r3
        //changeR
        //When redSlider value changed call virtual function
        //Call on_change_R
        on_change_R(value);
    }
}
 8015b36:	e028      	b.n	8015b8a <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x7a>
    else if (&src == &blueSlider)
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8015b3e:	68ba      	ldr	r2, [r7, #8]
 8015b40:	429a      	cmp	r2, r3
 8015b42:	d107      	bne.n	8015b54 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x44>
        on_change_B(value);
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	3334      	adds	r3, #52	; 0x34
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	6879      	ldr	r1, [r7, #4]
 8015b4e:	68f8      	ldr	r0, [r7, #12]
 8015b50:	4798      	blx	r3
}
 8015b52:	e01a      	b.n	8015b8a <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x7a>
    else if (&src == &greenSlider)
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8015b5a:	68ba      	ldr	r2, [r7, #8]
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d107      	bne.n	8015b70 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x60>
        on_change_G(value);
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	3330      	adds	r3, #48	; 0x30
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	6879      	ldr	r1, [r7, #4]
 8015b6a:	68f8      	ldr	r0, [r7, #12]
 8015b6c:	4798      	blx	r3
}
 8015b6e:	e00c      	b.n	8015b8a <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x7a>
    else if (&src == &redSlider)
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8015b76:	68ba      	ldr	r2, [r7, #8]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	d106      	bne.n	8015b8a <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x7a>
        on_change_R(value);
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	332c      	adds	r3, #44	; 0x2c
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	6879      	ldr	r1, [r7, #4]
 8015b86:	68f8      	ldr	r0, [r7, #12]
 8015b88:	4798      	blx	r3
}
 8015b8a:	bf00      	nop
 8015b8c:	3710      	adds	r7, #16
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
	...

08015b94 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f005 ff94 	bl	801bacc <_ZN8touchgfx6ScreenC1Ev>
 8015ba4:	4a05      	ldr	r2, [pc, #20]	; (8015bbc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	601a      	str	r2, [r3, #0]
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2200      	movs	r2, #0
 8015bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3708      	adds	r7, #8
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}
 8015bba:	bf00      	nop
 8015bbc:	08023ffc 	.word	0x08023ffc

08015bc0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b084      	sub	sp, #16
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	60f8      	str	r0, [r7, #12]
 8015bc8:	60b9      	str	r1, [r7, #8]
 8015bca:	4639      	mov	r1, r7
 8015bcc:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7f7 f976 	bl	800cec4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8015bd8:	4a08      	ldr	r2, [pc, #32]	; (8015bfc <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	68ba      	ldr	r2, [r7, #8]
 8015be2:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	3308      	adds	r3, #8
 8015be8:	463a      	mov	r2, r7
 8015bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3710      	adds	r7, #16
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}
 8015bfc:	08023fe4 	.word	0x08023fe4

08015c00 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>:
class GenericCallback<T1, T2, void>
 8015c00:	b480      	push	{r7}
 8015c02:	b083      	sub	sp, #12
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
 8015c08:	4a04      	ldr	r2, [pc, #16]	; (8015c1c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev+0x1c>)
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	601a      	str	r2, [r3, #0]
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	4618      	mov	r0, r3
 8015c12:	370c      	adds	r7, #12
 8015c14:	46bd      	mov	sp, r7
 8015c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1a:	4770      	bx	lr
 8015c1c:	08024030 	.word	0x08024030

08015c20 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_2)(T1, T2))
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b084      	sub	sp, #16
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	60f8      	str	r0, [r7, #12]
 8015c28:	60b9      	str	r1, [r7, #8]
 8015c2a:	4639      	mov	r1, r7
 8015c2c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7ff ffe4 	bl	8015c00 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivEC1Ev>
 8015c38:	4a08      	ldr	r2, [pc, #32]	; (8015c5c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivEC1EPS1_MS1_FvS4_iE+0x3c>)
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	68ba      	ldr	r2, [r7, #8]
 8015c42:	605a      	str	r2, [r3, #4]
        this->pmemfun_2 = pmemfun_2;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	3308      	adds	r3, #8
 8015c48:	463a      	mov	r2, r7
 8015c4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015c4e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	4618      	mov	r0, r3
 8015c56:	3710      	adds	r7, #16
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	08023fcc 	.word	0x08023fcc

08015c60 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>:
    virtual ~GenericCallback()
 8015c60:	b480      	push	{r7}
 8015c62:	b083      	sub	sp, #12
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
    }
 8015c68:	4a04      	ldr	r2, [pc, #16]	; (8015c7c <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev+0x1c>)
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	601a      	str	r2, [r3, #0]
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	4618      	mov	r0, r3
 8015c72:	370c      	adds	r7, #12
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr
 8015c7c:	08024030 	.word	0x08024030

08015c80 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED0Ev>:
    virtual ~GenericCallback()
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b082      	sub	sp, #8
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	6078      	str	r0, [r7, #4]
    }
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f7ff ffe9 	bl	8015c60 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8015c8e:	2104      	movs	r1, #4
 8015c90:	6878      	ldr	r0, [r7, #4]
 8015c92:	f00a fe96 	bl	80209c2 <_ZdlPvj>
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3708      	adds	r7, #8
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}

08015ca0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b082      	sub	sp, #8
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	4a05      	ldr	r2, [pc, #20]	; (8015cc0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev+0x20>)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	601a      	str	r2, [r3, #0]
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7ff ffd5 	bl	8015c60 <_ZN8touchgfx15GenericCallbackIRKNS_6SliderEivED1Ev>
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3708      	adds	r7, #8
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	08023fcc 	.word	0x08023fcc

08015cc4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED0Ev>:
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	6878      	ldr	r0, [r7, #4]
 8015cce:	f7ff ffe7 	bl	8015ca0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>
 8015cd2:	2110      	movs	r1, #16
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f00a fe74 	bl	80209c2 <_ZdlPvj>
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3708      	adds	r7, #8
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	4a05      	ldr	r2, [pc, #20]	; (8015d04 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	601a      	str	r2, [r3, #0]
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7f7 f8f5 	bl	800cee4 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3708      	adds	r7, #8
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	08023fe4 	.word	0x08023fe4

08015d08 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b082      	sub	sp, #8
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f7ff ffe7 	bl	8015ce4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015d16:	2110      	movs	r1, #16
 8015d18:	6878      	ldr	r0, [r7, #4]
 8015d1a:	f00a fe52 	bl	80209c2 <_ZdlPvj>
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	4618      	mov	r0, r3
 8015d22:	3708      	adds	r7, #8
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}

08015d28 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b084      	sub	sp, #16
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	60f8      	str	r0, [r7, #12]
 8015d30:	60b9      	str	r1, [r7, #8]
 8015d32:	607a      	str	r2, [r7, #4]
        (pobject->*pmemfun_2)(t1, t2);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	68fa      	ldr	r2, [r7, #12]
 8015d3a:	68d2      	ldr	r2, [r2, #12]
 8015d3c:	1052      	asrs	r2, r2, #1
 8015d3e:	1898      	adds	r0, r3, r2
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	68db      	ldr	r3, [r3, #12]
 8015d44:	f003 0301 	and.w	r3, r3, #1
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d102      	bne.n	8015d52 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i+0x2a>
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	e00a      	b.n	8015d68 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i+0x40>
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	68fa      	ldr	r2, [r7, #12]
 8015d58:	68d2      	ldr	r2, [r2, #12]
 8015d5a:	1052      	asrs	r2, r2, #1
 8015d5c:	4413      	add	r3, r2
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	68fa      	ldr	r2, [r7, #12]
 8015d62:	6892      	ldr	r2, [r2, #8]
 8015d64:	4413      	add	r3, r2
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	687a      	ldr	r2, [r7, #4]
 8015d6a:	68b9      	ldr	r1, [r7, #8]
 8015d6c:	4798      	blx	r3
    }
 8015d6e:	bf00      	nop
 8015d70:	3710      	adds	r7, #16
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}

08015d76 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv>:
    virtual bool isValid() const
 8015d76:	b480      	push	{r7}
 8015d78:	b083      	sub	sp, #12
 8015d7a:	af00      	add	r7, sp, #0
 8015d7c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_2 != 0);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d010      	beq.n	8015da8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	689b      	ldr	r3, [r3, #8]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d107      	bne.n	8015d9e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	f003 0301 	and.w	r3, r3, #1
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d101      	bne.n	8015d9e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x28>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	e000      	b.n	8015da0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x2a>
 8015d9e:	2300      	movs	r3, #0
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d001      	beq.n	8015da8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x32>
 8015da4:	2301      	movs	r3, #1
 8015da6:	e000      	b.n	8015daa <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x34>
 8015da8:	2300      	movs	r3, #0
    }
 8015daa:	4618      	mov	r0, r3
 8015dac:	370c      	adds	r7, #12
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr

08015db6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015db6:	b580      	push	{r7, lr}
 8015db8:	b082      	sub	sp, #8
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
 8015dbe:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	68d2      	ldr	r2, [r2, #12]
 8015dc8:	1052      	asrs	r2, r2, #1
 8015dca:	1898      	adds	r0, r3, r2
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	f003 0301 	and.w	r3, r3, #1
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d102      	bne.n	8015dde <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	689b      	ldr	r3, [r3, #8]
 8015ddc:	e00a      	b.n	8015df4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	68d2      	ldr	r2, [r2, #12]
 8015de6:	1052      	asrs	r2, r2, #1
 8015de8:	4413      	add	r3, r2
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	6892      	ldr	r2, [r2, #8]
 8015df0:	4413      	add	r3, r2
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	6839      	ldr	r1, [r7, #0]
 8015df6:	4798      	blx	r3
    }
 8015df8:	bf00      	nop
 8015dfa:	3708      	adds	r7, #8
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}

08015e00 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8015e00:	b480      	push	{r7}
 8015e02:	b083      	sub	sp, #12
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d010      	beq.n	8015e32 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	689b      	ldr	r3, [r3, #8]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d107      	bne.n	8015e28 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	f003 0301 	and.w	r3, r3, #1
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d101      	bne.n	8015e28 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015e24:	2301      	movs	r3, #1
 8015e26:	e000      	b.n	8015e2a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8015e28:	2300      	movs	r3, #0
 8015e2a:	2b01      	cmp	r3, #1
 8015e2c:	d001      	beq.n	8015e32 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e000      	b.n	8015e34 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8015e32:	2300      	movs	r3, #0
    }
 8015e34:	4618      	mov	r0, r3
 8015e36:	370c      	adds	r7, #12
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e3e:	4770      	bx	lr

08015e40 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8015e40:	b480      	push	{r7}
 8015e42:	af00      	add	r7, sp, #0
    return bitmap_database;
 8015e44:	4b02      	ldr	r3, [pc, #8]	; (8015e50 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4e:	4770      	bx	lr
 8015e50:	08024040 	.word	0x08024040

08015e54 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 8015e54:	b480      	push	{r7}
 8015e56:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8015e58:	230b      	movs	r3, #11
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8015e64:	b480      	push	{r7}
 8015e66:	b085      	sub	sp, #20
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	4613      	mov	r3, r2
 8015e70:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 8015e72:	4a07      	ldr	r2, [pc, #28]	; (8015e90 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	6013      	str	r3, [r2, #0]
        fonts = f;
 8015e78:	4a06      	ldr	r2, [pc, #24]	; (8015e94 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8015e7e:	4a06      	ldr	r2, [pc, #24]	; (8015e98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8015e80:	88fb      	ldrh	r3, [r7, #6]
 8015e82:	8013      	strh	r3, [r2, #0]
    }
 8015e84:	bf00      	nop
 8015e86:	3714      	adds	r7, #20
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8e:	4770      	bx	lr
 8015e90:	2001a910 	.word	0x2001a910
 8015e94:	2001a918 	.word	0x2001a918
 8015e98:	2001a914 	.word	0x2001a914

08015e9c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8015e9c:	b590      	push	{r4, r7, lr}
 8015e9e:	b085      	sub	sp, #20
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	4603      	mov	r3, r0
 8015ea4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8015eaa:	88fb      	ldrh	r3, [r7, #6]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d127      	bne.n	8015f00 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8015eb0:	88fb      	ldrh	r3, [r7, #6]
 8015eb2:	4a1e      	ldr	r2, [pc, #120]	; (8015f2c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d016      	beq.n	8015eea <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8015ebc:	88fb      	ldrh	r3, [r7, #6]
 8015ebe:	4a1b      	ldr	r2, [pc, #108]	; (8015f2c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ec4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	68ba      	ldr	r2, [r7, #8]
 8015ecc:	4413      	add	r3, r2
 8015ece:	4a18      	ldr	r2, [pc, #96]	; (8015f30 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015ed0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	68ba      	ldr	r2, [r7, #8]
 8015ed8:	4413      	add	r3, r2
 8015eda:	4a16      	ldr	r2, [pc, #88]	; (8015f34 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015edc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	689b      	ldr	r3, [r3, #8]
 8015ee2:	68ba      	ldr	r2, [r7, #8]
 8015ee4:	4413      	add	r3, r2
 8015ee6:	60fb      	str	r3, [r7, #12]
 8015ee8:	e00a      	b.n	8015f00 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015eea:	4b11      	ldr	r3, [pc, #68]	; (8015f30 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015eec:	4a12      	ldr	r2, [pc, #72]	; (8015f38 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8015eee:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8015ef0:	4a12      	ldr	r2, [pc, #72]	; (8015f3c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8015ef2:	4b10      	ldr	r3, [pc, #64]	; (8015f34 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015ef4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015ef6:	88fb      	ldrh	r3, [r7, #6]
 8015ef8:	4a11      	ldr	r2, [pc, #68]	; (8015f40 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015efe:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d00d      	beq.n	8015f22 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015f06:	4a0f      	ldr	r2, [pc, #60]	; (8015f44 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8015f08:	88fb      	ldrh	r3, [r7, #6]
 8015f0a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8015f0c:	f000 f83e 	bl	8015f8c <_ZN17TypedTextDatabase8getFontsEv>
 8015f10:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015f12:	f000 f833 	bl	8015f7c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015f16:	4603      	mov	r3, r0
 8015f18:	461a      	mov	r2, r3
 8015f1a:	4621      	mov	r1, r4
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f7ff ffa1 	bl	8015e64 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015f22:	bf00      	nop
 8015f24:	3714      	adds	r7, #20
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd90      	pop	{r4, r7, pc}
 8015f2a:	bf00      	nop
 8015f2c:	20008bb0 	.word	0x20008bb0
 8015f30:	20008bb8 	.word	0x20008bb8
 8015f34:	20008bbc 	.word	0x20008bbc
 8015f38:	0807dbac 	.word	0x0807dbac
 8015f3c:	0807db58 	.word	0x0807db58
 8015f40:	0807dc9c 	.word	0x0807dc9c
 8015f44:	20008bb4 	.word	0x20008bb4

08015f48 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b083      	sub	sp, #12
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	460b      	mov	r3, r1
 8015f52:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015f54:	4b07      	ldr	r3, [pc, #28]	; (8015f74 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015f56:	681a      	ldr	r2, [r3, #0]
 8015f58:	4b07      	ldr	r3, [pc, #28]	; (8015f78 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8015f5a:	6819      	ldr	r1, [r3, #0]
 8015f5c:	887b      	ldrh	r3, [r7, #2]
 8015f5e:	009b      	lsls	r3, r3, #2
 8015f60:	440b      	add	r3, r1
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	005b      	lsls	r3, r3, #1
 8015f66:	4413      	add	r3, r2
}
 8015f68:	4618      	mov	r0, r3
 8015f6a:	370c      	adds	r7, #12
 8015f6c:	46bd      	mov	sp, r7
 8015f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f72:	4770      	bx	lr
 8015f74:	20008bb8 	.word	0x20008bb8
 8015f78:	20008bbc 	.word	0x20008bbc

08015f7c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8015f80:	2315      	movs	r3, #21
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	46bd      	mov	sp, r7
 8015f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8a:	4770      	bx	lr

08015f8c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	af00      	add	r7, sp, #0
    return _fonts;
 8015f90:	4b02      	ldr	r3, [pc, #8]	; (8015f9c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015f92:	4618      	mov	r0, r3
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr
 8015f9c:	20008bc0 	.word	0x20008bc0

08015fa0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        _fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
}  // namespace TypedTextDatabase
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d113      	bne.n	8015fd8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	d10e      	bne.n	8015fd8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8015fba:	f7fd fcb7 	bl	801392c <_Z23getFont_verdana_20_4bppv>
 8015fbe:	4602      	mov	r2, r0
};
 8015fc0:	4b07      	ldr	r3, [pc, #28]	; (8015fe0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015fc2:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 8015fc4:	f7fd fcf4 	bl	80139b0 <_Z23getFont_verdana_40_4bppv>
 8015fc8:	4602      	mov	r2, r0
};
 8015fca:	4b05      	ldr	r3, [pc, #20]	; (8015fe0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015fcc:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 8015fce:	f7fd fc6b 	bl	80138a8 <_Z23getFont_verdana_10_4bppv>
 8015fd2:	4602      	mov	r2, r0
};
 8015fd4:	4b02      	ldr	r3, [pc, #8]	; (8015fe0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8015fd6:	609a      	str	r2, [r3, #8]
}  // namespace TypedTextDatabase
 8015fd8:	bf00      	nop
 8015fda:	3708      	adds	r7, #8
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}
 8015fe0:	20008bc0 	.word	0x20008bc0

08015fe4 <_GLOBAL__sub_I__fonts>:
 8015fe4:	b580      	push	{r7, lr}
 8015fe6:	af00      	add	r7, sp, #0
 8015fe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015fec:	2001      	movs	r0, #1
 8015fee:	f7ff ffd7 	bl	8015fa0 <_Z41__static_initialization_and_destruction_0ii>
 8015ff2:	bd80      	pop	{r7, pc}

08015ff4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
 8015ffc:	4a05      	ldr	r2, [pc, #20]	; (8016014 <_ZN19FrontendApplicationD1Ev+0x20>)
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	601a      	str	r2, [r3, #0]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	4618      	mov	r0, r3
 8016006:	f7fd ff3b 	bl	8013e80 <_ZN23FrontendApplicationBaseD1Ev>
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	4618      	mov	r0, r3
 801600e:	3708      	adds	r7, #8
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}
 8016014:	08024124 	.word	0x08024124

08016018 <_ZN19FrontendApplicationD0Ev>:
 8016018:	b580      	push	{r7, lr}
 801601a:	b082      	sub	sp, #8
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f7ff ffe7 	bl	8015ff4 <_ZN19FrontendApplicationD1Ev>
 8016026:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f00a fcc9 	bl	80209c2 <_ZdlPvj>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	4618      	mov	r0, r3
 8016034:	3708      	adds	r7, #8
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}

0801603a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 801603a:	b580      	push	{r7, lr}
 801603c:	b082      	sub	sp, #8
 801603e:	af00      	add	r7, sp, #0
 8016040:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8016048:	4618      	mov	r0, r3
 801604a:	f000 f831 	bl	80160b0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	4618      	mov	r0, r3
 8016052:	f004 fc89 	bl	801a968 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8016056:	bf00      	nop
 8016058:	3708      	adds	r7, #8
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}
	...

08016060 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8016060:	b580      	push	{r7, lr}
 8016062:	b084      	sub	sp, #16
 8016064:	af00      	add	r7, sp, #0
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	60b9      	str	r1, [r7, #8]
 801606a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	687a      	ldr	r2, [r7, #4]
 8016070:	68b9      	ldr	r1, [r7, #8]
 8016072:	4618      	mov	r0, r3
 8016074:	f7fd ff7e 	bl	8013f74 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8016078:	4a03      	ldr	r2, [pc, #12]	; (8016088 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	601a      	str	r2, [r3, #0]
{
}
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	4618      	mov	r0, r3
 8016082:	3710      	adds	r7, #16
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}
 8016088:	08024124 	.word	0x08024124

0801608c <_ZN5ModelC1Ev>:
extern "C" {

}
#endif

Model::Model() : modelListener(0)
 801608c:	b480      	push	{r7}
 801608e:	b083      	sub	sp, #12
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2200      	movs	r2, #0
 8016098:	601a      	str	r2, [r3, #0]
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	2200      	movs	r2, #0
 801609e:	605a      	str	r2, [r3, #4]
{
}
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	4618      	mov	r0, r3
 80160a4:	370c      	adds	r7, #12
 80160a6:	46bd      	mov	sp, r7
 80160a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ac:	4770      	bx	lr
	...

080160b0 <_ZN5Model4tickEv>:

void Model::tick()
{
 80160b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160b4:	b088      	sub	sp, #32
 80160b6:	af00      	add	r7, sp, #0
 80160b8:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	tick_counter ++;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	1c5a      	adds	r2, r3, #1
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	601a      	str	r2, [r3, #0]
	if(tick_counter == TICK_PRESCALER) {
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	2b10      	cmp	r3, #16
 80160ca:	d164      	bne.n	8016196 <_ZN5Model4tickEv+0xe6>
		tick_counter = 0;
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	2200      	movs	r2, #0
 80160d0:	601a      	str	r2, [r3, #0]
		LED_State led = get_led_state();
 80160d2:	f107 0318 	add.w	r3, r7, #24
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7ea fe7a 	bl	8000dd0 <_Z13get_led_statev>
		Motor_State motor = get_motor_state();
 80160dc:	f7ea fe6c 	bl	8000db8 <_Z15get_motor_statev>
 80160e0:	4603      	mov	r3, r0
 80160e2:	82bb      	strh	r3, [r7, #20]
		Env_State env = get_env_state();
 80160e4:	f7ea fe52 	bl	8000d8c <_Z13get_env_statev>
 80160e8:	4603      	mov	r3, r0
 80160ea:	613b      	str	r3, [r7, #16]
		Node_State node = get_node_state();
 80160ec:	f7ea fe82 	bl	8000df4 <_Z14get_node_statev>
 80160f0:	4603      	mov	r3, r0
 80160f2:	60fb      	str	r3, [r7, #12]
		modelListener->setui_led(led.r, led.g, led.b);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	6858      	ldr	r0, [r3, #4]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	3308      	adds	r3, #8
 8016100:	681c      	ldr	r4, [r3, #0]
 8016102:	8b3b      	ldrh	r3, [r7, #24]
 8016104:	4619      	mov	r1, r3
 8016106:	8b7b      	ldrh	r3, [r7, #26]
 8016108:	461a      	mov	r2, r3
 801610a:	8bbb      	ldrh	r3, [r7, #28]
 801610c:	47a0      	blx	r4
		modelListener->setui_vibrate(motor.speed);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	685a      	ldr	r2, [r3, #4]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	330c      	adds	r3, #12
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	8ab9      	ldrh	r1, [r7, #20]
 801611e:	4610      	mov	r0, r2
 8016120:	4798      	blx	r3
		modelListener->setui_env(env.temp, env.humi, env.ambi/10.24);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	685d      	ldr	r5, [r3, #4]
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	685b      	ldr	r3, [r3, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	3310      	adds	r3, #16
 801612e:	681c      	ldr	r4, [r3, #0]
 8016130:	7c3b      	ldrb	r3, [r7, #16]
 8016132:	461e      	mov	r6, r3
 8016134:	7c7b      	ldrb	r3, [r7, #17]
 8016136:	4698      	mov	r8, r3
 8016138:	8a7b      	ldrh	r3, [r7, #18]
 801613a:	4618      	mov	r0, r3
 801613c:	f7ea fa02 	bl	8000544 <__aeabi_i2d>
 8016140:	a317      	add	r3, pc, #92	; (adr r3, 80161a0 <_ZN5Model4tickEv+0xf0>)
 8016142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016146:	f7ea fb91 	bl	800086c <__aeabi_ddiv>
 801614a:	4602      	mov	r2, r0
 801614c:	460b      	mov	r3, r1
 801614e:	4610      	mov	r0, r2
 8016150:	4619      	mov	r1, r3
 8016152:	f7ea fc73 	bl	8000a3c <__aeabi_d2iz>
 8016156:	4603      	mov	r3, r0
 8016158:	4642      	mov	r2, r8
 801615a:	4631      	mov	r1, r6
 801615c:	4628      	mov	r0, r5
 801615e:	47a0      	blx	r4
		modelListener->setui_log_append( get_debug_log_buf() );
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	685d      	ldr	r5, [r3, #4]
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	3314      	adds	r3, #20
 801616c:	681c      	ldr	r4, [r3, #0]
 801616e:	f7ea ff1f 	bl	8000fb0 <_Z17get_debug_log_bufv>
 8016172:	4603      	mov	r3, r0
 8016174:	4619      	mov	r1, r3
 8016176:	4628      	mov	r0, r5
 8016178:	47a0      	blx	r4
		if(node.auto_mode) {
 801617a:	7b3b      	ldrb	r3, [r7, #12]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d008      	beq.n	8016192 <_ZN5Model4tickEv+0xe2>
			if(env.ambi > node.ambi_throttle) turn_led_off();
 8016180:	8a7a      	ldrh	r2, [r7, #18]
 8016182:	89fb      	ldrh	r3, [r7, #14]
 8016184:	429a      	cmp	r2, r3
 8016186:	d902      	bls.n	801618e <_ZN5Model4tickEv+0xde>
 8016188:	f7ea febe 	bl	8000f08 <_Z12turn_led_offv>
 801618c:	e001      	b.n	8016192 <_ZN5Model4tickEv+0xe2>
			else turn_led_on();
 801618e:	f7ea feaf 	bl	8000ef0 <_Z11turn_led_onv>
		}
		clear_debug_log_buf();
 8016192:	f7ea ff17 	bl	8000fc4 <_Z19clear_debug_log_bufv>
	}
#endif
}
 8016196:	bf00      	nop
 8016198:	3720      	adds	r7, #32
 801619a:	46bd      	mov	sp, r7
 801619c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161a0:	47ae147b 	.word	0x47ae147b
 80161a4:	40247ae1 	.word	0x40247ae1

080161a8 <_ZN5Model9sethw_ledEiii>:

void Model::sethw_led(int r, int g, int b)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b086      	sub	sp, #24
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	60f8      	str	r0, [r7, #12]
 80161b0:	60b9      	str	r1, [r7, #8]
 80161b2:	607a      	str	r2, [r7, #4]
 80161b4:	603b      	str	r3, [r7, #0]
#ifndef SIMULATOR
	LED_State state = get_led_state();
 80161b6:	f107 0310 	add.w	r3, r7, #16
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7ea fe08 	bl	8000dd0 <_Z13get_led_statev>
	if(r>=0) state.r = r;
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	db02      	blt.n	80161cc <_ZN5Model9sethw_ledEiii+0x24>
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	823b      	strh	r3, [r7, #16]
	if(g>=0) state.g = g;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	db02      	blt.n	80161d8 <_ZN5Model9sethw_ledEiii+0x30>
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	827b      	strh	r3, [r7, #18]
	if(b>=0) state.b = b;
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	db02      	blt.n	80161e4 <_ZN5Model9sethw_ledEiii+0x3c>
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	82bb      	strh	r3, [r7, #20]
	set_led(state);
 80161e4:	f107 0310 	add.w	r3, r7, #16
 80161e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80161ec:	f7ea fe3a 	bl	8000e64 <_Z7set_led9LED_State>
#endif
}
 80161f0:	bf00      	nop
 80161f2:	3718      	adds	r7, #24
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}

080161f8 <_ZN5Model11sethw_motorEi>:

void Model::sethw_motor(int speed)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b084      	sub	sp, #16
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
#ifndef SIMULATOR
	Motor_State state = get_motor_state();
 8016202:	f7ea fdd9 	bl	8000db8 <_Z15get_motor_statev>
 8016206:	4603      	mov	r3, r0
 8016208:	81bb      	strh	r3, [r7, #12]
	state.speed = speed;
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	b29b      	uxth	r3, r3
 801620e:	81bb      	strh	r3, [r7, #12]
	set_motor(state);
 8016210:	89b8      	ldrh	r0, [r7, #12]
 8016212:	f7ea fe05 	bl	8000e20 <_Z9set_motor11Motor_State>
#endif
}
 8016216:	bf00      	nop
 8016218:	3710      	adds	r7, #16
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}

0801621e <_ZN5Model14sethw_automodeEi>:

void Model::sethw_automode(int mode)
{
 801621e:	b580      	push	{r7, lr}
 8016220:	b084      	sub	sp, #16
 8016222:	af00      	add	r7, sp, #0
 8016224:	6078      	str	r0, [r7, #4]
 8016226:	6039      	str	r1, [r7, #0]
#ifndef SIMULATOR
	Node_State state = get_node_state();
 8016228:	f7ea fde4 	bl	8000df4 <_Z14get_node_statev>
 801622c:	4603      	mov	r3, r0
 801622e:	60fb      	str	r3, [r7, #12]
	state.auto_mode = mode;
 8016230:	683b      	ldr	r3, [r7, #0]
 8016232:	b2db      	uxtb	r3, r3
 8016234:	733b      	strb	r3, [r7, #12]
	set_node(state);
 8016236:	68f8      	ldr	r0, [r7, #12]
 8016238:	f7ea fe78 	bl	8000f2c <_Z8set_node10Node_State>
#endif
}
 801623c:	bf00      	nop
 801623e:	3710      	adds	r7, #16
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8016244:	b480      	push	{r7}
 8016246:	b083      	sub	sp, #12
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
    {
    }
 801624c:	bf00      	nop
 801624e:	370c      	adds	r7, #12
 8016250:	46bd      	mov	sp, r7
 8016252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016256:	4770      	bx	lr

08016258 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8016258:	b480      	push	{r7}
 801625a:	b083      	sub	sp, #12
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
    {
    }
 8016260:	bf00      	nop
 8016262:	370c      	adds	r7, #12
 8016264:	46bd      	mov	sp, r7
 8016266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626a:	4770      	bx	lr

0801626c <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801626c:	b480      	push	{r7}
 801626e:	b083      	sub	sp, #12
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
    {
 8016274:	4a04      	ldr	r2, [pc, #16]	; (8016288 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	601a      	str	r2, [r3, #0]
    }
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	4618      	mov	r0, r3
 801627e:	370c      	adds	r7, #12
 8016280:	46bd      	mov	sp, r7
 8016282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016286:	4770      	bx	lr
 8016288:	080241c8 	.word	0x080241c8

0801628c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
    }
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	f7ff ffe9 	bl	801626c <_ZN8touchgfx9PresenterD1Ev>
 801629a:	2104      	movs	r1, #4
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f00a fb90 	bl	80209c2 <_ZdlPvj>
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	4618      	mov	r0, r3
 80162a6:	3708      	adds	r7, #8
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 80162ac:	b480      	push	{r7}
 80162ae:	b083      	sub	sp, #12
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
    {
 80162b4:	4a04      	ldr	r2, [pc, #16]	; (80162c8 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	601a      	str	r2, [r3, #0]
    }
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	4618      	mov	r0, r3
 80162be:	370c      	adds	r7, #12
 80162c0:	46bd      	mov	sp, r7
 80162c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c6:	4770      	bx	lr
 80162c8:	080241c8 	.word	0x080241c8

080162cc <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80162cc:	b480      	push	{r7}
 80162ce:	b083      	sub	sp, #12
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	4a06      	ldr	r2, [pc, #24]	; (80162f0 <_ZN13ModelListenerC1Ev+0x24>)
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	601a      	str	r2, [r3, #0]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	2200      	movs	r2, #0
 80162de:	605a      	str	r2, [r3, #4]
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	4618      	mov	r0, r3
 80162e4:	370c      	adds	r7, #12
 80162e6:	46bd      	mov	sp, r7
 80162e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ec:	4770      	bx	lr
 80162ee:	bf00      	nop
 80162f0:	080241a8 	.word	0x080241a8

080162f4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80162f4:	b480      	push	{r7}
 80162f6:	b083      	sub	sp, #12
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	4a04      	ldr	r2, [pc, #16]	; (8016310 <_ZN13ModelListenerD1Ev+0x1c>)
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	601a      	str	r2, [r3, #0]
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	4618      	mov	r0, r3
 8016306:	370c      	adds	r7, #12
 8016308:	46bd      	mov	sp, r7
 801630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630e:	4770      	bx	lr
 8016310:	080241a8 	.word	0x080241a8

08016314 <_ZN13ModelListenerD0Ev>:
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f7ff ffe9 	bl	80162f4 <_ZN13ModelListenerD1Ev>
 8016322:	2108      	movs	r1, #8
 8016324:	6878      	ldr	r0, [r7, #4]
 8016326:	f00a fb4c 	bl	80209c2 <_ZdlPvj>
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	4618      	mov	r0, r3
 801632e:	3708      	adds	r7, #8
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}

08016334 <_ZN13ModelListener9setui_ledEiii>:
    virtual void setui_led(int r, int g, int b) {};
 8016334:	b480      	push	{r7}
 8016336:	b085      	sub	sp, #20
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	60b9      	str	r1, [r7, #8]
 801633e:	607a      	str	r2, [r7, #4]
 8016340:	603b      	str	r3, [r7, #0]
 8016342:	bf00      	nop
 8016344:	3714      	adds	r7, #20
 8016346:	46bd      	mov	sp, r7
 8016348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634c:	4770      	bx	lr

0801634e <_ZN13ModelListener13setui_vibrateEi>:
	virtual void setui_vibrate(int v) {};
 801634e:	b480      	push	{r7}
 8016350:	b083      	sub	sp, #12
 8016352:	af00      	add	r7, sp, #0
 8016354:	6078      	str	r0, [r7, #4]
 8016356:	6039      	str	r1, [r7, #0]
 8016358:	bf00      	nop
 801635a:	370c      	adds	r7, #12
 801635c:	46bd      	mov	sp, r7
 801635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016362:	4770      	bx	lr

08016364 <_ZN13ModelListener9setui_envEiii>:
	virtual void setui_env(int temp, int humi, int ambi) {};
 8016364:	b480      	push	{r7}
 8016366:	b085      	sub	sp, #20
 8016368:	af00      	add	r7, sp, #0
 801636a:	60f8      	str	r0, [r7, #12]
 801636c:	60b9      	str	r1, [r7, #8]
 801636e:	607a      	str	r2, [r7, #4]
 8016370:	603b      	str	r3, [r7, #0]
 8016372:	bf00      	nop
 8016374:	3714      	adds	r7, #20
 8016376:	46bd      	mov	sp, r7
 8016378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637c:	4770      	bx	lr

0801637e <_ZN13ModelListener16setui_log_appendEPKc>:
	virtual void setui_log_append(const char* str) {};
 801637e:	b480      	push	{r7}
 8016380:	b083      	sub	sp, #12
 8016382:	af00      	add	r7, sp, #0
 8016384:	6078      	str	r0, [r7, #4]
 8016386:	6039      	str	r1, [r7, #0]
 8016388:	bf00      	nop
 801638a:	370c      	adds	r7, #12
 801638c:	46bd      	mov	sp, r7
 801638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016392:	4770      	bx	lr

08016394 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8016394:	b580      	push	{r7, lr}
 8016396:	b082      	sub	sp, #8
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	4a09      	ldr	r2, [pc, #36]	; (80163c4 <_ZN16Screen1PresenterD1Ev+0x30>)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	601a      	str	r2, [r3, #0]
 80163a2:	4a09      	ldr	r2, [pc, #36]	; (80163c8 <_ZN16Screen1PresenterD1Ev+0x34>)
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	605a      	str	r2, [r3, #4]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	3304      	adds	r3, #4
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7ff ffa1 	bl	80162f4 <_ZN13ModelListenerD1Ev>
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7ff ff59 	bl	801626c <_ZN8touchgfx9PresenterD1Ev>
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	4618      	mov	r0, r3
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}
 80163c4:	08024160 	.word	0x08024160
 80163c8:	08024188 	.word	0x08024188

080163cc <_ZThn4_N16Screen1PresenterD1Ev>:
 80163cc:	f1a0 0004 	sub.w	r0, r0, #4
 80163d0:	e7e0      	b.n	8016394 <_ZN16Screen1PresenterD1Ev>
 80163d2:	bf00      	nop

080163d4 <_ZN16Screen1PresenterD0Ev>:
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b082      	sub	sp, #8
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	f7ff ffd9 	bl	8016394 <_ZN16Screen1PresenterD1Ev>
 80163e2:	2110      	movs	r1, #16
 80163e4:	6878      	ldr	r0, [r7, #4]
 80163e6:	f00a faec 	bl	80209c2 <_ZdlPvj>
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	4618      	mov	r0, r3
 80163ee:	3708      	adds	r7, #8
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}

080163f4 <_ZThn4_N16Screen1PresenterD0Ev>:
 80163f4:	f1a0 0004 	sub.w	r0, r0, #4
 80163f8:	e7ec      	b.n	80163d4 <_ZN16Screen1PresenterD0Ev>
	...

080163fc <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <cstring>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b082      	sub	sp, #8
 8016400:	af00      	add	r7, sp, #0
 8016402:	6078      	str	r0, [r7, #4]
 8016404:	6039      	str	r1, [r7, #0]
    : view(v)
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	4618      	mov	r0, r3
 801640a:	f7ff ff4f 	bl	80162ac <_ZN8touchgfx9PresenterC1Ev>
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	3304      	adds	r3, #4
 8016412:	4618      	mov	r0, r3
 8016414:	f7ff ff5a 	bl	80162cc <_ZN13ModelListenerC1Ev>
 8016418:	4a06      	ldr	r2, [pc, #24]	; (8016434 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	601a      	str	r2, [r3, #0]
 801641e:	4a06      	ldr	r2, [pc, #24]	; (8016438 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	605a      	str	r2, [r3, #4]
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	683a      	ldr	r2, [r7, #0]
 8016428:	60da      	str	r2, [r3, #12]
{
}
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	4618      	mov	r0, r3
 801642e:	3708      	adds	r7, #8
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}
 8016434:	08024160 	.word	0x08024160
 8016438:	08024188 	.word	0x08024188

0801643c <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 801643c:	b480      	push	{r7}
 801643e:	b083      	sub	sp, #12
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]

}
 8016444:	bf00      	nop
 8016446:	370c      	adds	r7, #12
 8016448:	46bd      	mov	sp, r7
 801644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644e:	4770      	bx	lr

08016450 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8016450:	b480      	push	{r7}
 8016452:	b083      	sub	sp, #12
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]

}
 8016458:	bf00      	nop
 801645a:	370c      	adds	r7, #12
 801645c:	46bd      	mov	sp, r7
 801645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016462:	4770      	bx	lr

08016464 <_ZN16Screen1Presenter11sethw_led_rEi>:

void Screen1Presenter::sethw_led_r(int value)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b082      	sub	sp, #8
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
 801646c:	6039      	str	r1, [r7, #0]
	model->sethw_led(value, -1, -1);
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	6898      	ldr	r0, [r3, #8]
 8016472:	f04f 33ff 	mov.w	r3, #4294967295
 8016476:	f04f 32ff 	mov.w	r2, #4294967295
 801647a:	6839      	ldr	r1, [r7, #0]
 801647c:	f7ff fe94 	bl	80161a8 <_ZN5Model9sethw_ledEiii>
}
 8016480:	bf00      	nop
 8016482:	3708      	adds	r7, #8
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}

08016488 <_ZN16Screen1Presenter11sethw_led_gEi>:

void Screen1Presenter::sethw_led_g(int value)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
 8016490:	6039      	str	r1, [r7, #0]
	model->sethw_led(-1, value, -1);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	6898      	ldr	r0, [r3, #8]
 8016496:	f04f 33ff 	mov.w	r3, #4294967295
 801649a:	683a      	ldr	r2, [r7, #0]
 801649c:	f04f 31ff 	mov.w	r1, #4294967295
 80164a0:	f7ff fe82 	bl	80161a8 <_ZN5Model9sethw_ledEiii>
}
 80164a4:	bf00      	nop
 80164a6:	3708      	adds	r7, #8
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd80      	pop	{r7, pc}

080164ac <_ZN16Screen1Presenter11sethw_led_bEi>:

void Screen1Presenter::sethw_led_b(int value)
{
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b082      	sub	sp, #8
 80164b0:	af00      	add	r7, sp, #0
 80164b2:	6078      	str	r0, [r7, #4]
 80164b4:	6039      	str	r1, [r7, #0]
	model->sethw_led(-1, -1, value);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	6898      	ldr	r0, [r3, #8]
 80164ba:	683b      	ldr	r3, [r7, #0]
 80164bc:	f04f 32ff 	mov.w	r2, #4294967295
 80164c0:	f04f 31ff 	mov.w	r1, #4294967295
 80164c4:	f7ff fe70 	bl	80161a8 <_ZN5Model9sethw_ledEiii>
}
 80164c8:	bf00      	nop
 80164ca:	3708      	adds	r7, #8
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}

080164d0 <_ZN16Screen1Presenter11sethw_motorEi>:

void Screen1Presenter::sethw_motor(int value)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	6039      	str	r1, [r7, #0]
	model->sethw_motor(value);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	689b      	ldr	r3, [r3, #8]
 80164de:	6839      	ldr	r1, [r7, #0]
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7ff fe89 	bl	80161f8 <_ZN5Model11sethw_motorEi>
}
 80164e6:	bf00      	nop
 80164e8:	3708      	adds	r7, #8
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}

080164ee <_ZN16Screen1Presenter14sethw_automodeEi>:

void Screen1Presenter::sethw_automode(int value)
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	b082      	sub	sp, #8
 80164f2:	af00      	add	r7, sp, #0
 80164f4:	6078      	str	r0, [r7, #4]
 80164f6:	6039      	str	r1, [r7, #0]
	model->sethw_automode(value);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	689b      	ldr	r3, [r3, #8]
 80164fc:	6839      	ldr	r1, [r7, #0]
 80164fe:	4618      	mov	r0, r3
 8016500:	f7ff fe8d 	bl	801621e <_ZN5Model14sethw_automodeEi>
}
 8016504:	bf00      	nop
 8016506:	3708      	adds	r7, #8
 8016508:	46bd      	mov	sp, r7
 801650a:	bd80      	pop	{r7, pc}

0801650c <_ZN16Screen1Presenter16setui_log_appendEPKc>:

void Screen1Presenter::setui_log_append(const char* str)
{
 801650c:	b580      	push	{r7, lr}
 801650e:	b084      	sub	sp, #16
 8016510:	af00      	add	r7, sp, #0
 8016512:	6078      	str	r0, [r7, #4]
 8016514:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<int(strlen(str)); ++i)
 8016516:	2300      	movs	r3, #0
 8016518:	60fb      	str	r3, [r7, #12]
 801651a:	6838      	ldr	r0, [r7, #0]
 801651c:	f7e9 fe68 	bl	80001f0 <strlen>
 8016520:	4603      	mov	r3, r0
 8016522:	461a      	mov	r2, r3
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	4293      	cmp	r3, r2
 8016528:	da0d      	bge.n	8016546 <_ZN16Screen1Presenter16setui_log_appendEPKc+0x3a>
	{
		view.add_debug_log("%c", str[i]);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	68d8      	ldr	r0, [r3, #12]
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	683a      	ldr	r2, [r7, #0]
 8016532:	4413      	add	r3, r2
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	461a      	mov	r2, r3
 8016538:	4905      	ldr	r1, [pc, #20]	; (8016550 <_ZN16Screen1Presenter16setui_log_appendEPKc+0x44>)
 801653a:	f000 f8b9 	bl	80166b0 <_ZN11Screen1View13add_debug_logEPKcz>
	for(int i = 0; i<int(strlen(str)); ++i)
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	3301      	adds	r3, #1
 8016542:	60fb      	str	r3, [r7, #12]
 8016544:	e7e9      	b.n	801651a <_ZN16Screen1Presenter16setui_log_appendEPKc+0xe>
	}
}
 8016546:	bf00      	nop
 8016548:	3710      	adds	r7, #16
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}
 801654e:	bf00      	nop
 8016550:	08022af4 	.word	0x08022af4

08016554 <_ZThn4_N16Screen1Presenter16setui_log_appendEPKc>:
    void sethw_motor(int value);
    void sethw_automode(int value);
    void setui_led(int r, int g, int b);
    void setui_vibrate(int v);
    void setui_env(int temp, int humi, int ambi);
    void setui_log_append(const char* str);
 8016554:	f1a0 0004 	sub.w	r0, r0, #4
 8016558:	f7ff bfd8 	b.w	801650c <_ZN16Screen1Presenter16setui_log_appendEPKc>

0801655c <_ZN16Screen1Presenter9setui_ledEiii>:

void Screen1Presenter::setui_led(int r, int g, int b)
{
 801655c:	b580      	push	{r7, lr}
 801655e:	b084      	sub	sp, #16
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	607a      	str	r2, [r7, #4]
 8016568:	603b      	str	r3, [r7, #0]
	view.setui_led_slider(r, g, b);
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	68d8      	ldr	r0, [r3, #12]
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	687a      	ldr	r2, [r7, #4]
 8016572:	68b9      	ldr	r1, [r7, #8]
 8016574:	f000 f960 	bl	8016838 <_ZN11Screen1View16setui_led_sliderEiii>
}
 8016578:	bf00      	nop
 801657a:	3710      	adds	r7, #16
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}

08016580 <_ZThn4_N16Screen1Presenter9setui_ledEiii>:
    void setui_led(int r, int g, int b);
 8016580:	f1a0 0004 	sub.w	r0, r0, #4
 8016584:	f7ff bfea 	b.w	801655c <_ZN16Screen1Presenter9setui_ledEiii>

08016588 <_ZN16Screen1Presenter13setui_vibrateEi>:

void Screen1Presenter::setui_vibrate(int v)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b082      	sub	sp, #8
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
 8016590:	6039      	str	r1, [r7, #0]
	view.setui_vibrate_slider(v);
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	68db      	ldr	r3, [r3, #12]
 8016596:	6839      	ldr	r1, [r7, #0]
 8016598:	4618      	mov	r0, r3
 801659a:	f000 f97f 	bl	801689c <_ZN11Screen1View20setui_vibrate_sliderEi>
}
 801659e:	bf00      	nop
 80165a0:	3708      	adds	r7, #8
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}

080165a6 <_ZThn4_N16Screen1Presenter13setui_vibrateEi>:
    void setui_vibrate(int v);
 80165a6:	f1a0 0004 	sub.w	r0, r0, #4
 80165aa:	f7ff bfed 	b.w	8016588 <_ZN16Screen1Presenter13setui_vibrateEi>

080165ae <_ZN16Screen1Presenter9setui_envEiii>:

void Screen1Presenter::setui_env(int temp, int humi, int ambi)
{
 80165ae:	b580      	push	{r7, lr}
 80165b0:	b084      	sub	sp, #16
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	60f8      	str	r0, [r7, #12]
 80165b6:	60b9      	str	r1, [r7, #8]
 80165b8:	607a      	str	r2, [r7, #4]
 80165ba:	603b      	str	r3, [r7, #0]
	view.setui_temp_val(temp);
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	68b9      	ldr	r1, [r7, #8]
 80165c2:	4618      	mov	r0, r3
 80165c4:	f000 f980 	bl	80168c8 <_ZN11Screen1View14setui_temp_valEi>
	view.setui_humi_val(humi);
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	68db      	ldr	r3, [r3, #12]
 80165cc:	6879      	ldr	r1, [r7, #4]
 80165ce:	4618      	mov	r0, r3
 80165d0:	f000 f9a2 	bl	8016918 <_ZN11Screen1View14setui_humi_valEi>
	view.setui_ambi_val(ambi);
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	6839      	ldr	r1, [r7, #0]
 80165da:	4618      	mov	r0, r3
 80165dc:	f000 f9c4 	bl	8016968 <_ZN11Screen1View14setui_ambi_valEi>
}
 80165e0:	bf00      	nop
 80165e2:	3710      	adds	r7, #16
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}

080165e8 <_ZThn4_N16Screen1Presenter9setui_envEiii>:
    void setui_env(int temp, int humi, int ambi);
 80165e8:	f1a0 0004 	sub.w	r0, r0, #4
 80165ec:	f7ff bfdf 	b.w	80165ae <_ZN16Screen1Presenter9setui_envEiii>

080165f0 <_ZNK8touchgfx12ToggleButton8getStateEv>:
    bool getState() const
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b082      	sub	sp, #8
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
        return up == originalPressed;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	3334      	adds	r3, #52	; 0x34
 8016602:	4619      	mov	r1, r3
 8016604:	4610      	mov	r0, r2
 8016606:	f7fa fa33 	bl	8010a70 <_ZNK8touchgfx6BitmapeqERKS0_>
 801660a:	4603      	mov	r3, r0
    }
 801660c:	4618      	mov	r0, r3
 801660e:	3708      	adds	r7, #8
 8016610:	46bd      	mov	sp, r7
 8016612:	bd80      	pop	{r7, pc}

08016614 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8016614:	b580      	push	{r7, lr}
 8016616:	b082      	sub	sp, #8
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	4a05      	ldr	r2, [pc, #20]	; (8016634 <_ZN11Screen1ViewD1Ev+0x20>)
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	601a      	str	r2, [r3, #0]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	4618      	mov	r0, r3
 8016626:	f7fe f885 	bl	8014734 <_ZN15Screen1ViewBaseD1Ev>
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	4618      	mov	r0, r3
 801662e:	3708      	adds	r7, #8
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}
 8016634:	080241e0 	.word	0x080241e0

08016638 <_ZN11Screen1ViewD0Ev>:
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f7ff ffe7 	bl	8016614 <_ZN11Screen1ViewD1Ev>
 8016646:	4904      	ldr	r1, [pc, #16]	; (8016658 <_ZN11Screen1ViewD0Ev+0x20>)
 8016648:	6878      	ldr	r0, [r7, #4]
 801664a:	f00a f9ba 	bl	80209c2 <_ZdlPvj>
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	4618      	mov	r0, r3
 8016652:	3708      	adds	r7, #8
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}
 8016658:	00010d08 	.word	0x00010d08

0801665c <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <cstring>

Screen1View::Screen1View()
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	4618      	mov	r0, r3
 8016668:	f7fe f998 	bl	801499c <_ZN15Screen1ViewBaseC1Ev>
 801666c:	4a03      	ldr	r2, [pc, #12]	; (801667c <_ZN11Screen1ViewC1Ev+0x20>)
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	601a      	str	r2, [r3, #0]
{

}
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}
 801667c:	080241e0 	.word	0x080241e0

08016680 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	4618      	mov	r0, r3
 801668c:	f7ff fa06 	bl	8015a9c <_ZN15Screen1ViewBase11setupScreenEv>
}
 8016690:	bf00      	nop
 8016692:	3708      	adds	r7, #8
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}

08016698 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b082      	sub	sp, #8
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7fd fef2 	bl	801448c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80166a8:	bf00      	nop
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <_ZN11Screen1View13add_debug_logEPKcz>:

void Screen1View::add_debug_log(const char* szFormat, ...)
{
 80166b0:	b40e      	push	{r1, r2, r3}
 80166b2:	b590      	push	{r4, r7, lr}
 80166b4:	b084      	sub	sp, #16
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	6078      	str	r0, [r7, #4]
	va_list args;
	va_start(args, szFormat);
 80166ba:	f107 0320 	add.w	r3, r7, #32
 80166be:	60fb      	str	r3, [r7, #12]
	Unicode::vsnprintf(&logContentBuffer[logSize], LOGCONTENT_SIZE-logSize-1, szFormat, args);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80166c6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80166ca:	881b      	ldrh	r3, [r3, #0]
 80166cc:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80166d0:	005b      	lsls	r3, r3, #1
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	18d0      	adds	r0, r2, r3
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80166dc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80166e0:	881b      	ldrh	r3, [r3, #0]
 80166e2:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 80166e6:	337f      	adds	r3, #127	; 0x7f
 80166e8:	b299      	uxth	r1, r3
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	69fa      	ldr	r2, [r7, #28]
 80166ee:	f006 fb53 	bl	801cd98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
	logSize = logSize + Unicode::strlen(&logContentBuffer[logSize]);
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80166f8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80166fc:	881c      	ldrh	r4, [r3, #0]
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8016704:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8016708:	881b      	ldrh	r3, [r3, #0]
 801670a:	f203 6354 	addw	r3, r3, #1620	; 0x654
 801670e:	005b      	lsls	r3, r3, #1
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	4413      	add	r3, r2
 8016714:	4618      	mov	r0, r3
 8016716:	f006 f850 	bl	801c7ba <_ZN8touchgfx7Unicode6strlenEPKt>
 801671a:	4603      	mov	r3, r0
 801671c:	4423      	add	r3, r4
 801671e:	b29a      	uxth	r2, r3
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8016726:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801672a:	801a      	strh	r2, [r3, #0]
	logContent.invalidate();
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8016732:	4618      	mov	r0, r3
 8016734:	f004 fe83 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
	va_end(args);
}
 8016738:	bf00      	nop
 801673a:	3710      	adds	r7, #16
 801673c:	46bd      	mov	sp, r7
 801673e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8016742:	b003      	add	sp, #12
 8016744:	4770      	bx	lr

08016746 <_ZN11Screen1View11on_change_REi>:

void Screen1View::on_change_R(int value)
{
 8016746:	b580      	push	{r7, lr}
 8016748:	b082      	sub	sp, #8
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
 801674e:	6039      	str	r1, [r7, #0]
	presenter->sethw_led_r(value);
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016754:	6839      	ldr	r1, [r7, #0]
 8016756:	4618      	mov	r0, r3
 8016758:	f7ff fe84 	bl	8016464 <_ZN16Screen1Presenter11sethw_led_rEi>
}
 801675c:	bf00      	nop
 801675e:	3708      	adds	r7, #8
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <_ZN11Screen1View11on_change_GEi>:

void Screen1View::on_change_G(int value)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
 801676c:	6039      	str	r1, [r7, #0]
	presenter->sethw_led_g(value);
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016772:	6839      	ldr	r1, [r7, #0]
 8016774:	4618      	mov	r0, r3
 8016776:	f7ff fe87 	bl	8016488 <_ZN16Screen1Presenter11sethw_led_gEi>
}
 801677a:	bf00      	nop
 801677c:	3708      	adds	r7, #8
 801677e:	46bd      	mov	sp, r7
 8016780:	bd80      	pop	{r7, pc}

08016782 <_ZN11Screen1View11on_change_BEi>:

void Screen1View::on_change_B(int value)
{
 8016782:	b580      	push	{r7, lr}
 8016784:	b082      	sub	sp, #8
 8016786:	af00      	add	r7, sp, #0
 8016788:	6078      	str	r0, [r7, #4]
 801678a:	6039      	str	r1, [r7, #0]
	presenter->sethw_led_b(value);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	4618      	mov	r0, r3
 8016794:	f7ff fe8a 	bl	80164ac <_ZN16Screen1Presenter11sethw_led_bEi>
}
 8016798:	bf00      	nop
 801679a:	3708      	adds	r7, #8
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <_ZN11Screen1View11on_change_VEi>:

void Screen1View::on_change_V(int value)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b082      	sub	sp, #8
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	6039      	str	r1, [r7, #0]
	presenter->sethw_motor(value);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80167ae:	6839      	ldr	r1, [r7, #0]
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7ff fe8d 	bl	80164d0 <_ZN16Screen1Presenter11sethw_motorEi>
}
 80167b6:	bf00      	nop
 80167b8:	3708      	adds	r7, #8
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}

080167be <_ZN11Screen1View15on_enter_screenEv>:

void Screen1View::on_enter_screen()
{
 80167be:	b480      	push	{r7}
 80167c0:	b083      	sub	sp, #12
 80167c2:	af00      	add	r7, sp, #0
 80167c4:	6078      	str	r0, [r7, #4]

}
 80167c6:	bf00      	nop
 80167c8:	370c      	adds	r7, #12
 80167ca:	46bd      	mov	sp, r7
 80167cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d0:	4770      	bx	lr

080167d2 <_ZN11Screen1View21on_click_clear_buttonEv>:

void Screen1View::on_click_clear_button()
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b082      	sub	sp, #8
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	6078      	str	r0, [r7, #4]
	memset(logContentBuffer, 0, sizeof(logContentBuffer));
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f603 43a8 	addw	r3, r3, #3240	; 0xca8
 80167e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80167e4:	2100      	movs	r1, #0
 80167e6:	4618      	mov	r0, r3
 80167e8:	f00a f983 	bl	8020af2 <memset>
	logSize = 0;
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80167f2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80167f6:	2200      	movs	r2, #0
 80167f8:	801a      	strh	r2, [r3, #0]
	logContent.invalidate();
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8016800:	4618      	mov	r0, r3
 8016802:	f004 fe1c 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8016806:	bf00      	nop
 8016808:	3708      	adds	r7, #8
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}

0801680e <_ZN11Screen1View13on_click_modeEv>:

void Screen1View::on_click_mode()
{
 801680e:	b590      	push	{r4, r7, lr}
 8016810:	b083      	sub	sp, #12
 8016812:	af00      	add	r7, sp, #0
 8016814:	6078      	str	r0, [r7, #4]
	presenter->sethw_automode(autoModeButton.getState());
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8016820:	4618      	mov	r0, r3
 8016822:	f7ff fee5 	bl	80165f0 <_ZNK8touchgfx12ToggleButton8getStateEv>
 8016826:	4603      	mov	r3, r0
 8016828:	4619      	mov	r1, r3
 801682a:	4620      	mov	r0, r4
 801682c:	f7ff fe5f 	bl	80164ee <_ZN16Screen1Presenter14sethw_automodeEi>
}
 8016830:	bf00      	nop
 8016832:	370c      	adds	r7, #12
 8016834:	46bd      	mov	sp, r7
 8016836:	bd90      	pop	{r4, r7, pc}

08016838 <_ZN11Screen1View16setui_led_sliderEiii>:

void Screen1View::setui_led_slider(int r, int g, int b)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b084      	sub	sp, #16
 801683c:	af00      	add	r7, sp, #0
 801683e:	60f8      	str	r0, [r7, #12]
 8016840:	60b9      	str	r1, [r7, #8]
 8016842:	607a      	str	r2, [r7, #4]
 8016844:	603b      	str	r3, [r7, #0]
	redSlider.setValue(r);
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 801684c:	68b9      	ldr	r1, [r7, #8]
 801684e:	4618      	mov	r0, r3
 8016850:	f7f6 fe1a 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
	greenSlider.setValue(g);
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 801685a:	6879      	ldr	r1, [r7, #4]
 801685c:	4618      	mov	r0, r3
 801685e:	f7f6 fe13 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
	blueSlider.setValue(b);
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8016868:	6839      	ldr	r1, [r7, #0]
 801686a:	4618      	mov	r0, r3
 801686c:	f7f6 fe0c 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
	redSlider.invalidate();
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8016876:	4618      	mov	r0, r3
 8016878:	f004 fde1 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
	greenSlider.invalidate();
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f503 63b2 	add.w	r3, r3, #1424	; 0x590
 8016882:	4618      	mov	r0, r3
 8016884:	f004 fddb 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
	blueSlider.invalidate();
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	f203 4394 	addw	r3, r3, #1172	; 0x494
 801688e:	4618      	mov	r0, r3
 8016890:	f004 fdd5 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8016894:	bf00      	nop
 8016896:	3710      	adds	r7, #16
 8016898:	46bd      	mov	sp, r7
 801689a:	bd80      	pop	{r7, pc}

0801689c <_ZN11Screen1View20setui_vibrate_sliderEi>:

void Screen1View::setui_vibrate_slider(int v)
{
 801689c:	b580      	push	{r7, lr}
 801689e:	b082      	sub	sp, #8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
 80168a4:	6039      	str	r1, [r7, #0]
	vibSlider.setValue(v);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80168ac:	6839      	ldr	r1, [r7, #0]
 80168ae:	4618      	mov	r0, r3
 80168b0:	f7f6 fdea 	bl	800d488 <_ZN8touchgfx6Slider8setValueEi>
	vibSlider.invalidate();
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f503 7366 	add.w	r3, r3, #920	; 0x398
 80168ba:	4618      	mov	r0, r3
 80168bc:	f004 fdbf 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80168c0:	bf00      	nop
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <_ZN11Screen1View14setui_temp_valEi>:

void Screen1View::setui_temp_val(int value)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b082      	sub	sp, #8
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
	Unicode::snprintf(tempValBuffer, TEMPVAL_SIZE, "%d", value);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f503 3086 	add.w	r0, r3, #68608	; 0x10c00
 80168d8:	30d0      	adds	r0, #208	; 0xd0
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	4a0d      	ldr	r2, [pc, #52]	; (8016914 <_ZN11Screen1View14setui_temp_valEi+0x4c>)
 80168de:	210a      	movs	r1, #10
 80168e0:	f006 fa80 	bl	801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	tempBgBar.setValue(value);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80168ea:	6839      	ldr	r1, [r7, #0]
 80168ec:	4618      	mov	r0, r3
 80168ee:	f7f8 fdcd 	bl	800f48c <_ZN8touchgfx11BoxProgress8setValueEi>
	tempVal.invalidate();
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	f503 6347 	add.w	r3, r3, #3184	; 0xc70
 80168f8:	4618      	mov	r0, r3
 80168fa:	f004 fda0 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
	tempBgBar.invalidate();
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8016904:	4618      	mov	r0, r3
 8016906:	f004 fd9a 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}
 8016912:	bf00      	nop
 8016914:	08022be0 	.word	0x08022be0

08016918 <_ZN11Screen1View14setui_humi_valEi>:

void Screen1View::setui_humi_val(int value)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
	Unicode::snprintf(humiValBuffer, HUMIVAL_SIZE, "%d", value);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	f503 3086 	add.w	r0, r3, #68608	; 0x10c00
 8016928:	30bc      	adds	r0, #188	; 0xbc
 801692a:	683b      	ldr	r3, [r7, #0]
 801692c:	4a0d      	ldr	r2, [pc, #52]	; (8016964 <_ZN11Screen1View14setui_humi_valEi+0x4c>)
 801692e:	210a      	movs	r1, #10
 8016930:	f006 fa58 	bl	801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	humiBgBar.setValue(value);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 801693a:	6839      	ldr	r1, [r7, #0]
 801693c:	4618      	mov	r0, r3
 801693e:	f7f8 fda5 	bl	800f48c <_ZN8touchgfx11BoxProgress8setValueEi>
	humiVal.invalidate();
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f603 4338 	addw	r3, r3, #3128	; 0xc38
 8016948:	4618      	mov	r0, r3
 801694a:	f004 fd78 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
	humiBgBar.invalidate();
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8016954:	4618      	mov	r0, r3
 8016956:	f004 fd72 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 801695a:	bf00      	nop
 801695c:	3708      	adds	r7, #8
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	08022be0 	.word	0x08022be0

08016968 <_ZN11Screen1View14setui_ambi_valEi>:

void Screen1View::setui_ambi_val(int value)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	6039      	str	r1, [r7, #0]
	Unicode::snprintf(ambiValBuffer, AMBIVAL_SIZE, "%d", value);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f503 3086 	add.w	r0, r3, #68608	; 0x10c00
 8016978:	30a8      	adds	r0, #168	; 0xa8
 801697a:	683b      	ldr	r3, [r7, #0]
 801697c:	4a0d      	ldr	r2, [pc, #52]	; (80169b4 <_ZN11Screen1View14setui_ambi_valEi+0x4c>)
 801697e:	210a      	movs	r1, #10
 8016980:	f006 fa30 	bl	801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	ambiBgBar.setValue(value);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 801698a:	6839      	ldr	r1, [r7, #0]
 801698c:	4618      	mov	r0, r3
 801698e:	f7f8 fd7d 	bl	800f48c <_ZN8touchgfx11BoxProgress8setValueEi>
	ambiVal.invalidate();
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8016998:	4618      	mov	r0, r3
 801699a:	f004 fd50 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
	ambiBgBar.invalidate();
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 80169a4:	4618      	mov	r0, r3
 80169a6:	f004 fd4a 	bl	801b43e <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80169aa:	bf00      	nop
 80169ac:	3708      	adds	r7, #8
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	08022be0 	.word	0x08022be0

080169b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80169b8:	b480      	push	{r7}
 80169ba:	b083      	sub	sp, #12
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	2200      	movs	r2, #0
 80169c4:	801a      	strh	r2, [r3, #0]
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2200      	movs	r2, #0
 80169ca:	805a      	strh	r2, [r3, #2]
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2200      	movs	r2, #0
 80169d0:	809a      	strh	r2, [r3, #4]
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	2200      	movs	r2, #0
 80169d6:	80da      	strh	r2, [r3, #6]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2200      	movs	r2, #0
 80169dc:	811a      	strh	r2, [r3, #8]
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	2200      	movs	r2, #0
 80169e2:	815a      	strh	r2, [r3, #10]
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2200      	movs	r2, #0
 80169e8:	819a      	strh	r2, [r3, #12]
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2200      	movs	r2, #0
 80169ee:	739a      	strb	r2, [r3, #14]
        {
        }
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	4618      	mov	r0, r3
 80169f4:	370c      	adds	r7, #12
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr

080169fe <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b082      	sub	sp, #8
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7ff ffd5 	bl	80169b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2200      	movs	r2, #0
 8016a12:	611a      	str	r2, [r3, #16]
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	2200      	movs	r2, #0
 8016a18:	829a      	strh	r2, [r3, #20]
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	3708      	adds	r7, #8
 8016a20:	46bd      	mov	sp, r7
 8016a22:	bd80      	pop	{r7, pc}

08016a24 <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD()
 8016a24:	b480      	push	{r7}
 8016a26:	b083      	sub	sp, #12
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
    {
 8016a2c:	4a04      	ldr	r2, [pc, #16]	; (8016a40 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	601a      	str	r2, [r3, #0]
    }
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	4618      	mov	r0, r3
 8016a36:	370c      	adds	r7, #12
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr
 8016a40:	0802432c 	.word	0x0802432c

08016a44 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b082      	sub	sp, #8
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
    }
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7ff ffe9 	bl	8016a24 <_ZN8touchgfx3LCDD1Ev>
 8016a52:	2104      	movs	r1, #4
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f009 ffb4 	bl	80209c2 <_ZdlPvj>
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	3708      	adds	r7, #8
 8016a60:	46bd      	mov	sp, r7
 8016a62:	bd80      	pop	{r7, pc}

08016a64 <_ZN8touchgfx3LCD4initEv>:
    virtual void init()
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
    }
 8016a6c:	bf00      	nop
 8016a6e:	370c      	adds	r7, #12
 8016a70:	46bd      	mov	sp, r7
 8016a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a76:	4770      	bx	lr

08016a78 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 8016a78:	b480      	push	{r7}
 8016a7a:	b083      	sub	sp, #12
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 8016a80:	4a07      	ldr	r2, [pc, #28]	; (8016aa0 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	601a      	str	r2, [r3, #0]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	2200      	movs	r2, #0
 8016a8a:	605a      	str	r2, [r3, #4]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2200      	movs	r2, #0
 8016a90:	609a      	str	r2, [r3, #8]
    {
    }
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	4618      	mov	r0, r3
 8016a96:	370c      	adds	r7, #12
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a9e:	4770      	bx	lr
 8016aa0:	08024304 	.word	0x08024304

08016aa4 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 8016aa4:	b480      	push	{r7}
 8016aa6:	b083      	sub	sp, #12
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
 8016aac:	4a04      	ldr	r2, [pc, #16]	; (8016ac0 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	601a      	str	r2, [r3, #0]
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	370c      	adds	r7, #12
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abe:	4770      	bx	lr
 8016ac0:	08024304 	.word	0x08024304

08016ac4 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b082      	sub	sp, #8
 8016ac8:	af00      	add	r7, sp, #0
 8016aca:	6078      	str	r0, [r7, #4]
 8016acc:	6878      	ldr	r0, [r7, #4]
 8016ace:	f7ff ffe9 	bl	8016aa4 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8016ad2:	210c      	movs	r1, #12
 8016ad4:	6878      	ldr	r0, [r7, #4]
 8016ad6:	f009 ff74 	bl	80209c2 <_ZdlPvj>
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	4618      	mov	r0, r3
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b084      	sub	sp, #16
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	460b      	mov	r3, r1
 8016aee:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 8016af0:	78fb      	ldrb	r3, [r7, #3]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d011      	beq.n	8016b1a <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	3310      	adds	r3, #16
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	4798      	blx	r3
 8016b02:	4602      	mov	r2, r0
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	689b      	ldr	r3, [r3, #8]
 8016b08:	1ad3      	subs	r3, r2, r3
 8016b0a:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	685a      	ldr	r2, [r3, #4]
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	441a      	add	r2, r3
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8016b18:	e008      	b.n	8016b2c <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	3310      	adds	r3, #16
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	6878      	ldr	r0, [r7, #4]
 8016b24:	4798      	blx	r3
 8016b26:	4602      	mov	r2, r0
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	609a      	str	r2, [r3, #8]
    }
 8016b2c:	bf00      	nop
 8016b2e:	3710      	adds	r7, #16
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}

08016b34 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8016b34:	b480      	push	{r7}
 8016b36:	b083      	sub	sp, #12
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	685b      	ldr	r3, [r3, #4]
    }
 8016b40:	4618      	mov	r0, r3
 8016b42:	370c      	adds	r7, #12
 8016b44:	46bd      	mov	sp, r7
 8016b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4a:	4770      	bx	lr

08016b4c <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8016b4c:	b480      	push	{r7}
 8016b4e:	b083      	sub	sp, #12
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	683a      	ldr	r2, [r7, #0]
 8016b5a:	605a      	str	r2, [r3, #4]
    }
 8016b5c:	bf00      	nop
 8016b5e:	370c      	adds	r7, #12
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8016b76:	4a44      	ldr	r2, [pc, #272]	; (8016c88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	601a      	str	r2, [r3, #0]
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	68ba      	ldr	r2, [r7, #8]
 8016b80:	605a      	str	r2, [r3, #4]
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	687a      	ldr	r2, [r7, #4]
 8016b86:	609a      	str	r2, [r3, #8]
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	683a      	ldr	r2, [r7, #0]
 8016b8c:	60da      	str	r2, [r3, #12]
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	2200      	movs	r2, #0
 8016b92:	611a      	str	r2, [r3, #16]
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	2200      	movs	r2, #0
 8016b98:	615a      	str	r2, [r3, #20]
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	619a      	str	r2, [r3, #24]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	331c      	adds	r3, #28
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7ff ff2a 	bl	80169fe <_ZN8touchgfx8GesturesC1Ev>
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	2200      	movs	r2, #0
 8016bae:	639a      	str	r2, [r3, #56]	; 0x38
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	641a      	str	r2, [r3, #64]	; 0x40
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	2201      	movs	r2, #1
 8016bce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2201      	movs	r2, #1
 8016bd6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	2200      	movs	r2, #0
 8016bde:	64da      	str	r2, [r3, #76]	; 0x4c
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	3350      	adds	r3, #80	; 0x50
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7f2 fc0b 	bl	8009400 <_ZN8touchgfx4RectC1Ev>
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	2201      	movs	r2, #1
 8016bee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	2200      	movs	r2, #0
 8016bf6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	2201      	movs	r2, #1
 8016c06:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	2200      	movs	r2, #0
 8016c16:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	2200      	movs	r2, #0
 8016c26:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	2200      	movs	r2, #0
 8016c36:	671a      	str	r2, [r3, #112]	; 0x70
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
        instance = this;
 8016c40:	4a12      	ldr	r2, [pc, #72]	; (8016c8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8016c46:	4a12      	ldr	r2, [pc, #72]	; (8016c90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016c48:	8b3b      	ldrh	r3, [r7, #24]
 8016c4a:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8016c4c:	4a11      	ldr	r2, [pc, #68]	; (8016c94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016c4e:	8bbb      	ldrh	r3, [r7, #28]
 8016c50:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8016c52:	4b11      	ldr	r3, [pc, #68]	; (8016c98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x130>)
 8016c54:	2200      	movs	r2, #0
 8016c56:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016c58:	4b0d      	ldr	r3, [pc, #52]	; (8016c90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x128>)
 8016c5a:	881a      	ldrh	r2, [r3, #0]
 8016c5c:	4b0f      	ldr	r3, [pc, #60]	; (8016c9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x134>)
 8016c5e:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016c60:	4b0c      	ldr	r3, [pc, #48]	; (8016c94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x12c>)
 8016c62:	881a      	ldrh	r2, [r3, #0]
 8016c64:	4b0e      	ldr	r3, [pc, #56]	; (8016ca0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x138>)
 8016c66:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8016c68:	8b3a      	ldrh	r2, [r7, #24]
 8016c6a:	8bbb      	ldrh	r3, [r7, #28]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d301      	bcc.n	8016c74 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>
 8016c70:	2200      	movs	r2, #0
 8016c72:	e000      	b.n	8016c76 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10e>
 8016c74:	2201      	movs	r2, #1
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3710      	adds	r7, #16
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}
 8016c86:	bf00      	nop
 8016c88:	08024960 	.word	0x08024960
 8016c8c:	2001a8ac 	.word	0x2001a8ac
 8016c90:	2001a8a0 	.word	0x2001a8a0
 8016c94:	2001a8a2 	.word	0x2001a8a2
 8016c98:	2001a8a4 	.word	0x2001a8a4
 8016c9c:	2001a8a6 	.word	0x2001a8a6
 8016ca0:	2001a8a8 	.word	0x2001a8a8

08016ca4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 8016ca4:	b480      	push	{r7}
 8016ca6:	b083      	sub	sp, #12
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
 8016cac:	4a04      	ldr	r2, [pc, #16]	; (8016cc0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	601a      	str	r2, [r3, #0]
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	370c      	adds	r7, #12
 8016cb8:	46bd      	mov	sp, r7
 8016cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cbe:	4770      	bx	lr
 8016cc0:	08024960 	.word	0x08024960

08016cc4 <_ZN8touchgfx3HALD0Ev>:
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b082      	sub	sp, #8
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f7ff ffe9 	bl	8016ca4 <_ZN8touchgfx3HALD1Ev>
 8016cd2:	2178      	movs	r1, #120	; 0x78
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f009 fe74 	bl	80209c2 <_ZdlPvj>
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}

08016ce4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
    void lockDMAToFrontPorch(bool enableLock)
 8016ce4:	b480      	push	{r7}
 8016ce6:	b083      	sub	sp, #12
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	6078      	str	r0, [r7, #4]
 8016cec:	460b      	mov	r3, r1
 8016cee:	70fb      	strb	r3, [r7, #3]
        lockDMAToPorch = enableLock;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	78fa      	ldrb	r2, [r7, #3]
 8016cf4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    }
 8016cf8:	bf00      	nop
 8016cfa:	370c      	adds	r7, #12
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d02:	4770      	bx	lr

08016d04 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
    void setFrameRateCompensation(bool enabled)
 8016d04:	b480      	push	{r7}
 8016d06:	b083      	sub	sp, #12
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
 8016d0c:	460b      	mov	r3, r1
 8016d0e:	70fb      	strb	r3, [r7, #3]
        vSyncCompensationEnabled = enabled;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	78fa      	ldrb	r2, [r7, #3]
 8016d14:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    };
 8016d18:	bf00      	nop
 8016d1a:	370c      	adds	r7, #12
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d22:	4770      	bx	lr

08016d24 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
    void setTouchSampleRate(int8_t sampleRateInTicks)
 8016d24:	b480      	push	{r7}
 8016d26:	b083      	sub	sp, #12
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	6078      	str	r0, [r7, #4]
 8016d2c:	460b      	mov	r3, r1
 8016d2e:	70fb      	strb	r3, [r7, #3]
        if (sampleRateInTicks > 0)
 8016d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	dd03      	ble.n	8016d40 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
            touchSampleRate = sampleRateInTicks;
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	78fa      	ldrb	r2, [r7, #3]
 8016d3c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    }
 8016d40:	bf00      	nop
 8016d42:	370c      	adds	r7, #12
 8016d44:	46bd      	mov	sp, r7
 8016d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4a:	4770      	bx	lr

08016d4c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8016d4c:	b480      	push	{r7}
 8016d4e:	b083      	sub	sp, #12
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	6039      	str	r1, [r7, #0]
        mcuInstrumentation = mcuInstr;
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	683a      	ldr	r2, [r7, #0]
 8016d5a:	611a      	str	r2, [r3, #16]
    }
 8016d5c:	bf00      	nop
 8016d5e:	370c      	adds	r7, #12
 8016d60:	46bd      	mov	sp, r7
 8016d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d66:	4770      	bx	lr

08016d68 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
    void enableMCULoadCalculation(bool enabled)
 8016d68:	b480      	push	{r7}
 8016d6a:	b083      	sub	sp, #12
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
 8016d70:	460b      	mov	r3, r1
 8016d72:	70fb      	strb	r3, [r7, #3]
        updateMCULoad = enabled;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	78fa      	ldrb	r2, [r7, #3]
 8016d78:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
    }
 8016d7c:	bf00      	nop
 8016d7e:	370c      	adds	r7, #12
 8016d80:	46bd      	mov	sp, r7
 8016d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d86:	4770      	bx	lr

08016d88 <_ZN8touchgfx3HAL13setFingerSizeEh>:
    void setFingerSize(uint8_t size)
 8016d88:	b480      	push	{r7}
 8016d8a:	b083      	sub	sp, #12
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
 8016d90:	460b      	mov	r3, r1
 8016d92:	70fb      	strb	r3, [r7, #3]
        fingerSize = size;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	78fa      	ldrb	r2, [r7, #3]
 8016d98:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    }
 8016d9c:	bf00      	nop
 8016d9e:	370c      	adds	r7, #12
 8016da0:	46bd      	mov	sp, r7
 8016da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da6:	4770      	bx	lr

08016da8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8016da8:	b480      	push	{r7}
 8016daa:	b083      	sub	sp, #12
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
        texts = t;
 8016db0:	4a04      	ldr	r2, [pc, #16]	; (8016dc4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6013      	str	r3, [r2, #0]
    }
 8016db6:	bf00      	nop
 8016db8:	370c      	adds	r7, #12
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc0:	4770      	bx	lr
 8016dc2:	bf00      	nop
 8016dc4:	2001a91c 	.word	0x2001a91c

08016dc8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8016dc8:	b480      	push	{r7}
 8016dca:	b085      	sub	sp, #20
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	60f8      	str	r0, [r7, #12]
 8016dd0:	60b9      	str	r1, [r7, #8]
 8016dd2:	607a      	str	r2, [r7, #4]
 8016dd4:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8016dd6:	4a0b      	ldr	r2, [pc, #44]	; (8016e04 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	601a      	str	r2, [r3, #0]
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	68ba      	ldr	r2, [r7, #8]
 8016de0:	605a      	str	r2, [r3, #4]
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	687a      	ldr	r2, [r7, #4]
 8016de6:	609a      	str	r2, [r3, #8]
 8016de8:	68fb      	ldr	r3, [r7, #12]
 8016dea:	683a      	ldr	r2, [r7, #0]
 8016dec:	60da      	str	r2, [r3, #12]
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	69ba      	ldr	r2, [r7, #24]
 8016df2:	611a      	str	r2, [r3, #16]
    {
    }
 8016df4:	68fb      	ldr	r3, [r7, #12]
 8016df6:	4618      	mov	r0, r3
 8016df8:	3714      	adds	r7, #20
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e00:	4770      	bx	lr
 8016e02:	bf00      	nop
 8016e04:	080242f4 	.word	0x080242f4

08016e08 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
    {
 8016e10:	4a04      	ldr	r2, [pc, #16]	; (8016e24 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	601a      	str	r2, [r3, #0]
    }
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	4618      	mov	r0, r3
 8016e1a:	370c      	adds	r7, #12
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e22:	4770      	bx	lr
 8016e24:	080242f4 	.word	0x080242f4

08016e28 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
    }
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7ff ffe9 	bl	8016e08 <_ZN8touchgfx7MVPHeapD1Ev>
 8016e36:	2114      	movs	r1, #20
 8016e38:	6878      	ldr	r0, [r7, #4]
 8016e3a:	f009 fdc2 	bl	80209c2 <_ZdlPvj>
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	4618      	mov	r0, r3
 8016e42:	3708      	adds	r7, #8
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd80      	pop	{r7, pc}

08016e48 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b082      	sub	sp, #8
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
 8016e50:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	4618      	mov	r0, r3
 8016e56:	f7fd f8e3 	bl	8014020 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8016e5a:	bf00      	nop
 8016e5c:	3708      	adds	r7, #8
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
	...

08016e64 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b086      	sub	sp, #24
 8016e68:	af02      	add	r7, sp, #8
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8016e72:	68f8      	ldr	r0, [r7, #12]
 8016e74:	69bb      	ldr	r3, [r7, #24]
 8016e76:	9300      	str	r3, [sp, #0]
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	687a      	ldr	r2, [r7, #4]
 8016e7c:	68b9      	ldr	r1, [r7, #8]
 8016e7e:	f7ff ffa3 	bl	8016dc8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8016e82:	4a04      	ldr	r2, [pc, #16]	; (8016e94 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	601a      	str	r2, [r3, #0]
    {

    }
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	3710      	adds	r7, #16
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}
 8016e92:	bf00      	nop
 8016e94:	080242e0 	.word	0x080242e0

08016e98 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8016e98:	b580      	push	{r7, lr}
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	4801      	ldr	r0, [pc, #4]	; (8016ea4 <__tcf_0+0xc>)
 8016e9e:	f000 fa9b 	bl	80173d8 <_ZN12FrontendHeapD1Ev>
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	20008bcc 	.word	0x20008bcc

08016ea8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8016eac:	4b08      	ldr	r3, [pc, #32]	; (8016ed0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	f003 0301 	and.w	r3, r3, #1
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d108      	bne.n	8016eca <_ZN12FrontendHeap11getInstanceEv+0x22>
 8016eb8:	4806      	ldr	r0, [pc, #24]	; (8016ed4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8016eba:	f000 f831 	bl	8016f20 <_ZN12FrontendHeapC1Ev>
 8016ebe:	4b04      	ldr	r3, [pc, #16]	; (8016ed0 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8016ec0:	2201      	movs	r2, #1
 8016ec2:	601a      	str	r2, [r3, #0]
 8016ec4:	4804      	ldr	r0, [pc, #16]	; (8016ed8 <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8016ec6:	f009 fdb7 	bl	8020a38 <atexit>
        return instance;
 8016eca:	4b02      	ldr	r3, [pc, #8]	; (8016ed4 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8016ecc:	4618      	mov	r0, r3
 8016ece:	bd80      	pop	{r7, pc}
 8016ed0:	20019a74 	.word	0x20019a74
 8016ed4:	20008bcc 	.word	0x20008bcc
 8016ed8:	08016e99 	.word	0x08016e99

08016edc <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
 8016ee4:	4a05      	ldr	r2, [pc, #20]	; (8016efc <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	601a      	str	r2, [r3, #0]
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7ff ff8b 	bl	8016e08 <_ZN8touchgfx7MVPHeapD1Ev>
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	080242e0 	.word	0x080242e0

08016f00 <_ZN16FrontendHeapBaseD0Ev>:
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
 8016f08:	6878      	ldr	r0, [r7, #4]
 8016f0a:	f7ff ffe7 	bl	8016edc <_ZN16FrontendHeapBaseD1Ev>
 8016f0e:	2114      	movs	r1, #20
 8016f10:	6878      	ldr	r0, [r7, #4]
 8016f12:	f009 fd56 	bl	80209c2 <_ZdlPvj>
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	3708      	adds	r7, #8
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8016f20:	b590      	push	{r4, r7, lr}
 8016f22:	b085      	sub	sp, #20
 8016f24:	af02      	add	r7, sp, #8
 8016f26:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8016f28:	6878      	ldr	r0, [r7, #4]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	f103 0114 	add.w	r1, r3, #20
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	f503 3286 	add.w	r2, r3, #68608	; 0x10c00
 8016f3c:	f502 729e 	add.w	r2, r2, #316	; 0x13c
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8016f46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	4622      	mov	r2, r4
 8016f50:	f7ff ff88 	bl	8016e64 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8016f54:	4a1b      	ldr	r2, [pc, #108]	; (8016fc4 <_ZN12FrontendHeapC1Ev+0xa4>)
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	601a      	str	r2, [r3, #0]
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	3314      	adds	r3, #20
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f000 f906 	bl	8017170 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	332c      	adds	r3, #44	; 0x2c
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f000 f935 	bl	80171d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8016f74:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f000 f963 	bl	8017244 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8016f84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016f88:	687a      	ldr	r2, [r7, #4]
 8016f8a:	f502 3187 	add.w	r1, r2, #69120	; 0x10e00
 8016f8e:	31a0      	adds	r1, #160	; 0xa0
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	4618      	mov	r0, r3
 8016f94:	f7ff f864 	bl	8016060 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f503 3387 	add.w	r3, r3, #69120	; 0x10e00
 8016f9e:	33a0      	adds	r3, #160	; 0xa0
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	f7ff f873 	bl	801608c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8016fae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016fb2:	4619      	mov	r1, r3
 8016fb4:	4610      	mov	r0, r2
 8016fb6:	f7ff ff47 	bl	8016e48 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	370c      	adds	r7, #12
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd90      	pop	{r4, r7, pc}
 8016fc4:	08024230 	.word	0x08024230

08016fc8 <_ZN8touchgfx8LCD16bppD1Ev>:
 * @see LCD
 */
class LCD16bpp : public LCD
{
public:
    virtual ~LCD16bpp()
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
    {
 8016fd0:	4a05      	ldr	r2, [pc, #20]	; (8016fe8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	601a      	str	r2, [r3, #0]
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	4618      	mov	r0, r3
 8016fda:	f7ff fd23 	bl	8016a24 <_ZN8touchgfx3LCDD1Ev>
    }
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	3708      	adds	r7, #8
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bd80      	pop	{r7, pc}
 8016fe8:	08026034 	.word	0x08026034

08016fec <_ZN8touchgfx8LCD16bppD0Ev>:
    virtual ~LCD16bpp()
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
    }
 8016ff4:	6878      	ldr	r0, [r7, #4]
 8016ff6:	f7ff ffe7 	bl	8016fc8 <_ZN8touchgfx8LCD16bppD1Ev>
 8016ffa:	2104      	movs	r1, #4
 8016ffc:	6878      	ldr	r0, [r7, #4]
 8016ffe:	f009 fce0 	bl	80209c2 <_ZdlPvj>
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	4618      	mov	r0, r3
 8017006:	3708      	adds	r7, #8
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}

0801700c <_ZN10STM32F4HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F4HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 801700c:	b580      	push	{r7, lr}
 801700e:	b086      	sub	sp, #24
 8017010:	af02      	add	r7, sp, #8
 8017012:	60f8      	str	r0, [r7, #12]
 8017014:	60b9      	str	r1, [r7, #8]
 8017016:	607a      	str	r2, [r7, #4]
 8017018:	603b      	str	r3, [r7, #0]
 801701a:	68f8      	ldr	r0, [r7, #12]
 801701c:	8bbb      	ldrh	r3, [r7, #28]
 801701e:	9301      	str	r3, [sp, #4]
 8017020:	8b3b      	ldrh	r3, [r7, #24]
 8017022:	9300      	str	r3, [sp, #0]
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	687a      	ldr	r2, [r7, #4]
 8017028:	68b9      	ldr	r1, [r7, #8]
 801702a:	f7ff fd9d 	bl	8016b68 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801702e:	4a04      	ldr	r2, [pc, #16]	; (8017040 <_ZN10STM32F4HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	601a      	str	r2, [r3, #0]
    {
    }
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	4618      	mov	r0, r3
 8017038:	3710      	adds	r7, #16
 801703a:	46bd      	mov	sp, r7
 801703c:	bd80      	pop	{r7, pc}
 801703e:	bf00      	nop
 8017040:	080243ec 	.word	0x080243ec

08017044 <LCD_GetXSize>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */

uint32_t LCD_GetXSize(void)
{
 8017044:	b480      	push	{r7}
 8017046:	af00      	add	r7, sp, #0
  return 240;
 8017048:	23f0      	movs	r3, #240	; 0xf0
}
 801704a:	4618      	mov	r0, r3
 801704c:	46bd      	mov	sp, r7
 801704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017052:	4770      	bx	lr

08017054 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 8017054:	b480      	push	{r7}
 8017056:	af00      	add	r7, sp, #0
  return 320;
 8017058:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 801705c:	4618      	mov	r0, r3
 801705e:	46bd      	mov	sp, r7
 8017060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017064:	4770      	bx	lr

08017066 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 8017066:	b580      	push	{r7, lr}
 8017068:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801706a:	f000 fbc9 	bl	8017800 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 801706e:	f000 fc1d 	bl	80178ac <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 8017072:	f000 fb37 	bl	80176e4 <_Z11MX_LCD_Initv>
    GPIO::init();
 8017076:	f001 ff08 	bl	8018e8a <_ZN8touchgfx4GPIO4initEv>

}
 801707a:	bf00      	nop
 801707c:	bd80      	pop	{r7, pc}
	...

08017080 <_ZN8touchgfx22STM32F4InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F4Instrumentation: public MCUInstrumentation
 8017080:	b580      	push	{r7, lr}
 8017082:	b082      	sub	sp, #8
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	4618      	mov	r0, r3
 801708c:	f7ff fcf4 	bl	8016a78 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 8017090:	4a03      	ldr	r2, [pc, #12]	; (80170a0 <_ZN8touchgfx22STM32F4InstrumentationC1Ev+0x20>)
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	601a      	str	r2, [r3, #0]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	4618      	mov	r0, r3
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	08024550 	.word	0x08024550

080170a4 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 80170a4:	b590      	push	{r4, r7, lr}
 80170a6:	b087      	sub	sp, #28
 80170a8:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 240;
 80170aa:	23f0      	movs	r3, #240	; 0xf0
 80170ac:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 320;  
 80170ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80170b2:	80bb      	strh	r3, [r7, #4]
  
  HAL& hal = touchgfx_generic_init<STM32F4HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0); 
 80170b4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80170b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80170bc:	2200      	movs	r2, #0
 80170be:	9203      	str	r2, [sp, #12]
 80170c0:	2200      	movs	r2, #0
 80170c2:	9202      	str	r2, [sp, #8]
 80170c4:	2200      	movs	r2, #0
 80170c6:	9201      	str	r2, [sp, #4]
 80170c8:	9300      	str	r3, [sp, #0]
 80170ca:	460b      	mov	r3, r1
 80170cc:	4a19      	ldr	r2, [pc, #100]	; (8017134 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 80170ce:	491a      	ldr	r1, [pc, #104]	; (8017138 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 80170d0:	481a      	ldr	r0, [pc, #104]	; (801713c <_ZN8touchgfx13touchgfx_initEv+0x98>)
 80170d2:	f000 f8eb 	bl	80172ac <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 80170d6:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 80170d8:	683b      	ldr	r3, [r7, #0]
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	337c      	adds	r3, #124	; 0x7c
 80170de:	681c      	ldr	r4, [r3, #0]
 80170e0:	4b17      	ldr	r3, [pc, #92]	; (8017140 <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	4619      	mov	r1, r3
 80170e6:	4b17      	ldr	r3, [pc, #92]	; (8017144 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 80170e8:	881a      	ldrh	r2, [r3, #0]
 80170ea:	2301      	movs	r3, #1
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	2301      	movs	r3, #1
 80170f0:	6838      	ldr	r0, [r7, #0]
 80170f2:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 80170f4:	2102      	movs	r1, #2
 80170f6:	6838      	ldr	r0, [r7, #0]
 80170f8:	f7ff fe14 	bl	8016d24 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 80170fc:	2101      	movs	r1, #1
 80170fe:	6838      	ldr	r0, [r7, #0]
 8017100:	f7ff fe42 	bl	8016d88 <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 8017104:	2100      	movs	r1, #0
 8017106:	6838      	ldr	r0, [r7, #0]
 8017108:	f7ff fdfc 	bl	8016d04 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 801710c:	2100      	movs	r1, #0
 801710e:	6838      	ldr	r0, [r7, #0]
 8017110:	f7ff fde8 	bl	8016ce4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 8017114:	480c      	ldr	r0, [pc, #48]	; (8017148 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8017116:	f001 fda3 	bl	8018c60 <_ZN8touchgfx22STM32F4Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 801711a:	490b      	ldr	r1, [pc, #44]	; (8017148 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801711c:	6838      	ldr	r0, [r7, #0]
 801711e:	f7ff fe15 	bl	8016d4c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 8017122:	2101      	movs	r1, #1
 8017124:	6838      	ldr	r0, [r7, #0]
 8017126:	f7ff fe1f 	bl	8016d68 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 801712a:	bf00      	nop
 801712c:	370c      	adds	r7, #12
 801712e:	46bd      	mov	sp, r7
 8017130:	bd90      	pop	{r4, r7, pc}
 8017132:	bf00      	nop
 8017134:	20000058 	.word	0x20000058
 8017138:	2000005c 	.word	0x2000005c
 801713c:	20019a7c 	.word	0x20019a7c
 8017140:	20000054 	.word	0x20000054
 8017144:	20000060 	.word	0x20000060
 8017148:	2001a69c 	.word	0x2001a69c

0801714c <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 801714c:	b580      	push	{r7, lr}
 801714e:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 8017150:	f7ff ffa8 	bl	80170a4 <_ZN8touchgfx13touchgfx_initEv>
}
 8017154:	bf00      	nop
 8017156:	bd80      	pop	{r7, pc}

08017158 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 801715c:	f7f2 fb68 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 8017160:	4602      	mov	r2, r0
 8017162:	6813      	ldr	r3, [r2, #0]
 8017164:	330c      	adds	r3, #12
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	4610      	mov	r0, r2
 801716a:	4798      	blx	r3
}
 801716c:	bf00      	nop
 801716e:	bd80      	pop	{r7, pc}

08017170 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	4618      	mov	r0, r3
 801717c:	f001 ff34 	bl	8018fe8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017180:	4a03      	ldr	r2, [pc, #12]	; (8017190 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	601a      	str	r2, [r3, #0]
    {
    }
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	4618      	mov	r0, r3
 801718a:	3708      	adds	r7, #8
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}
 8017190:	080242ac 	.word	0x080242ac

08017194 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8017194:	b580      	push	{r7, lr}
 8017196:	b082      	sub	sp, #8
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
    {
    }
 801719c:	4a05      	ldr	r2, [pc, #20]	; (80171b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	601a      	str	r2, [r3, #0]
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	4618      	mov	r0, r3
 80171a6:	f001 ff1d 	bl	8018fe4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	4618      	mov	r0, r3
 80171ae:	3708      	adds	r7, #8
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	080242ac 	.word	0x080242ac

080171b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80171b8:	b580      	push	{r7, lr}
 80171ba:	b082      	sub	sp, #8
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
    }
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7ff ffe7 	bl	8017194 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80171c6:	2118      	movs	r1, #24
 80171c8:	6878      	ldr	r0, [r7, #4]
 80171ca:	f009 fbfa 	bl	80209c2 <_ZdlPvj>
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	4618      	mov	r0, r3
 80171d2:	3708      	adds	r7, #8
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}

080171d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80171d8:	b580      	push	{r7, lr}
 80171da:	b082      	sub	sp, #8
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	4618      	mov	r0, r3
 80171e4:	f001 ff00 	bl	8018fe8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80171e8:	4a03      	ldr	r2, [pc, #12]	; (80171f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	601a      	str	r2, [r3, #0]
    }
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	4618      	mov	r0, r3
 80171f2:	3708      	adds	r7, #8
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}
 80171f8:	08024278 	.word	0x08024278

080171fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b082      	sub	sp, #8
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
    }
 8017204:	4a05      	ldr	r2, [pc, #20]	; (801721c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	601a      	str	r2, [r3, #0]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	4618      	mov	r0, r3
 801720e:	f001 fee9 	bl	8018fe4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	4618      	mov	r0, r3
 8017216:	3708      	adds	r7, #8
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}
 801721c:	08024278 	.word	0x08024278

08017220 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8017220:	b580      	push	{r7, lr}
 8017222:	b082      	sub	sp, #8
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
    }
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7ff ffe7 	bl	80171fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801722e:	4904      	ldr	r1, [pc, #16]	; (8017240 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x20>)
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f009 fbc6 	bl	80209c2 <_ZdlPvj>
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	4618      	mov	r0, r3
 801723a:	3708      	adds	r7, #8
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}
 8017240:	00010d10 	.word	0x00010d10

08017244 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	4618      	mov	r0, r3
 8017250:	f001 feca 	bl	8018fe8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017254:	4a03      	ldr	r2, [pc, #12]	; (8017264 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	601a      	str	r2, [r3, #0]
    }
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	4618      	mov	r0, r3
 801725e:	3708      	adds	r7, #8
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}
 8017264:	08024244 	.word	0x08024244

08017268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
    }
 8017270:	4a05      	ldr	r2, [pc, #20]	; (8017288 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	601a      	str	r2, [r3, #0]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	4618      	mov	r0, r3
 801727a:	f001 feb3 	bl	8018fe4 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	4618      	mov	r0, r3
 8017282:	3708      	adds	r7, #8
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}
 8017288:	08024244 	.word	0x08024244

0801728c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
    }
 8017294:	6878      	ldr	r0, [r7, #4]
 8017296:	f7ff ffe7 	bl	8017268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 801729a:	2114      	movs	r1, #20
 801729c:	6878      	ldr	r0, [r7, #4]
 801729e:	f009 fb90 	bl	80209c2 <_ZdlPvj>
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	4618      	mov	r0, r3
 80172a6:	3708      	adds	r7, #8
 80172a8:	46bd      	mov	sp, r7
 80172aa:	bd80      	pop	{r7, pc}

080172ac <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 80172ac:	b590      	push	{r4, r7, lr}
 80172ae:	b089      	sub	sp, #36	; 0x24
 80172b0:	af02      	add	r7, sp, #8
 80172b2:	60f8      	str	r0, [r7, #12]
 80172b4:	60b9      	str	r1, [r7, #8]
 80172b6:	607a      	str	r2, [r7, #4]
 80172b8:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 80172ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80172be:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80172c2:	9300      	str	r3, [sp, #0]
 80172c4:	4613      	mov	r3, r2
 80172c6:	687a      	ldr	r2, [r7, #4]
 80172c8:	68b9      	ldr	r1, [r7, #8]
 80172ca:	68f8      	ldr	r0, [r7, #12]
 80172cc:	f000 f85c 	bl	8017388 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 80172d0:	6178      	str	r0, [r7, #20]
    hal.initialize();
 80172d2:	6978      	ldr	r0, [r7, #20]
 80172d4:	f002 f996 	bl	8019604 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 80172d8:	f7fe fdb2 	bl	8015e40 <_ZN14BitmapDatabase11getInstanceEv>
 80172dc:	4604      	mov	r4, r0
 80172de:	f7fe fdb9 	bl	8015e54 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80172e2:	4603      	mov	r3, r0
 80172e4:	4619      	mov	r1, r3
 80172e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172e8:	9300      	str	r3, [sp, #0]
 80172ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172ee:	4620      	mov	r0, r4
 80172f0:	f005 fe38 	bl	801cf64 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 80172f4:	480d      	ldr	r0, [pc, #52]	; (801732c <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 80172f6:	f7ff fd57 	bl	8016da8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80172fa:	2000      	movs	r0, #0
 80172fc:	f7fe fdce 	bl	8015e9c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8017300:	480b      	ldr	r0, [pc, #44]	; (8017330 <_ZN8touchgfx21touchgfx_generic_initI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 8017302:	f005 fd7d 	bl	801ce00 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8017306:	f7ff fdcf 	bl	8016ea8 <_ZN12FrontendHeap11getInstanceEv>
 801730a:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 801730c:	697b      	ldr	r3, [r7, #20]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	3358      	adds	r3, #88	; 0x58
 8017312:	681c      	ldr	r4, [r3, #0]
 8017314:	f003 fbee 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 8017318:	4603      	mov	r3, r0
 801731a:	4619      	mov	r1, r3
 801731c:	6978      	ldr	r0, [r7, #20]
 801731e:	47a0      	blx	r4

    return hal;
 8017320:	697b      	ldr	r3, [r7, #20]
}
 8017322:	4618      	mov	r0, r3
 8017324:	371c      	adds	r7, #28
 8017326:	46bd      	mov	sp, r7
 8017328:	bd90      	pop	{r4, r7, pc}
 801732a:	bf00      	nop
 801732c:	20019a78 	.word	0x20019a78
 8017330:	20000050 	.word	0x20000050

08017334 <_ZN10STM32F4HALD1Ev>:
class STM32F4HAL : public touchgfx::HAL
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	4a05      	ldr	r2, [pc, #20]	; (8017354 <_ZN10STM32F4HALD1Ev+0x20>)
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	601a      	str	r2, [r3, #0]
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	4618      	mov	r0, r3
 8017346:	f7ff fcad 	bl	8016ca4 <_ZN8touchgfx3HALD1Ev>
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	4618      	mov	r0, r3
 801734e:	3708      	adds	r7, #8
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}
 8017354:	080243ec 	.word	0x080243ec

08017358 <_ZN10STM32F4HALD0Ev>:
 8017358:	b580      	push	{r7, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f7ff ffe7 	bl	8017334 <_ZN10STM32F4HALD1Ev>
 8017366:	2178      	movs	r1, #120	; 0x78
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f009 fb2a 	bl	80209c2 <_ZdlPvj>
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	4618      	mov	r0, r3
 8017372:	3708      	adds	r7, #8
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}

08017378 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 8017378:	b580      	push	{r7, lr}
 801737a:	af00      	add	r7, sp, #0
 801737c:	4801      	ldr	r0, [pc, #4]	; (8017384 <__tcf_1+0xc>)
 801737e:	f7ff ffd9 	bl	8017334 <_ZN10STM32F4HALD1Ev>
 8017382:	bd80      	pop	{r7, pc}
 8017384:	2001a6ac 	.word	0x2001a6ac

08017388 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af02      	add	r7, sp, #8
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	607a      	str	r2, [r7, #4]
 8017394:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 8017396:	4b0d      	ldr	r3, [pc, #52]	; (80173cc <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f003 0301 	and.w	r3, r3, #1
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d10f      	bne.n	80173c2 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 80173a2:	887b      	ldrh	r3, [r7, #2]
 80173a4:	8b3a      	ldrh	r2, [r7, #24]
 80173a6:	9201      	str	r2, [sp, #4]
 80173a8:	9300      	str	r3, [sp, #0]
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	68ba      	ldr	r2, [r7, #8]
 80173ae:	68f9      	ldr	r1, [r7, #12]
 80173b0:	4807      	ldr	r0, [pc, #28]	; (80173d0 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 80173b2:	f7ff fe2b 	bl	801700c <_ZN10STM32F4HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80173b6:	4b05      	ldr	r3, [pc, #20]	; (80173cc <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 80173b8:	2201      	movs	r2, #1
 80173ba:	601a      	str	r2, [r3, #0]
 80173bc:	4805      	ldr	r0, [pc, #20]	; (80173d4 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 80173be:	f009 fb3b 	bl	8020a38 <atexit>
    return hal;
 80173c2:	4b03      	ldr	r3, [pc, #12]	; (80173d0 <_ZN8touchgfx6getHALI10STM32F4HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3710      	adds	r7, #16
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	2001a724 	.word	0x2001a724
 80173d0:	2001a6ac 	.word	0x2001a6ac
 80173d4:	08017379 	.word	0x08017379

080173d8 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80173d8:	b580      	push	{r7, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
 80173e0:	4a12      	ldr	r2, [pc, #72]	; (801742c <_ZN12FrontendHeapD1Ev+0x54>)
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	601a      	str	r2, [r3, #0]
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80173ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80173f0:	4618      	mov	r0, r3
 80173f2:	f7fe fdff 	bl	8015ff4 <_ZN19FrontendApplicationD1Ev>
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80173fc:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8017400:	4618      	mov	r0, r3
 8017402:	f7ff ff31 	bl	8017268 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	332c      	adds	r3, #44	; 0x2c
 801740a:	4618      	mov	r0, r3
 801740c:	f7ff fef6 	bl	80171fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	3314      	adds	r3, #20
 8017414:	4618      	mov	r0, r3
 8017416:	f7ff febd 	bl	8017194 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	4618      	mov	r0, r3
 801741e:	f7ff fd5d 	bl	8016edc <_ZN16FrontendHeapBaseD1Ev>
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	4618      	mov	r0, r3
 8017426:	3708      	adds	r7, #8
 8017428:	46bd      	mov	sp, r7
 801742a:	bd80      	pop	{r7, pc}
 801742c:	08024230 	.word	0x08024230

08017430 <_ZN12FrontendHeapD0Ev>:
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f7ff ffcd 	bl	80173d8 <_ZN12FrontendHeapD1Ev>
 801743e:	4904      	ldr	r1, [pc, #16]	; (8017450 <_ZN12FrontendHeapD0Ev+0x20>)
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	f009 fabe 	bl	80209c2 <_ZdlPvj>
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	4618      	mov	r0, r3
 801744a:	3708      	adds	r7, #8
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}
 8017450:	00010ea8 	.word	0x00010ea8

08017454 <_ZN8touchgfx22STM32F4InstrumentationD1Ev>:
 8017454:	b580      	push	{r7, lr}
 8017456:	b082      	sub	sp, #8
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
 801745c:	4a05      	ldr	r2, [pc, #20]	; (8017474 <_ZN8touchgfx22STM32F4InstrumentationD1Ev+0x20>)
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	601a      	str	r2, [r3, #0]
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	4618      	mov	r0, r3
 8017466:	f7ff fb1d 	bl	8016aa4 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	4618      	mov	r0, r3
 801746e:	3708      	adds	r7, #8
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}
 8017474:	08024550 	.word	0x08024550

08017478 <_ZN8touchgfx22STM32F4InstrumentationD0Ev>:
 8017478:	b580      	push	{r7, lr}
 801747a:	b082      	sub	sp, #8
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f7ff ffe7 	bl	8017454 <_ZN8touchgfx22STM32F4InstrumentationD1Ev>
 8017486:	2110      	movs	r1, #16
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f009 fa9a 	bl	80209c2 <_ZdlPvj>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	4618      	mov	r0, r3
 8017492:	3708      	adds	r7, #8
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}

08017498 <_Z41__static_initialization_and_destruction_0ii>:
 8017498:	b580      	push	{r7, lr}
 801749a:	b082      	sub	sp, #8
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
 80174a0:	6039      	str	r1, [r7, #0]
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2b01      	cmp	r3, #1
 80174a6:	d10a      	bne.n	80174be <_Z41__static_initialization_and_destruction_0ii+0x26>
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174ae:	4293      	cmp	r3, r2
 80174b0:	d105      	bne.n	80174be <_Z41__static_initialization_and_destruction_0ii+0x26>
STM32F4DMA dma;
 80174b2:	4810      	ldr	r0, [pc, #64]	; (80174f4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80174b4:	f000 fdca 	bl	801804c <_ZN10STM32F4DMAC1Ev>
STM32F4Instrumentation mcuInstr;
 80174b8:	480f      	ldr	r0, [pc, #60]	; (80174f8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80174ba:	f7ff fde1 	bl	8017080 <_ZN8touchgfx22STM32F4InstrumentationC1Ev>
static LCD16bpp display;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d113      	bne.n	80174ec <_Z41__static_initialization_and_destruction_0ii+0x54>
 80174c4:	683b      	ldr	r3, [r7, #0]
 80174c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80174ca:	4293      	cmp	r3, r2
 80174cc:	d10e      	bne.n	80174ec <_Z41__static_initialization_and_destruction_0ii+0x54>
 80174ce:	480b      	ldr	r0, [pc, #44]	; (80174fc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80174d0:	f7ff fd7a 	bl	8016fc8 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F4Instrumentation mcuInstr;
 80174d4:	4808      	ldr	r0, [pc, #32]	; (80174f8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80174d6:	f7ff ffbd 	bl	8017454 <_ZN8touchgfx22STM32F4InstrumentationD1Ev>
STM32F4TouchController tc;
 80174da:	4809      	ldr	r0, [pc, #36]	; (8017500 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80174dc:	f000 f814 	bl	8017508 <_ZN8touchgfx22STM32F4TouchControllerD1Ev>
STM32F4DMA dma;
 80174e0:	4804      	ldr	r0, [pc, #16]	; (80174f4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80174e2:	f000 fddd 	bl	80180a0 <_ZN10STM32F4DMAD1Ev>
static ApplicationFontProvider fontProvider;
 80174e6:	4807      	ldr	r0, [pc, #28]	; (8017504 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80174e8:	f7fc f836 	bl	8013558 <_ZN23ApplicationFontProviderD1Ev>
}
 80174ec:	bf00      	nop
 80174ee:	3708      	adds	r7, #8
 80174f0:	46bd      	mov	sp, r7
 80174f2:	bd80      	pop	{r7, pc}
 80174f4:	20019a7c 	.word	0x20019a7c
 80174f8:	2001a69c 	.word	0x2001a69c
 80174fc:	2000005c 	.word	0x2000005c
 8017500:	20000058 	.word	0x20000058
 8017504:	20000050 	.word	0x20000050

08017508 <_ZN8touchgfx22STM32F4TouchControllerD1Ev>:
#include <platform/driver/touch/TouchController.hpp>
#include <main.h>
                 
namespace touchgfx
{
class STM32F4TouchController: public TouchController
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	4a05      	ldr	r2, [pc, #20]	; (8017528 <_ZN8touchgfx22STM32F4TouchControllerD1Ev+0x20>)
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	601a      	str	r2, [r3, #0]
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	4618      	mov	r0, r3
 801751a:	f7f1 ff51 	bl	80093c0 <_ZN8touchgfx15TouchControllerD1Ev>
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	4618      	mov	r0, r3
 8017522:	3708      	adds	r7, #8
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}
 8017528:	08024578 	.word	0x08024578

0801752c <_ZN8touchgfx22STM32F4TouchControllerD0Ev>:
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f7ff ffe7 	bl	8017508 <_ZN8touchgfx22STM32F4TouchControllerD1Ev>
 801753a:	2104      	movs	r1, #4
 801753c:	6878      	ldr	r0, [r7, #4]
 801753e:	f009 fa40 	bl	80209c2 <_ZdlPvj>
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	4618      	mov	r0, r3
 8017546:	3708      	adds	r7, #8
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}

0801754c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 801754c:	b480      	push	{r7}
 801754e:	b083      	sub	sp, #12
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8017554:	2301      	movs	r3, #1
    }
 8017556:	4618      	mov	r0, r3
 8017558:	370c      	adds	r7, #12
 801755a:	46bd      	mov	sp, r7
 801755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017560:	4770      	bx	lr

08017562 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 8017562:	b480      	push	{r7}
 8017564:	b083      	sub	sp, #12
 8017566:	af00      	add	r7, sp, #0
 8017568:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801756a:	230c      	movs	r3, #12
    }
 801756c:	4618      	mov	r0, r3
 801756e:	370c      	adds	r7, #12
 8017570:	46bd      	mov	sp, r7
 8017572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017576:	4770      	bx	lr

08017578 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8017578:	b480      	push	{r7}
 801757a:	b083      	sub	sp, #12
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
 8017580:	460b      	mov	r3, r1
 8017582:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017584:	887a      	ldrh	r2, [r7, #2]
 8017586:	4613      	mov	r3, r2
 8017588:	005b      	lsls	r3, r3, #1
 801758a:	4413      	add	r3, r2
 801758c:	009b      	lsls	r3, r3, #2
 801758e:	3308      	adds	r3, #8
 8017590:	687a      	ldr	r2, [r7, #4]
 8017592:	4413      	add	r3, r2
    }
 8017594:	4618      	mov	r0, r3
 8017596:	370c      	adds	r7, #12
 8017598:	46bd      	mov	sp, r7
 801759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759e:	4770      	bx	lr

080175a0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80175a0:	b480      	push	{r7}
 80175a2:	b083      	sub	sp, #12
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
 80175a8:	460b      	mov	r3, r1
 80175aa:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80175ac:	887a      	ldrh	r2, [r7, #2]
 80175ae:	4613      	mov	r3, r2
 80175b0:	005b      	lsls	r3, r3, #1
 80175b2:	4413      	add	r3, r2
 80175b4:	009b      	lsls	r3, r3, #2
 80175b6:	3308      	adds	r3, #8
 80175b8:	687a      	ldr	r2, [r7, #4]
 80175ba:	4413      	add	r3, r2
    }
 80175bc:	4618      	mov	r0, r3
 80175be:	370c      	adds	r7, #12
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr

080175c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80175c8:	b480      	push	{r7}
 80175ca:	b083      	sub	sp, #12
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80175d0:	2301      	movs	r3, #1
    }
 80175d2:	4618      	mov	r0, r3
 80175d4:	370c      	adds	r7, #12
 80175d6:	46bd      	mov	sp, r7
 80175d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175dc:	4770      	bx	lr
	...

080175e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80175e0:	b480      	push	{r7}
 80175e2:	b083      	sub	sp, #12
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80175e8:	4b03      	ldr	r3, [pc, #12]	; (80175f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv+0x18>)
    }
 80175ea:	4618      	mov	r0, r3
 80175ec:	370c      	adds	r7, #12
 80175ee:	46bd      	mov	sp, r7
 80175f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f4:	4770      	bx	lr
 80175f6:	bf00      	nop
 80175f8:	00010d08 	.word	0x00010d08

080175fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80175fc:	b480      	push	{r7}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
 8017604:	460b      	mov	r3, r1
 8017606:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017608:	887b      	ldrh	r3, [r7, #2]
 801760a:	4a06      	ldr	r2, [pc, #24]	; (8017624 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 801760c:	fb02 f303 	mul.w	r3, r2, r3
 8017610:	3308      	adds	r3, #8
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	4413      	add	r3, r2
    }
 8017616:	4618      	mov	r0, r3
 8017618:	370c      	adds	r7, #12
 801761a:	46bd      	mov	sp, r7
 801761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017620:	4770      	bx	lr
 8017622:	bf00      	nop
 8017624:	00010d08 	.word	0x00010d08

08017628 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017628:	b480      	push	{r7}
 801762a:	b083      	sub	sp, #12
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
 8017630:	460b      	mov	r3, r1
 8017632:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017634:	887b      	ldrh	r3, [r7, #2]
 8017636:	4a06      	ldr	r2, [pc, #24]	; (8017650 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt+0x28>)
 8017638:	fb02 f303 	mul.w	r3, r2, r3
 801763c:	3308      	adds	r3, #8
 801763e:	687a      	ldr	r2, [r7, #4]
 8017640:	4413      	add	r3, r2
    }
 8017642:	4618      	mov	r0, r3
 8017644:	370c      	adds	r7, #12
 8017646:	46bd      	mov	sp, r7
 8017648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764c:	4770      	bx	lr
 801764e:	bf00      	nop
 8017650:	00010d08 	.word	0x00010d08

08017654 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017654:	b480      	push	{r7}
 8017656:	b083      	sub	sp, #12
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801765c:	2301      	movs	r3, #1
    }
 801765e:	4618      	mov	r0, r3
 8017660:	370c      	adds	r7, #12
 8017662:	46bd      	mov	sp, r7
 8017664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017668:	4770      	bx	lr

0801766a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801766a:	b480      	push	{r7}
 801766c:	b083      	sub	sp, #12
 801766e:	af00      	add	r7, sp, #0
 8017670:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017672:	2310      	movs	r3, #16
    }
 8017674:	4618      	mov	r0, r3
 8017676:	370c      	adds	r7, #12
 8017678:	46bd      	mov	sp, r7
 801767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801767e:	4770      	bx	lr

08017680 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017680:	b480      	push	{r7}
 8017682:	b083      	sub	sp, #12
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	460b      	mov	r3, r1
 801768a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801768c:	887b      	ldrh	r3, [r7, #2]
 801768e:	011b      	lsls	r3, r3, #4
 8017690:	3308      	adds	r3, #8
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	4413      	add	r3, r2
    }
 8017696:	4618      	mov	r0, r3
 8017698:	370c      	adds	r7, #12
 801769a:	46bd      	mov	sp, r7
 801769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176a0:	4770      	bx	lr

080176a2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80176a2:	b480      	push	{r7}
 80176a4:	b083      	sub	sp, #12
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
 80176aa:	460b      	mov	r3, r1
 80176ac:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80176ae:	887b      	ldrh	r3, [r7, #2]
 80176b0:	011b      	lsls	r3, r3, #4
 80176b2:	3308      	adds	r3, #8
 80176b4:	687a      	ldr	r2, [r7, #4]
 80176b6:	4413      	add	r3, r2
    }
 80176b8:	4618      	mov	r0, r3
 80176ba:	370c      	adds	r7, #12
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <_GLOBAL__sub_I_LCD_GetXSize>:
 80176c4:	b580      	push	{r7, lr}
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80176cc:	2001      	movs	r0, #1
 80176ce:	f7ff fee3 	bl	8017498 <_Z41__static_initialization_and_destruction_0ii>
 80176d2:	bd80      	pop	{r7, pc}

080176d4 <_GLOBAL__sub_D_LCD_GetXSize>:
 80176d4:	b580      	push	{r7, lr}
 80176d6:	af00      	add	r7, sp, #0
 80176d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80176dc:	2000      	movs	r0, #0
 80176de:	f7ff fedb 	bl	8017498 <_Z41__static_initialization_and_destruction_0ii>
 80176e2:	bd80      	pop	{r7, pc}

080176e4 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b08e      	sub	sp, #56	; 0x38
 80176e8:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;
 ili9341_Init();
 80176ea:	f7ea ff14 	bl	8002516 <ili9341_Init>

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 80176ee:	4842      	ldr	r0, [pc, #264]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 80176f0:	f7ee f8bc 	bl	800586c <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 80176f4:	4b40      	ldr	r3, [pc, #256]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 80176f6:	4a41      	ldr	r2, [pc, #260]	; (80177fc <_Z11MX_LCD_Initv+0x118>)
 80176f8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80176fa:	4b3f      	ldr	r3, [pc, #252]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 80176fc:	2200      	movs	r2, #0
 80176fe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8017700:	4b3d      	ldr	r3, [pc, #244]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017702:	2200      	movs	r2, #0
 8017704:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8017706:	4b3c      	ldr	r3, [pc, #240]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017708:	2200      	movs	r2, #0
 801770a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801770c:	4b3a      	ldr	r3, [pc, #232]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 801770e:	2200      	movs	r2, #0
 8017710:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8017712:	4b39      	ldr	r3, [pc, #228]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017714:	2209      	movs	r2, #9
 8017716:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8017718:	4b37      	ldr	r3, [pc, #220]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 801771a:	2201      	movs	r2, #1
 801771c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 801771e:	4b36      	ldr	r3, [pc, #216]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017720:	221d      	movs	r2, #29
 8017722:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8017724:	4b34      	ldr	r3, [pc, #208]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017726:	2203      	movs	r2, #3
 8017728:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 801772a:	4b33      	ldr	r3, [pc, #204]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 801772c:	f240 120d 	movw	r2, #269	; 0x10d
 8017730:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8017732:	4b31      	ldr	r3, [pc, #196]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017734:	f240 1243 	movw	r2, #323	; 0x143
 8017738:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 801773a:	4b2f      	ldr	r3, [pc, #188]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 801773c:	f240 1217 	movw	r2, #279	; 0x117
 8017740:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8017742:	4b2d      	ldr	r3, [pc, #180]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017744:	f240 1247 	movw	r2, #327	; 0x147
 8017748:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801774a:	4b2b      	ldr	r3, [pc, #172]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 801774c:	2200      	movs	r2, #0
 801774e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8017752:	4b29      	ldr	r3, [pc, #164]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017754:	2200      	movs	r2, #0
 8017756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801775a:	4b27      	ldr	r3, [pc, #156]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 801775c:	2200      	movs	r2, #0
 801775e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8017762:	4825      	ldr	r0, [pc, #148]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 8017764:	f7ed ffb2 	bl	80056cc <HAL_LTDC_Init>
 8017768:	4603      	mov	r3, r0
 801776a:	2b00      	cmp	r3, #0
 801776c:	bf14      	ite	ne
 801776e:	2301      	movne	r3, #1
 8017770:	2300      	moveq	r3, #0
 8017772:	b2db      	uxtb	r3, r3
 8017774:	2b00      	cmp	r3, #0
 8017776:	d001      	beq.n	801777c <_Z11MX_LCD_Initv+0x98>
  {
    Error_Handler( );
 8017778:	f7ea fa3a 	bl	8001bf0 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 801777c:	2300      	movs	r3, #0
 801777e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8017780:	23f0      	movs	r3, #240	; 0xf0
 8017782:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8017784:	2300      	movs	r3, #0
 8017786:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8017788:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801778c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801778e:	2302      	movs	r3, #2
 8017790:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8017792:	23ff      	movs	r3, #255	; 0xff
 8017794:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8017796:	2300      	movs	r3, #0
 8017798:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 801779a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801779e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80177a0:	2307      	movs	r3, #7
 80177a2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80177a4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80177a8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80177aa:	23f0      	movs	r3, #240	; 0xf0
 80177ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80177ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80177b2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80177b4:	2300      	movs	r3, #0
 80177b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80177ba:	2300      	movs	r3, #0
 80177bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80177c0:	2300      	movs	r3, #0
 80177c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80177c6:	1d3b      	adds	r3, r7, #4
 80177c8:	2200      	movs	r2, #0
 80177ca:	4619      	mov	r1, r3
 80177cc:	480a      	ldr	r0, [pc, #40]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 80177ce:	f7ee f91d 	bl	8005a0c <HAL_LTDC_ConfigLayer>
 80177d2:	4603      	mov	r3, r0
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	bf14      	ite	ne
 80177d8:	2301      	movne	r3, #1
 80177da:	2300      	moveq	r3, #0
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d001      	beq.n	80177e6 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 80177e2:	f7ea fa05 	bl	8001bf0 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 240, 0);
 80177e6:	2200      	movs	r2, #0
 80177e8:	21f0      	movs	r1, #240	; 0xf0
 80177ea:	4803      	ldr	r0, [pc, #12]	; (80177f8 <_Z11MX_LCD_Initv+0x114>)
 80177ec:	f7ee f94c 	bl	8005a88 <HAL_LTDC_SetPitch>

}
 80177f0:	bf00      	nop
 80177f2:	3738      	adds	r7, #56	; 0x38
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	2001a728 	.word	0x2001a728
 80177fc:	40016800 	.word	0x40016800

08017800 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8017800:	b580      	push	{r7, lr}
 8017802:	b088      	sub	sp, #32
 8017804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8017806:	1d3b      	adds	r3, r7, #4
 8017808:	2200      	movs	r2, #0
 801780a:	601a      	str	r2, [r3, #0]
 801780c:	605a      	str	r2, [r3, #4]
 801780e:	609a      	str	r2, [r3, #8]
 8017810:	60da      	str	r2, [r3, #12]
 8017812:	611a      	str	r2, [r3, #16]
 8017814:	615a      	str	r2, [r3, #20]
 8017816:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8017818:	4b22      	ldr	r3, [pc, #136]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 801781a:	4a23      	ldr	r2, [pc, #140]	; (80178a8 <_Z11MX_FMC_Initv+0xa8>)
 801781c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 801781e:	4b21      	ldr	r3, [pc, #132]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 8017820:	2201      	movs	r2, #1
 8017822:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8017824:	4b1f      	ldr	r3, [pc, #124]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 8017826:	2200      	movs	r2, #0
 8017828:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801782a:	4b1e      	ldr	r3, [pc, #120]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 801782c:	2204      	movs	r2, #4
 801782e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8017830:	4b1c      	ldr	r3, [pc, #112]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 8017832:	2210      	movs	r2, #16
 8017834:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8017836:	4b1b      	ldr	r3, [pc, #108]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 8017838:	2240      	movs	r2, #64	; 0x40
 801783a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 801783c:	4b19      	ldr	r3, [pc, #100]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 801783e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8017842:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8017844:	4b17      	ldr	r3, [pc, #92]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 8017846:	2200      	movs	r2, #0
 8017848:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801784a:	4b16      	ldr	r3, [pc, #88]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 801784c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017850:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8017852:	4b14      	ldr	r3, [pc, #80]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 8017854:	2200      	movs	r2, #0
 8017856:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8017858:	4b12      	ldr	r3, [pc, #72]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 801785a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801785e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8017860:	2302      	movs	r3, #2
 8017862:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8017864:	2307      	movs	r3, #7
 8017866:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8017868:	2304      	movs	r3, #4
 801786a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 801786c:	2307      	movs	r3, #7
 801786e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8017870:	2303      	movs	r3, #3
 8017872:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8017874:	2302      	movs	r3, #2
 8017876:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8017878:	2302      	movs	r3, #2
 801787a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801787c:	1d3b      	adds	r3, r7, #4
 801787e:	4619      	mov	r1, r3
 8017880:	4808      	ldr	r0, [pc, #32]	; (80178a4 <_Z11MX_FMC_Initv+0xa4>)
 8017882:	f7ef f9f9 	bl	8006c78 <HAL_SDRAM_Init>
 8017886:	4603      	mov	r3, r0
 8017888:	2b00      	cmp	r3, #0
 801788a:	bf14      	ite	ne
 801788c:	2301      	movne	r3, #1
 801788e:	2300      	moveq	r3, #0
 8017890:	b2db      	uxtb	r3, r3
 8017892:	2b00      	cmp	r3, #0
 8017894:	d001      	beq.n	801789a <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 8017896:	f7ea f9ab 	bl	8001bf0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 801789a:	bf00      	nop
 801789c:	3720      	adds	r7, #32
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	2001a810 	.word	0x2001a810
 80178a8:	a0000140 	.word	0xa0000140

080178ac <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b082      	sub	sp, #8
 80178b0:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 80178b2:	2300      	movs	r3, #0
 80178b4:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80178b6:	4b2b      	ldr	r3, [pc, #172]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178b8:	2201      	movs	r2, #1
 80178ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK2;
 80178bc:	4b29      	ldr	r3, [pc, #164]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178be:	2208      	movs	r2, #8
 80178c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80178c2:	4b28      	ldr	r3, [pc, #160]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178c4:	2201      	movs	r2, #1
 80178c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80178c8:	4b26      	ldr	r3, [pc, #152]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178ca:	2200      	movs	r2, #0
 80178cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80178ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80178d2:	4924      	ldr	r1, [pc, #144]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178d4:	4824      	ldr	r0, [pc, #144]	; (8017968 <_Z15MX_SDRAM_InitExv+0xbc>)
 80178d6:	f7ef fa03 	bl	8006ce0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80178da:	2001      	movs	r0, #1
 80178dc:	f7eb fe56 	bl	800358c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80178e0:	4b20      	ldr	r3, [pc, #128]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178e2:	2202      	movs	r2, #2
 80178e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 80178e6:	4b1f      	ldr	r3, [pc, #124]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178e8:	2208      	movs	r2, #8
 80178ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80178ec:	4b1d      	ldr	r3, [pc, #116]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178ee:	2201      	movs	r2, #1
 80178f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80178f2:	4b1c      	ldr	r3, [pc, #112]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178f4:	2200      	movs	r2, #0
 80178f6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 80178f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80178fc:	4919      	ldr	r1, [pc, #100]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 80178fe:	481a      	ldr	r0, [pc, #104]	; (8017968 <_Z15MX_SDRAM_InitExv+0xbc>)
 8017900:	f7ef f9ee 	bl	8006ce0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8017904:	4b17      	ldr	r3, [pc, #92]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 8017906:	2203      	movs	r2, #3
 8017908:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 801790a:	4b16      	ldr	r3, [pc, #88]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 801790c:	2208      	movs	r2, #8
 801790e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 4;
 8017910:	4b14      	ldr	r3, [pc, #80]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 8017912:	2204      	movs	r2, #4
 8017914:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8017916:	4b13      	ldr	r3, [pc, #76]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 8017918:	2200      	movs	r2, #0
 801791a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801791c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017920:	4910      	ldr	r1, [pc, #64]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 8017922:	4811      	ldr	r0, [pc, #68]	; (8017968 <_Z15MX_SDRAM_InitExv+0xbc>)
 8017924:	f7ef f9dc 	bl	8006ce0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8017928:	f44f 730c 	mov.w	r3, #560	; 0x230
 801792c:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 801792e:	4b0d      	ldr	r3, [pc, #52]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 8017930:	2204      	movs	r2, #4
 8017932:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2;
 8017934:	4b0b      	ldr	r3, [pc, #44]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 8017936:	2208      	movs	r2, #8
 8017938:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 801793a:	4b0a      	ldr	r3, [pc, #40]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 801793c:	2201      	movs	r2, #1
 801793e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	4a08      	ldr	r2, [pc, #32]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 8017944:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8017946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801794a:	4906      	ldr	r1, [pc, #24]	; (8017964 <_Z15MX_SDRAM_InitExv+0xb8>)
 801794c:	4806      	ldr	r0, [pc, #24]	; (8017968 <_Z15MX_SDRAM_InitExv+0xbc>)
 801794e:	f7ef f9c7 	bl	8006ce0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8017952:	f240 516a 	movw	r1, #1386	; 0x56a
 8017956:	4804      	ldr	r0, [pc, #16]	; (8017968 <_Z15MX_SDRAM_InitExv+0xbc>)
 8017958:	f7ef f9ed 	bl	8006d36 <HAL_SDRAM_ProgramRefreshRate>
}
 801795c:	bf00      	nop
 801795e:	3708      	adds	r7, #8
 8017960:	46bd      	mov	sp, r7
 8017962:	bd80      	pop	{r7, pc}
 8017964:	2001a844 	.word	0x2001a844
 8017968:	2001a810 	.word	0x2001a810

0801796c <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b08e      	sub	sp, #56	; 0x38
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017978:	2200      	movs	r2, #0
 801797a:	601a      	str	r2, [r3, #0]
 801797c:	605a      	str	r2, [r3, #4]
 801797e:	609a      	str	r2, [r3, #8]
 8017980:	60da      	str	r2, [r3, #12]
 8017982:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	4a7b      	ldr	r2, [pc, #492]	; (8017b78 <HAL_LTDC_MspInit+0x20c>)
 801798a:	4293      	cmp	r3, r2
 801798c:	f040 80f0 	bne.w	8017b70 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8017990:	2300      	movs	r3, #0
 8017992:	623b      	str	r3, [r7, #32]
 8017994:	4b79      	ldr	r3, [pc, #484]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017998:	4a78      	ldr	r2, [pc, #480]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 801799a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801799e:	6453      	str	r3, [r2, #68]	; 0x44
 80179a0:	4b76      	ldr	r3, [pc, #472]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80179a8:	623b      	str	r3, [r7, #32]
 80179aa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80179ac:	2300      	movs	r3, #0
 80179ae:	61fb      	str	r3, [r7, #28]
 80179b0:	4b72      	ldr	r3, [pc, #456]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179b4:	4a71      	ldr	r2, [pc, #452]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179b6:	f043 0320 	orr.w	r3, r3, #32
 80179ba:	6313      	str	r3, [r2, #48]	; 0x30
 80179bc:	4b6f      	ldr	r3, [pc, #444]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179c0:	f003 0320 	and.w	r3, r3, #32
 80179c4:	61fb      	str	r3, [r7, #28]
 80179c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80179c8:	2300      	movs	r3, #0
 80179ca:	61bb      	str	r3, [r7, #24]
 80179cc:	4b6b      	ldr	r3, [pc, #428]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179d0:	4a6a      	ldr	r2, [pc, #424]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179d2:	f043 0301 	orr.w	r3, r3, #1
 80179d6:	6313      	str	r3, [r2, #48]	; 0x30
 80179d8:	4b68      	ldr	r3, [pc, #416]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179dc:	f003 0301 	and.w	r3, r3, #1
 80179e0:	61bb      	str	r3, [r7, #24]
 80179e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80179e4:	2300      	movs	r3, #0
 80179e6:	617b      	str	r3, [r7, #20]
 80179e8:	4b64      	ldr	r3, [pc, #400]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179ec:	4a63      	ldr	r2, [pc, #396]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179ee:	f043 0302 	orr.w	r3, r3, #2
 80179f2:	6313      	str	r3, [r2, #48]	; 0x30
 80179f4:	4b61      	ldr	r3, [pc, #388]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 80179f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179f8:	f003 0302 	and.w	r3, r3, #2
 80179fc:	617b      	str	r3, [r7, #20]
 80179fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8017a00:	2300      	movs	r3, #0
 8017a02:	613b      	str	r3, [r7, #16]
 8017a04:	4b5d      	ldr	r3, [pc, #372]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a08:	4a5c      	ldr	r2, [pc, #368]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8017a10:	4b5a      	ldr	r3, [pc, #360]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017a18:	613b      	str	r3, [r7, #16]
 8017a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	60fb      	str	r3, [r7, #12]
 8017a20:	4b56      	ldr	r3, [pc, #344]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a24:	4a55      	ldr	r2, [pc, #340]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a26:	f043 0304 	orr.w	r3, r3, #4
 8017a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8017a2c:	4b53      	ldr	r3, [pc, #332]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a30:	f003 0304 	and.w	r3, r3, #4
 8017a34:	60fb      	str	r3, [r7, #12]
 8017a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017a38:	2300      	movs	r3, #0
 8017a3a:	60bb      	str	r3, [r7, #8]
 8017a3c:	4b4f      	ldr	r3, [pc, #316]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a40:	4a4e      	ldr	r2, [pc, #312]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a42:	f043 0308 	orr.w	r3, r3, #8
 8017a46:	6313      	str	r3, [r2, #48]	; 0x30
 8017a48:	4b4c      	ldr	r3, [pc, #304]	; (8017b7c <HAL_LTDC_MspInit+0x210>)
 8017a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a4c:	f003 0308 	and.w	r3, r3, #8
 8017a50:	60bb      	str	r3, [r7, #8]
 8017a52:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8017a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a5a:	2302      	movs	r3, #2
 8017a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a5e:	2300      	movs	r3, #0
 8017a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a62:	2300      	movs	r3, #0
 8017a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017a66:	230e      	movs	r3, #14
 8017a68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a6e:	4619      	mov	r1, r3
 8017a70:	4843      	ldr	r0, [pc, #268]	; (8017b80 <HAL_LTDC_MspInit+0x214>)
 8017a72:	f7ec faf5 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8017a76:	f641 0358 	movw	r3, #6232	; 0x1858
 8017a7a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a7c:	2302      	movs	r3, #2
 8017a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a80:	2300      	movs	r3, #0
 8017a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a84:	2300      	movs	r3, #0
 8017a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017a88:	230e      	movs	r3, #14
 8017a8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017a90:	4619      	mov	r1, r3
 8017a92:	483c      	ldr	r0, [pc, #240]	; (8017b84 <HAL_LTDC_MspInit+0x218>)
 8017a94:	f7ec fae4 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8017a98:	2303      	movs	r3, #3
 8017a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a9c:	2302      	movs	r3, #2
 8017a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017aa0:	2300      	movs	r3, #0
 8017aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8017aa8:	2309      	movs	r3, #9
 8017aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017ab0:	4619      	mov	r1, r3
 8017ab2:	4835      	ldr	r0, [pc, #212]	; (8017b88 <HAL_LTDC_MspInit+0x21c>)
 8017ab4:	f7ec fad4 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8017ab8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8017abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017abe:	2302      	movs	r3, #2
 8017ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017aca:	230e      	movs	r3, #14
 8017acc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017ad2:	4619      	mov	r1, r3
 8017ad4:	482c      	ldr	r0, [pc, #176]	; (8017b88 <HAL_LTDC_MspInit+0x21c>)
 8017ad6:	f7ec fac3 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8017ada:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8017ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ae0:	2302      	movs	r3, #2
 8017ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017ae8:	2300      	movs	r3, #0
 8017aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017aec:	230e      	movs	r3, #14
 8017aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017af4:	4619      	mov	r1, r3
 8017af6:	4825      	ldr	r0, [pc, #148]	; (8017b8c <HAL_LTDC_MspInit+0x220>)
 8017af8:	f7ec fab2 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8017afc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8017b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b02:	2302      	movs	r3, #2
 8017b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b06:	2300      	movs	r3, #0
 8017b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017b0e:	230e      	movs	r3, #14
 8017b10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017b16:	4619      	mov	r1, r3
 8017b18:	481d      	ldr	r0, [pc, #116]	; (8017b90 <HAL_LTDC_MspInit+0x224>)
 8017b1a:	f7ec faa1 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8017b1e:	2348      	movs	r3, #72	; 0x48
 8017b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b22:	2302      	movs	r3, #2
 8017b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b26:	2300      	movs	r3, #0
 8017b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8017b2e:	230e      	movs	r3, #14
 8017b30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017b36:	4619      	mov	r1, r3
 8017b38:	4816      	ldr	r0, [pc, #88]	; (8017b94 <HAL_LTDC_MspInit+0x228>)
 8017b3a:	f7ec fa91 	bl	8004060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8017b3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b44:	2302      	movs	r3, #2
 8017b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8017b50:	2309      	movs	r3, #9
 8017b52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017b58:	4619      	mov	r1, r3
 8017b5a:	480c      	ldr	r0, [pc, #48]	; (8017b8c <HAL_LTDC_MspInit+0x220>)
 8017b5c:	f7ec fa80 	bl	8004060 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8017b60:	2200      	movs	r2, #0
 8017b62:	2105      	movs	r1, #5
 8017b64:	2058      	movs	r0, #88	; 0x58
 8017b66:	f7eb fe0d 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8017b6a:	2058      	movs	r0, #88	; 0x58
 8017b6c:	f7eb fe26 	bl	80037bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8017b70:	bf00      	nop
 8017b72:	3738      	adds	r7, #56	; 0x38
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	40016800 	.word	0x40016800
 8017b7c:	40023800 	.word	0x40023800
 8017b80:	40021400 	.word	0x40021400
 8017b84:	40020000 	.word	0x40020000
 8017b88:	40020400 	.word	0x40020400
 8017b8c:	40021800 	.word	0x40021800
 8017b90:	40020800 	.word	0x40020800
 8017b94:	40020c00 	.word	0x40020c00

08017b98 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b082      	sub	sp, #8
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	4a16      	ldr	r2, [pc, #88]	; (8017c00 <HAL_LTDC_MspDeInit+0x68>)
 8017ba6:	4293      	cmp	r3, r2
 8017ba8:	d125      	bne.n	8017bf6 <HAL_LTDC_MspDeInit+0x5e>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8017baa:	4b16      	ldr	r3, [pc, #88]	; (8017c04 <HAL_LTDC_MspDeInit+0x6c>)
 8017bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bae:	4a15      	ldr	r2, [pc, #84]	; (8017c04 <HAL_LTDC_MspDeInit+0x6c>)
 8017bb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017bb4:	6453      	str	r3, [r2, #68]	; 0x44
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    HAL_GPIO_DeInit(ENABLE_GPIO_Port, ENABLE_Pin);
 8017bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017bba:	4813      	ldr	r0, [pc, #76]	; (8017c08 <HAL_LTDC_MspDeInit+0x70>)
 8017bbc:	f7ec fbfa 	bl	80043b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8017bc0:	f641 0158 	movw	r1, #6232	; 0x1858
 8017bc4:	4811      	ldr	r0, [pc, #68]	; (8017c0c <HAL_LTDC_MspDeInit+0x74>)
 8017bc6:	f7ec fbf5 	bl	80043b4 <HAL_GPIO_DeInit>
                          |R5_Pin);

    HAL_GPIO_DeInit(GPIOB, R3_Pin|R6_Pin|G4_Pin|G5_Pin 
 8017bca:	f640 7103 	movw	r1, #3843	; 0xf03
 8017bce:	4810      	ldr	r0, [pc, #64]	; (8017c10 <HAL_LTDC_MspDeInit+0x78>)
 8017bd0:	f7ec fbf0 	bl	80043b4 <HAL_GPIO_DeInit>
                          |B6_Pin|B7_Pin);

    HAL_GPIO_DeInit(GPIOG, R7_Pin|DOTCLK_Pin|G3_Pin|B3_Pin 
 8017bd4:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
 8017bd8:	480e      	ldr	r0, [pc, #56]	; (8017c14 <HAL_LTDC_MspDeInit+0x7c>)
 8017bda:	f7ec fbeb 	bl	80043b4 <HAL_GPIO_DeInit>
                          |B4_Pin);

    HAL_GPIO_DeInit(GPIOC, HSYNC_Pin|G6_Pin|R2_Pin);
 8017bde:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8017be2:	480d      	ldr	r0, [pc, #52]	; (8017c18 <HAL_LTDC_MspDeInit+0x80>)
 8017be4:	f7ec fbe6 	bl	80043b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, G7_Pin|B2_Pin);
 8017be8:	2148      	movs	r1, #72	; 0x48
 8017bea:	480c      	ldr	r0, [pc, #48]	; (8017c1c <HAL_LTDC_MspDeInit+0x84>)
 8017bec:	f7ec fbe2 	bl	80043b4 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8017bf0:	2058      	movs	r0, #88	; 0x58
 8017bf2:	f7eb fdf1 	bl	80037d8 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8017bf6:	bf00      	nop
 8017bf8:	3708      	adds	r7, #8
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
 8017bfe:	bf00      	nop
 8017c00:	40016800 	.word	0x40016800
 8017c04:	40023800 	.word	0x40023800
 8017c08:	40021400 	.word	0x40021400
 8017c0c:	40020000 	.word	0x40020000
 8017c10:	40020400 	.word	0x40020400
 8017c14:	40021800 	.word	0x40021800
 8017c18:	40020800 	.word	0x40020800
 8017c1c:	40020c00 	.word	0x40020c00

08017c20 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b086      	sub	sp, #24
 8017c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8017c26:	1d3b      	adds	r3, r7, #4
 8017c28:	2200      	movs	r2, #0
 8017c2a:	601a      	str	r2, [r3, #0]
 8017c2c:	605a      	str	r2, [r3, #4]
 8017c2e:	609a      	str	r2, [r3, #8]
 8017c30:	60da      	str	r2, [r3, #12]
 8017c32:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8017c34:	4b3b      	ldr	r3, [pc, #236]	; (8017d24 <_ZL15HAL_FMC_MspInitv+0x104>)
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d16f      	bne.n	8017d1c <_ZL15HAL_FMC_MspInitv+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8017c3c:	4b39      	ldr	r3, [pc, #228]	; (8017d24 <_ZL15HAL_FMC_MspInitv+0x104>)
 8017c3e:	2201      	movs	r2, #1
 8017c40:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8017c42:	2300      	movs	r3, #0
 8017c44:	603b      	str	r3, [r7, #0]
 8017c46:	4b38      	ldr	r3, [pc, #224]	; (8017d28 <_ZL15HAL_FMC_MspInitv+0x108>)
 8017c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c4a:	4a37      	ldr	r2, [pc, #220]	; (8017d28 <_ZL15HAL_FMC_MspInitv+0x108>)
 8017c4c:	f043 0301 	orr.w	r3, r3, #1
 8017c50:	6393      	str	r3, [r2, #56]	; 0x38
 8017c52:	4b35      	ldr	r3, [pc, #212]	; (8017d28 <_ZL15HAL_FMC_MspInitv+0x108>)
 8017c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c56:	f003 0301 	and.w	r3, r3, #1
 8017c5a:	603b      	str	r3, [r7, #0]
 8017c5c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8017c5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8017c62:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c64:	2302      	movs	r3, #2
 8017c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c6c:	2303      	movs	r3, #3
 8017c6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017c70:	230c      	movs	r3, #12
 8017c72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8017c74:	1d3b      	adds	r3, r7, #4
 8017c76:	4619      	mov	r1, r3
 8017c78:	482c      	ldr	r0, [pc, #176]	; (8017d2c <_ZL15HAL_FMC_MspInitv+0x10c>)
 8017c7a:	f7ec f9f1 	bl	8004060 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8017c7e:	2301      	movs	r3, #1
 8017c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017c82:	2302      	movs	r3, #2
 8017c84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017c86:	2300      	movs	r3, #0
 8017c88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017c8a:	2303      	movs	r3, #3
 8017c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017c8e:	230c      	movs	r3, #12
 8017c90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8017c92:	1d3b      	adds	r3, r7, #4
 8017c94:	4619      	mov	r1, r3
 8017c96:	4826      	ldr	r0, [pc, #152]	; (8017d30 <_ZL15HAL_FMC_MspInitv+0x110>)
 8017c98:	f7ec f9e2 	bl	8004060 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8017c9c:	f248 1333 	movw	r3, #33075	; 0x8133
 8017ca0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ca2:	2302      	movs	r3, #2
 8017ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017caa:	2303      	movs	r3, #3
 8017cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017cae:	230c      	movs	r3, #12
 8017cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8017cb2:	1d3b      	adds	r3, r7, #4
 8017cb4:	4619      	mov	r1, r3
 8017cb6:	481f      	ldr	r0, [pc, #124]	; (8017d34 <_ZL15HAL_FMC_MspInitv+0x114>)
 8017cb8:	f7ec f9d2 	bl	8004060 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8017cbc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8017cc0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017cc2:	2302      	movs	r3, #2
 8017cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017cca:	2303      	movs	r3, #3
 8017ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017cce:	230c      	movs	r3, #12
 8017cd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8017cd2:	1d3b      	adds	r3, r7, #4
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	4818      	ldr	r0, [pc, #96]	; (8017d38 <_ZL15HAL_FMC_MspInitv+0x118>)
 8017cd8:	f7ec f9c2 	bl	8004060 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8017cdc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8017ce0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017ce2:	2302      	movs	r3, #2
 8017ce4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017cea:	2303      	movs	r3, #3
 8017cec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017cee:	230c      	movs	r3, #12
 8017cf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8017cf2:	1d3b      	adds	r3, r7, #4
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	4811      	ldr	r0, [pc, #68]	; (8017d3c <_ZL15HAL_FMC_MspInitv+0x11c>)
 8017cf8:	f7ec f9b2 	bl	8004060 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8017cfc:	2360      	movs	r3, #96	; 0x60
 8017cfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d00:	2302      	movs	r3, #2
 8017d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d04:	2300      	movs	r3, #0
 8017d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017d08:	2303      	movs	r3, #3
 8017d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8017d0c:	230c      	movs	r3, #12
 8017d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017d10:	1d3b      	adds	r3, r7, #4
 8017d12:	4619      	mov	r1, r3
 8017d14:	480a      	ldr	r0, [pc, #40]	; (8017d40 <_ZL15HAL_FMC_MspInitv+0x120>)
 8017d16:	f7ec f9a3 	bl	8004060 <HAL_GPIO_Init>
 8017d1a:	e000      	b.n	8017d1e <_ZL15HAL_FMC_MspInitv+0xfe>
    return;
 8017d1c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8017d1e:	3718      	adds	r7, #24
 8017d20:	46bd      	mov	sp, r7
 8017d22:	bd80      	pop	{r7, pc}
 8017d24:	2001a854 	.word	0x2001a854
 8017d28:	40023800 	.word	0x40023800
 8017d2c:	40021400 	.word	0x40021400
 8017d30:	40020800 	.word	0x40020800
 8017d34:	40021800 	.word	0x40021800
 8017d38:	40021000 	.word	0x40021000
 8017d3c:	40020c00 	.word	0x40020c00
 8017d40:	40020400 	.word	0x40020400

08017d44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b082      	sub	sp, #8
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8017d4c:	f7ff ff68 	bl	8017c20 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8017d50:	bf00      	nop
 8017d52:	3708      	adds	r7, #8
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}

08017d58 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b084      	sub	sp, #16
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	4a0e      	ldr	r2, [pc, #56]	; (8017da0 <HAL_DMA2D_MspInit+0x48>)
 8017d66:	4293      	cmp	r3, r2
 8017d68:	d115      	bne.n	8017d96 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	60fb      	str	r3, [r7, #12]
 8017d6e:	4b0d      	ldr	r3, [pc, #52]	; (8017da4 <HAL_DMA2D_MspInit+0x4c>)
 8017d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d72:	4a0c      	ldr	r2, [pc, #48]	; (8017da4 <HAL_DMA2D_MspInit+0x4c>)
 8017d74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017d78:	6313      	str	r3, [r2, #48]	; 0x30
 8017d7a:	4b0a      	ldr	r3, [pc, #40]	; (8017da4 <HAL_DMA2D_MspInit+0x4c>)
 8017d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017d82:	60fb      	str	r3, [r7, #12]
 8017d84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8017d86:	2200      	movs	r2, #0
 8017d88:	2105      	movs	r1, #5
 8017d8a:	205a      	movs	r0, #90	; 0x5a
 8017d8c:	f7eb fcfa 	bl	8003784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8017d90:	205a      	movs	r0, #90	; 0x5a
 8017d92:	f7eb fd13 	bl	80037bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8017d96:	bf00      	nop
 8017d98:	3710      	adds	r7, #16
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
 8017d9e:	bf00      	nop
 8017da0:	4002b000 	.word	0x4002b000
 8017da4:	40023800 	.word	0x40023800

08017da8 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b082      	sub	sp, #8
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	4a07      	ldr	r2, [pc, #28]	; (8017dd4 <HAL_DMA2D_MspDeInit+0x2c>)
 8017db6:	4293      	cmp	r3, r2
 8017db8:	d108      	bne.n	8017dcc <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8017dba:	4b07      	ldr	r3, [pc, #28]	; (8017dd8 <HAL_DMA2D_MspDeInit+0x30>)
 8017dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dbe:	4a06      	ldr	r2, [pc, #24]	; (8017dd8 <HAL_DMA2D_MspDeInit+0x30>)
 8017dc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8017dc4:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8017dc6:	205a      	movs	r0, #90	; 0x5a
 8017dc8:	f7eb fd06 	bl	80037d8 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 8017dcc:	bf00      	nop
 8017dce:	3708      	adds	r7, #8
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}
 8017dd4:	4002b000 	.word	0x4002b000
 8017dd8:	40023800 	.word	0x40023800

08017ddc <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8017ddc:	b480      	push	{r7}
 8017dde:	b083      	sub	sp, #12
 8017de0:	af00      	add	r7, sp, #0
 8017de2:	6078      	str	r0, [r7, #4]
        return color;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
    }
 8017de8:	4618      	mov	r0, r3
 8017dea:	370c      	adds	r7, #12
 8017dec:	46bd      	mov	sp, r7
 8017dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df2:	4770      	bx	lr

08017df4 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8017df4:	b480      	push	{r7}
 8017df6:	b083      	sub	sp, #12
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	6078      	str	r0, [r7, #4]
    {
 8017dfc:	4a04      	ldr	r2, [pc, #16]	; (8017e10 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	601a      	str	r2, [r3, #0]
    }
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	4618      	mov	r0, r3
 8017e06:	370c      	adds	r7, #12
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0e:	4770      	bx	lr
 8017e10:	080243c8 	.word	0x080243c8

08017e14 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b082      	sub	sp, #8
 8017e18:	af00      	add	r7, sp, #0
 8017e1a:	6078      	str	r0, [r7, #4]
    }
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7ff ffe9 	bl	8017df4 <_ZN8touchgfx9DMA_QueueD1Ev>
 8017e22:	2104      	movs	r1, #4
 8017e24:	6878      	ldr	r0, [r7, #4]
 8017e26:	f008 fdcc 	bl	80209c2 <_ZdlPvj>
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	3708      	adds	r7, #8
 8017e30:	46bd      	mov	sp, r7
 8017e32:	bd80      	pop	{r7, pc}

08017e34 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	3344      	adds	r3, #68	; 0x44
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	4798      	blx	r3
    }
 8017e48:	bf00      	nop
 8017e4a:	3708      	adds	r7, #8
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	bd80      	pop	{r7, pc}

08017e50 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType(void)
 8017e50:	b480      	push	{r7}
 8017e52:	b083      	sub	sp, #12
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8017e58:	2300      	movs	r3, #0
    }
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	370c      	adds	r7, #12
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e64:	4770      	bx	lr
	...

08017e68 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8017e68:	b480      	push	{r7}
 8017e6a:	b083      	sub	sp, #12
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
    {
 8017e70:	4a04      	ldr	r2, [pc, #16]	; (8017e84 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	601a      	str	r2, [r3, #0]
    }
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	4618      	mov	r0, r3
 8017e7a:	370c      	adds	r7, #12
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e82:	4770      	bx	lr
 8017e84:	08024db0 	.word	0x08024db0

08017e88 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b082      	sub	sp, #8
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	6078      	str	r0, [r7, #4]
    }
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7ff ffe9 	bl	8017e68 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8017e96:	210c      	movs	r1, #12
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f008 fd92 	bl	80209c2 <_ZdlPvj>
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	3708      	adds	r7, #8
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	bd80      	pop	{r7, pc}

08017ea8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8017ea8:	b480      	push	{r7}
 8017eaa:	b083      	sub	sp, #12
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
 8017eb0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8017eb2:	4a09      	ldr	r2, [pc, #36]	; (8017ed8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	601a      	str	r2, [r3, #0]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	683a      	ldr	r2, [r7, #0]
 8017ebc:	605a      	str	r2, [r3, #4]
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	721a      	strb	r2, [r3, #8]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	725a      	strb	r2, [r3, #9]
    {
    }
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	4618      	mov	r0, r3
 8017ece:	370c      	adds	r7, #12
 8017ed0:	46bd      	mov	sp, r7
 8017ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed6:	4770      	bx	lr
 8017ed8:	08024db0 	.word	0x08024db0

08017edc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	685a      	ldr	r2, [r3, #4]
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	685b      	ldr	r3, [r3, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	3314      	adds	r3, #20
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	4610      	mov	r0, r2
 8017ef4:	4798      	blx	r3
    }
 8017ef6:	bf00      	nop
 8017ef8:	3708      	adds	r7, #8
 8017efa:	46bd      	mov	sp, r7
 8017efc:	bd80      	pop	{r7, pc}

08017efe <_ZN10STM32F4DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8017efe:	b580      	push	{r7, lr}
 8017f00:	b082      	sub	sp, #8
 8017f02:	af00      	add	r7, sp, #0
 8017f04:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8017f06:	687a      	ldr	r2, [r7, #4]
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	3328      	adds	r3, #40	; 0x28
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	4610      	mov	r0, r2
 8017f12:	4798      	blx	r3
    }
 8017f14:	bf00      	nop
 8017f16:	3708      	adds	r7, #8
 8017f18:	46bd      	mov	sp, r7
 8017f1a:	bd80      	pop	{r7, pc}

08017f1c <__NVIC_EnableIRQ>:
{
 8017f1c:	b480      	push	{r7}
 8017f1e:	b083      	sub	sp, #12
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	4603      	mov	r3, r0
 8017f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	db0d      	blt.n	8017f4a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f32:	b2db      	uxtb	r3, r3
 8017f34:	f003 021f 	and.w	r2, r3, #31
 8017f38:	4907      	ldr	r1, [pc, #28]	; (8017f58 <__NVIC_EnableIRQ+0x3c>)
 8017f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f3e:	095b      	lsrs	r3, r3, #5
 8017f40:	2001      	movs	r0, #1
 8017f42:	fa00 f202 	lsl.w	r2, r0, r2
 8017f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017f4a:	bf00      	nop
 8017f4c:	370c      	adds	r7, #12
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f54:	4770      	bx	lr
 8017f56:	bf00      	nop
 8017f58:	e000e100 	.word	0xe000e100

08017f5c <__NVIC_DisableIRQ>:
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b083      	sub	sp, #12
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	4603      	mov	r3, r0
 8017f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	db12      	blt.n	8017f94 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f72:	b2db      	uxtb	r3, r3
 8017f74:	f003 021f 	and.w	r2, r3, #31
 8017f78:	4909      	ldr	r1, [pc, #36]	; (8017fa0 <__NVIC_DisableIRQ+0x44>)
 8017f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f7e:	095b      	lsrs	r3, r3, #5
 8017f80:	2001      	movs	r0, #1
 8017f82:	fa00 f202 	lsl.w	r2, r0, r2
 8017f86:	3320      	adds	r3, #32
 8017f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017f8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8017f90:	f3bf 8f6f 	isb	sy
}
 8017f94:	bf00      	nop
 8017f96:	370c      	adds	r7, #12
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9e:	4770      	bx	lr
 8017fa0:	e000e100 	.word	0xe000e100

08017fa4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8017fa4:	b480      	push	{r7}
 8017fa6:	b085      	sub	sp, #20
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	607a      	str	r2, [r7, #4]
 8017fb0:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8017fbc:	68ba      	ldr	r2, [r7, #8]
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	430a      	orrs	r2, r1
 8017fc4:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017fcc:	f023 0107 	bic.w	r1, r3, #7
 8017fd0:	687a      	ldr	r2, [r7, #4]
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	430a      	orrs	r2, r1
 8017fd8:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017fe0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8017fe4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017fe8:	6839      	ldr	r1, [r7, #0]
 8017fea:	68fa      	ldr	r2, [r7, #12]
 8017fec:	6812      	ldr	r2, [r2, #0]
 8017fee:	430b      	orrs	r3, r1
 8017ff0:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 8017ff2:	2300      	movs	r3, #0
}
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3714      	adds	r7, #20
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ffe:	4770      	bx	lr

08018000 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* hdma2d)
{
 8018000:	b580      	push	{r7, lr}
 8018002:	b082      	sub	sp, #8
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8018008:	f7f1 fc12 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 801800c:	4603      	mov	r3, r0
 801800e:	4618      	mov	r0, r3
 8018010:	f7ff ff64 	bl	8017edc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8018014:	bf00      	nop
 8018016:	3708      	adds	r7, #8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}

0801801c <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* hdma2d)
{
 801801c:	b480      	push	{r7}
 801801e:	b083      	sub	sp, #12
 8018020:	af00      	add	r7, sp, #0
 8018022:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 8018024:	bf00      	nop
 8018026:	370c      	adds	r7, #12
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr

08018030 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 8018030:	b580      	push	{r7, lr}
 8018032:	b082      	sub	sp, #8
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	3318      	adds	r3, #24
 801803c:	4618      	mov	r0, r3
 801803e:	f7f6 fbcf 	bl	800e7e0 <_ZN8touchgfx9colortypeC1Ev>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	4618      	mov	r0, r3
 8018046:	3708      	adds	r7, #8
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}

0801804c <_ZN10STM32F4DMAC1Ev>:

}

STM32F4DMA::STM32F4DMA()
 801804c:	b5b0      	push	{r4, r5, r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8018054:	687a      	ldr	r2, [r7, #4]
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	330c      	adds	r3, #12
 801805a:	4619      	mov	r1, r3
 801805c:	4610      	mov	r0, r2
 801805e:	f7ff ff23 	bl	8017ea8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8018062:	4a0e      	ldr	r2, [pc, #56]	; (801809c <_ZN10STM32F4DMAC1Ev+0x50>)
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	601a      	str	r2, [r3, #0]
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	f103 000c 	add.w	r0, r3, #12
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	3320      	adds	r3, #32
 8018072:	2260      	movs	r2, #96	; 0x60
 8018074:	4619      	mov	r1, r3
 8018076:	f001 fe8b 	bl	8019d90 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	3320      	adds	r3, #32
 801807e:	245f      	movs	r4, #95	; 0x5f
 8018080:	461d      	mov	r5, r3
 8018082:	2c00      	cmp	r4, #0
 8018084:	db05      	blt.n	8018092 <_ZN10STM32F4DMAC1Ev+0x46>
 8018086:	4628      	mov	r0, r5
 8018088:	f7ff ffd2 	bl	8018030 <_ZN8touchgfx6BlitOpC1Ev>
 801808c:	3520      	adds	r5, #32
 801808e:	3c01      	subs	r4, #1
 8018090:	e7f7      	b.n	8018082 <_ZN10STM32F4DMAC1Ev+0x36>
{}
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	4618      	mov	r0, r3
 8018096:	3708      	adds	r7, #8
 8018098:	46bd      	mov	sp, r7
 801809a:	bdb0      	pop	{r4, r5, r7, pc}
 801809c:	08024378 	.word	0x08024378

080180a0 <_ZN10STM32F4DMAD1Ev>:

STM32F4DMA::~STM32F4DMA()
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b082      	sub	sp, #8
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
 80180a8:	4a0b      	ldr	r2, [pc, #44]	; (80180d8 <_ZN10STM32F4DMAD1Ev+0x38>)
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80180ae:	480b      	ldr	r0, [pc, #44]	; (80180dc <_ZN10STM32F4DMAD1Ev+0x3c>)
 80180b0:	f7eb fc28 	bl	8003904 <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80180b4:	205a      	movs	r0, #90	; 0x5a
 80180b6:	f7ff ff51 	bl	8017f5c <__NVIC_DisableIRQ>
STM32F4DMA::~STM32F4DMA()
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	330c      	adds	r3, #12
 80180be:	4618      	mov	r0, r3
 80180c0:	f000 faaa 	bl	8018618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	4618      	mov	r0, r3
 80180c8:	f7ff fece 	bl	8017e68 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	4618      	mov	r0, r3
 80180d0:	3708      	adds	r7, #8
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd80      	pop	{r7, pc}
 80180d6:	bf00      	nop
 80180d8:	08024378 	.word	0x08024378
 80180dc:	2001a7d0 	.word	0x2001a7d0

080180e0 <_ZN10STM32F4DMAD0Ev>:
STM32F4DMA::~STM32F4DMA()
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b082      	sub	sp, #8
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
}
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f7ff ffd9 	bl	80180a0 <_ZN10STM32F4DMAD1Ev>
 80180ee:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f008 fc65 	bl	80209c2 <_ZdlPvj>
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	4618      	mov	r0, r3
 80180fc:	3708      	adds	r7, #8
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}
	...

08018104 <_ZN10STM32F4DMA10initializeEv>:

void STM32F4DMA::initialize()
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b082      	sub	sp, #8
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 801810c:	4b09      	ldr	r3, [pc, #36]	; (8018134 <_ZN10STM32F4DMA10initializeEv+0x30>)
 801810e:	4a0a      	ldr	r2, [pc, #40]	; (8018138 <_ZN10STM32F4DMA10initializeEv+0x34>)
 8018110:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 8018112:	4808      	ldr	r0, [pc, #32]	; (8018134 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8018114:	f7eb fbac 	bl	8003870 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8018118:	4b06      	ldr	r3, [pc, #24]	; (8018134 <_ZN10STM32F4DMA10initializeEv+0x30>)
 801811a:	4a08      	ldr	r2, [pc, #32]	; (801813c <_ZN10STM32F4DMA10initializeEv+0x38>)
 801811c:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801811e:	4b05      	ldr	r3, [pc, #20]	; (8018134 <_ZN10STM32F4DMA10initializeEv+0x30>)
 8018120:	4a07      	ldr	r2, [pc, #28]	; (8018140 <_ZN10STM32F4DMA10initializeEv+0x3c>)
 8018122:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8018124:	205a      	movs	r0, #90	; 0x5a
 8018126:	f7ff fef9 	bl	8017f1c <__NVIC_EnableIRQ>
}
 801812a:	bf00      	nop
 801812c:	3708      	adds	r7, #8
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}
 8018132:	bf00      	nop
 8018134:	2001a7d0 	.word	0x2001a7d0
 8018138:	4002b000 	.word	0x4002b000
 801813c:	08018001 	.word	0x08018001
 8018140:	0801801d 	.word	0x0801801d

08018144 <_ZN10STM32F4DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F4DMA::getBlitCaps()
{
 8018144:	b480      	push	{r7}
 8018146:	b083      	sub	sp, #12
 8018148:	af00      	add	r7, sp, #0
 801814a:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 801814c:	4b07      	ldr	r3, [pc, #28]	; (801816c <_ZN10STM32F4DMA11getBlitCapsEv+0x28>)
 801814e:	781b      	ldrb	r3, [r3, #0]
 8018150:	b2db      	uxtb	r3, r3
 8018152:	2b00      	cmp	r3, #0
 8018154:	d001      	beq.n	801815a <_ZN10STM32F4DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 8018156:	2300      	movs	r3, #0
 8018158:	e001      	b.n	801815e <_ZN10STM32F4DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 801815a:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 801815e:	4618      	mov	r0, r3
 8018160:	370c      	adds	r7, #12
 8018162:	46bd      	mov	sp, r7
 8018164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018168:	4770      	bx	lr
 801816a:	bf00      	nop
 801816c:	2001a858 	.word	0x2001a858

08018170 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataCopy(const BlitOp& blitOp)
{
 8018170:	b590      	push	{r4, r7, lr}
 8018172:	b08d      	sub	sp, #52	; 0x34
 8018174:	af02      	add	r7, sp, #8
 8018176:	6078      	str	r0, [r7, #4]
 8018178:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801817a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801817e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8018180:	2300      	movs	r3, #0
 8018182:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8018188:	2b20      	cmp	r3, #32
 801818a:	d007      	beq.n	801819c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	2b40      	cmp	r3, #64	; 0x40
 8018192:	d003      	beq.n	801819c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	2b04      	cmp	r3, #4
 801819a:	d101      	bne.n	80181a0 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 801819c:	2301      	movs	r3, #1
 801819e:	e000      	b.n	80181a2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80181a0:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80181a2:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80181a8:	2b80      	cmp	r3, #128	; 0x80
 80181aa:	d004      	beq.n	80181b6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80181ac:	683b      	ldr	r3, [r7, #0]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80181b4:	d101      	bne.n	80181ba <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80181b6:	2301      	movs	r3, #1
 80181b8:	e000      	b.n	80181bc <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80181ba:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80181bc:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80181be:	f7f1 fb43 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 80181c2:	4602      	mov	r2, r0
 80181c4:	6813      	ldr	r3, [r2, #0]
 80181c6:	3320      	adds	r3, #32
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	4610      	mov	r0, r2
 80181cc:	4798      	blx	r3
 80181ce:	4603      	mov	r3, r0
 80181d0:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80181d2:	683b      	ldr	r3, [r7, #0]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	2b40      	cmp	r3, #64	; 0x40
 80181d8:	d01d      	beq.n	8018216 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80181da:	2b40      	cmp	r3, #64	; 0x40
 80181dc:	d804      	bhi.n	80181e8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 80181de:	2b04      	cmp	r3, #4
 80181e0:	d00e      	beq.n	8018200 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80181e2:	2b20      	cmp	r3, #32
 80181e4:	d017      	beq.n	8018216 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 80181e6:	e019      	b.n	801821c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 80181e8:	2b80      	cmp	r3, #128	; 0x80
 80181ea:	d003      	beq.n	80181f4 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 80181ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80181f0:	d003      	beq.n	80181fa <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 80181f2:	e013      	b.n	801821c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 80181f4:	230a      	movs	r3, #10
 80181f6:	623b      	str	r3, [r7, #32]
        break;
 80181f8:	e01a      	b.n	8018230 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80181fa:	2309      	movs	r3, #9
 80181fc:	623b      	str	r3, [r7, #32]
        break;
 80181fe:	e017      	b.n	8018230 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8018200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8018204:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8018206:	7f7b      	ldrb	r3, [r7, #29]
 8018208:	2b10      	cmp	r3, #16
 801820a:	d101      	bne.n	8018210 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 801820c:	2302      	movs	r3, #2
 801820e:	e000      	b.n	8018212 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 8018210:	2301      	movs	r3, #1
 8018212:	623b      	str	r3, [r7, #32]
        break;
 8018214:	e00c      	b.n	8018230 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8018216:	2300      	movs	r3, #0
 8018218:	623b      	str	r3, [r7, #32]
        break;
 801821a:	e009      	b.n	8018230 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 801821c:	2300      	movs	r3, #0
 801821e:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8018220:	7f7b      	ldrb	r3, [r7, #29]
 8018222:	2b10      	cmp	r3, #16
 8018224:	d101      	bne.n	801822a <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8018226:	2302      	movs	r3, #2
 8018228:	e000      	b.n	801822c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 801822a:	2301      	movs	r3, #1
 801822c:	623b      	str	r3, [r7, #32]
        break;
 801822e:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init! */
    hdma2d.Init.Mode = dma2dTransferMode;
 8018230:	4a76      	ldr	r2, [pc, #472]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018234:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8018236:	7f7b      	ldrb	r3, [r7, #29]
 8018238:	2b10      	cmp	r3, #16
 801823a:	d101      	bne.n	8018240 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 801823c:	2302      	movs	r3, #2
 801823e:	e000      	b.n	8018242 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 8018240:	2301      	movs	r3, #1
 8018242:	4a72      	ldr	r2, [pc, #456]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018244:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	8adb      	ldrh	r3, [r3, #22]
 801824a:	461a      	mov	r2, r3
 801824c:	683b      	ldr	r3, [r7, #0]
 801824e:	8a1b      	ldrh	r3, [r3, #16]
 8018250:	1ad3      	subs	r3, r2, r3
 8018252:	461a      	mov	r2, r3
 8018254:	4b6d      	ldr	r3, [pc, #436]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018256:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8018258:	7f7b      	ldrb	r3, [r7, #29]
 801825a:	2b10      	cmp	r3, #16
 801825c:	d101      	bne.n	8018262 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801825e:	2202      	movs	r2, #2
 8018260:	e000      	b.n	8018264 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 8018262:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8018264:	683b      	ldr	r3, [r7, #0]
 8018266:	8adb      	ldrh	r3, [r3, #22]
 8018268:	4619      	mov	r1, r3
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	8a1b      	ldrh	r3, [r3, #16]
 801826e:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8018270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018272:	4866      	ldr	r0, [pc, #408]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018274:	f7ff fe96 	bl	8017fa4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8018278:	4a64      	ldr	r2, [pc, #400]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801827a:	6a3b      	ldr	r3, [r7, #32]
 801827c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	8a9b      	ldrh	r3, [r3, #20]
 8018282:	461a      	mov	r2, r3
 8018284:	683b      	ldr	r3, [r7, #0]
 8018286:	8a1b      	ldrh	r3, [r3, #16]
 8018288:	1ad3      	subs	r3, r2, r3
 801828a:	461a      	mov	r2, r3
 801828c:	4b5f      	ldr	r3, [pc, #380]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801828e:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8018290:	7ffb      	ldrb	r3, [r7, #31]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d103      	bne.n	801829e <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 8018296:	7fbb      	ldrb	r3, [r7, #30]
 8018298:	2b00      	cmp	r3, #0
 801829a:	f000 8082 	beq.w	80183a2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	7f1b      	ldrb	r3, [r3, #28]
 80182a2:	2bff      	cmp	r3, #255	; 0xff
 80182a4:	d008      	beq.n	80182b8 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80182a6:	4b59      	ldr	r3, [pc, #356]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182a8:	2202      	movs	r2, #2
 80182aa:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80182ac:	683b      	ldr	r3, [r7, #0]
 80182ae:	7f1b      	ldrb	r3, [r3, #28]
 80182b0:	461a      	mov	r2, r3
 80182b2:	4b56      	ldr	r3, [pc, #344]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182b4:	635a      	str	r2, [r3, #52]	; 0x34
 80182b6:	e002      	b.n	80182be <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80182b8:	4b54      	ldr	r3, [pc, #336]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80182ba:	2200      	movs	r2, #0
 80182bc:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80182be:	7fbb      	ldrb	r3, [r7, #30]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d059      	beq.n	8018378 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80182c4:	7f7b      	ldrb	r3, [r7, #29]
 80182c6:	2b10      	cmp	r3, #16
 80182c8:	d14a      	bne.n	8018360 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	3318      	adds	r3, #24
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7f8 fc66 	bl	8010ba0 <_ZNK8touchgfx9colortypecvtEv>
 80182d4:	4603      	mov	r3, r0
 80182d6:	12db      	asrs	r3, r3, #11
 80182d8:	f003 021f 	and.w	r2, r3, #31
 80182dc:	4613      	mov	r3, r2
 80182de:	021b      	lsls	r3, r3, #8
 80182e0:	1a9b      	subs	r3, r3, r2
 80182e2:	4a4b      	ldr	r2, [pc, #300]	; (8018410 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80182e4:	fb82 1203 	smull	r1, r2, r2, r3
 80182e8:	441a      	add	r2, r3
 80182ea:	1112      	asrs	r2, r2, #4
 80182ec:	17db      	asrs	r3, r3, #31
 80182ee:	1ad3      	subs	r3, r2, r3
 80182f0:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	3318      	adds	r3, #24
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7f8 fc52 	bl	8010ba0 <_ZNK8touchgfx9colortypecvtEv>
 80182fc:	4603      	mov	r3, r0
 80182fe:	115b      	asrs	r3, r3, #5
 8018300:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018304:	4613      	mov	r3, r2
 8018306:	021b      	lsls	r3, r3, #8
 8018308:	1a9b      	subs	r3, r3, r2
 801830a:	4a42      	ldr	r2, [pc, #264]	; (8018414 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801830c:	fb82 1203 	smull	r1, r2, r2, r3
 8018310:	441a      	add	r2, r3
 8018312:	1152      	asrs	r2, r2, #5
 8018314:	17db      	asrs	r3, r3, #31
 8018316:	1ad3      	subs	r3, r2, r3
 8018318:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	3318      	adds	r3, #24
 801831e:	4618      	mov	r0, r3
 8018320:	f7f8 fc3e 	bl	8010ba0 <_ZNK8touchgfx9colortypecvtEv>
 8018324:	4603      	mov	r3, r0
 8018326:	f003 021f 	and.w	r2, r3, #31
 801832a:	4613      	mov	r3, r2
 801832c:	021b      	lsls	r3, r3, #8
 801832e:	1a9b      	subs	r3, r3, r2
 8018330:	4a37      	ldr	r2, [pc, #220]	; (8018410 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8018332:	fb82 1203 	smull	r1, r2, r2, r3
 8018336:	441a      	add	r2, r3
 8018338:	1112      	asrs	r2, r2, #4
 801833a:	17db      	asrs	r3, r3, #31
 801833c:	1ad3      	subs	r3, r2, r3
 801833e:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 8018340:	683b      	ldr	r3, [r7, #0]
 8018342:	7f1b      	ldrb	r3, [r3, #28]
 8018344:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	061a      	lsls	r2, r3, #24
 801834a:	69bb      	ldr	r3, [r7, #24]
 801834c:	041b      	lsls	r3, r3, #16
 801834e:	431a      	orrs	r2, r3
 8018350:	697b      	ldr	r3, [r7, #20]
 8018352:	021b      	lsls	r3, r3, #8
 8018354:	431a      	orrs	r2, r3
 8018356:	693b      	ldr	r3, [r7, #16]
 8018358:	4313      	orrs	r3, r2
 801835a:	4a2c      	ldr	r2, [pc, #176]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801835c:	6353      	str	r3, [r2, #52]	; 0x34
 801835e:	e00b      	b.n	8018378 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	3318      	adds	r3, #24
 8018364:	4618      	mov	r0, r3
 8018366:	f7ff fd39 	bl	8017ddc <_ZNK8touchgfx9colortype10getColor32Ev>
 801836a:	4602      	mov	r2, r0
 801836c:	683b      	ldr	r3, [r7, #0]
 801836e:	7f1b      	ldrb	r3, [r3, #28]
 8018370:	061b      	lsls	r3, r3, #24
 8018372:	4313      	orrs	r3, r2
 8018374:	4a25      	ldr	r2, [pc, #148]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018376:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8018378:	683b      	ldr	r3, [r7, #0]
 801837a:	8adb      	ldrh	r3, [r3, #22]
 801837c:	461a      	mov	r2, r3
 801837e:	683b      	ldr	r3, [r7, #0]
 8018380:	8a1b      	ldrh	r3, [r3, #16]
 8018382:	1ad3      	subs	r3, r2, r3
 8018384:	461a      	mov	r2, r3
 8018386:	4b21      	ldr	r3, [pc, #132]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018388:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801838a:	7f7b      	ldrb	r3, [r7, #29]
 801838c:	2b10      	cmp	r3, #16
 801838e:	d101      	bne.n	8018394 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 8018390:	2302      	movs	r3, #2
 8018392:	e000      	b.n	8018396 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 8018394:	2301      	movs	r3, #1
 8018396:	4a1d      	ldr	r2, [pc, #116]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018398:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801839a:	2100      	movs	r1, #0
 801839c:	481b      	ldr	r0, [pc, #108]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801839e:	f7eb fd31 	bl	8003e04 <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80183a2:	2101      	movs	r1, #1
 80183a4:	4819      	ldr	r0, [pc, #100]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183a6:	f7eb fd2d 	bl	8003e04 <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 80183aa:	7ffb      	ldrb	r3, [r7, #31]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d102      	bne.n	80183b6 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80183b0:	7fbb      	ldrb	r3, [r7, #30]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d015      	beq.n	80183e2 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80183b6:	683b      	ldr	r3, [r7, #0]
 80183b8:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80183ba:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80183bc:	683b      	ldr	r3, [r7, #0]
 80183be:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80183c0:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80183c6:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80183c8:	683b      	ldr	r3, [r7, #0]
 80183ca:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80183cc:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80183ce:	683b      	ldr	r3, [r7, #0]
 80183d0:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80183d2:	9301      	str	r3, [sp, #4]
 80183d4:	9200      	str	r2, [sp, #0]
 80183d6:	4623      	mov	r3, r4
 80183d8:	4602      	mov	r2, r0
 80183da:	480c      	ldr	r0, [pc, #48]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183dc:	f7eb fb35 	bl	8003a4a <HAL_DMA2D_BlendingStart_IT>
 80183e0:	e00f      	b.n	8018402 <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 80183e2:	683b      	ldr	r3, [r7, #0]
 80183e4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 80183e6:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 80183e8:	683b      	ldr	r3, [r7, #0]
 80183ea:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 80183ec:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d,
 80183f2:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 80183f4:	683b      	ldr	r3, [r7, #0]
 80183f6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d,
 80183f8:	9300      	str	r3, [sp, #0]
 80183fa:	4603      	mov	r3, r0
 80183fc:	4803      	ldr	r0, [pc, #12]	; (801840c <_ZN10STM32F4DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183fe:	f7eb faf1 	bl	80039e4 <HAL_DMA2D_Start_IT>
    }
}
 8018402:	bf00      	nop
 8018404:	372c      	adds	r7, #44	; 0x2c
 8018406:	46bd      	mov	sp, r7
 8018408:	bd90      	pop	{r4, r7, pc}
 801840a:	bf00      	nop
 801840c:	2001a7d0 	.word	0x2001a7d0
 8018410:	84210843 	.word	0x84210843
 8018414:	82082083 	.word	0x82082083

08018418 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F4DMA::setupDataFill(const BlitOp& blitOp)
{
 8018418:	b590      	push	{r4, r7, lr}
 801841a:	b08d      	sub	sp, #52	; 0x34
 801841c:	af02      	add	r7, sp, #8
 801841e:	6078      	str	r0, [r7, #4]
 8018420:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 8018422:	f7f1 fa11 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 8018426:	4602      	mov	r2, r0
 8018428:	6813      	ldr	r3, [r2, #0]
 801842a:	3320      	adds	r3, #32
 801842c:	681b      	ldr	r3, [r3, #0]
 801842e:	4610      	mov	r0, r2
 8018430:	4798      	blx	r3
 8018432:	4603      	mov	r3, r0
 8018434:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8018436:	7ffb      	ldrb	r3, [r7, #31]
 8018438:	2b10      	cmp	r3, #16
 801843a:	d101      	bne.n	8018440 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 801843c:	2302      	movs	r3, #2
 801843e:	e000      	b.n	8018442 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 8018440:	2301      	movs	r3, #1
 8018442:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8018444:	2300      	movs	r3, #0
 8018446:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8018448:	7ffb      	ldrb	r3, [r7, #31]
 801844a:	2b10      	cmp	r3, #16
 801844c:	d149      	bne.n	80184e2 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	3318      	adds	r3, #24
 8018452:	4618      	mov	r0, r3
 8018454:	f7f8 fba4 	bl	8010ba0 <_ZNK8touchgfx9colortypecvtEv>
 8018458:	4603      	mov	r3, r0
 801845a:	12db      	asrs	r3, r3, #11
 801845c:	f003 021f 	and.w	r2, r3, #31
 8018460:	4613      	mov	r3, r2
 8018462:	021b      	lsls	r3, r3, #8
 8018464:	1a9b      	subs	r3, r3, r2
 8018466:	4a69      	ldr	r2, [pc, #420]	; (801860c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8018468:	fb82 1203 	smull	r1, r2, r2, r3
 801846c:	441a      	add	r2, r3
 801846e:	1112      	asrs	r2, r2, #4
 8018470:	17db      	asrs	r3, r3, #31
 8018472:	1ad3      	subs	r3, r2, r3
 8018474:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 8018476:	683b      	ldr	r3, [r7, #0]
 8018478:	3318      	adds	r3, #24
 801847a:	4618      	mov	r0, r3
 801847c:	f7f8 fb90 	bl	8010ba0 <_ZNK8touchgfx9colortypecvtEv>
 8018480:	4603      	mov	r3, r0
 8018482:	115b      	asrs	r3, r3, #5
 8018484:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018488:	4613      	mov	r3, r2
 801848a:	021b      	lsls	r3, r3, #8
 801848c:	1a9b      	subs	r3, r3, r2
 801848e:	4a60      	ldr	r2, [pc, #384]	; (8018610 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8018490:	fb82 1203 	smull	r1, r2, r2, r3
 8018494:	441a      	add	r2, r3
 8018496:	1152      	asrs	r2, r2, #5
 8018498:	17db      	asrs	r3, r3, #31
 801849a:	1ad3      	subs	r3, r2, r3
 801849c:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 801849e:	683b      	ldr	r3, [r7, #0]
 80184a0:	3318      	adds	r3, #24
 80184a2:	4618      	mov	r0, r3
 80184a4:	f7f8 fb7c 	bl	8010ba0 <_ZNK8touchgfx9colortypecvtEv>
 80184a8:	4603      	mov	r3, r0
 80184aa:	f003 021f 	and.w	r2, r3, #31
 80184ae:	4613      	mov	r3, r2
 80184b0:	021b      	lsls	r3, r3, #8
 80184b2:	1a9b      	subs	r3, r3, r2
 80184b4:	4a55      	ldr	r2, [pc, #340]	; (801860c <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80184b6:	fb82 1203 	smull	r1, r2, r2, r3
 80184ba:	441a      	add	r2, r3
 80184bc:	1112      	asrs	r2, r2, #4
 80184be:	17db      	asrs	r3, r3, #31
 80184c0:	1ad3      	subs	r3, r2, r3
 80184c2:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	7f1b      	ldrb	r3, [r3, #28]
 80184c8:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80184ca:	68bb      	ldr	r3, [r7, #8]
 80184cc:	061a      	lsls	r2, r3, #24
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	041b      	lsls	r3, r3, #16
 80184d2:	431a      	orrs	r2, r3
 80184d4:	693b      	ldr	r3, [r7, #16]
 80184d6:	021b      	lsls	r3, r3, #8
 80184d8:	4313      	orrs	r3, r2
 80184da:	68fa      	ldr	r2, [r7, #12]
 80184dc:	4313      	orrs	r3, r2
 80184de:	623b      	str	r3, [r7, #32]
 80184e0:	e00b      	b.n	80184fa <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 80184e2:	683b      	ldr	r3, [r7, #0]
 80184e4:	7f1b      	ldrb	r3, [r3, #28]
 80184e6:	061b      	lsls	r3, r3, #24
 80184e8:	461c      	mov	r4, r3
 80184ea:	683b      	ldr	r3, [r7, #0]
 80184ec:	3318      	adds	r3, #24
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7ff fc74 	bl	8017ddc <_ZNK8touchgfx9colortype10getColor32Ev>
 80184f4:	4603      	mov	r3, r0
 80184f6:	4323      	orrs	r3, r4
 80184f8:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	2b08      	cmp	r3, #8
 8018500:	d103      	bne.n	801850a <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 8018502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8018506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018508:	e003      	b.n	8018512 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 801850a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801850e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018510:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init! */
    hdma2d.Init.Mode = dma2dTransferMode;
 8018512:	4a40      	ldr	r2, [pc, #256]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018516:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8018518:	7ffb      	ldrb	r3, [r7, #31]
 801851a:	2b10      	cmp	r3, #16
 801851c:	d101      	bne.n	8018522 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801851e:	2302      	movs	r3, #2
 8018520:	e000      	b.n	8018524 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 8018522:	2301      	movs	r3, #1
 8018524:	4a3b      	ldr	r2, [pc, #236]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018526:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	8adb      	ldrh	r3, [r3, #22]
 801852c:	461a      	mov	r2, r3
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	8a1b      	ldrh	r3, [r3, #16]
 8018532:	1ad3      	subs	r3, r2, r3
 8018534:	461a      	mov	r2, r3
 8018536:	4b37      	ldr	r3, [pc, #220]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018538:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801853a:	7ffb      	ldrb	r3, [r7, #31]
 801853c:	2b10      	cmp	r3, #16
 801853e:	d101      	bne.n	8018544 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 8018540:	2202      	movs	r2, #2
 8018542:	e000      	b.n	8018546 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8018544:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	8adb      	ldrh	r3, [r3, #22]
 801854a:	4619      	mov	r1, r3
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	8a1b      	ldrh	r3, [r3, #16]
 8018550:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8018552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018554:	482f      	ldr	r0, [pc, #188]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018556:	f7ff fd25 	bl	8017fa4 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 801855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8018560:	d11e      	bne.n	80185a0 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8018562:	4b2c      	ldr	r3, [pc, #176]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018564:	2201      	movs	r2, #1
 8018566:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8018568:	4a2a      	ldr	r2, [pc, #168]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801856a:	6a3b      	ldr	r3, [r7, #32]
 801856c:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801856e:	4b29      	ldr	r3, [pc, #164]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018570:	2209      	movs	r2, #9
 8018572:	62da      	str	r2, [r3, #44]	; 0x2c

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	8adb      	ldrh	r3, [r3, #22]
 8018578:	461a      	mov	r2, r3
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	8a1b      	ldrh	r3, [r3, #16]
 801857e:	1ad3      	subs	r3, r2, r3
 8018580:	461a      	mov	r2, r3
 8018582:	4b24      	ldr	r3, [pc, #144]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018584:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8018586:	7ffb      	ldrb	r3, [r7, #31]
 8018588:	2b10      	cmp	r3, #16
 801858a:	d101      	bne.n	8018590 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 801858c:	2302      	movs	r3, #2
 801858e:	e000      	b.n	8018592 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8018590:	2301      	movs	r3, #1
 8018592:	4a20      	ldr	r2, [pc, #128]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018594:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8018596:	2100      	movs	r1, #0
 8018598:	481e      	ldr	r0, [pc, #120]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801859a:	f7eb fc33 	bl	8003e04 <HAL_DMA2D_ConfigLayer>
 801859e:	e005      	b.n	80185ac <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80185a0:	4a1c      	ldr	r2, [pc, #112]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185a2:	69bb      	ldr	r3, [r7, #24]
 80185a4:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80185a6:	4b1b      	ldr	r3, [pc, #108]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185a8:	2200      	movs	r2, #0
 80185aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80185ac:	2101      	movs	r1, #1
 80185ae:	4819      	ldr	r0, [pc, #100]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185b0:	f7eb fc28 	bl	8003e04 <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80185b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80185ba:	d115      	bne.n	80185e8 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80185c0:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80185c2:	683b      	ldr	r3, [r7, #0]
 80185c4:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80185c6:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80185c8:	683b      	ldr	r3, [r7, #0]
 80185ca:	68db      	ldr	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80185cc:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80185d2:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80185d4:	683b      	ldr	r3, [r7, #0]
 80185d6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80185d8:	9301      	str	r3, [sp, #4]
 80185da:	9200      	str	r2, [sp, #0]
 80185dc:	4623      	mov	r3, r4
 80185de:	4602      	mov	r2, r0
 80185e0:	480c      	ldr	r0, [pc, #48]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80185e2:	f7eb fa32 	bl	8003a4a <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 80185e6:	e00d      	b.n	8018604 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	68db      	ldr	r3, [r3, #12]
 80185ec:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 80185ee:	683b      	ldr	r3, [r7, #0]
 80185f0:	8a1b      	ldrh	r3, [r3, #16]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80185f2:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	8a5b      	ldrh	r3, [r3, #18]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80185f8:	9300      	str	r3, [sp, #0]
 80185fa:	460b      	mov	r3, r1
 80185fc:	6a39      	ldr	r1, [r7, #32]
 80185fe:	4805      	ldr	r0, [pc, #20]	; (8018614 <_ZN10STM32F4DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8018600:	f7eb f9f0 	bl	80039e4 <HAL_DMA2D_Start_IT>
}
 8018604:	bf00      	nop
 8018606:	372c      	adds	r7, #44	; 0x2c
 8018608:	46bd      	mov	sp, r7
 801860a:	bd90      	pop	{r4, r7, pc}
 801860c:	84210843 	.word	0x84210843
 8018610:	82082083 	.word	0x82082083
 8018614:	2001a7d0 	.word	0x2001a7d0

08018618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8018618:	b580      	push	{r7, lr}
 801861a:	b082      	sub	sp, #8
 801861c:	af00      	add	r7, sp, #0
 801861e:	6078      	str	r0, [r7, #4]
 8018620:	4a05      	ldr	r2, [pc, #20]	; (8018638 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	601a      	str	r2, [r3, #0]
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	4618      	mov	r0, r3
 801862a:	f7ff fbe3 	bl	8017df4 <_ZN8touchgfx9DMA_QueueD1Ev>
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	4618      	mov	r0, r3
 8018632:	3708      	adds	r7, #8
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}
 8018638:	08024e00 	.word	0x08024e00

0801863c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801863c:	b580      	push	{r7, lr}
 801863e:	b082      	sub	sp, #8
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
 8018644:	6878      	ldr	r0, [r7, #4]
 8018646:	f7ff ffe7 	bl	8018618 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801864a:	2114      	movs	r1, #20
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f008 f9b8 	bl	80209c2 <_ZdlPvj>
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	4618      	mov	r0, r3
 8018656:	3708      	adds	r7, #8
 8018658:	46bd      	mov	sp, r7
 801865a:	bd80      	pop	{r7, pc}

0801865c <__NVIC_EnableIRQ>:
{
 801865c:	b480      	push	{r7}
 801865e:	b083      	sub	sp, #12
 8018660:	af00      	add	r7, sp, #0
 8018662:	4603      	mov	r3, r0
 8018664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8018666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801866a:	2b00      	cmp	r3, #0
 801866c:	db0d      	blt.n	801868a <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801866e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018672:	b2db      	uxtb	r3, r3
 8018674:	f003 021f 	and.w	r2, r3, #31
 8018678:	4907      	ldr	r1, [pc, #28]	; (8018698 <__NVIC_EnableIRQ+0x3c>)
 801867a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801867e:	095b      	lsrs	r3, r3, #5
 8018680:	2001      	movs	r0, #1
 8018682:	fa00 f202 	lsl.w	r2, r0, r2
 8018686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801868a:	bf00      	nop
 801868c:	370c      	adds	r7, #12
 801868e:	46bd      	mov	sp, r7
 8018690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018694:	4770      	bx	lr
 8018696:	bf00      	nop
 8018698:	e000e100 	.word	0xe000e100

0801869c <__NVIC_DisableIRQ>:
{
 801869c:	b480      	push	{r7}
 801869e:	b083      	sub	sp, #12
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	4603      	mov	r3, r0
 80186a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80186a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	db12      	blt.n	80186d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80186ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186b2:	b2db      	uxtb	r3, r3
 80186b4:	f003 021f 	and.w	r2, r3, #31
 80186b8:	4909      	ldr	r1, [pc, #36]	; (80186e0 <__NVIC_DisableIRQ+0x44>)
 80186ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186be:	095b      	lsrs	r3, r3, #5
 80186c0:	2001      	movs	r0, #1
 80186c2:	fa00 f202 	lsl.w	r2, r0, r2
 80186c6:	3320      	adds	r3, #32
 80186c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80186cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80186d0:	f3bf 8f6f 	isb	sy
}
 80186d4:	bf00      	nop
 80186d6:	370c      	adds	r7, #12
 80186d8:	46bd      	mov	sp, r7
 80186da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186de:	4770      	bx	lr
 80186e0:	e000e100 	.word	0xe000e100

080186e4 <__NVIC_SetPriority>:
{
 80186e4:	b480      	push	{r7}
 80186e6:	b083      	sub	sp, #12
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	4603      	mov	r3, r0
 80186ec:	6039      	str	r1, [r7, #0]
 80186ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80186f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	db0c      	blt.n	8018712 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80186f8:	683b      	ldr	r3, [r7, #0]
 80186fa:	b2db      	uxtb	r3, r3
 80186fc:	4a0e      	ldr	r2, [pc, #56]	; (8018738 <__NVIC_SetPriority+0x54>)
 80186fe:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8018702:	4608      	mov	r0, r1
 8018704:	011b      	lsls	r3, r3, #4
 8018706:	b2d9      	uxtb	r1, r3
 8018708:	1813      	adds	r3, r2, r0
 801870a:	460a      	mov	r2, r1
 801870c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018710:	e00c      	b.n	801872c <__NVIC_SetPriority+0x48>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	b2da      	uxtb	r2, r3
 8018716:	4909      	ldr	r1, [pc, #36]	; (801873c <__NVIC_SetPriority+0x58>)
 8018718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801871c:	b2db      	uxtb	r3, r3
 801871e:	f003 030f 	and.w	r3, r3, #15
 8018722:	3b04      	subs	r3, #4
 8018724:	0112      	lsls	r2, r2, #4
 8018726:	b2d2      	uxtb	r2, r2
 8018728:	440b      	add	r3, r1
 801872a:	761a      	strb	r2, [r3, #24]
}
 801872c:	bf00      	nop
 801872e:	370c      	adds	r7, #12
 8018730:	46bd      	mov	sp, r7
 8018732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018736:	4770      	bx	lr
 8018738:	e000e100 	.word	0xe000e100
 801873c:	e000ed00 	.word	0xe000ed00

08018740 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8018740:	b480      	push	{r7}
 8018742:	b083      	sub	sp, #12
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
 8018748:	460b      	mov	r3, r1
 801874a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	78fa      	ldrb	r2, [r7, #3]
 8018750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	2201      	movs	r2, #1
 8018758:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 801875c:	bf00      	nop
 801875e:	370c      	adds	r7, #12
 8018760:	46bd      	mov	sp, r7
 8018762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018766:	4770      	bx	lr

08018768 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8018768:	b580      	push	{r7, lr}
 801876a:	b082      	sub	sp, #8
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	3318      	adds	r3, #24
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	4798      	blx	r3
    }
 801877c:	bf00      	nop
 801877e:	3708      	adds	r7, #8
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}

08018784 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8018784:	b580      	push	{r7, lr}
 8018786:	b082      	sub	sp, #8
 8018788:	af00      	add	r7, sp, #0
 801878a:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	685a      	ldr	r2, [r3, #4]
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	685b      	ldr	r3, [r3, #4]
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	4610      	mov	r0, r2
 801879a:	4798      	blx	r3
 801879c:	4603      	mov	r3, r0
    };
 801879e:	4618      	mov	r0, r3
 80187a0:	3708      	adds	r7, #8
 80187a2:	46bd      	mov	sp, r7
 80187a4:	bd80      	pop	{r7, pc}

080187a6 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 80187a6:	b480      	push	{r7}
 80187a8:	b083      	sub	sp, #12
 80187aa:	af00      	add	r7, sp, #0
 80187ac:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80187b4:	3301      	adds	r3, #1
 80187b6:	b2da      	uxtb	r2, r3
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    };
 80187be:	bf00      	nop
 80187c0:	370c      	adds	r7, #12
 80187c2:	46bd      	mov	sp, r7
 80187c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c8:	4770      	bx	lr

080187ca <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80187ca:	b580      	push	{r7, lr}
 80187cc:	b082      	sub	sp, #8
 80187ce:	af00      	add	r7, sp, #0
 80187d0:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80187d2:	6878      	ldr	r0, [r7, #4]
 80187d4:	f001 f99e 	bl	8019b14 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	339c      	adds	r3, #156	; 0x9c
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	4798      	blx	r3
    }
 80187e4:	bf00      	nop
 80187e6:	3708      	adds	r7, #8
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}

080187ec <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80187ec:	b480      	push	{r7}
 80187ee:	b083      	sub	sp, #12
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	6078      	str	r0, [r7, #4]
 80187f4:	6039      	str	r1, [r7, #0]
        return false;
 80187f6:	2300      	movs	r3, #0
    }
 80187f8:	4618      	mov	r0, r3
 80187fa:	370c      	adds	r7, #12
 80187fc:	46bd      	mov	sp, r7
 80187fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018802:	4770      	bx	lr

08018804 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8018804:	b590      	push	{r4, r7, lr}
 8018806:	b08b      	sub	sp, #44	; 0x2c
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	4611      	mov	r1, r2
 8018810:	461a      	mov	r2, r3
 8018812:	460b      	mov	r3, r1
 8018814:	80fb      	strh	r3, [r7, #6]
 8018816:	4613      	mov	r3, r2
 8018818:	717b      	strb	r3, [r7, #5]
        uint16_t stride = lcd().framebufferStride();
 801881a:	f7f1 f815 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 801881e:	4602      	mov	r2, r0
 8018820:	6813      	ldr	r3, [r2, #0]
 8018822:	3328      	adds	r3, #40	; 0x28
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	4610      	mov	r0, r2
 8018828:	4798      	blx	r3
 801882a:	4603      	mov	r3, r0
 801882c:	837b      	strh	r3, [r7, #26]
        uint32_t bufferSizeInBytes = stride * FRAME_BUFFER_HEIGHT;
 801882e:	8b7b      	ldrh	r3, [r7, #26]
 8018830:	4a3d      	ldr	r2, [pc, #244]	; (8018928 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x124>)
 8018832:	8812      	ldrh	r2, [r2, #0]
 8018834:	fb02 f303 	mul.w	r3, r2, r3
 8018838:	617b      	str	r3, [r7, #20]
        uint8_t* ptr = (uint8_t*)adr;
 801883a:	68bb      	ldr	r3, [r7, #8]
 801883c:	627b      	str	r3, [r7, #36]	; 0x24
        void* double_buf = 0;
 801883e:	2300      	movs	r3, #0
 8018840:	623b      	str	r3, [r7, #32]
        void* anim_store = 0;
 8018842:	2300      	movs	r3, #0
 8018844:	61fb      	str	r3, [r7, #28]
        if (useDoubleBuffering)
 8018846:	797b      	ldrb	r3, [r7, #5]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d005      	beq.n	8018858 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x54>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer)
 801884c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801884e:	697b      	ldr	r3, [r7, #20]
 8018850:	4413      	add	r3, r2
 8018852:	627b      	str	r3, [r7, #36]	; 0x24
            double_buf = (void*)ptr;
 8018854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018856:	623b      	str	r3, [r7, #32]
        if (useAnimationStorage)
 8018858:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801885c:	2b00      	cmp	r3, #0
 801885e:	d005      	beq.n	801886c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x68>
            ptr += bufferSizeInBytes; // Move past used buffer (framebuffer and possibly double buffer)
 8018860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018862:	697b      	ldr	r3, [r7, #20]
 8018864:	4413      	add	r3, r2
 8018866:	627b      	str	r3, [r7, #36]	; 0x24
            anim_store = (void*)ptr;
 8018868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886a:	61fb      	str	r3, [r7, #28]
        switch (depth)
 801886c:	88fb      	ldrh	r3, [r7, #6]
 801886e:	3b01      	subs	r3, #1
 8018870:	2b1f      	cmp	r3, #31
 8018872:	d84d      	bhi.n	8018910 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x10c>
 8018874:	a201      	add	r2, pc, #4	; (adr r2, 801887c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x78>)
 8018876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801887a:	bf00      	nop
 801887c:	080188fd 	.word	0x080188fd
 8018880:	080188fd 	.word	0x080188fd
 8018884:	08018911 	.word	0x08018911
 8018888:	080188fd 	.word	0x080188fd
 801888c:	08018911 	.word	0x08018911
 8018890:	08018911 	.word	0x08018911
 8018894:	08018911 	.word	0x08018911
 8018898:	080188fd 	.word	0x080188fd
 801889c:	08018911 	.word	0x08018911
 80188a0:	08018911 	.word	0x08018911
 80188a4:	08018911 	.word	0x08018911
 80188a8:	08018911 	.word	0x08018911
 80188ac:	08018911 	.word	0x08018911
 80188b0:	08018911 	.word	0x08018911
 80188b4:	08018911 	.word	0x08018911
 80188b8:	080188fd 	.word	0x080188fd
 80188bc:	08018911 	.word	0x08018911
 80188c0:	08018911 	.word	0x08018911
 80188c4:	08018911 	.word	0x08018911
 80188c8:	08018911 	.word	0x08018911
 80188cc:	08018911 	.word	0x08018911
 80188d0:	08018911 	.word	0x08018911
 80188d4:	08018911 	.word	0x08018911
 80188d8:	080188fd 	.word	0x080188fd
 80188dc:	08018911 	.word	0x08018911
 80188e0:	08018911 	.word	0x08018911
 80188e4:	08018911 	.word	0x08018911
 80188e8:	08018911 	.word	0x08018911
 80188ec:	08018911 	.word	0x08018911
 80188f0:	08018911 	.word	0x08018911
 80188f4:	08018911 	.word	0x08018911
 80188f8:	080188fd 	.word	0x080188fd
            setFrameBufferStartAddresses(adr, double_buf, anim_store);
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	3380      	adds	r3, #128	; 0x80
 8018902:	681c      	ldr	r4, [r3, #0]
 8018904:	69fb      	ldr	r3, [r7, #28]
 8018906:	6a3a      	ldr	r2, [r7, #32]
 8018908:	68b9      	ldr	r1, [r7, #8]
 801890a:	68f8      	ldr	r0, [r7, #12]
 801890c:	47a0      	blx	r4
            break;
 801890e:	e006      	b.n	801891e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11a>
            assert(0 && "Unsupported bit depth");
 8018910:	4b06      	ldr	r3, [pc, #24]	; (801892c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x128>)
 8018912:	4a07      	ldr	r2, [pc, #28]	; (8018930 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x12c>)
 8018914:	f240 3152 	movw	r1, #850	; 0x352
 8018918:	4806      	ldr	r0, [pc, #24]	; (8018934 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x130>)
 801891a:	f008 f86f 	bl	80209fc <__assert_func>
    }
 801891e:	bf00      	nop
 8018920:	372c      	adds	r7, #44	; 0x2c
 8018922:	46bd      	mov	sp, r7
 8018924:	bd90      	pop	{r4, r7, pc}
 8018926:	bf00      	nop
 8018928:	2001a8a8 	.word	0x2001a8a8
 801892c:	08022be4 	.word	0x08022be4
 8018930:	080244f4 	.word	0x080244f4
 8018934:	08022c04 	.word	0x08022c04

08018938 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	607a      	str	r2, [r7, #4]
 8018944:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8018946:	68bb      	ldr	r3, [r7, #8]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d106      	bne.n	801895a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 801894c:	4b11      	ldr	r3, [pc, #68]	; (8018994 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801894e:	4a12      	ldr	r2, [pc, #72]	; (8018998 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8018950:	f44f 7159 	mov.w	r1, #868	; 0x364
 8018954:	4811      	ldr	r0, [pc, #68]	; (801899c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8018956:	f008 f851 	bl	80209fc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	68ba      	ldr	r2, [r7, #8]
 801895e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	687a      	ldr	r2, [r7, #4]
 8018964:	641a      	str	r2, [r3, #64]	; 0x40
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	683a      	ldr	r2, [r7, #0]
 801896a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	2b00      	cmp	r3, #0
 8018970:	bf14      	ite	ne
 8018972:	2301      	movne	r3, #1
 8018974:	2300      	moveq	r3, #0
 8018976:	b2da      	uxtb	r2, r3
 8018978:	4b09      	ldr	r3, [pc, #36]	; (80189a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 801897a:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 801897c:	683b      	ldr	r3, [r7, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	bf14      	ite	ne
 8018982:	2301      	movne	r3, #1
 8018984:	2300      	moveq	r3, #0
 8018986:	b2da      	uxtb	r2, r3
 8018988:	4b06      	ldr	r3, [pc, #24]	; (80189a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 801898a:	701a      	strb	r2, [r3, #0]
    }
 801898c:	bf00      	nop
 801898e:	3710      	adds	r7, #16
 8018990:	46bd      	mov	sp, r7
 8018992:	bd80      	pop	{r7, pc}
 8018994:	08022c50 	.word	0x08022c50
 8018998:	080244a4 	.word	0x080244a4
 801899c:	08022c04 	.word	0x08022c04
 80189a0:	2001a8aa 	.word	0x2001a8aa
 80189a4:	2001a8ab 	.word	0x2001a8ab

080189a8 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 80189a8:	b580      	push	{r7, lr}
 80189aa:	b082      	sub	sp, #8
 80189ac:	af00      	add	r7, sp, #0
 80189ae:	6078      	str	r0, [r7, #4]
 80189b0:	460b      	mov	r3, r1
 80189b2:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d004      	beq.n	80189c6 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80189c0:	887a      	ldrh	r2, [r7, #2]
 80189c2:	4610      	mov	r0, r2
 80189c4:	4798      	blx	r3
        }
    }
 80189c6:	bf00      	nop
 80189c8:	3708      	adds	r7, #8
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}

080189ce <_ZN8touchgfx3HAL10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA implementation.
     *        As default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 80189ce:	b580      	push	{r7, lr}
 80189d0:	b082      	sub	sp, #8
 80189d2:	af00      	add	r7, sp, #0
 80189d4:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	685a      	ldr	r2, [r3, #4]
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	685b      	ldr	r3, [r3, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	3318      	adds	r3, #24
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	4610      	mov	r0, r2
 80189e6:	4798      	blx	r3
 80189e8:	4603      	mov	r3, r0
    }
 80189ea:	4618      	mov	r0, r3
 80189ec:	3708      	adds	r7, #8
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
	...

080189f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 80189f4:	b480      	push	{r7}
 80189f6:	b083      	sub	sp, #12
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	d017      	beq.n	8018a3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8018a0c:	4b1a      	ldr	r3, [pc, #104]	; (8018a78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d12a      	bne.n	8018a6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8018a14:	4b19      	ldr	r3, [pc, #100]	; (8018a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018a16:	881a      	ldrh	r2, [r3, #0]
 8018a18:	4b19      	ldr	r3, [pc, #100]	; (8018a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018a1a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8018a1c:	4b19      	ldr	r3, [pc, #100]	; (8018a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018a1e:	881a      	ldrh	r2, [r3, #0]
 8018a20:	4b19      	ldr	r3, [pc, #100]	; (8018a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018a22:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8018a24:	4b16      	ldr	r3, [pc, #88]	; (8018a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018a26:	881a      	ldrh	r2, [r3, #0]
 8018a28:	4b16      	ldr	r3, [pc, #88]	; (8018a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018a2a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8018a2c:	4b16      	ldr	r3, [pc, #88]	; (8018a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018a2e:	881a      	ldrh	r2, [r3, #0]
 8018a30:	4b12      	ldr	r3, [pc, #72]	; (8018a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018a32:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8018a34:	4b10      	ldr	r3, [pc, #64]	; (8018a78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018a36:	2201      	movs	r2, #1
 8018a38:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8018a3a:	e016      	b.n	8018a6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8018a3c:	4b0e      	ldr	r3, [pc, #56]	; (8018a78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018a3e:	781b      	ldrb	r3, [r3, #0]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d012      	beq.n	8018a6a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8018a44:	4b0f      	ldr	r3, [pc, #60]	; (8018a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018a46:	881a      	ldrh	r2, [r3, #0]
 8018a48:	4b0d      	ldr	r3, [pc, #52]	; (8018a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018a4a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8018a4c:	4b0b      	ldr	r3, [pc, #44]	; (8018a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018a4e:	881a      	ldrh	r2, [r3, #0]
 8018a50:	4b0d      	ldr	r3, [pc, #52]	; (8018a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018a52:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8018a54:	4b0c      	ldr	r3, [pc, #48]	; (8018a88 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8018a56:	881a      	ldrh	r2, [r3, #0]
 8018a58:	4b0a      	ldr	r3, [pc, #40]	; (8018a84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8018a5a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8018a5c:	4b08      	ldr	r3, [pc, #32]	; (8018a80 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8018a5e:	881a      	ldrh	r2, [r3, #0]
 8018a60:	4b06      	ldr	r3, [pc, #24]	; (8018a7c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8018a62:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8018a64:	4b04      	ldr	r3, [pc, #16]	; (8018a78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8018a66:	2200      	movs	r2, #0
 8018a68:	701a      	strb	r2, [r3, #0]
    }
 8018a6a:	bf00      	nop
 8018a6c:	370c      	adds	r7, #12
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a74:	4770      	bx	lr
 8018a76:	bf00      	nop
 8018a78:	2001a8a4 	.word	0x2001a8a4
 8018a7c:	2001a8a0 	.word	0x2001a8a0
 8018a80:	2001a8a6 	.word	0x2001a8a6
 8018a84:	2001a8a2 	.word	0x2001a8a2
 8018a88:	2001a8a8 	.word	0x2001a8a8

08018a8c <_ZNK10STM32F4HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F4HAL::getTFTFrameBuffer() const
{
 8018a8c:	b480      	push	{r7}
 8018a8e:	b083      	sub	sp, #12
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8018a94:	4b03      	ldr	r3, [pc, #12]	; (8018aa4 <_ZNK10STM32F4HAL17getTFTFrameBufferEv+0x18>)
 8018a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8018a98:	4618      	mov	r0, r3
 8018a9a:	370c      	adds	r7, #12
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa2:	4770      	bx	lr
 8018aa4:	40016884 	.word	0x40016884

08018aa8 <_ZN10STM32F4HAL17setTFTFrameBufferEPt>:

void STM32F4HAL::setTFTFrameBuffer(uint16_t* adr)
{
 8018aa8:	b480      	push	{r7}
 8018aaa:	b083      	sub	sp, #12
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8018ab2:	4a06      	ldr	r2, [pc, #24]	; (8018acc <_ZN10STM32F4HAL17setTFTFrameBufferEPt+0x24>)
 8018ab4:	683b      	ldr	r3, [r7, #0]
 8018ab6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8018ab8:	4b05      	ldr	r3, [pc, #20]	; (8018ad0 <_ZN10STM32F4HAL17setTFTFrameBufferEPt+0x28>)
 8018aba:	2201      	movs	r2, #1
 8018abc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8018abe:	bf00      	nop
 8018ac0:	370c      	adds	r7, #12
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac8:	4770      	bx	lr
 8018aca:	bf00      	nop
 8018acc:	40016884 	.word	0x40016884
 8018ad0:	40016800 	.word	0x40016800

08018ad4 <_ZN10STM32F4HAL17getTFTCurrentLineEv>:

uint16_t STM32F4HAL::getTFTCurrentLine()
{
 8018ad4:	b480      	push	{r7}
 8018ad6:	b085      	sub	sp, #20
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8018adc:	4b0d      	ldr	r3, [pc, #52]	; (8018b14 <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x40>)
 8018ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ae0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8018ae2:	4b0c      	ldr	r3, [pc, #48]	; (8018b14 <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x40>)
 8018ae4:	68db      	ldr	r3, [r3, #12]
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	3301      	adds	r3, #1
 8018af0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8018af2:	89fa      	ldrh	r2, [r7, #14]
 8018af4:	89bb      	ldrh	r3, [r7, #12]
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d201      	bcs.n	8018afe <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8018afa:	2300      	movs	r3, #0
 8018afc:	e003      	b.n	8018b06 <_ZN10STM32F4HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8018afe:	89fa      	ldrh	r2, [r7, #14]
 8018b00:	89bb      	ldrh	r3, [r7, #12]
 8018b02:	1ad3      	subs	r3, r2, r3
 8018b04:	b29b      	uxth	r3, r3
    }
}
 8018b06:	4618      	mov	r0, r3
 8018b08:	3714      	adds	r7, #20
 8018b0a:	46bd      	mov	sp, r7
 8018b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b10:	4770      	bx	lr
 8018b12:	bf00      	nop
 8018b14:	40016800 	.word	0x40016800

08018b18 <_ZN10STM32F4HAL19configureInterruptsEv>:

void STM32F4HAL::configureInterrupts()
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b082      	sub	sp, #8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8018b20:	2109      	movs	r1, #9
 8018b22:	205a      	movs	r0, #90	; 0x5a
 8018b24:	f7ff fdde 	bl	80186e4 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8018b28:	2109      	movs	r1, #9
 8018b2a:	2058      	movs	r0, #88	; 0x58
 8018b2c:	f7ff fdda 	bl	80186e4 <__NVIC_SetPriority>
}
 8018b30:	bf00      	nop
 8018b32:	3708      	adds	r7, #8
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd80      	pop	{r7, pc}

08018b38 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F4HAL::enableLCDControllerInterrupt()
{
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b082      	sub	sp, #8
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8018b40:	4b12      	ldr	r3, [pc, #72]	; (8018b8c <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x54>)
 8018b42:	68db      	ldr	r3, [r3, #12]
 8018b44:	b29b      	uxth	r3, r3
 8018b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018b4a:	b29b      	uxth	r3, r3
 8018b4c:	3b01      	subs	r3, #1
 8018b4e:	b29a      	uxth	r2, r3
 8018b50:	4b0f      	ldr	r3, [pc, #60]	; (8018b90 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x58>)
 8018b52:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8018b54:	4b0d      	ldr	r3, [pc, #52]	; (8018b8c <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x54>)
 8018b56:	691b      	ldr	r3, [r3, #16]
 8018b58:	b29b      	uxth	r3, r3
 8018b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018b5e:	b29b      	uxth	r3, r3
 8018b60:	3b01      	subs	r3, #1
 8018b62:	b29a      	uxth	r2, r3
 8018b64:	4b0b      	ldr	r3, [pc, #44]	; (8018b94 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x5c>)
 8018b66:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8018b68:	4b09      	ldr	r3, [pc, #36]	; (8018b90 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x58>)
 8018b6a:	881b      	ldrh	r3, [r3, #0]
 8018b6c:	4619      	mov	r1, r3
 8018b6e:	480a      	ldr	r0, [pc, #40]	; (8018b98 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x60>)
 8018b70:	f7ed f810 	bl	8005b94 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8018b74:	4b08      	ldr	r3, [pc, #32]	; (8018b98 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x60>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018b7a:	4b07      	ldr	r3, [pc, #28]	; (8018b98 <_ZN10STM32F4HAL28enableLCDControllerInterruptEv+0x60>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	f042 0203 	orr.w	r2, r2, #3
 8018b82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8018b84:	bf00      	nop
 8018b86:	3708      	adds	r7, #8
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	bd80      	pop	{r7, pc}
 8018b8c:	40016800 	.word	0x40016800
 8018b90:	2001a85a 	.word	0x2001a85a
 8018b94:	2001a85c 	.word	0x2001a85c
 8018b98:	2001a728 	.word	0x2001a728

08018b9c <_ZN10STM32F4HAL17disableInterruptsEv>:

void STM32F4HAL::disableInterrupts()
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b082      	sub	sp, #8
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8018ba4:	2058      	movs	r0, #88	; 0x58
 8018ba6:	f7ff fd79 	bl	801869c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8018baa:	205a      	movs	r0, #90	; 0x5a
 8018bac:	f7ff fd76 	bl	801869c <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 8018bb0:	2059      	movs	r0, #89	; 0x59
 8018bb2:	f7ff fd73 	bl	801869c <__NVIC_DisableIRQ>
}
 8018bb6:	bf00      	nop
 8018bb8:	3708      	adds	r7, #8
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}

08018bbe <_ZN10STM32F4HAL16enableInterruptsEv>:

void STM32F4HAL::enableInterrupts()
{
 8018bbe:	b580      	push	{r7, lr}
 8018bc0:	b082      	sub	sp, #8
 8018bc2:	af00      	add	r7, sp, #0
 8018bc4:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8018bc6:	2058      	movs	r0, #88	; 0x58
 8018bc8:	f7ff fd48 	bl	801865c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 8018bcc:	205a      	movs	r0, #90	; 0x5a
 8018bce:	f7ff fd45 	bl	801865c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 8018bd2:	2059      	movs	r0, #89	; 0x59
 8018bd4:	f7ff fd42 	bl	801865c <__NVIC_EnableIRQ>
}
 8018bd8:	bf00      	nop
 8018bda:	3708      	adds	r7, #8
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}

08018be0 <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b082      	sub	sp, #8
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 8018be8:	4b1a      	ldr	r3, [pc, #104]	; (8018c54 <HAL_LTDC_LineEventCallback+0x74>)
 8018bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018bec:	4a1a      	ldr	r2, [pc, #104]	; (8018c58 <HAL_LTDC_LineEventCallback+0x78>)
 8018bee:	8812      	ldrh	r2, [r2, #0]
 8018bf0:	4293      	cmp	r3, r2
 8018bf2:	bf0c      	ite	eq
 8018bf4:	2301      	moveq	r3, #1
 8018bf6:	2300      	movne	r3, #0
 8018bf8:	b2db      	uxtb	r3, r3
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d017      	beq.n	8018c2e <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8018bfe:	4b17      	ldr	r3, [pc, #92]	; (8018c5c <HAL_LTDC_LineEventCallback+0x7c>)
 8018c00:	881b      	ldrh	r3, [r3, #0]
 8018c02:	4619      	mov	r1, r3
 8018c04:	6878      	ldr	r0, [r7, #4]
 8018c06:	f7ec ffc5 	bl	8005b94 <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 8018c0a:	f7f0 fe11 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7ff fdc8 	bl	80187a6 <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 8018c16:	f7f8 f83d 	bl	8010c94 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 8018c1a:	f7f0 fe09 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	4618      	mov	r0, r3
 8018c22:	f000 ff77 	bl	8019b14 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 8018c26:	2000      	movs	r0, #0
 8018c28:	f000 f936 	bl	8018e98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 8018c2c:	e00e      	b.n	8018c4c <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8018c2e:	4b0a      	ldr	r3, [pc, #40]	; (8018c58 <HAL_LTDC_LineEventCallback+0x78>)
 8018c30:	881b      	ldrh	r3, [r3, #0]
 8018c32:	4619      	mov	r1, r3
 8018c34:	6878      	ldr	r0, [r7, #4]
 8018c36:	f7ec ffad 	bl	8005b94 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	f000 f937 	bl	8018eae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 8018c40:	f7f0 fdf6 	bl	8009830 <_ZN8touchgfx3HAL11getInstanceEv>
 8018c44:	4603      	mov	r3, r0
 8018c46:	4618      	mov	r0, r3
 8018c48:	f7ff fd8e 	bl	8018768 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 8018c4c:	bf00      	nop
 8018c4e:	3708      	adds	r7, #8
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	40016800 	.word	0x40016800
 8018c58:	2001a85a 	.word	0x2001a85a
 8018c5c:	2001a85c 	.word	0x2001a85c

08018c60 <_ZN8touchgfx22STM32F4Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F4Instrumentation::init()
{
 8018c60:	b580      	push	{r7, lr}
 8018c62:	b092      	sub	sp, #72	; 0x48
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t pFLatency;

    __TIM1_CLK_ENABLE();
 8018c6c:	2300      	movs	r3, #0
 8018c6e:	60fb      	str	r3, [r7, #12]
 8018c70:	4b42      	ldr	r3, [pc, #264]	; (8018d7c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 8018c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c74:	4a41      	ldr	r2, [pc, #260]	; (8018d7c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 8018c76:	f043 0301 	orr.w	r3, r3, #1
 8018c7a:	6453      	str	r3, [r2, #68]	; 0x44
 8018c7c:	4b3f      	ldr	r3, [pc, #252]	; (8018d7c <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x11c>)
 8018c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c80:	f003 0301 	and.w	r3, r3, #1
 8018c84:	60fb      	str	r3, [r7, #12]
 8018c86:	68fb      	ldr	r3, [r7, #12]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8018c88:	f107 0318 	add.w	r3, r7, #24
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	601a      	str	r2, [r3, #0]
 8018c90:	605a      	str	r2, [r3, #4]
 8018c92:	609a      	str	r2, [r3, #8]
 8018c94:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8018c96:	f107 0310 	add.w	r3, r7, #16
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	601a      	str	r2, [r3, #0]
 8018c9e:	605a      	str	r2, [r3, #4]
  htim1.Instance = TIM1;
 8018ca0:	4b37      	ldr	r3, [pc, #220]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018ca2:	4a38      	ldr	r2, [pc, #224]	; (8018d84 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x124>)
 8018ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8018ca6:	4b36      	ldr	r3, [pc, #216]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018ca8:	2200      	movs	r2, #0
 8018caa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018cac:	4b34      	ldr	r3, [pc, #208]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018cae:	2200      	movs	r2, #0
 8018cb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8018cb2:	4b33      	ldr	r3, [pc, #204]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018cb8:	4b31      	ldr	r3, [pc, #196]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018cba:	2200      	movs	r2, #0
 8018cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8018cbe:	4b30      	ldr	r3, [pc, #192]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018cc0:	2200      	movs	r2, #0
 8018cc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8018cc4:	4b2e      	ldr	r3, [pc, #184]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018cc6:	2200      	movs	r2, #0
 8018cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8018cca:	482d      	ldr	r0, [pc, #180]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018ccc:	f7ee ff41 	bl	8007b52 <HAL_TIM_Base_Init>
 8018cd0:	4603      	mov	r3, r0
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	bf14      	ite	ne
 8018cd6:	2301      	movne	r3, #1
 8018cd8:	2300      	moveq	r3, #0
 8018cda:	b2db      	uxtb	r3, r3
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d001      	beq.n	8018ce4 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x84>
  {
    Error_Handler( );
 8018ce0:	f7e8 ff86 	bl	8001bf0 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8018ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018ce8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8018cea:	f107 0318 	add.w	r3, r7, #24
 8018cee:	4619      	mov	r1, r3
 8018cf0:	4823      	ldr	r0, [pc, #140]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018cf2:	f7ef f9d9 	bl	80080a8 <HAL_TIM_ConfigClockSource>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	bf14      	ite	ne
 8018cfc:	2301      	movne	r3, #1
 8018cfe:	2300      	moveq	r3, #0
 8018d00:	b2db      	uxtb	r3, r3
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d001      	beq.n	8018d0a <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xaa>
  {
    Error_Handler( );
 8018d06:	f7e8 ff73 	bl	8001bf0 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8018d0e:	2300      	movs	r3, #0
 8018d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8018d12:	f107 0310 	add.w	r3, r7, #16
 8018d16:	4619      	mov	r1, r3
 8018d18:	4819      	ldr	r0, [pc, #100]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018d1a:	f7ef fdb5 	bl	8008888 <HAL_TIMEx_MasterConfigSynchronization>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	bf14      	ite	ne
 8018d24:	2301      	movne	r3, #1
 8018d26:	2300      	moveq	r3, #0
 8018d28:	b2db      	uxtb	r3, r3
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d001      	beq.n	8018d32 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xd2>
  {
    Error_Handler( );
 8018d2e:	f7e8 ff5f 	bl	8001bf0 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8018d32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018d3a:	4611      	mov	r1, r2
 8018d3c:	4618      	mov	r0, r3
 8018d3e:	f7ed fdab 	bl	8006898 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8018d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018d44:	643b      	str	r3, [r7, #64]	; 0x40

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8018d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d103      	bne.n	8018d54 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xf4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 8018d4c:	f7ed fd7c 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8018d50:	6478      	str	r0, [r7, #68]	; 0x44
 8018d52:	e004      	b.n	8018d5e <_ZN8touchgfx22STM32F4Instrumentation4initEv+0xfe>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8018d54:	f7ed fd78 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	005b      	lsls	r3, r3, #1
 8018d5c:	647b      	str	r3, [r7, #68]	; 0x44

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8018d5e:	f7ed fd67 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8018d62:	4602      	mov	r2, r0
 8018d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018d66:	fbb2 f2f3 	udiv	r2, r2, r3
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 8018d6e:	4804      	ldr	r0, [pc, #16]	; (8018d80 <_ZN8touchgfx22STM32F4Instrumentation4initEv+0x120>)
 8018d70:	f7ee ff1a 	bl	8007ba8 <HAL_TIM_Base_Start>
}
 8018d74:	bf00      	nop
 8018d76:	3748      	adds	r7, #72	; 0x48
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	bd80      	pop	{r7, pc}
 8018d7c:	40023800 	.word	0x40023800
 8018d80:	2001a860 	.word	0x2001a860
 8018d84:	40010000 	.word	0x40010000

08018d88 <_ZN8touchgfx22STM32F4Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F4Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8018d88:	b480      	push	{r7}
 8018d8a:	b085      	sub	sp, #20
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	60f8      	str	r0, [r7, #12]
 8018d90:	60b9      	str	r1, [r7, #8]
 8018d92:	607a      	str	r2, [r7, #4]
 8018d94:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8018d96:	687a      	ldr	r2, [r7, #4]
 8018d98:	68bb      	ldr	r3, [r7, #8]
 8018d9a:	1ad2      	subs	r2, r2, r3
 8018d9c:	683b      	ldr	r3, [r7, #0]
 8018d9e:	085b      	lsrs	r3, r3, #1
 8018da0:	441a      	add	r2, r3
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018da8:	4618      	mov	r0, r3
 8018daa:	3714      	adds	r7, #20
 8018dac:	46bd      	mov	sp, r7
 8018dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db2:	4770      	bx	lr

08018db4 <_ZN8touchgfx22STM32F4Instrumentation12getCPUCyclesEv>:

unsigned int STM32F4Instrumentation::getCPUCycles()
{
 8018db4:	b480      	push	{r7}
 8018db6:	b083      	sub	sp, #12
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 8018dbc:	4b06      	ldr	r3, [pc, #24]	; (8018dd8 <_ZN8touchgfx22STM32F4Instrumentation12getCPUCyclesEv+0x24>)
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc2:	687a      	ldr	r2, [r7, #4]
 8018dc4:	68d2      	ldr	r2, [r2, #12]
 8018dc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	370c      	adds	r7, #12
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd4:	4770      	bx	lr
 8018dd6:	bf00      	nop
 8018dd8:	2001a860 	.word	0x2001a860

08018ddc <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb>:

void STM32F4Instrumentation::setMCUActive(bool active)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b082      	sub	sp, #8
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
 8018de4:	460b      	mov	r3, r1
 8018de6:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8018de8:	78fb      	ldrb	r3, [r7, #3]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d00f      	beq.n	8018e0e <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	3310      	adds	r3, #16
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	6878      	ldr	r0, [r7, #4]
 8018df8:	4798      	blx	r3
 8018dfa:	4602      	mov	r2, r0
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	689b      	ldr	r3, [r3, #8]
 8018e00:	1ad2      	subs	r2, r2, r3
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	685b      	ldr	r3, [r3, #4]
 8018e06:	441a      	add	r2, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8018e0c:	e008      	b.n	8018e20 <_ZN8touchgfx22STM32F4Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	3310      	adds	r3, #16
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	6878      	ldr	r0, [r7, #4]
 8018e18:	4798      	blx	r3
 8018e1a:	4602      	mov	r2, r0
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	609a      	str	r2, [r3, #8]
}
 8018e20:	bf00      	nop
 8018e22:	3708      	adds	r7, #8
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}

08018e28 <_ZN8touchgfx22STM32F4TouchController4initEv>:
}

using namespace touchgfx;

void STM32F4TouchController::init()
{
 8018e28:	b590      	push	{r4, r7, lr}
 8018e2a:	b083      	sub	sp, #12
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
   /* USER CODE BEGIN F4TouchController_init */

    /* Add code for touch controller Initialization*/
    BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8018e30:	f7fe f908 	bl	8017044 <LCD_GetXSize>
 8018e34:	4603      	mov	r3, r0
 8018e36:	b29c      	uxth	r4, r3
 8018e38:	f7fe f90c 	bl	8017054 <LCD_GetYSize>
 8018e3c:	4603      	mov	r3, r0
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	4619      	mov	r1, r3
 8018e42:	4620      	mov	r0, r4
 8018e44:	f7ea fa74 	bl	8003330 <BSP_TS_Init>

  /* USER CODE END  F4TouchController_init  */
}
 8018e48:	bf00      	nop
 8018e4a:	370c      	adds	r7, #12
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	bd90      	pop	{r4, r7, pc}

08018e50 <_ZN8touchgfx22STM32F4TouchController11sampleTouchERlS1_>:

bool STM32F4TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b086      	sub	sp, #24
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	60f8      	str	r0, [r7, #12]
 8018e58:	60b9      	str	r1, [r7, #8]
 8018e5a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN  F4TouchController_sampleTouch  */
    
    TS_StateTypeDef state;
    BSP_TS_GetState(&state);
 8018e5c:	f107 0310 	add.w	r3, r7, #16
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7ea fa9f 	bl	80033a4 <BSP_TS_GetState>
    if (state.TouchDetected)
 8018e66:	8a3b      	ldrh	r3, [r7, #16]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d009      	beq.n	8018e80 <_ZN8touchgfx22STM32F4TouchController11sampleTouchERlS1_+0x30>
    {
        x = state.X;
 8018e6c:	8a7b      	ldrh	r3, [r7, #18]
 8018e6e:	461a      	mov	r2, r3
 8018e70:	68bb      	ldr	r3, [r7, #8]
 8018e72:	601a      	str	r2, [r3, #0]
        y = state.Y;
 8018e74:	8abb      	ldrh	r3, [r7, #20]
 8018e76:	461a      	mov	r2, r3
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	601a      	str	r2, [r3, #0]
        return true;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	e000      	b.n	8018e82 <_ZN8touchgfx22STM32F4TouchController11sampleTouchERlS1_+0x32>
    }
    return false;
 8018e80:	2300      	movs	r3, #0

 /* USER CODE END F4TouchController_sampleTouch */    
}
 8018e82:	4618      	mov	r0, r3
 8018e84:	3718      	adds	r7, #24
 8018e86:	46bd      	mov	sp, r7
 8018e88:	bd80      	pop	{r7, pc}

08018e8a <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8018e8a:	b480      	push	{r7}
 8018e8c:	af00      	add	r7, sp, #0
  
    /* USER CODE BEGIN GPIO::init */

    /* USER CODE END GPIO::init */
}
 8018e8e:	bf00      	nop
 8018e90:	46bd      	mov	sp, r7
 8018e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e96:	4770      	bx	lr

08018e98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO::GPIO_ID id)
{
 8018e98:	b480      	push	{r7}
 8018e9a:	b083      	sub	sp, #12
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	4603      	mov	r3, r0
 8018ea0:	71fb      	strb	r3, [r7, #7]
  
    /* USER CODE BEGIN GPIO::set */

    /* USER CODE END GPIO::set */
}
 8018ea2:	bf00      	nop
 8018ea4:	370c      	adds	r7, #12
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eac:	4770      	bx	lr

08018eae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO::GPIO_ID id)
{
 8018eae:	b480      	push	{r7}
 8018eb0:	b083      	sub	sp, #12
 8018eb2:	af00      	add	r7, sp, #0
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	71fb      	strb	r3, [r7, #7]

    /* USER CODE BEGIN GPIO::clear */
    
    /* USER CODE END GPIO::clear */
}
 8018eb8:	bf00      	nop
 8018eba:	370c      	adds	r7, #12
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec2:	4770      	bx	lr

08018ec4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO::GPIO_ID id)
{
 8018ec4:	b480      	push	{r7}
 8018ec6:	b083      	sub	sp, #12
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	4603      	mov	r3, r0
 8018ecc:	71fb      	strb	r3, [r7, #7]
   
    /* USER CODE BEGIN GPIO::toggle */

    /* USER CODE END GPIO::toggle */
}
 8018ece:	bf00      	nop
 8018ed0:	370c      	adds	r7, #12
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed8:	4770      	bx	lr

08018eda <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018eda:	8880      	ldrh	r0, [r0, #4]
 8018edc:	4770      	bx	lr

08018ede <_ZN8touchgfx17AbstractPartition5clearEv>:
 8018ede:	2300      	movs	r3, #0
 8018ee0:	8083      	strh	r3, [r0, #4]
 8018ee2:	4770      	bx	lr

08018ee4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ee6:	6803      	ldr	r3, [r0, #0]
 8018ee8:	4604      	mov	r4, r0
 8018eea:	460e      	mov	r6, r1
 8018eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eee:	2100      	movs	r1, #0
 8018ef0:	4798      	blx	r3
 8018ef2:	6823      	ldr	r3, [r4, #0]
 8018ef4:	4605      	mov	r5, r0
 8018ef6:	6a1b      	ldr	r3, [r3, #32]
 8018ef8:	4620      	mov	r0, r4
 8018efa:	4798      	blx	r3
 8018efc:	88a3      	ldrh	r3, [r4, #4]
 8018efe:	1b75      	subs	r5, r6, r5
 8018f00:	b2ad      	uxth	r5, r5
 8018f02:	fbb5 f0f0 	udiv	r0, r5, r0
 8018f06:	4298      	cmp	r0, r3
 8018f08:	b285      	uxth	r5, r0
 8018f0a:	db05      	blt.n	8018f18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 8018f0c:	4b0e      	ldr	r3, [pc, #56]	; (8018f48 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 8018f0e:	4a0f      	ldr	r2, [pc, #60]	; (8018f4c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8018f10:	211e      	movs	r1, #30
 8018f12:	480f      	ldr	r0, [pc, #60]	; (8018f50 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 8018f14:	f007 fd72 	bl	80209fc <__assert_func>
 8018f18:	6823      	ldr	r3, [r4, #0]
 8018f1a:	2100      	movs	r1, #0
 8018f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f1e:	4620      	mov	r0, r4
 8018f20:	4798      	blx	r3
 8018f22:	6823      	ldr	r3, [r4, #0]
 8018f24:	4607      	mov	r7, r0
 8018f26:	6a1b      	ldr	r3, [r3, #32]
 8018f28:	4620      	mov	r0, r4
 8018f2a:	4798      	blx	r3
 8018f2c:	1bf6      	subs	r6, r6, r7
 8018f2e:	b2b6      	uxth	r6, r6
 8018f30:	fbb6 f3f0 	udiv	r3, r6, r0
 8018f34:	fb03 6610 	mls	r6, r3, r0, r6
 8018f38:	b11e      	cbz	r6, 8018f42 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 8018f3a:	4b06      	ldr	r3, [pc, #24]	; (8018f54 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 8018f3c:	4a03      	ldr	r2, [pc, #12]	; (8018f4c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 8018f3e:	211f      	movs	r1, #31
 8018f40:	e7e7      	b.n	8018f12 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 8018f42:	4628      	mov	r0, r5
 8018f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f46:	bf00      	nop
 8018f48:	08024588 	.word	0x08024588
 8018f4c:	080246f6 	.word	0x080246f6
 8018f50:	0802459d 	.word	0x0802459d
 8018f54:	080245cb 	.word	0x080245cb

08018f58 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8018f58:	b538      	push	{r3, r4, r5, lr}
 8018f5a:	6803      	ldr	r3, [r0, #0]
 8018f5c:	6a1b      	ldr	r3, [r3, #32]
 8018f5e:	460d      	mov	r5, r1
 8018f60:	4604      	mov	r4, r0
 8018f62:	4798      	blx	r3
 8018f64:	4285      	cmp	r5, r0
 8018f66:	d905      	bls.n	8018f74 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 8018f68:	4b0c      	ldr	r3, [pc, #48]	; (8018f9c <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 8018f6a:	4a0d      	ldr	r2, [pc, #52]	; (8018fa0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018f6c:	212f      	movs	r1, #47	; 0x2f
 8018f6e:	480d      	ldr	r0, [pc, #52]	; (8018fa4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 8018f70:	f007 fd44 	bl	80209fc <__assert_func>
 8018f74:	6823      	ldr	r3, [r4, #0]
 8018f76:	88a5      	ldrh	r5, [r4, #4]
 8018f78:	69db      	ldr	r3, [r3, #28]
 8018f7a:	4620      	mov	r0, r4
 8018f7c:	4798      	blx	r3
 8018f7e:	4285      	cmp	r5, r0
 8018f80:	db03      	blt.n	8018f8a <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 8018f82:	4b09      	ldr	r3, [pc, #36]	; (8018fa8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 8018f84:	4a06      	ldr	r2, [pc, #24]	; (8018fa0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 8018f86:	2130      	movs	r1, #48	; 0x30
 8018f88:	e7f1      	b.n	8018f6e <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 8018f8a:	6823      	ldr	r3, [r4, #0]
 8018f8c:	88a1      	ldrh	r1, [r4, #4]
 8018f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f90:	4620      	mov	r0, r4
 8018f92:	4798      	blx	r3
 8018f94:	88a3      	ldrh	r3, [r4, #4]
 8018f96:	3301      	adds	r3, #1
 8018f98:	80a3      	strh	r3, [r4, #4]
 8018f9a:	bd38      	pop	{r3, r4, r5, pc}
 8018f9c:	08024645 	.word	0x08024645
 8018fa0:	08024739 	.word	0x08024739
 8018fa4:	0802459d 	.word	0x0802459d
 8018fa8:	0802465c 	.word	0x0802465c

08018fac <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8018fac:	b570      	push	{r4, r5, r6, lr}
 8018fae:	6803      	ldr	r3, [r0, #0]
 8018fb0:	6a1b      	ldr	r3, [r3, #32]
 8018fb2:	4616      	mov	r6, r2
 8018fb4:	4604      	mov	r4, r0
 8018fb6:	460d      	mov	r5, r1
 8018fb8:	4798      	blx	r3
 8018fba:	4286      	cmp	r6, r0
 8018fbc:	d905      	bls.n	8018fca <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 8018fbe:	4b06      	ldr	r3, [pc, #24]	; (8018fd8 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 8018fc0:	4a06      	ldr	r2, [pc, #24]	; (8018fdc <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 8018fc2:	4807      	ldr	r0, [pc, #28]	; (8018fe0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 8018fc4:	2139      	movs	r1, #57	; 0x39
 8018fc6:	f007 fd19 	bl	80209fc <__assert_func>
 8018fca:	6823      	ldr	r3, [r4, #0]
 8018fcc:	4629      	mov	r1, r5
 8018fce:	4620      	mov	r0, r4
 8018fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fd6:	4718      	bx	r3
 8018fd8:	08024645 	.word	0x08024645
 8018fdc:	080246ac 	.word	0x080246ac
 8018fe0:	0802459d 	.word	0x0802459d

08018fe4 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8018fe4:	4770      	bx	lr
	...

08018fe8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8018fe8:	4a02      	ldr	r2, [pc, #8]	; (8018ff4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8018fea:	6002      	str	r2, [r0, #0]
 8018fec:	2200      	movs	r2, #0
 8018fee:	8082      	strh	r2, [r0, #4]
 8018ff0:	4770      	bx	lr
 8018ff2:	bf00      	nop
 8018ff4:	08024680 	.word	0x08024680

08018ff8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 8018ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ffc:	4770      	bx	lr

08018ffe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8018ffe:	b513      	push	{r0, r1, r4, lr}
 8019000:	6803      	ldr	r3, [r0, #0]
 8019002:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8019006:	2300      	movs	r3, #0
 8019008:	f8ad 3000 	strh.w	r3, [sp]
 801900c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019010:	f8ad 3004 	strh.w	r3, [sp, #4]
 8019014:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019018:	466b      	mov	r3, sp
 801901a:	47a0      	blx	r4
 801901c:	b002      	add	sp, #8
 801901e:	bd10      	pop	{r4, pc}

08019020 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019020:	2301      	movs	r3, #1
 8019022:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019026:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801902a:	4770      	bx	lr

0801902c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801902c:	2301      	movs	r3, #1
 801902e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019032:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019036:	4770      	bx	lr

08019038 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019038:	6843      	ldr	r3, [r0, #4]
 801903a:	2201      	movs	r2, #1
 801903c:	725a      	strb	r2, [r3, #9]
 801903e:	6840      	ldr	r0, [r0, #4]
 8019040:	6803      	ldr	r3, [r0, #0]
 8019042:	691b      	ldr	r3, [r3, #16]
 8019044:	4718      	bx	r3

08019046 <_ZN8touchgfx3HAL8flushDMAEv>:
 8019046:	6840      	ldr	r0, [r0, #4]
 8019048:	6803      	ldr	r3, [r0, #0]
 801904a:	689b      	ldr	r3, [r3, #8]
 801904c:	4718      	bx	r3

0801904e <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801904e:	4770      	bx	lr

08019050 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 8019050:	4608      	mov	r0, r1
 8019052:	4770      	bx	lr

08019054 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 8019054:	4770      	bx	lr
	...

08019058 <_ZN8touchgfx3HAL10beginFrameEv>:
 8019058:	4b04      	ldr	r3, [pc, #16]	; (801906c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801905a:	781b      	ldrb	r3, [r3, #0]
 801905c:	b123      	cbz	r3, 8019068 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801905e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019062:	f080 0001 	eor.w	r0, r0, #1
 8019066:	4770      	bx	lr
 8019068:	2001      	movs	r0, #1
 801906a:	4770      	bx	lr
 801906c:	2001a8aa 	.word	0x2001a8aa

08019070 <_ZN8touchgfx3HAL8endFrameEv>:
 8019070:	b510      	push	{r4, lr}
 8019072:	4604      	mov	r4, r0
 8019074:	6840      	ldr	r0, [r0, #4]
 8019076:	6803      	ldr	r3, [r0, #0]
 8019078:	689b      	ldr	r3, [r3, #8]
 801907a:	4798      	blx	r3
 801907c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8019080:	b113      	cbz	r3, 8019088 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019082:	2301      	movs	r3, #1
 8019084:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019088:	bd10      	pop	{r4, pc}

0801908a <_ZN8touchgfx3HAL9taskEntryEv>:
 801908a:	b508      	push	{r3, lr}
 801908c:	6803      	ldr	r3, [r0, #0]
 801908e:	4604      	mov	r4, r0
 8019090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019092:	4798      	blx	r3
 8019094:	6823      	ldr	r3, [r4, #0]
 8019096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019098:	4620      	mov	r0, r4
 801909a:	4798      	blx	r3
 801909c:	f7f7 fe20 	bl	8010ce0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80190a0:	6823      	ldr	r3, [r4, #0]
 80190a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80190a4:	e7f8      	b.n	8019098 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

080190a8 <_ZN8touchgfx3HAL4tickEv>:
 80190a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80190aa:	6803      	ldr	r3, [r0, #0]
 80190ac:	4d5d      	ldr	r5, [pc, #372]	; (8019224 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80190ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80190b2:	4604      	mov	r4, r0
 80190b4:	4798      	blx	r3
 80190b6:	2800      	cmp	r0, #0
 80190b8:	f000 8092 	beq.w	80191e0 <_ZN8touchgfx3HAL4tickEv+0x138>
 80190bc:	2001      	movs	r0, #1
 80190be:	f7ff feeb 	bl	8018e98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80190c2:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80190c6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80190ca:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80190ce:	2600      	movs	r6, #0
 80190d0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80190d4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80190d8:	b133      	cbz	r3, 80190e8 <_ZN8touchgfx3HAL4tickEv+0x40>
 80190da:	6823      	ldr	r3, [r4, #0]
 80190dc:	4620      	mov	r0, r4
 80190de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80190e2:	4798      	blx	r3
 80190e4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80190e8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80190ec:	6862      	ldr	r2, [r4, #4]
 80190ee:	f083 0301 	eor.w	r3, r3, #1
 80190f2:	7253      	strb	r3, [r2, #9]
 80190f4:	2601      	movs	r6, #1
 80190f6:	702e      	strb	r6, [r5, #0]
 80190f8:	f001 fcfc 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 80190fc:	6803      	ldr	r3, [r0, #0]
 80190fe:	4631      	mov	r1, r6
 8019100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019102:	4798      	blx	r3
 8019104:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019108:	b90b      	cbnz	r3, 801910e <_ZN8touchgfx3HAL4tickEv+0x66>
 801910a:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 801910e:	f001 fcf1 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 8019112:	6803      	ldr	r3, [r0, #0]
 8019114:	695b      	ldr	r3, [r3, #20]
 8019116:	4798      	blx	r3
 8019118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801911a:	6803      	ldr	r3, [r0, #0]
 801911c:	691b      	ldr	r3, [r3, #16]
 801911e:	4798      	blx	r3
 8019120:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019124:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019128:	3b01      	subs	r3, #1
 801912a:	b2db      	uxtb	r3, r3
 801912c:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019130:	b10a      	cbz	r2, 8019136 <_ZN8touchgfx3HAL4tickEv+0x8e>
 8019132:	2b00      	cmp	r3, #0
 8019134:	d1eb      	bne.n	801910e <_ZN8touchgfx3HAL4tickEv+0x66>
 8019136:	4a3c      	ldr	r2, [pc, #240]	; (8019228 <_ZN8touchgfx3HAL4tickEv+0x180>)
 8019138:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801913c:	7813      	ldrb	r3, [r2, #0]
 801913e:	3301      	adds	r3, #1
 8019140:	b25b      	sxtb	r3, r3
 8019142:	4299      	cmp	r1, r3
 8019144:	7013      	strb	r3, [r2, #0]
 8019146:	dc10      	bgt.n	801916a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019148:	68e0      	ldr	r0, [r4, #12]
 801914a:	2300      	movs	r3, #0
 801914c:	7013      	strb	r3, [r2, #0]
 801914e:	6803      	ldr	r3, [r0, #0]
 8019150:	aa03      	add	r2, sp, #12
 8019152:	68db      	ldr	r3, [r3, #12]
 8019154:	a902      	add	r1, sp, #8
 8019156:	4798      	blx	r3
 8019158:	6823      	ldr	r3, [r4, #0]
 801915a:	2800      	cmp	r0, #0
 801915c:	d04c      	beq.n	80191f8 <_ZN8touchgfx3HAL4tickEv+0x150>
 801915e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8019162:	9a03      	ldr	r2, [sp, #12]
 8019164:	9902      	ldr	r1, [sp, #8]
 8019166:	4620      	mov	r0, r4
 8019168:	4798      	blx	r3
 801916a:	6960      	ldr	r0, [r4, #20]
 801916c:	2300      	movs	r3, #0
 801916e:	f88d 3007 	strb.w	r3, [sp, #7]
 8019172:	b130      	cbz	r0, 8019182 <_ZN8touchgfx3HAL4tickEv+0xda>
 8019174:	6803      	ldr	r3, [r0, #0]
 8019176:	f10d 0107 	add.w	r1, sp, #7
 801917a:	68db      	ldr	r3, [r3, #12]
 801917c:	4798      	blx	r3
 801917e:	2800      	cmp	r0, #0
 8019180:	d149      	bne.n	8019216 <_ZN8touchgfx3HAL4tickEv+0x16e>
 8019182:	f104 001c 	add.w	r0, r4, #28
 8019186:	f007 fb6f 	bl	8020868 <_ZN8touchgfx8Gestures4tickEv>
 801918a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801918e:	b30b      	cbz	r3, 80191d4 <_ZN8touchgfx3HAL4tickEv+0x12c>
 8019190:	6920      	ldr	r0, [r4, #16]
 8019192:	6803      	ldr	r3, [r0, #0]
 8019194:	691b      	ldr	r3, [r3, #16]
 8019196:	4798      	blx	r3
 8019198:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801919a:	4606      	mov	r6, r0
 801919c:	b903      	cbnz	r3, 80191a0 <_ZN8touchgfx3HAL4tickEv+0xf8>
 801919e:	6720      	str	r0, [r4, #112]	; 0x70
 80191a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80191a2:	4a22      	ldr	r2, [pc, #136]	; (801922c <_ZN8touchgfx3HAL4tickEv+0x184>)
 80191a4:	1af3      	subs	r3, r6, r3
 80191a6:	4293      	cmp	r3, r2
 80191a8:	d914      	bls.n	80191d4 <_ZN8touchgfx3HAL4tickEv+0x12c>
 80191aa:	6920      	ldr	r0, [r4, #16]
 80191ac:	6803      	ldr	r3, [r0, #0]
 80191ae:	699b      	ldr	r3, [r3, #24]
 80191b0:	4798      	blx	r3
 80191b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80191b4:	2264      	movs	r2, #100	; 0x64
 80191b6:	1af3      	subs	r3, r6, r3
 80191b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80191bc:	fbb0 f0f3 	udiv	r0, r0, r3
 80191c0:	2800      	cmp	r0, #0
 80191c2:	dc1e      	bgt.n	8019202 <_ZN8touchgfx3HAL4tickEv+0x15a>
 80191c4:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80191c8:	6920      	ldr	r0, [r4, #16]
 80191ca:	6803      	ldr	r3, [r0, #0]
 80191cc:	2100      	movs	r1, #0
 80191ce:	69db      	ldr	r3, [r3, #28]
 80191d0:	4798      	blx	r3
 80191d2:	6726      	str	r6, [r4, #112]	; 0x70
 80191d4:	f001 fc8e 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 80191d8:	6803      	ldr	r3, [r0, #0]
 80191da:	2100      	movs	r1, #0
 80191dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191de:	4798      	blx	r3
 80191e0:	6823      	ldr	r3, [r4, #0]
 80191e2:	4620      	mov	r0, r4
 80191e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80191e8:	4798      	blx	r3
 80191ea:	2001      	movs	r0, #1
 80191ec:	f7ff fe5f 	bl	8018eae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80191f0:	2300      	movs	r3, #0
 80191f2:	702b      	strb	r3, [r5, #0]
 80191f4:	b004      	add	sp, #16
 80191f6:	bd70      	pop	{r4, r5, r6, pc}
 80191f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80191fc:	4620      	mov	r0, r4
 80191fe:	4798      	blx	r3
 8019200:	e7b3      	b.n	801916a <_ZN8touchgfx3HAL4tickEv+0xc2>
 8019202:	2863      	cmp	r0, #99	; 0x63
 8019204:	bfcb      	itete	gt
 8019206:	2300      	movgt	r3, #0
 8019208:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801920c:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8019210:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8019214:	e7d8      	b.n	80191c8 <_ZN8touchgfx3HAL4tickEv+0x120>
 8019216:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019218:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801921c:	6803      	ldr	r3, [r0, #0]
 801921e:	68db      	ldr	r3, [r3, #12]
 8019220:	4798      	blx	r3
 8019222:	e7ae      	b.n	8019182 <_ZN8touchgfx3HAL4tickEv+0xda>
 8019224:	2001a8b0 	.word	0x2001a8b0
 8019228:	2001a8b1 	.word	0x2001a8b1
 801922c:	05f5e100 	.word	0x05f5e100

08019230 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019230:	f7f7 bcf6 	b.w	8010c20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019234 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019234:	6581      	str	r1, [r0, #88]	; 0x58
 8019236:	301c      	adds	r0, #28
 8019238:	f007 bb14 	b.w	8020864 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801923c <_ZN8touchgfx3HAL5touchEll>:
 801923c:	b530      	push	{r4, r5, lr}
 801923e:	b085      	sub	sp, #20
 8019240:	4604      	mov	r4, r0
 8019242:	a802      	add	r0, sp, #8
 8019244:	9102      	str	r1, [sp, #8]
 8019246:	9203      	str	r2, [sp, #12]
 8019248:	f001 fa88 	bl	801a75c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801924c:	a903      	add	r1, sp, #12
 801924e:	a802      	add	r0, sp, #8
 8019250:	f001 fad2 	bl	801a7f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019254:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019258:	9d02      	ldr	r5, [sp, #8]
 801925a:	9b03      	ldr	r3, [sp, #12]
 801925c:	f104 001c 	add.w	r0, r4, #28
 8019260:	b179      	cbz	r1, 8019282 <_ZN8touchgfx3HAL5touchEll+0x46>
 8019262:	b29b      	uxth	r3, r3
 8019264:	9300      	str	r3, [sp, #0]
 8019266:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 801926a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801926e:	b2ab      	uxth	r3, r5
 8019270:	f007 fb08 	bl	8020884 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8019274:	b118      	cbz	r0, 801927e <_ZN8touchgfx3HAL5touchEll+0x42>
 8019276:	9b02      	ldr	r3, [sp, #8]
 8019278:	65e3      	str	r3, [r4, #92]	; 0x5c
 801927a:	9b03      	ldr	r3, [sp, #12]
 801927c:	6623      	str	r3, [r4, #96]	; 0x60
 801927e:	b005      	add	sp, #20
 8019280:	bd30      	pop	{r4, r5, pc}
 8019282:	b29b      	uxth	r3, r3
 8019284:	b2aa      	uxth	r2, r5
 8019286:	f007 fb41 	bl	802090c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801928a:	2301      	movs	r3, #1
 801928c:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019290:	e7f1      	b.n	8019276 <_ZN8touchgfx3HAL5touchEll+0x3a>

08019292 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8019292:	b530      	push	{r4, r5, lr}
 8019294:	2b00      	cmp	r3, #0
 8019296:	d04e      	beq.n	8019336 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 8019298:	ea81 0002 	eor.w	r0, r1, r2
 801929c:	07c0      	lsls	r0, r0, #31
 801929e:	d508      	bpl.n	80192b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80192a0:	3a01      	subs	r2, #1
 80192a2:	440b      	add	r3, r1
 80192a4:	4299      	cmp	r1, r3
 80192a6:	d046      	beq.n	8019336 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 80192a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80192ac:	f801 0b01 	strb.w	r0, [r1], #1
 80192b0:	e7f8      	b.n	80192a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80192b2:	07d5      	lsls	r5, r2, #31
 80192b4:	bf42      	ittt	mi
 80192b6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80192ba:	f801 0b01 	strbmi.w	r0, [r1], #1
 80192be:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80192c2:	2b01      	cmp	r3, #1
 80192c4:	d915      	bls.n	80192f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 80192c6:	ea81 0002 	eor.w	r0, r1, r2
 80192ca:	0784      	lsls	r4, r0, #30
 80192cc:	d01f      	beq.n	801930e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 80192ce:	1e95      	subs	r5, r2, #2
 80192d0:	460c      	mov	r4, r1
 80192d2:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 80192d6:	f824 0b02 	strh.w	r0, [r4], #2
 80192da:	1b18      	subs	r0, r3, r4
 80192dc:	4408      	add	r0, r1
 80192de:	2801      	cmp	r0, #1
 80192e0:	d8f7      	bhi.n	80192d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 80192e2:	1e98      	subs	r0, r3, #2
 80192e4:	f020 0001 	bic.w	r0, r0, #1
 80192e8:	3002      	adds	r0, #2
 80192ea:	4401      	add	r1, r0
 80192ec:	4402      	add	r2, r0
 80192ee:	f003 0301 	and.w	r3, r3, #1
 80192f2:	3a01      	subs	r2, #1
 80192f4:	440b      	add	r3, r1
 80192f6:	4299      	cmp	r1, r3
 80192f8:	d01d      	beq.n	8019336 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 80192fa:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80192fe:	f801 0b01 	strb.w	r0, [r1], #1
 8019302:	e7f8      	b.n	80192f6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 8019304:	f855 4f04 	ldr.w	r4, [r5, #4]!
 8019308:	f840 4b04 	str.w	r4, [r0], #4
 801930c:	e008      	b.n	8019320 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801930e:	0790      	lsls	r0, r2, #30
 8019310:	d004      	beq.n	801931c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 8019312:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019316:	f821 0b02 	strh.w	r0, [r1], #2
 801931a:	3b02      	subs	r3, #2
 801931c:	1f15      	subs	r5, r2, #4
 801931e:	4608      	mov	r0, r1
 8019320:	1a1c      	subs	r4, r3, r0
 8019322:	440c      	add	r4, r1
 8019324:	2c03      	cmp	r4, #3
 8019326:	d8ed      	bhi.n	8019304 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 8019328:	f023 0003 	bic.w	r0, r3, #3
 801932c:	4402      	add	r2, r0
 801932e:	4401      	add	r1, r0
 8019330:	f003 0303 	and.w	r3, r3, #3
 8019334:	e7dd      	b.n	80192f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 8019336:	2001      	movs	r0, #1
 8019338:	bd30      	pop	{r4, r5, pc}

0801933a <_ZN8touchgfx3HAL7noTouchEv>:
 801933a:	b510      	push	{r4, lr}
 801933c:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8019340:	4604      	mov	r4, r0
 8019342:	b153      	cbz	r3, 801935a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019344:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019348:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801934c:	2101      	movs	r1, #1
 801934e:	301c      	adds	r0, #28
 8019350:	f007 fadc 	bl	802090c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019354:	2300      	movs	r3, #0
 8019356:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801935a:	bd10      	pop	{r4, pc}

0801935c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 801935c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019360:	4605      	mov	r5, r0
 8019362:	6980      	ldr	r0, [r0, #24]
 8019364:	b085      	sub	sp, #20
 8019366:	460f      	mov	r7, r1
 8019368:	4690      	mov	r8, r2
 801936a:	4699      	mov	r9, r3
 801936c:	b930      	cbnz	r0, 801937c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x20>
 801936e:	4b1f      	ldr	r3, [pc, #124]	; (80193ec <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x90>)
 8019370:	4a1f      	ldr	r2, [pc, #124]	; (80193f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 8019372:	f44f 7198 	mov.w	r1, #304	; 0x130
 8019376:	481f      	ldr	r0, [pc, #124]	; (80193f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x98>)
 8019378:	f007 fb40 	bl	80209fc <__assert_func>
 801937c:	ac04      	add	r4, sp, #16
 801937e:	2600      	movs	r6, #0
 8019380:	f844 6d04 	str.w	r6, [r4, #-4]!
 8019384:	6806      	ldr	r6, [r0, #0]
 8019386:	9401      	str	r4, [sp, #4]
 8019388:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 801938c:	9400      	str	r4, [sp, #0]
 801938e:	6834      	ldr	r4, [r6, #0]
 8019390:	47a0      	blx	r4
 8019392:	4c19      	ldr	r4, [pc, #100]	; (80193f8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x9c>)
 8019394:	4606      	mov	r6, r0
 8019396:	f8a4 9000 	strh.w	r9, [r4]
 801939a:	f7f0 fa55 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 801939e:	6803      	ldr	r3, [r0, #0]
 80193a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193a2:	4798      	blx	r3
 80193a4:	280b      	cmp	r0, #11
 80193a6:	d80e      	bhi.n	80193c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80193a8:	e8df f000 	tbb	[pc, r0]
 80193ac:	1a1a1106 	.word	0x1a1a1106
 80193b0:	1a1a1a1a 	.word	0x1a1a1a1a
 80193b4:	1a1a1a1a 	.word	0x1a1a1a1a
 80193b8:	8823      	ldrh	r3, [r4, #0]
 80193ba:	fb08 7203 	mla	r2, r8, r3, r7
 80193be:	9b03      	ldr	r3, [sp, #12]
 80193c0:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80193c4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80193c6:	4630      	mov	r0, r6
 80193c8:	b005      	add	sp, #20
 80193ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193ce:	8822      	ldrh	r2, [r4, #0]
 80193d0:	9b03      	ldr	r3, [sp, #12]
 80193d2:	fb08 7202 	mla	r2, r8, r2, r7
 80193d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80193da:	1a9a      	subs	r2, r3, r2
 80193dc:	63ea      	str	r2, [r5, #60]	; 0x3c
 80193de:	e7f2      	b.n	80193c6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x6a>
 80193e0:	4b06      	ldr	r3, [pc, #24]	; (80193fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0xa0>)
 80193e2:	4a03      	ldr	r2, [pc, #12]	; (80193f0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x94>)
 80193e4:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80193e8:	e7c5      	b.n	8019376 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x1a>
 80193ea:	bf00      	nop
 80193ec:	080247e5 	.word	0x080247e5
 80193f0:	08024b02 	.word	0x08024b02
 80193f4:	0802482a 	.word	0x0802482a
 80193f8:	2001a8a6 	.word	0x2001a8a6
 80193fc:	08024850 	.word	0x08024850

08019400 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 8019400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019404:	4698      	mov	r8, r3
 8019406:	6803      	ldr	r3, [r0, #0]
 8019408:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801940a:	4b10      	ldr	r3, [pc, #64]	; (801944c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x4c>)
 801940c:	b087      	sub	sp, #28
 801940e:	f8b3 9000 	ldrh.w	r9, [r3]
 8019412:	460e      	mov	r6, r1
 8019414:	4617      	mov	r7, r2
 8019416:	4604      	mov	r4, r0
 8019418:	f7f0 fa16 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 801941c:	6803      	ldr	r3, [r0, #0]
 801941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019420:	4798      	blx	r3
 8019422:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019426:	9302      	str	r3, [sp, #8]
 8019428:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801942c:	9301      	str	r3, [sp, #4]
 801942e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019432:	9004      	str	r0, [sp, #16]
 8019434:	9300      	str	r3, [sp, #0]
 8019436:	f8cd 900c 	str.w	r9, [sp, #12]
 801943a:	4643      	mov	r3, r8
 801943c:	463a      	mov	r2, r7
 801943e:	4631      	mov	r1, r6
 8019440:	4620      	mov	r0, r4
 8019442:	47a8      	blx	r5
 8019444:	b007      	add	sp, #28
 8019446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801944a:	bf00      	nop
 801944c:	2001a8a6 	.word	0x2001a8a6

08019450 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019454:	b089      	sub	sp, #36	; 0x24
 8019456:	4606      	mov	r6, r0
 8019458:	4610      	mov	r0, r2
 801945a:	460c      	mov	r4, r1
 801945c:	4691      	mov	r9, r2
 801945e:	9303      	str	r3, [sp, #12]
 8019460:	f003 fcd4 	bl	801ce0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019464:	2800      	cmp	r0, #0
 8019466:	f000 808e 	beq.w	8019586 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x136>
 801946a:	4f4e      	ldr	r7, [pc, #312]	; (80195a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 801946c:	f8df a138 	ldr.w	sl, [pc, #312]	; 80195a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>
 8019470:	6838      	ldr	r0, [r7, #0]
 8019472:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80195ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>
 8019476:	6802      	ldr	r2, [r0, #0]
 8019478:	6a12      	ldr	r2, [r2, #32]
 801947a:	4790      	blx	r2
 801947c:	6838      	ldr	r0, [r7, #0]
 801947e:	6802      	ldr	r2, [r0, #0]
 8019480:	ad08      	add	r5, sp, #32
 8019482:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019484:	4790      	blx	r2
 8019486:	f825 9d0c 	strh.w	r9, [r5, #-12]!
 801948a:	f8ba 3000 	ldrh.w	r3, [sl]
 801948e:	9300      	str	r3, [sp, #0]
 8019490:	4628      	mov	r0, r5
 8019492:	f8b8 3000 	ldrh.w	r3, [r8]
 8019496:	9301      	str	r3, [sp, #4]
 8019498:	f003 fd78 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801949c:	f8aa 0000 	strh.w	r0, [sl]
 80194a0:	4628      	mov	r0, r5
 80194a2:	f003 fdad 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80194a6:	f8d7 a000 	ldr.w	sl, [r7]
 80194aa:	f8a8 0000 	strh.w	r0, [r8]
 80194ae:	f8da 3040 	ldr.w	r3, [sl, #64]	; 0x40
 80194b2:	9302      	str	r3, [sp, #8]
 80194b4:	4648      	mov	r0, r9
 80194b6:	f8da 703c 	ldr.w	r7, [sl, #60]	; 0x3c
 80194ba:	f003 fca7 	bl	801ce0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80194be:	f8ca 0040 	str.w	r0, [sl, #64]	; 0x40
 80194c2:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
 80194c6:	6822      	ldr	r2, [r4, #0]
 80194c8:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
 80194cc:	f8d2 b034 	ldr.w	fp, [r2, #52]	; 0x34
 80194d0:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
 80194d4:	2200      	movs	r2, #0
 80194d6:	4611      	mov	r1, r2
 80194d8:	4620      	mov	r0, r4
 80194da:	47d8      	blx	fp
 80194dc:	2201      	movs	r2, #1
 80194de:	9b03      	ldr	r3, [sp, #12]
 80194e0:	f894 b025 	ldrb.w	fp, [r4, #37]	; 0x25
 80194e4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
 80194e8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80194ec:	1d21      	adds	r1, r4, #4
 80194ee:	b11a      	cbz	r2, 80194f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xa8>
 80194f0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80194f4:	2a00      	cmp	r2, #0
 80194f6:	d14b      	bne.n	8019590 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x140>
 80194f8:	6808      	ldr	r0, [r1, #0]
 80194fa:	6849      	ldr	r1, [r1, #4]
 80194fc:	ab06      	add	r3, sp, #24
 80194fe:	c303      	stmia	r3!, {r0, r1}
 8019500:	4628      	mov	r0, r5
 8019502:	f003 fecd 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019506:	4680      	mov	r8, r0
 8019508:	f7f0 f99e 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 801950c:	6802      	ldr	r2, [r0, #0]
 801950e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8019510:	4790      	blx	r2
 8019512:	4580      	cmp	r8, r0
 8019514:	d03a      	beq.n	801958c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x13c>
 8019516:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8019518:	b150      	cbz	r0, 8019530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 801951a:	4628      	mov	r0, r5
 801951c:	f003 fec0 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019520:	4605      	mov	r5, r0
 8019522:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8019524:	6803      	ldr	r3, [r0, #0]
 8019526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019528:	4798      	blx	r3
 801952a:	1a2b      	subs	r3, r5, r0
 801952c:	4258      	negs	r0, r3
 801952e:	4158      	adcs	r0, r3
 8019530:	f886 0076 	strb.w	r0, [r6, #118]	; 0x76
 8019534:	6822      	ldr	r2, [r4, #0]
 8019536:	6963      	ldr	r3, [r4, #20]
 8019538:	9303      	str	r3, [sp, #12]
 801953a:	2500      	movs	r5, #0
 801953c:	6165      	str	r5, [r4, #20]
 801953e:	4620      	mov	r0, r4
 8019540:	6892      	ldr	r2, [r2, #8]
 8019542:	a906      	add	r1, sp, #24
 8019544:	4790      	blx	r2
 8019546:	9b03      	ldr	r3, [sp, #12]
 8019548:	6163      	str	r3, [r4, #20]
 801954a:	f886 5076 	strb.w	r5, [r6, #118]	; 0x76
 801954e:	6823      	ldr	r3, [r4, #0]
 8019550:	f884 b025 	strb.w	fp, [r4, #37]	; 0x25
 8019554:	4620      	mov	r0, r4
 8019556:	4c13      	ldr	r4, [pc, #76]	; (80195a4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>)
 8019558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801955a:	4652      	mov	r2, sl
 801955c:	4649      	mov	r1, r9
 801955e:	4798      	blx	r3
 8019560:	6820      	ldr	r0, [r4, #0]
 8019562:	9b02      	ldr	r3, [sp, #8]
 8019564:	6403      	str	r3, [r0, #64]	; 0x40
 8019566:	4b10      	ldr	r3, [pc, #64]	; (80195a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x158>)
 8019568:	f8bd 2000 	ldrh.w	r2, [sp]
 801956c:	801a      	strh	r2, [r3, #0]
 801956e:	4b0f      	ldr	r3, [pc, #60]	; (80195ac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15c>)
 8019570:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8019574:	801a      	strh	r2, [r3, #0]
 8019576:	6803      	ldr	r3, [r0, #0]
 8019578:	63c7      	str	r7, [r0, #60]	; 0x3c
 801957a:	6a1b      	ldr	r3, [r3, #32]
 801957c:	4798      	blx	r3
 801957e:	6820      	ldr	r0, [r4, #0]
 8019580:	6803      	ldr	r3, [r0, #0]
 8019582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019584:	4798      	blx	r3
 8019586:	b009      	add	sp, #36	; 0x24
 8019588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801958c:	2000      	movs	r0, #0
 801958e:	e7cf      	b.n	8019530 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xe0>
 8019590:	6808      	ldr	r0, [r1, #0]
 8019592:	6849      	ldr	r1, [r1, #4]
 8019594:	aa06      	add	r2, sp, #24
 8019596:	c203      	stmia	r2!, {r0, r1}
 8019598:	4619      	mov	r1, r3
 801959a:	a806      	add	r0, sp, #24
 801959c:	f7f0 fa30 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 80195a0:	e7ae      	b.n	8019500 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xb0>
 80195a2:	bf00      	nop
 80195a4:	2001a8ac 	.word	0x2001a8ac
 80195a8:	2001a8a6 	.word	0x2001a8a6
 80195ac:	2001a8a8 	.word	0x2001a8a8

080195b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80195b0:	b510      	push	{r4, lr}
 80195b2:	4b07      	ldr	r3, [pc, #28]	; (80195d0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80195b4:	781b      	ldrb	r3, [r3, #0]
 80195b6:	4604      	mov	r4, r0
 80195b8:	b12b      	cbz	r3, 80195c6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 80195ba:	6803      	ldr	r3, [r0, #0]
 80195bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195be:	4798      	blx	r3
 80195c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80195c2:	4283      	cmp	r3, r0
 80195c4:	d001      	beq.n	80195ca <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80195c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80195c8:	bd10      	pop	{r4, pc}
 80195ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80195cc:	bd10      	pop	{r4, pc}
 80195ce:	bf00      	nop
 80195d0:	2001a8aa 	.word	0x2001a8aa

080195d4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80195d4:	b510      	push	{r4, lr}
 80195d6:	4b0a      	ldr	r3, [pc, #40]	; (8019600 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 80195d8:	781b      	ldrb	r3, [r3, #0]
 80195da:	4604      	mov	r4, r0
 80195dc:	b12b      	cbz	r3, 80195ea <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 80195de:	f7f7 fb11 	bl	8010c04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80195e2:	4620      	mov	r0, r4
 80195e4:	f7ff ffe4 	bl	80195b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80195e8:	bd10      	pop	{r4, pc}
 80195ea:	6840      	ldr	r0, [r0, #4]
 80195ec:	f000 fbdc 	bl	8019da8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80195f0:	2800      	cmp	r0, #0
 80195f2:	d0f4      	beq.n	80195de <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 80195f4:	6862      	ldr	r2, [r4, #4]
 80195f6:	7a53      	ldrb	r3, [r2, #9]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d0fc      	beq.n	80195f6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80195fc:	e7ef      	b.n	80195de <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 80195fe:	bf00      	nop
 8019600:	2001a8aa 	.word	0x2001a8aa

08019604 <_ZN8touchgfx3HAL10initializeEv>:
 8019604:	b510      	push	{r4, lr}
 8019606:	4604      	mov	r4, r0
 8019608:	f7f7 fad8 	bl	8010bbc <_ZN8touchgfx10OSWrappers10initializeEv>
 801960c:	6860      	ldr	r0, [r4, #4]
 801960e:	6803      	ldr	r3, [r0, #0]
 8019610:	68db      	ldr	r3, [r3, #12]
 8019612:	4798      	blx	r3
 8019614:	68e0      	ldr	r0, [r4, #12]
 8019616:	6803      	ldr	r3, [r0, #0]
 8019618:	689b      	ldr	r3, [r3, #8]
 801961a:	4798      	blx	r3
 801961c:	6823      	ldr	r3, [r4, #0]
 801961e:	4620      	mov	r0, r4
 8019620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019626:	4718      	bx	r3

08019628 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>:
 8019628:	b508      	push	{r3, lr}
 801962a:	290b      	cmp	r1, #11
 801962c:	d816      	bhi.n	801965c <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x34>
 801962e:	e8df f001 	tbb	[pc, r1]
 8019632:	080a      	.short	0x080a
 8019634:	0c0c0c06 	.word	0x0c0c0c06
 8019638:	1313130c 	.word	0x1313130c
 801963c:	1313      	.short	0x1313
 801963e:	2020      	movs	r0, #32
 8019640:	bd08      	pop	{r3, pc}
 8019642:	2018      	movs	r0, #24
 8019644:	bd08      	pop	{r3, pc}
 8019646:	2010      	movs	r0, #16
 8019648:	bd08      	pop	{r3, pc}
 801964a:	4b05      	ldr	r3, [pc, #20]	; (8019660 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x38>)
 801964c:	4a05      	ldr	r2, [pc, #20]	; (8019664 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x3c>)
 801964e:	4806      	ldr	r0, [pc, #24]	; (8019668 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE+0x40>)
 8019650:	f240 213b 	movw	r1, #571	; 0x23b
 8019654:	f007 f9d2 	bl	80209fc <__assert_func>
 8019658:	2008      	movs	r0, #8
 801965a:	bd08      	pop	{r3, pc}
 801965c:	2000      	movs	r0, #0
 801965e:	bd08      	pop	{r3, pc}
 8019660:	08024923 	.word	0x08024923
 8019664:	08024cc4 	.word	0x08024cc4
 8019668:	0802482a 	.word	0x0802482a

0801966c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>:
 801966c:	b570      	push	{r4, r5, r6, lr}
 801966e:	460d      	mov	r5, r1
 8019670:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8019674:	4616      	mov	r6, r2
 8019676:	461c      	mov	r4, r3
 8019678:	f7ff ffd6 	bl	8019628 <_ZNK8touchgfx3HAL11getBitDepthENS_6Bitmap12BitmapFormatE>
 801967c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8019680:	10c0      	asrs	r0, r0, #3
 8019682:	fb06 5101 	mla	r1, r6, r1, r5
 8019686:	fb00 4001 	mla	r0, r0, r1, r4
 801968a:	bd70      	pop	{r4, r5, r6, pc}

0801968c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>:
 801968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019690:	b08a      	sub	sp, #40	; 0x28
 8019692:	f04f 0e00 	mov.w	lr, #0
 8019696:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801969a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801969e:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80196a2:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 80196a6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80196aa:	f8cd e020 	str.w	lr, [sp, #32]
 80196ae:	f1b8 0f02 	cmp.w	r8, #2
 80196b2:	4604      	mov	r4, r0
 80196b4:	469a      	mov	sl, r3
 80196b6:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
 80196ba:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80196be:	d031      	beq.n	8019724 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x98>
 80196c0:	2bff      	cmp	r3, #255	; 0xff
 80196c2:	d12d      	bne.n	8019720 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x94>
 80196c4:	4570      	cmp	r0, lr
 80196c6:	bf14      	ite	ne
 80196c8:	2004      	movne	r0, #4
 80196ca:	2001      	moveq	r0, #1
 80196cc:	9002      	str	r0, [sp, #8]
 80196ce:	9204      	str	r2, [sp, #16]
 80196d0:	4620      	mov	r0, r4
 80196d2:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80196d6:	9103      	str	r1, [sp, #12]
 80196d8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80196dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80196e0:	f8ad 6018 	strh.w	r6, [sp, #24]
 80196e4:	f8ad 501a 	strh.w	r5, [sp, #26]
 80196e8:	f7ff ff62 	bl	80195b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80196ec:	9701      	str	r7, [sp, #4]
 80196ee:	4603      	mov	r3, r0
 80196f0:	f8cd 9000 	str.w	r9, [sp]
 80196f4:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 80196f8:	4651      	mov	r1, sl
 80196fa:	4620      	mov	r0, r4
 80196fc:	f7ff ffb6 	bl	801966c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019700:	f8ad 901e 	strh.w	r9, [sp, #30]
 8019704:	9005      	str	r0, [sp, #20]
 8019706:	f88d 8025 	strb.w	r8, [sp, #37]	; 0x25
 801970a:	f88d 7026 	strb.w	r7, [sp, #38]	; 0x26
 801970e:	b106      	cbz	r6, 8019712 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x86>
 8019710:	b98d      	cbnz	r5, 8019736 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xaa>
 8019712:	4b13      	ldr	r3, [pc, #76]	; (8019760 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd4>)
 8019714:	4a13      	ldr	r2, [pc, #76]	; (8019764 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8019716:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 801971a:	4813      	ldr	r0, [pc, #76]	; (8019768 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xdc>)
 801971c:	f007 f96e 	bl	80209fc <__assert_func>
 8019720:	2004      	movs	r0, #4
 8019722:	e7d3      	b.n	80196cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019724:	2bff      	cmp	r3, #255	; 0xff
 8019726:	d104      	bne.n	8019732 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xa6>
 8019728:	2800      	cmp	r0, #0
 801972a:	bf14      	ite	ne
 801972c:	2040      	movne	r0, #64	; 0x40
 801972e:	2020      	moveq	r0, #32
 8019730:	e7cc      	b.n	80196cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019732:	2040      	movs	r0, #64	; 0x40
 8019734:	e7ca      	b.n	80196cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x40>
 8019736:	6823      	ldr	r3, [r4, #0]
 8019738:	9d02      	ldr	r5, [sp, #8]
 801973a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801973c:	4620      	mov	r0, r4
 801973e:	4798      	blx	r3
 8019740:	4228      	tst	r0, r5
 8019742:	d104      	bne.n	801974e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xc2>
 8019744:	4b09      	ldr	r3, [pc, #36]	; (801976c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xe0>)
 8019746:	4a07      	ldr	r2, [pc, #28]	; (8019764 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0xd8>)
 8019748:	f240 11bd 	movw	r1, #445	; 0x1bd
 801974c:	e7e5      	b.n	801971a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_+0x8e>
 801974e:	6860      	ldr	r0, [r4, #4]
 8019750:	6803      	ldr	r3, [r0, #0]
 8019752:	a902      	add	r1, sp, #8
 8019754:	685b      	ldr	r3, [r3, #4]
 8019756:	4798      	blx	r3
 8019758:	b00a      	add	sp, #40	; 0x28
 801975a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801975e:	bf00      	nop
 8019760:	080248a6 	.word	0x080248a6
 8019764:	08024b66 	.word	0x08024b66
 8019768:	0802482a 	.word	0x0802482a
 801976c:	080248de 	.word	0x080248de

08019770 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_>:
 8019770:	b510      	push	{r4, lr}
 8019772:	b08a      	sub	sp, #40	; 0x28
 8019774:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8019778:	9408      	str	r4, [sp, #32]
 801977a:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
 801977e:	9407      	str	r4, [sp, #28]
 8019780:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8019784:	9406      	str	r4, [sp, #24]
 8019786:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801978a:	9405      	str	r4, [sp, #20]
 801978c:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 8019790:	9404      	str	r4, [sp, #16]
 8019792:	f8bd 4038 	ldrh.w	r4, [sp, #56]	; 0x38
 8019796:	9403      	str	r4, [sp, #12]
 8019798:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
 801979c:	9402      	str	r4, [sp, #8]
 801979e:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
 80197a2:	e88d 0018 	stmia.w	sp, {r3, r4}
 80197a6:	4613      	mov	r3, r2
 80197a8:	2200      	movs	r2, #0
 80197aa:	f7ff ff6f 	bl	801968c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 80197ae:	b00a      	add	sp, #40	; 0x28
 80197b0:	bd10      	pop	{r4, pc}
	...

080197b4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 80197b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197b6:	b08b      	sub	sp, #44	; 0x2c
 80197b8:	4616      	mov	r6, r2
 80197ba:	460d      	mov	r5, r1
 80197bc:	461f      	mov	r7, r3
 80197be:	4604      	mov	r4, r0
 80197c0:	f7f0 f842 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 80197c4:	6803      	ldr	r3, [r0, #0]
 80197c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197c8:	4798      	blx	r3
 80197ca:	4b0e      	ldr	r3, [pc, #56]	; (8019804 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x50>)
 80197cc:	9008      	str	r0, [sp, #32]
 80197ce:	9007      	str	r0, [sp, #28]
 80197d0:	881b      	ldrh	r3, [r3, #0]
 80197d2:	9306      	str	r3, [sp, #24]
 80197d4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80197d8:	9305      	str	r3, [sp, #20]
 80197da:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80197de:	9304      	str	r3, [sp, #16]
 80197e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80197e4:	9303      	str	r3, [sp, #12]
 80197e6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80197ea:	9302      	str	r3, [sp, #8]
 80197ec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80197f0:	9301      	str	r3, [sp, #4]
 80197f2:	9700      	str	r7, [sp, #0]
 80197f4:	4633      	mov	r3, r6
 80197f6:	2200      	movs	r2, #0
 80197f8:	4629      	mov	r1, r5
 80197fa:	4620      	mov	r0, r4
 80197fc:	f7ff ff46 	bl	801968c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 8019800:	b00b      	add	sp, #44	; 0x2c
 8019802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019804:	2001a8a6 	.word	0x2001a8a6

08019808 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 8019808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801980c:	461f      	mov	r7, r3
 801980e:	4b14      	ldr	r3, [pc, #80]	; (8019860 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x58>)
 8019810:	b08a      	sub	sp, #40	; 0x28
 8019812:	4616      	mov	r6, r2
 8019814:	f8b3 8000 	ldrh.w	r8, [r3]
 8019818:	460d      	mov	r5, r1
 801981a:	4604      	mov	r4, r0
 801981c:	f7f0 f814 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 8019820:	6803      	ldr	r3, [r0, #0]
 8019822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019824:	4798      	blx	r3
 8019826:	2302      	movs	r3, #2
 8019828:	9307      	str	r3, [sp, #28]
 801982a:	2301      	movs	r3, #1
 801982c:	9305      	str	r3, [sp, #20]
 801982e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019832:	9304      	str	r3, [sp, #16]
 8019834:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019838:	9303      	str	r3, [sp, #12]
 801983a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801983e:	9302      	str	r3, [sp, #8]
 8019840:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019844:	9008      	str	r0, [sp, #32]
 8019846:	9301      	str	r3, [sp, #4]
 8019848:	f8cd 8018 	str.w	r8, [sp, #24]
 801984c:	9700      	str	r7, [sp, #0]
 801984e:	4633      	mov	r3, r6
 8019850:	2200      	movs	r2, #0
 8019852:	4629      	mov	r1, r5
 8019854:	4620      	mov	r0, r4
 8019856:	f7ff ff19 	bl	801968c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801985a:	b00a      	add	sp, #40	; 0x28
 801985c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019860:	2001a8a6 	.word	0x2001a8a6

08019864 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE>:
 8019864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019868:	b08b      	sub	sp, #44	; 0x2c
 801986a:	469b      	mov	fp, r3
 801986c:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8019870:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8019874:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8019878:	2fff      	cmp	r7, #255	; 0xff
 801987a:	bf0c      	ite	eq
 801987c:	2302      	moveq	r3, #2
 801987e:	2308      	movne	r3, #8
 8019880:	2600      	movs	r6, #0
 8019882:	4604      	mov	r4, r0
 8019884:	4689      	mov	r9, r1
 8019886:	4692      	mov	sl, r2
 8019888:	9302      	str	r3, [sp, #8]
 801988a:	9608      	str	r6, [sp, #32]
 801988c:	9603      	str	r6, [sp, #12]
 801988e:	f7ff fe8f 	bl	80195b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019892:	9501      	str	r5, [sp, #4]
 8019894:	4603      	mov	r3, r0
 8019896:	465a      	mov	r2, fp
 8019898:	4651      	mov	r1, sl
 801989a:	f8cd 8000 	str.w	r8, [sp]
 801989e:	4620      	mov	r0, r4
 80198a0:	f7ff fee4 	bl	801966c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 80198a4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80198a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80198ac:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80198b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80198b4:	6823      	ldr	r3, [r4, #0]
 80198b6:	9005      	str	r0, [sp, #20]
 80198b8:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80198bc:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
 80198c0:	f8ad 601c 	strh.w	r6, [sp, #28]
 80198c4:	f8ad 801e 	strh.w	r8, [sp, #30]
 80198c8:	f8cd 9020 	str.w	r9, [sp, #32]
 80198cc:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
 80198d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198d2:	9d02      	ldr	r5, [sp, #8]
 80198d4:	4620      	mov	r0, r4
 80198d6:	4798      	blx	r3
 80198d8:	4228      	tst	r0, r5
 80198da:	d106      	bne.n	80198ea <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x86>
 80198dc:	4b07      	ldr	r3, [pc, #28]	; (80198fc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x98>)
 80198de:	4a08      	ldr	r2, [pc, #32]	; (8019900 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0x9c>)
 80198e0:	4808      	ldr	r0, [pc, #32]	; (8019904 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatE+0xa0>)
 80198e2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80198e6:	f007 f889 	bl	80209fc <__assert_func>
 80198ea:	6860      	ldr	r0, [r4, #4]
 80198ec:	6803      	ldr	r3, [r0, #0]
 80198ee:	a902      	add	r1, sp, #8
 80198f0:	685b      	ldr	r3, [r3, #4]
 80198f2:	4798      	blx	r3
 80198f4:	b00b      	add	sp, #44	; 0x2c
 80198f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198fa:	bf00      	nop
 80198fc:	080248de 	.word	0x080248de
 8019900:	08024c2f 	.word	0x08024c2f
 8019904:	0802482a 	.word	0x0802482a

08019908 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8019908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801990c:	461f      	mov	r7, r3
 801990e:	4b0b      	ldr	r3, [pc, #44]	; (801993c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8019910:	460d      	mov	r5, r1
 8019912:	f8b3 8000 	ldrh.w	r8, [r3]
 8019916:	4616      	mov	r6, r2
 8019918:	4604      	mov	r4, r0
 801991a:	f7ef ff95 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 801991e:	6803      	ldr	r3, [r0, #0]
 8019920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019922:	4798      	blx	r3
 8019924:	f8cd 8000 	str.w	r8, [sp]
 8019928:	9001      	str	r0, [sp, #4]
 801992a:	463b      	mov	r3, r7
 801992c:	4632      	mov	r2, r6
 801992e:	4629      	mov	r1, r5
 8019930:	4620      	mov	r0, r4
 8019932:	f7ff fe9b 	bl	801966c <_ZNK8touchgfx3HAL13getDstAddressEttPttNS_6Bitmap12BitmapFormatE>
 8019936:	b002      	add	sp, #8
 8019938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801993c:	2001a8a6 	.word	0x2001a8a6

08019940 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 8019940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019944:	b088      	sub	sp, #32
 8019946:	4698      	mov	r8, r3
 8019948:	2300      	movs	r3, #0
 801994a:	9306      	str	r3, [sp, #24]
 801994c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019950:	9300      	str	r3, [sp, #0]
 8019952:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019956:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801995a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801995e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019962:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8019966:	9101      	str	r1, [sp, #4]
 8019968:	4617      	mov	r7, r2
 801996a:	4604      	mov	r4, r0
 801996c:	f88d 301c 	strb.w	r3, [sp, #28]
 8019970:	f8ad 6010 	strh.w	r6, [sp, #16]
 8019974:	f8ad 5012 	strh.w	r5, [sp, #18]
 8019978:	f7ff fe1a 	bl	80195b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801997c:	4642      	mov	r2, r8
 801997e:	4603      	mov	r3, r0
 8019980:	4639      	mov	r1, r7
 8019982:	4620      	mov	r0, r4
 8019984:	f7ff ffc0 	bl	8019908 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019988:	4b16      	ldr	r3, [pc, #88]	; (80199e4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa4>)
 801998a:	9003      	str	r0, [sp, #12]
 801998c:	881b      	ldrh	r3, [r3, #0]
 801998e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019992:	f7ef ff59 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 8019996:	6803      	ldr	r3, [r0, #0]
 8019998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801999a:	4798      	blx	r3
 801999c:	f88d 001e 	strb.w	r0, [sp, #30]
 80199a0:	f88d 001d 	strb.w	r0, [sp, #29]
 80199a4:	b106      	cbz	r6, 80199a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x68>
 80199a6:	b935      	cbnz	r5, 80199b6 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x76>
 80199a8:	4b0f      	ldr	r3, [pc, #60]	; (80199e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa8>)
 80199aa:	4a10      	ldr	r2, [pc, #64]	; (80199ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80199ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80199b0:	480f      	ldr	r0, [pc, #60]	; (80199f0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb0>)
 80199b2:	f007 f823 	bl	80209fc <__assert_func>
 80199b6:	6823      	ldr	r3, [r4, #0]
 80199b8:	9d00      	ldr	r5, [sp, #0]
 80199ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80199bc:	4620      	mov	r0, r4
 80199be:	4798      	blx	r3
 80199c0:	4228      	tst	r0, r5
 80199c2:	d104      	bne.n	80199ce <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x8e>
 80199c4:	4b0b      	ldr	r3, [pc, #44]	; (80199f4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xb4>)
 80199c6:	4a09      	ldr	r2, [pc, #36]	; (80199ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xac>)
 80199c8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80199cc:	e7f0      	b.n	80199b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x70>
 80199ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80199d0:	6860      	ldr	r0, [r4, #4]
 80199d2:	9306      	str	r3, [sp, #24]
 80199d4:	6803      	ldr	r3, [r0, #0]
 80199d6:	4669      	mov	r1, sp
 80199d8:	685b      	ldr	r3, [r3, #4]
 80199da:	4798      	blx	r3
 80199dc:	b008      	add	sp, #32
 80199de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199e2:	bf00      	nop
 80199e4:	2001a8a6 	.word	0x2001a8a6
 80199e8:	080248a6 	.word	0x080248a6
 80199ec:	08024a18 	.word	0x08024a18
 80199f0:	0802482a 	.word	0x0802482a
 80199f4:	080248de 	.word	0x080248de

080199f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80199f8:	b570      	push	{r4, r5, r6, lr}
 80199fa:	4b22      	ldr	r3, [pc, #136]	; (8019a84 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x8c>)
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	b08a      	sub	sp, #40	; 0x28
 8019a00:	4604      	mov	r4, r0
 8019a02:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019a06:	b933      	cbnz	r3, 8019a16 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 8019a08:	4b1f      	ldr	r3, [pc, #124]	; (8019a88 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x90>)
 8019a0a:	4a20      	ldr	r2, [pc, #128]	; (8019a8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x94>)
 8019a0c:	4820      	ldr	r0, [pc, #128]	; (8019a90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x98>)
 8019a0e:	f240 2105 	movw	r1, #517	; 0x205
 8019a12:	f006 fff3 	bl	80209fc <__assert_func>
 8019a16:	2300      	movs	r3, #0
 8019a18:	9308      	str	r3, [sp, #32]
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	9302      	str	r3, [sp, #8]
 8019a1e:	6803      	ldr	r3, [r0, #0]
 8019a20:	f8bd 5000 	ldrh.w	r5, [sp]
 8019a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a26:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 8019a2a:	4798      	blx	r3
 8019a2c:	4632      	mov	r2, r6
 8019a2e:	4629      	mov	r1, r5
 8019a30:	4603      	mov	r3, r0
 8019a32:	4620      	mov	r0, r4
 8019a34:	f7ff ff68 	bl	8019908 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019a38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019a3a:	9305      	str	r3, [sp, #20]
 8019a3c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019a40:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019a44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019a48:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019a4c:	4b11      	ldr	r3, [pc, #68]	; (8019a94 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x9c>)
 8019a4e:	9003      	str	r0, [sp, #12]
 8019a50:	881b      	ldrh	r3, [r3, #0]
 8019a52:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019a56:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019a5a:	f7ef fef5 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 8019a5e:	6803      	ldr	r3, [r0, #0]
 8019a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a62:	4798      	blx	r3
 8019a64:	23ff      	movs	r3, #255	; 0xff
 8019a66:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019a6a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019a6e:	6860      	ldr	r0, [r4, #4]
 8019a70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019a74:	6803      	ldr	r3, [r0, #0]
 8019a76:	a902      	add	r1, sp, #8
 8019a78:	685b      	ldr	r3, [r3, #4]
 8019a7a:	4798      	blx	r3
 8019a7c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019a7e:	b00a      	add	sp, #40	; 0x28
 8019a80:	bd70      	pop	{r4, r5, r6, pc}
 8019a82:	bf00      	nop
 8019a84:	2001a8ab 	.word	0x2001a8ab
 8019a88:	08024777 	.word	0x08024777
 8019a8c:	08024abc 	.word	0x08024abc
 8019a90:	0802482a 	.word	0x0802482a
 8019a94:	2001a8a6 	.word	0x2001a8a6

08019a98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a9a:	b08b      	sub	sp, #44	; 0x2c
 8019a9c:	461d      	mov	r5, r3
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	9308      	str	r3, [sp, #32]
 8019aa2:	2301      	movs	r3, #1
 8019aa4:	e88d 0006 	stmia.w	sp, {r1, r2}
 8019aa8:	9302      	str	r3, [sp, #8]
 8019aaa:	6803      	ldr	r3, [r0, #0]
 8019aac:	f8bd 6000 	ldrh.w	r6, [sp]
 8019ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ab2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8019ab6:	4604      	mov	r4, r0
 8019ab8:	4798      	blx	r3
 8019aba:	463a      	mov	r2, r7
 8019abc:	4631      	mov	r1, r6
 8019abe:	4603      	mov	r3, r0
 8019ac0:	4620      	mov	r0, r4
 8019ac2:	f7ff ff21 	bl	8019908 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019ac6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8019aca:	f8ad 3018 	strh.w	r3, [sp, #24]
 8019ace:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019ad2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8019ad6:	4b0e      	ldr	r3, [pc, #56]	; (8019b10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x78>)
 8019ad8:	9003      	str	r0, [sp, #12]
 8019ada:	881b      	ldrh	r3, [r3, #0]
 8019adc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019ae0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019ae2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019ae6:	9505      	str	r5, [sp, #20]
 8019ae8:	f7ef feae 	bl	8009848 <_ZN8touchgfx3HAL3lcdEv>
 8019aec:	6803      	ldr	r3, [r0, #0]
 8019aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019af0:	4798      	blx	r3
 8019af2:	23ff      	movs	r3, #255	; 0xff
 8019af4:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8019af8:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
 8019afc:	6860      	ldr	r0, [r4, #4]
 8019afe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8019b02:	6803      	ldr	r3, [r0, #0]
 8019b04:	a902      	add	r1, sp, #8
 8019b06:	685b      	ldr	r3, [r3, #4]
 8019b08:	4798      	blx	r3
 8019b0a:	4628      	mov	r0, r5
 8019b0c:	b00b      	add	sp, #44	; 0x2c
 8019b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b10:	2001a8a6 	.word	0x2001a8a6

08019b14 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019b14:	b570      	push	{r4, r5, r6, lr}
 8019b16:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8019b1a:	4604      	mov	r4, r0
 8019b1c:	b19b      	cbz	r3, 8019b46 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8019b1e:	2002      	movs	r0, #2
 8019b20:	f7ff f9d0 	bl	8018ec4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019b24:	2300      	movs	r3, #0
 8019b26:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019b2a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8019b2e:	6823      	ldr	r3, [r4, #0]
 8019b30:	4620      	mov	r0, r4
 8019b32:	f8d3 50a8 	ldr.w	r5, [r3, #168]	; 0xa8
 8019b36:	f7ff fd3b 	bl	80195b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8019b3a:	462b      	mov	r3, r5
 8019b3c:	4601      	mov	r1, r0
 8019b3e:	4620      	mov	r0, r4
 8019b40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b44:	4718      	bx	r3
 8019b46:	bd70      	pop	{r4, r5, r6, pc}

08019b48 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8019b48:	b570      	push	{r4, r5, r6, lr}
 8019b4a:	4605      	mov	r5, r0
 8019b4c:	460c      	mov	r4, r1
 8019b4e:	2003      	movs	r0, #3
 8019b50:	b149      	cbz	r1, 8019b66 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8019b52:	f7ff f9a1 	bl	8018e98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019b56:	6928      	ldr	r0, [r5, #16]
 8019b58:	b168      	cbz	r0, 8019b76 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019b5a:	6803      	ldr	r3, [r0, #0]
 8019b5c:	695b      	ldr	r3, [r3, #20]
 8019b5e:	2101      	movs	r1, #1
 8019b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019b64:	4718      	bx	r3
 8019b66:	f7ff f9a2 	bl	8018eae <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019b6a:	6928      	ldr	r0, [r5, #16]
 8019b6c:	b118      	cbz	r0, 8019b76 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8019b6e:	6803      	ldr	r3, [r0, #0]
 8019b70:	4621      	mov	r1, r4
 8019b72:	695b      	ldr	r3, [r3, #20]
 8019b74:	e7f4      	b.n	8019b60 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8019b76:	bd70      	pop	{r4, r5, r6, pc}

08019b78 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8019b78:	4770      	bx	lr

08019b7a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8019b7a:	68c2      	ldr	r2, [r0, #12]
 8019b7c:	6900      	ldr	r0, [r0, #16]
 8019b7e:	1a13      	subs	r3, r2, r0
 8019b80:	4258      	negs	r0, r3
 8019b82:	4158      	adcs	r0, r3
 8019b84:	4770      	bx	lr

08019b86 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8019b86:	68c2      	ldr	r2, [r0, #12]
 8019b88:	6903      	ldr	r3, [r0, #16]
 8019b8a:	1a9b      	subs	r3, r3, r2
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	bfdc      	itt	le
 8019b90:	6882      	ldrle	r2, [r0, #8]
 8019b92:	189b      	addle	r3, r3, r2
 8019b94:	2b01      	cmp	r3, #1
 8019b96:	bfcc      	ite	gt
 8019b98:	2000      	movgt	r0, #0
 8019b9a:	2001      	movle	r0, #1
 8019b9c:	4770      	bx	lr

08019b9e <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019b9e:	6902      	ldr	r2, [r0, #16]
 8019ba0:	6840      	ldr	r0, [r0, #4]
 8019ba2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8019ba6:	4770      	bx	lr

08019ba8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8019ba8:	6803      	ldr	r3, [r0, #0]
 8019baa:	691b      	ldr	r3, [r3, #16]
 8019bac:	4718      	bx	r3

08019bae <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8019bae:	4770      	bx	lr

08019bb0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8019bb0:	4770      	bx	lr
	...

08019bb4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019bb4:	b570      	push	{r4, r5, r6, lr}
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	7203      	strb	r3, [r0, #8]
 8019bba:	4604      	mov	r4, r0
 8019bbc:	6840      	ldr	r0, [r0, #4]
 8019bbe:	6803      	ldr	r3, [r0, #0]
 8019bc0:	699b      	ldr	r3, [r3, #24]
 8019bc2:	4798      	blx	r3
 8019bc4:	6803      	ldr	r3, [r0, #0]
 8019bc6:	2b08      	cmp	r3, #8
 8019bc8:	4605      	mov	r5, r0
 8019bca:	d01e      	beq.n	8019c0a <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 8019bcc:	d80b      	bhi.n	8019be6 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019bce:	2b02      	cmp	r3, #2
 8019bd0:	d027      	beq.n	8019c22 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 8019bd2:	2b04      	cmp	r3, #4
 8019bd4:	d011      	beq.n	8019bfa <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 8019bd6:	2b01      	cmp	r3, #1
 8019bd8:	d028      	beq.n	8019c2c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019bda:	4b17      	ldr	r3, [pc, #92]	; (8019c38 <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 8019bdc:	4a17      	ldr	r2, [pc, #92]	; (8019c3c <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 8019bde:	4818      	ldr	r0, [pc, #96]	; (8019c40 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 8019be0:	218b      	movs	r1, #139	; 0x8b
 8019be2:	f006 ff0b 	bl	80209fc <__assert_func>
 8019be6:	2b40      	cmp	r3, #64	; 0x40
 8019be8:	d020      	beq.n	8019c2c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019bea:	d801      	bhi.n	8019bf0 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8019bec:	2b20      	cmp	r3, #32
 8019bee:	e7f3      	b.n	8019bd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019bf0:	2b80      	cmp	r3, #128	; 0x80
 8019bf2:	d01b      	beq.n	8019c2c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8019bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019bf8:	e7ee      	b.n	8019bd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 8019bfa:	6823      	ldr	r3, [r4, #0]
 8019bfc:	7f01      	ldrb	r1, [r0, #28]
 8019bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c00:	4620      	mov	r0, r4
 8019c02:	4798      	blx	r3
 8019c04:	6823      	ldr	r3, [r4, #0]
 8019c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c08:	e006      	b.n	8019c18 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019c0a:	6823      	ldr	r3, [r4, #0]
 8019c0c:	7f01      	ldrb	r1, [r0, #28]
 8019c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019c10:	4620      	mov	r0, r4
 8019c12:	4798      	blx	r3
 8019c14:	6823      	ldr	r3, [r4, #0]
 8019c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019c18:	4629      	mov	r1, r5
 8019c1a:	4620      	mov	r0, r4
 8019c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c20:	4718      	bx	r3
 8019c22:	6823      	ldr	r3, [r4, #0]
 8019c24:	4620      	mov	r0, r4
 8019c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c28:	4798      	blx	r3
 8019c2a:	e7f3      	b.n	8019c14 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 8019c2c:	6823      	ldr	r3, [r4, #0]
 8019c2e:	4620      	mov	r0, r4
 8019c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c32:	4798      	blx	r3
 8019c34:	e7e6      	b.n	8019c04 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 8019c36:	bf00      	nop
 8019c38:	08024d0d 	.word	0x08024d0d
 8019c3c:	08024e1c 	.word	0x08024e1c
 8019c40:	08024d32 	.word	0x08024d32

08019c44 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8019c44:	b570      	push	{r4, r5, r6, lr}
 8019c46:	4604      	mov	r4, r0
 8019c48:	460e      	mov	r6, r1
 8019c4a:	6860      	ldr	r0, [r4, #4]
 8019c4c:	6803      	ldr	r3, [r0, #0]
 8019c4e:	685b      	ldr	r3, [r3, #4]
 8019c50:	4798      	blx	r3
 8019c52:	2800      	cmp	r0, #0
 8019c54:	d1f9      	bne.n	8019c4a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8019c56:	4d0b      	ldr	r5, [pc, #44]	; (8019c84 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 8019c58:	6828      	ldr	r0, [r5, #0]
 8019c5a:	6803      	ldr	r3, [r0, #0]
 8019c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c5e:	4798      	blx	r3
 8019c60:	f7f6 ffec 	bl	8010c3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8019c64:	6860      	ldr	r0, [r4, #4]
 8019c66:	6803      	ldr	r3, [r0, #0]
 8019c68:	4631      	mov	r1, r6
 8019c6a:	689b      	ldr	r3, [r3, #8]
 8019c6c:	4798      	blx	r3
 8019c6e:	6823      	ldr	r3, [r4, #0]
 8019c70:	4620      	mov	r0, r4
 8019c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c74:	4798      	blx	r3
 8019c76:	6828      	ldr	r0, [r5, #0]
 8019c78:	6803      	ldr	r3, [r0, #0]
 8019c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c80:	4718      	bx	r3
 8019c82:	bf00      	nop
 8019c84:	2001a8ac 	.word	0x2001a8ac

08019c88 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019c88:	b508      	push	{r3, lr}
 8019c8a:	f7f6 ffbb 	bl	8010c04 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8019c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019c92:	f7f6 bfc5 	b.w	8010c20 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019c96 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8019c96:	b570      	push	{r4, r5, r6, lr}
 8019c98:	4604      	mov	r4, r0
 8019c9a:	6840      	ldr	r0, [r0, #4]
 8019c9c:	6803      	ldr	r3, [r0, #0]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	4798      	blx	r3
 8019ca2:	4605      	mov	r5, r0
 8019ca4:	b908      	cbnz	r0, 8019caa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 8019ca6:	7a23      	ldrb	r3, [r4, #8]
 8019ca8:	b973      	cbnz	r3, 8019cc8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 8019caa:	6860      	ldr	r0, [r4, #4]
 8019cac:	6803      	ldr	r3, [r0, #0]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	4798      	blx	r3
 8019cb2:	b928      	cbnz	r0, 8019cc0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 8019cb4:	6823      	ldr	r3, [r4, #0]
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cbe:	4718      	bx	r3
 8019cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019cc4:	f7f6 bfc6 	b.w	8010c54 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 8019cc8:	6860      	ldr	r0, [r4, #4]
 8019cca:	6803      	ldr	r3, [r0, #0]
 8019ccc:	695b      	ldr	r3, [r3, #20]
 8019cce:	4798      	blx	r3
 8019cd0:	7225      	strb	r5, [r4, #8]
 8019cd2:	e7ea      	b.n	8019caa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

08019cd4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	68c4      	ldr	r4, [r0, #12]
 8019cd8:	6902      	ldr	r2, [r0, #16]
 8019cda:	1b12      	subs	r2, r2, r4
 8019cdc:	2a00      	cmp	r2, #0
 8019cde:	bfdc      	itt	le
 8019ce0:	6883      	ldrle	r3, [r0, #8]
 8019ce2:	18d2      	addle	r2, r2, r3
 8019ce4:	2a01      	cmp	r2, #1
 8019ce6:	dd18      	ble.n	8019d1a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x46>
 8019ce8:	6843      	ldr	r3, [r0, #4]
 8019cea:	f101 021c 	add.w	r2, r1, #28
 8019cee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
 8019cf2:	f851 4b04 	ldr.w	r4, [r1], #4
 8019cf6:	f843 4b04 	str.w	r4, [r3], #4
 8019cfa:	4291      	cmp	r1, r2
 8019cfc:	d1f9      	bne.n	8019cf2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x1e>
 8019cfe:	880a      	ldrh	r2, [r1, #0]
 8019d00:	801a      	strh	r2, [r3, #0]
 8019d02:	788a      	ldrb	r2, [r1, #2]
 8019d04:	709a      	strb	r2, [r3, #2]
 8019d06:	68c3      	ldr	r3, [r0, #12]
 8019d08:	6882      	ldr	r2, [r0, #8]
 8019d0a:	f3bf 8f5b 	dmb	ish
 8019d0e:	3301      	adds	r3, #1
 8019d10:	4293      	cmp	r3, r2
 8019d12:	bfa8      	it	ge
 8019d14:	1a9b      	subge	r3, r3, r2
 8019d16:	60c3      	str	r3, [r0, #12]
 8019d18:	bd10      	pop	{r4, pc}
 8019d1a:	4b03      	ldr	r3, [pc, #12]	; (8019d28 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 8019d1c:	4a03      	ldr	r2, [pc, #12]	; (8019d2c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 8019d1e:	4804      	ldr	r0, [pc, #16]	; (8019d30 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x5c>)
 8019d20:	2139      	movs	r1, #57	; 0x39
 8019d22:	f006 fe6b 	bl	80209fc <__assert_func>
 8019d26:	bf00      	nop
 8019d28:	08024d58 	.word	0x08024d58
 8019d2c:	08024e4c 	.word	0x08024e4c
 8019d30:	08024d32 	.word	0x08024d32

08019d34 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8019d34:	b510      	push	{r4, lr}
 8019d36:	6803      	ldr	r3, [r0, #0]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	4604      	mov	r4, r0
 8019d3c:	4798      	blx	r3
 8019d3e:	b128      	cbz	r0, 8019d4c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 8019d40:	4b07      	ldr	r3, [pc, #28]	; (8019d60 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 8019d42:	4a08      	ldr	r2, [pc, #32]	; (8019d64 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 8019d44:	4808      	ldr	r0, [pc, #32]	; (8019d68 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 8019d46:	213f      	movs	r1, #63	; 0x3f
 8019d48:	f006 fe58 	bl	80209fc <__assert_func>
 8019d4c:	6923      	ldr	r3, [r4, #16]
 8019d4e:	68a2      	ldr	r2, [r4, #8]
 8019d50:	f3bf 8f5b 	dmb	ish
 8019d54:	3301      	adds	r3, #1
 8019d56:	4293      	cmp	r3, r2
 8019d58:	bfa8      	it	ge
 8019d5a:	1a9b      	subge	r3, r3, r2
 8019d5c:	6123      	str	r3, [r4, #16]
 8019d5e:	bd10      	pop	{r4, pc}
 8019d60:	08024d7b 	.word	0x08024d7b
 8019d64:	08024e9a 	.word	0x08024e9a
 8019d68:	08024d32 	.word	0x08024d32

08019d6c <_ZN8touchgfx13DMA_Interface5startEv>:
 8019d6c:	b510      	push	{r4, lr}
 8019d6e:	4604      	mov	r4, r0
 8019d70:	6840      	ldr	r0, [r0, #4]
 8019d72:	6803      	ldr	r3, [r0, #0]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	4798      	blx	r3
 8019d78:	b948      	cbnz	r0, 8019d8e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019d7a:	7a63      	ldrb	r3, [r4, #9]
 8019d7c:	b13b      	cbz	r3, 8019d8e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019d7e:	7a23      	ldrb	r3, [r4, #8]
 8019d80:	b92b      	cbnz	r3, 8019d8e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019d82:	6823      	ldr	r3, [r4, #0]
 8019d84:	4620      	mov	r0, r4
 8019d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d8c:	4718      	bx	r3
 8019d8e:	bd10      	pop	{r4, pc}

08019d90 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8019d90:	b510      	push	{r4, lr}
 8019d92:	6082      	str	r2, [r0, #8]
 8019d94:	4c03      	ldr	r4, [pc, #12]	; (8019da4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8019d96:	6004      	str	r4, [r0, #0]
 8019d98:	2200      	movs	r2, #0
 8019d9a:	6041      	str	r1, [r0, #4]
 8019d9c:	60c2      	str	r2, [r0, #12]
 8019d9e:	6102      	str	r2, [r0, #16]
 8019da0:	bd10      	pop	{r4, pc}
 8019da2:	bf00      	nop
 8019da4:	08024e00 	.word	0x08024e00

08019da8 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8019da8:	6840      	ldr	r0, [r0, #4]
 8019daa:	6803      	ldr	r3, [r0, #0]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	4718      	bx	r3

08019db0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8019db0:	b570      	push	{r4, r5, r6, lr}
 8019db2:	4604      	mov	r4, r0
 8019db4:	2500      	movs	r5, #0
 8019db6:	7223      	strb	r3, [r4, #8]
 8019db8:	9804      	ldr	r0, [sp, #16]
 8019dba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019dbe:	8025      	strh	r5, [r4, #0]
 8019dc0:	6061      	str	r1, [r4, #4]
 8019dc2:	7263      	strb	r3, [r4, #9]
 8019dc4:	60e0      	str	r0, [r4, #12]
 8019dc6:	8222      	strh	r2, [r4, #16]
 8019dc8:	8265      	strh	r5, [r4, #18]
 8019dca:	82a5      	strh	r5, [r4, #20]
 8019dcc:	82e5      	strh	r5, [r4, #22]
 8019dce:	8325      	strh	r5, [r4, #24]
 8019dd0:	8365      	strh	r5, [r4, #26]
 8019dd2:	83a5      	strh	r5, [r4, #28]
 8019dd4:	77a5      	strb	r5, [r4, #30]
 8019dd6:	6803      	ldr	r3, [r0, #0]
 8019dd8:	695b      	ldr	r3, [r3, #20]
 8019dda:	4798      	blx	r3
 8019ddc:	4606      	mov	r6, r0
 8019dde:	b328      	cbz	r0, 8019e2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x7c>
 8019de0:	68e0      	ldr	r0, [r4, #12]
 8019de2:	6803      	ldr	r3, [r0, #0]
 8019de4:	4631      	mov	r1, r6
 8019de6:	68db      	ldr	r3, [r3, #12]
 8019de8:	4798      	blx	r3
 8019dea:	f990 300d 	ldrsb.w	r3, [r0, #13]
 8019dee:	7a82      	ldrb	r2, [r0, #10]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	bfb4      	ite	lt
 8019df4:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8019df8:	2300      	movge	r3, #0
 8019dfa:	4313      	orrs	r3, r2
 8019dfc:	83a3      	strh	r3, [r4, #28]
 8019dfe:	7a63      	ldrb	r3, [r4, #9]
 8019e00:	2b04      	cmp	r3, #4
 8019e02:	4605      	mov	r5, r0
 8019e04:	d112      	bne.n	8019e2c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x7c>
 8019e06:	68e0      	ldr	r0, [r4, #12]
 8019e08:	6803      	ldr	r3, [r0, #0]
 8019e0a:	462a      	mov	r2, r5
 8019e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e0e:	4631      	mov	r1, r6
 8019e10:	4798      	blx	r3
 8019e12:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8019e16:	7aaa      	ldrb	r2, [r5, #10]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	bfb4      	ite	lt
 8019e1c:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8019e20:	2300      	movge	r3, #0
 8019e22:	4313      	orrs	r3, r2
 8019e24:	4418      	add	r0, r3
 8019e26:	8ba3      	ldrh	r3, [r4, #28]
 8019e28:	4418      	add	r0, r3
 8019e2a:	83a0      	strh	r0, [r4, #28]
 8019e2c:	4620      	mov	r0, r4
 8019e2e:	bd70      	pop	{r4, r5, r6, pc}

08019e30 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e34:	2400      	movs	r4, #0
 8019e36:	b085      	sub	sp, #20
 8019e38:	4681      	mov	r9, r0
 8019e3a:	460f      	mov	r7, r1
 8019e3c:	4692      	mov	sl, r2
 8019e3e:	469b      	mov	fp, r3
 8019e40:	46a0      	mov	r8, r4
 8019e42:	4626      	mov	r6, r4
 8019e44:	4554      	cmp	r4, sl
 8019e46:	da26      	bge.n	8019e96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x66>
 8019e48:	2300      	movs	r3, #0
 8019e4a:	9303      	str	r3, [sp, #12]
 8019e4c:	463a      	mov	r2, r7
 8019e4e:	ab03      	add	r3, sp, #12
 8019e50:	4659      	mov	r1, fp
 8019e52:	4648      	mov	r0, r9
 8019e54:	f002 fc3e 	bl	801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019e58:	4605      	mov	r5, r0
 8019e5a:	b1e0      	cbz	r0, 8019e96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x66>
 8019e5c:	280a      	cmp	r0, #10
 8019e5e:	d01a      	beq.n	8019e96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x66>
 8019e60:	9a03      	ldr	r2, [sp, #12]
 8019e62:	b1aa      	cbz	r2, 8019e90 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x60>
 8019e64:	7a93      	ldrb	r3, [r2, #10]
 8019e66:	9300      	str	r3, [sp, #0]
 8019e68:	f992 300d 	ldrsb.w	r3, [r2, #13]
 8019e6c:	8895      	ldrh	r5, [r2, #4]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	bfb4      	ite	lt
 8019e72:	f44f 7380 	movlt.w	r3, #256	; 0x100
 8019e76:	2300      	movge	r3, #0
 8019e78:	9301      	str	r3, [sp, #4]
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	4641      	mov	r1, r8
 8019e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019e80:	4638      	mov	r0, r7
 8019e82:	4798      	blx	r3
 8019e84:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8019e88:	4313      	orrs	r3, r2
 8019e8a:	4418      	add	r0, r3
 8019e8c:	4406      	add	r6, r0
 8019e8e:	b2b6      	uxth	r6, r6
 8019e90:	3401      	adds	r4, #1
 8019e92:	46a8      	mov	r8, r5
 8019e94:	e7d6      	b.n	8019e44 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x14>
 8019e96:	4630      	mov	r0, r6
 8019e98:	b005      	add	sp, #20
 8019e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019e9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019e9e:	2a02      	cmp	r2, #2
 8019ea0:	b530      	push	{r4, r5, lr}
 8019ea2:	d011      	beq.n	8019ec8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019ea4:	2a03      	cmp	r2, #3
 8019ea6:	d01c      	beq.n	8019ee2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019ea8:	2a01      	cmp	r2, #1
 8019eaa:	d128      	bne.n	8019efe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 8019eac:	888b      	ldrh	r3, [r1, #4]
 8019eae:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019eb2:	8801      	ldrh	r1, [r0, #0]
 8019eb4:	8844      	ldrh	r4, [r0, #2]
 8019eb6:	8004      	strh	r4, [r0, #0]
 8019eb8:	1a9b      	subs	r3, r3, r2
 8019eba:	1a5b      	subs	r3, r3, r1
 8019ebc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019ec0:	8043      	strh	r3, [r0, #2]
 8019ec2:	8081      	strh	r1, [r0, #4]
 8019ec4:	80c2      	strh	r2, [r0, #6]
 8019ec6:	bd30      	pop	{r4, r5, pc}
 8019ec8:	88cb      	ldrh	r3, [r1, #6]
 8019eca:	88c2      	ldrh	r2, [r0, #6]
 8019ecc:	1a9b      	subs	r3, r3, r2
 8019ece:	8842      	ldrh	r2, [r0, #2]
 8019ed0:	1a9b      	subs	r3, r3, r2
 8019ed2:	888a      	ldrh	r2, [r1, #4]
 8019ed4:	8881      	ldrh	r1, [r0, #4]
 8019ed6:	8043      	strh	r3, [r0, #2]
 8019ed8:	1a52      	subs	r2, r2, r1
 8019eda:	8801      	ldrh	r1, [r0, #0]
 8019edc:	1a52      	subs	r2, r2, r1
 8019ede:	8002      	strh	r2, [r0, #0]
 8019ee0:	bd30      	pop	{r4, r5, pc}
 8019ee2:	88cb      	ldrh	r3, [r1, #6]
 8019ee4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019ee8:	8841      	ldrh	r1, [r0, #2]
 8019eea:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019eee:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019ef2:	8045      	strh	r5, [r0, #2]
 8019ef4:	1a9b      	subs	r3, r3, r2
 8019ef6:	1a5b      	subs	r3, r3, r1
 8019ef8:	8003      	strh	r3, [r0, #0]
 8019efa:	8082      	strh	r2, [r0, #4]
 8019efc:	80c4      	strh	r4, [r0, #6]
 8019efe:	bd30      	pop	{r4, r5, pc}

08019f00 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
 8019f00:	b570      	push	{r4, r5, r6, lr}
 8019f02:	b086      	sub	sp, #24
 8019f04:	ad02      	add	r5, sp, #8
 8019f06:	e885 0006 	stmia.w	r5, {r1, r2}
 8019f0a:	461a      	mov	r2, r3
 8019f0c:	ab0c      	add	r3, sp, #48	; 0x30
 8019f0e:	9305      	str	r3, [sp, #20]
 8019f10:	4b0a      	ldr	r3, [pc, #40]	; (8019f3c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz+0x3c>)
 8019f12:	685c      	ldr	r4, [r3, #4]
 8019f14:	f014 0f01 	tst.w	r4, #1
 8019f18:	ea4f 0464 	mov.w	r4, r4, asr #1
 8019f1c:	bf1b      	ittet	ne
 8019f1e:	681b      	ldrne	r3, [r3, #0]
 8019f20:	5901      	ldrne	r1, [r0, r4]
 8019f22:	681e      	ldreq	r6, [r3, #0]
 8019f24:	58ce      	ldrne	r6, [r1, r3]
 8019f26:	9b05      	ldr	r3, [sp, #20]
 8019f28:	9301      	str	r3, [sp, #4]
 8019f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f2c:	9300      	str	r3, [sp, #0]
 8019f2e:	4629      	mov	r1, r5
 8019f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f32:	4420      	add	r0, r4
 8019f34:	47b0      	blx	r6
 8019f36:	b006      	add	sp, #24
 8019f38:	bd70      	pop	{r4, r5, r6, pc}
 8019f3a:	bf00      	nop
 8019f3c:	20000048 	.word	0x20000048

08019f40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f44:	b09d      	sub	sp, #116	; 0x74
 8019f46:	9114      	str	r1, [sp, #80]	; 0x50
 8019f48:	9315      	str	r3, [sp, #84]	; 0x54
 8019f4a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8019f4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019f4e:	8809      	ldrh	r1, [r1, #0]
 8019f50:	889b      	ldrh	r3, [r3, #4]
 8019f52:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8019f54:	9210      	str	r2, [sp, #64]	; 0x40
 8019f56:	440b      	add	r3, r1
 8019f58:	b21b      	sxth	r3, r3
 8019f5a:	930e      	str	r3, [sp, #56]	; 0x38
 8019f5c:	6833      	ldr	r3, [r6, #0]
 8019f5e:	f89d 20b0 	ldrb.w	r2, [sp, #176]	; 0xb0
 8019f62:	7a59      	ldrb	r1, [r3, #9]
 8019f64:	7a1b      	ldrb	r3, [r3, #8]
 8019f66:	9312      	str	r3, [sp, #72]	; 0x48
 8019f68:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019f6a:	900f      	str	r0, [sp, #60]	; 0x3c
 8019f6c:	f89d b0a4 	ldrb.w	fp, [sp, #164]	; 0xa4
 8019f70:	9113      	str	r1, [sp, #76]	; 0x4c
 8019f72:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019f76:	2a00      	cmp	r2, #0
 8019f78:	d057      	beq.n	801a02a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xea>
 8019f7a:	7c33      	ldrb	r3, [r6, #16]
 8019f7c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019f7e:	2b04      	cmp	r3, #4
 8019f80:	bf0c      	ite	eq
 8019f82:	2302      	moveq	r3, #2
 8019f84:	2301      	movne	r3, #1
 8019f86:	4413      	add	r3, r2
 8019f88:	2400      	movs	r4, #0
 8019f8a:	930d      	str	r3, [sp, #52]	; 0x34
 8019f8c:	940c      	str	r4, [sp, #48]	; 0x30
 8019f8e:	4627      	mov	r7, r4
 8019f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019f94:	4293      	cmp	r3, r2
 8019f96:	da76      	bge.n	801a086 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x146>
 8019f98:	2300      	movs	r3, #0
 8019f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8019f9c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fa0:	4293      	cmp	r3, r2
 8019fa2:	db44      	blt.n	801a02e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xee>
 8019fa4:	6830      	ldr	r0, [r6, #0]
 8019fa6:	6803      	ldr	r3, [r0, #0]
 8019fa8:	695b      	ldr	r3, [r3, #20]
 8019faa:	4798      	blx	r3
 8019fac:	4681      	mov	r9, r0
 8019fae:	6830      	ldr	r0, [r6, #0]
 8019fb0:	6803      	ldr	r3, [r0, #0]
 8019fb2:	aa1b      	add	r2, sp, #108	; 0x6c
 8019fb4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8019fb8:	4649      	mov	r1, r9
 8019fba:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8019fbe:	47c0      	blx	r8
 8019fc0:	901a      	str	r0, [sp, #104]	; 0x68
 8019fc2:	f64f 6aff 	movw	sl, #65279	; 0xfeff
 8019fc6:	45d1      	cmp	r9, sl
 8019fc8:	d046      	beq.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 8019fca:	f242 080b 	movw	r8, #8203	; 0x200b
 8019fce:	45c1      	cmp	r9, r8
 8019fd0:	d042      	beq.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 8019fd2:	f1b9 0f00 	cmp.w	r9, #0
 8019fd6:	d055      	beq.n	801a084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x144>
 8019fd8:	f1b9 0f0a 	cmp.w	r9, #10
 8019fdc:	d052      	beq.n	801a084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x144>
 8019fde:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d031      	beq.n	801a048 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x108>
 8019fe4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8019fe8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019fea:	2a00      	cmp	r2, #0
 8019fec:	f000 80e4 	beq.w	801a1b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x278>
 8019ff0:	f1bb 0f00 	cmp.w	fp, #0
 8019ff4:	d100      	bne.n	8019ff8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb8>
 8019ff6:	4425      	add	r5, r4
 8019ff8:	f992 100d 	ldrsb.w	r1, [r2, #13]
 8019ffc:	7a93      	ldrb	r3, [r2, #10]
 8019ffe:	2900      	cmp	r1, #0
 801a000:	bfb4      	ite	lt
 801a002:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801a006:	2400      	movge	r4, #0
 801a008:	f1bb 0f01 	cmp.w	fp, #1
 801a00c:	ea44 0403 	orr.w	r4, r4, r3
 801a010:	d127      	bne.n	801a062 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x122>
 801a012:	1b2d      	subs	r5, r5, r4
 801a014:	2f00      	cmp	r7, #0
 801a016:	d143      	bne.n	801a0a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x160>
 801a018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a01a:	1963      	adds	r3, r4, r5
 801a01c:	4413      	add	r3, r2
 801a01e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a020:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a024:	4293      	cmp	r3, r2
 801a026:	da45      	bge.n	801a0b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 801a028:	e02c      	b.n	801a084 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x144>
 801a02a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a02c:	e7ac      	b.n	8019f88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801a02e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 801a032:	9301      	str	r3, [sp, #4]
 801a034:	ab1b      	add	r3, sp, #108	; 0x6c
 801a036:	9300      	str	r3, [sp, #0]
 801a038:	6832      	ldr	r2, [r6, #0]
 801a03a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801a03c:	ab1a      	add	r3, sp, #104	; 0x68
 801a03e:	4659      	mov	r1, fp
 801a040:	f002 fb7f 	bl	801c742 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a044:	4681      	mov	r9, r0
 801a046:	e7bc      	b.n	8019fc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x82>
 801a048:	6830      	ldr	r0, [r6, #0]
 801a04a:	6803      	ldr	r3, [r0, #0]
 801a04c:	691b      	ldr	r3, [r3, #16]
 801a04e:	4798      	blx	r3
 801a050:	4550      	cmp	r0, sl
 801a052:	d001      	beq.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801a054:	4540      	cmp	r0, r8
 801a056:	d1c7      	bne.n	8019fe8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xa8>
 801a058:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a05a:	3301      	adds	r3, #1
 801a05c:	930c      	str	r3, [sp, #48]	; 0x30
 801a05e:	464f      	mov	r7, r9
 801a060:	e796      	b.n	8019f90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801a062:	2f00      	cmp	r7, #0
 801a064:	f000 80bb 	beq.w	801a1de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 801a068:	f1bb 0f00 	cmp.w	fp, #0
 801a06c:	d118      	bne.n	801a0a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x160>
 801a06e:	6830      	ldr	r0, [r6, #0]
 801a070:	6803      	ldr	r3, [r0, #0]
 801a072:	4639      	mov	r1, r7
 801a074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a076:	4798      	blx	r3
 801a078:	4405      	add	r5, r0
 801a07a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a07c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a07e:	1aeb      	subs	r3, r5, r3
 801a080:	4293      	cmp	r3, r2
 801a082:	dd17      	ble.n	801a0b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 801a084:	464f      	mov	r7, r9
 801a086:	2f00      	cmp	r7, #0
 801a088:	f000 80a7 	beq.w	801a1da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801a08c:	2f0a      	cmp	r7, #10
 801a08e:	f040 8095 	bne.w	801a1bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27c>
 801a092:	270a      	movs	r7, #10
 801a094:	fab7 f087 	clz	r0, r7
 801a098:	0940      	lsrs	r0, r0, #5
 801a09a:	b01d      	add	sp, #116	; 0x74
 801a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0a0:	6830      	ldr	r0, [r6, #0]
 801a0a2:	6803      	ldr	r3, [r0, #0]
 801a0a4:	4639      	mov	r1, r7
 801a0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a0a8:	4798      	blx	r3
 801a0aa:	f1bb 0f01 	cmp.w	fp, #1
 801a0ae:	eba5 0500 	sub.w	r5, r5, r0
 801a0b2:	d0b1      	beq.n	801a018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd8>
 801a0b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a0b6:	7b4b      	ldrb	r3, [r1, #13]
 801a0b8:	f991 2009 	ldrsb.w	r2, [r1, #9]
 801a0bc:	7988      	ldrb	r0, [r1, #6]
 801a0be:	9927      	ldr	r1, [sp, #156]	; 0x9c
 801a0c0:	f013 0f08 	tst.w	r3, #8
 801a0c4:	bf14      	ite	ne
 801a0c6:	f44f 7380 	movne.w	r3, #256	; 0x100
 801a0ca:	2300      	moveq	r3, #0
 801a0cc:	442a      	add	r2, r5
 801a0ce:	f9b1 7000 	ldrsh.w	r7, [r1]
 801a0d2:	4303      	orrs	r3, r0
 801a0d4:	4413      	add	r3, r2
 801a0d6:	42bb      	cmp	r3, r7
 801a0d8:	dbbe      	blt.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801a0da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a0dc:	429a      	cmp	r2, r3
 801a0de:	dabb      	bge.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801a0e0:	6830      	ldr	r0, [r6, #0]
 801a0e2:	6803      	ldr	r3, [r0, #0]
 801a0e4:	42af      	cmp	r7, r5
 801a0e6:	bfc8      	it	gt
 801a0e8:	1b7f      	subgt	r7, r7, r5
 801a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0ec:	bfcc      	ite	gt
 801a0ee:	b2bf      	uxthgt	r7, r7
 801a0f0:	2700      	movle	r7, #0
 801a0f2:	4798      	blx	r3
 801a0f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801a0f6:	4a3c      	ldr	r2, [pc, #240]	; (801a1e8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a8>)
 801a0f8:	7b59      	ldrb	r1, [r3, #13]
 801a0fa:	f893 c008 	ldrb.w	ip, [r3, #8]
 801a0fe:	f011 0f40 	tst.w	r1, #64	; 0x40
 801a102:	bf14      	ite	ne
 801a104:	4696      	movne	lr, r2
 801a106:	f04f 0e00 	moveq.w	lr, #0
 801a10a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801a10c:	f011 0f20 	tst.w	r1, #32
 801a110:	bf14      	ite	ne
 801a112:	f44f 7a80 	movne.w	sl, #256	; 0x100
 801a116:	f04f 0a00 	moveq.w	sl, #0
 801a11a:	ea4e 0e0c 	orr.w	lr, lr, ip
 801a11e:	eb00 0802 	add.w	r8, r0, r2
 801a122:	ea4a 020e 	orr.w	r2, sl, lr
 801a126:	eba8 0802 	sub.w	r8, r8, r2
 801a12a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a12c:	fa1f f888 	uxth.w	r8, r8
 801a130:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801a134:	fa0f fa88 	sxth.w	sl, r8
 801a138:	4592      	cmp	sl, r2
 801a13a:	da3a      	bge.n	801a1b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x272>
 801a13c:	f011 0f10 	tst.w	r1, #16
 801a140:	79d8      	ldrb	r0, [r3, #7]
 801a142:	bf14      	ite	ne
 801a144:	f44f 7180 	movne.w	r1, #256	; 0x100
 801a148:	2100      	moveq	r1, #0
 801a14a:	4308      	orrs	r0, r1
 801a14c:	4482      	add	sl, r0
 801a14e:	4552      	cmp	r2, sl
 801a150:	dc82      	bgt.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801a152:	eba2 0808 	sub.w	r8, r2, r8
 801a156:	fa1f f888 	uxth.w	r8, r8
 801a15a:	4692      	mov	sl, r2
 801a15c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a15e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a160:	6830      	ldr	r0, [r6, #0]
 801a162:	681a      	ldr	r2, [r3, #0]
 801a164:	6801      	ldr	r1, [r0, #0]
 801a166:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801a168:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a16a:	9311      	str	r3, [sp, #68]	; 0x44
 801a16c:	9216      	str	r2, [sp, #88]	; 0x58
 801a16e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a170:	4788      	blx	r1
 801a172:	79b1      	ldrb	r1, [r6, #6]
 801a174:	910b      	str	r1, [sp, #44]	; 0x2c
 801a176:	7bb1      	ldrb	r1, [r6, #14]
 801a178:	910a      	str	r1, [sp, #40]	; 0x28
 801a17a:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
 801a17e:	9109      	str	r1, [sp, #36]	; 0x24
 801a180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a182:	68b1      	ldr	r1, [r6, #8]
 801a184:	9305      	str	r3, [sp, #20]
 801a186:	9702      	str	r7, [sp, #8]
 801a188:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a18a:	9304      	str	r3, [sp, #16]
 801a18c:	442f      	add	r7, r5
 801a18e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a190:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a192:	9108      	str	r1, [sp, #32]
 801a194:	b23f      	sxth	r7, r7
 801a196:	9007      	str	r0, [sp, #28]
 801a198:	9700      	str	r7, [sp, #0]
 801a19a:	9206      	str	r2, [sp, #24]
 801a19c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a1a0:	f8cd a004 	str.w	sl, [sp, #4]
 801a1a4:	681a      	ldr	r2, [r3, #0]
 801a1a6:	9914      	ldr	r1, [sp, #80]	; 0x50
 801a1a8:	685b      	ldr	r3, [r3, #4]
 801a1aa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a1ac:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801a1ae:	47b8      	blx	r7
 801a1b0:	e752      	b.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801a1b2:	f04f 0800 	mov.w	r8, #0
 801a1b6:	e7d1      	b.n	801a15c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x21c>
 801a1b8:	4614      	mov	r4, r2
 801a1ba:	e74d      	b.n	801a058 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x118>
 801a1bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a1be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a1c0:	3401      	adds	r4, #1
 801a1c2:	429c      	cmp	r4, r3
 801a1c4:	f6bf af66 	bge.w	801a094 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801a1c8:	4659      	mov	r1, fp
 801a1ca:	982a      	ldr	r0, [sp, #168]	; 0xa8
 801a1cc:	f002 fa3c 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a1d0:	4607      	mov	r7, r0
 801a1d2:	b110      	cbz	r0, 801a1da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801a1d4:	280a      	cmp	r0, #10
 801a1d6:	d1f2      	bne.n	801a1be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x27e>
 801a1d8:	e75b      	b.n	801a092 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a1da:	2700      	movs	r7, #0
 801a1dc:	e75a      	b.n	801a094 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801a1de:	f1bb 0f00 	cmp.w	fp, #0
 801a1e2:	f43f af4a 	beq.w	801a07a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x13a>
 801a1e6:	e765      	b.n	801a0b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x174>
 801a1e8:	fffffe00 	.word	0xfffffe00

0801a1ec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a1ec:	b530      	push	{r4, r5, lr}
 801a1ee:	8a44      	ldrh	r4, [r0, #18]
 801a1f0:	8ac5      	ldrh	r5, [r0, #22]
 801a1f2:	82c3      	strh	r3, [r0, #22]
 801a1f4:	442c      	add	r4, r5
 801a1f6:	1ae4      	subs	r4, r4, r3
 801a1f8:	8244      	strh	r4, [r0, #18]
 801a1fa:	8b03      	ldrh	r3, [r0, #24]
 801a1fc:	8a84      	ldrh	r4, [r0, #20]
 801a1fe:	4422      	add	r2, r4
 801a200:	440c      	add	r4, r1
 801a202:	1a59      	subs	r1, r3, r1
 801a204:	8342      	strh	r2, [r0, #26]
 801a206:	8284      	strh	r4, [r0, #20]
 801a208:	8301      	strh	r1, [r0, #24]
 801a20a:	bd30      	pop	{r4, r5, pc}

0801a20c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a210:	f890 b009 	ldrb.w	fp, [r0, #9]
 801a214:	b087      	sub	sp, #28
 801a216:	4604      	mov	r4, r0
 801a218:	4689      	mov	r9, r1
 801a21a:	f1ab 0303 	sub.w	r3, fp, #3
 801a21e:	b349      	cbz	r1, 801a274 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x68>
 801a220:	2b01      	cmp	r3, #1
 801a222:	d925      	bls.n	801a270 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x64>
 801a224:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a228:	f1d2 0a00 	rsbs	sl, r2, #0
 801a22c:	eb4a 0a02 	adc.w	sl, sl, r2
 801a230:	f1ab 0302 	sub.w	r3, fp, #2
 801a234:	f1d3 0b00 	rsbs	fp, r3, #0
 801a238:	f04f 0500 	mov.w	r5, #0
 801a23c:	eb4b 0b03 	adc.w	fp, fp, r3
 801a240:	9501      	str	r5, [sp, #4]
 801a242:	2600      	movs	r6, #0
 801a244:	8266      	strh	r6, [r4, #18]
 801a246:	82a6      	strh	r6, [r4, #20]
 801a248:	f242 080b 	movw	r8, #8203	; 0x200b
 801a24c:	2300      	movs	r3, #0
 801a24e:	9305      	str	r3, [sp, #20]
 801a250:	68e2      	ldr	r2, [r4, #12]
 801a252:	7a21      	ldrb	r1, [r4, #8]
 801a254:	6860      	ldr	r0, [r4, #4]
 801a256:	8827      	ldrh	r7, [r4, #0]
 801a258:	ab05      	add	r3, sp, #20
 801a25a:	f002 fa3b 	bl	801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a25e:	8020      	strh	r0, [r4, #0]
 801a260:	b9b8      	cbnz	r0, 801a292 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x86>
 801a262:	8b22      	ldrh	r2, [r4, #24]
 801a264:	2300      	movs	r3, #0
 801a266:	4611      	mov	r1, r2
 801a268:	4620      	mov	r0, r4
 801a26a:	f7ff ffbf 	bl	801a1ec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a26e:	e08e      	b.n	801a38e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a270:	468a      	mov	sl, r1
 801a272:	e7dd      	b.n	801a230 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 801a274:	2b01      	cmp	r3, #1
 801a276:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a27a:	bf8c      	ite	hi
 801a27c:	2300      	movhi	r3, #0
 801a27e:	2301      	movls	r3, #1
 801a280:	f1bb 0f01 	cmp.w	fp, #1
 801a284:	9301      	str	r3, [sp, #4]
 801a286:	bf8c      	ite	hi
 801a288:	2500      	movhi	r5, #0
 801a28a:	2501      	movls	r5, #1
 801a28c:	468b      	mov	fp, r1
 801a28e:	468a      	mov	sl, r1
 801a290:	e7d7      	b.n	801a242 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x36>
 801a292:	8ae3      	ldrh	r3, [r4, #22]
 801a294:	280a      	cmp	r0, #10
 801a296:	f103 0301 	add.w	r3, r3, #1
 801a29a:	82e3      	strh	r3, [r4, #22]
 801a29c:	d0e1      	beq.n	801a262 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x56>
 801a29e:	9a05      	ldr	r2, [sp, #20]
 801a2a0:	bb22      	cbnz	r2, 801a2ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xe0>
 801a2a2:	4540      	cmp	r0, r8
 801a2a4:	d1d2      	bne.n	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a2a6:	8823      	ldrh	r3, [r4, #0]
 801a2a8:	8b21      	ldrh	r1, [r4, #24]
 801a2aa:	2b20      	cmp	r3, #32
 801a2ac:	d058      	beq.n	801a360 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801a2ae:	4543      	cmp	r3, r8
 801a2b0:	d056      	beq.n	801a360 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x154>
 801a2b2:	2000      	movs	r0, #0
 801a2b4:	440a      	add	r2, r1
 801a2b6:	8aa3      	ldrh	r3, [r4, #20]
 801a2b8:	f8b4 e010 	ldrh.w	lr, [r4, #16]
 801a2bc:	b292      	uxth	r2, r2
 801a2be:	8322      	strh	r2, [r4, #24]
 801a2c0:	4413      	add	r3, r2
 801a2c2:	f1b9 0f00 	cmp.w	r9, #0
 801a2c6:	d02c      	beq.n	801a322 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x116>
 801a2c8:	f1ba 0f00 	cmp.w	sl, #0
 801a2cc:	d104      	bne.n	801a2d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a2ce:	f1bb 0f00 	cmp.w	fp, #0
 801a2d2:	d04f      	beq.n	801a374 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x168>
 801a2d4:	2800      	cmp	r0, #0
 801a2d6:	d04d      	beq.n	801a374 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x168>
 801a2d8:	8ba1      	ldrh	r1, [r4, #28]
 801a2da:	4419      	add	r1, r3
 801a2dc:	458e      	cmp	lr, r1
 801a2de:	da46      	bge.n	801a36e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801a2e0:	8a61      	ldrh	r1, [r4, #18]
 801a2e2:	2900      	cmp	r1, #0
 801a2e4:	d043      	beq.n	801a36e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801a2e6:	4573      	cmp	r3, lr
 801a2e8:	ddb0      	ble.n	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a2ea:	e04a      	b.n	801a382 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x176>
 801a2ec:	4540      	cmp	r0, r8
 801a2ee:	d016      	beq.n	801a31e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x112>
 801a2f0:	8893      	ldrh	r3, [r2, #4]
 801a2f2:	8023      	strh	r3, [r4, #0]
 801a2f4:	7a93      	ldrb	r3, [r2, #10]
 801a2f6:	9303      	str	r3, [sp, #12]
 801a2f8:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801a2fc:	68e0      	ldr	r0, [r4, #12]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	bfb4      	ite	lt
 801a302:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801a306:	2300      	movge	r3, #0
 801a308:	9302      	str	r3, [sp, #8]
 801a30a:	6803      	ldr	r3, [r0, #0]
 801a30c:	4639      	mov	r1, r7
 801a30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a310:	4798      	blx	r3
 801a312:	9b02      	ldr	r3, [sp, #8]
 801a314:	9a03      	ldr	r2, [sp, #12]
 801a316:	431a      	orrs	r2, r3
 801a318:	4402      	add	r2, r0
 801a31a:	b292      	uxth	r2, r2
 801a31c:	e7c3      	b.n	801a2a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801a31e:	2200      	movs	r2, #0
 801a320:	e7c1      	b.n	801a2a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9a>
 801a322:	4573      	cmp	r3, lr
 801a324:	dd0f      	ble.n	801a346 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13a>
 801a326:	9b01      	ldr	r3, [sp, #4]
 801a328:	b113      	cbz	r3, 801a330 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x124>
 801a32a:	2301      	movs	r3, #1
 801a32c:	460a      	mov	r2, r1
 801a32e:	e79a      	b.n	801a266 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5a>
 801a330:	2d00      	cmp	r5, #0
 801a332:	d08b      	beq.n	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a334:	2800      	cmp	r0, #0
 801a336:	d189      	bne.n	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a338:	2f20      	cmp	r7, #32
 801a33a:	d001      	beq.n	801a340 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a33c:	4547      	cmp	r7, r8
 801a33e:	d129      	bne.n	801a394 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x188>
 801a340:	2301      	movs	r3, #1
 801a342:	4632      	mov	r2, r6
 801a344:	e790      	b.n	801a268 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5c>
 801a346:	2800      	cmp	r0, #0
 801a348:	d180      	bne.n	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a34a:	2f20      	cmp	r7, #32
 801a34c:	d002      	beq.n	801a354 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x148>
 801a34e:	4547      	cmp	r7, r8
 801a350:	f47f af7c 	bne.w	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a354:	2301      	movs	r3, #1
 801a356:	4632      	mov	r2, r6
 801a358:	4620      	mov	r0, r4
 801a35a:	f7ff ff47 	bl	801a1ec <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a35e:	e775      	b.n	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a360:	2f20      	cmp	r7, #32
 801a362:	d002      	beq.n	801a36a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a364:	4547      	cmp	r7, r8
 801a366:	bf18      	it	ne
 801a368:	460e      	movne	r6, r1
 801a36a:	2001      	movs	r0, #1
 801a36c:	e7a2      	b.n	801a2b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa8>
 801a36e:	2300      	movs	r3, #0
 801a370:	4611      	mov	r1, r2
 801a372:	e7f1      	b.n	801a358 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a374:	4573      	cmp	r3, lr
 801a376:	f77f af69 	ble.w	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a37a:	8a63      	ldrh	r3, [r4, #18]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	f43f af65 	beq.w	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a382:	2301      	movs	r3, #1
 801a384:	77a3      	strb	r3, [r4, #30]
 801a386:	8ba2      	ldrh	r2, [r4, #28]
 801a388:	8b63      	ldrh	r3, [r4, #26]
 801a38a:	4413      	add	r3, r2
 801a38c:	8363      	strh	r3, [r4, #26]
 801a38e:	b007      	add	sp, #28
 801a390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a394:	8a63      	ldrh	r3, [r4, #18]
 801a396:	2b00      	cmp	r3, #0
 801a398:	f43f af58 	beq.w	801a24c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x40>
 801a39c:	e7f7      	b.n	801a38e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>

0801a39e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a39e:	b570      	push	{r4, r5, r6, lr}
 801a3a0:	4606      	mov	r6, r0
 801a3a2:	b08a      	sub	sp, #40	; 0x28
 801a3a4:	4615      	mov	r5, r2
 801a3a6:	b191      	cbz	r1, 801a3ce <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801a3a8:	9101      	str	r1, [sp, #4]
 801a3aa:	9300      	str	r3, [sp, #0]
 801a3ac:	4601      	mov	r1, r0
 801a3ae:	4613      	mov	r3, r2
 801a3b0:	a802      	add	r0, sp, #8
 801a3b2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a3b6:	f7ff fcfb 	bl	8019db0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a3ba:	2401      	movs	r4, #1
 801a3bc:	2100      	movs	r1, #0
 801a3be:	a802      	add	r0, sp, #8
 801a3c0:	f7ff ff24 	bl	801a20c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a3c4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a3c8:	b173      	cbz	r3, 801a3e8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a3ca:	3401      	adds	r4, #1
 801a3cc:	e7f6      	b.n	801a3bc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801a3ce:	4611      	mov	r1, r2
 801a3d0:	f002 f93a 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a3d4:	2401      	movs	r4, #1
 801a3d6:	280a      	cmp	r0, #10
 801a3d8:	4629      	mov	r1, r5
 801a3da:	4630      	mov	r0, r6
 801a3dc:	bf08      	it	eq
 801a3de:	3401      	addeq	r4, #1
 801a3e0:	f002 f932 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a3e4:	2800      	cmp	r0, #0
 801a3e6:	d1f6      	bne.n	801a3d6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801a3e8:	b2a0      	uxth	r0, r4
 801a3ea:	b00a      	add	sp, #40	; 0x28
 801a3ec:	bd70      	pop	{r4, r5, r6, pc}

0801a3ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a3ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3f2:	b0dd      	sub	sp, #372	; 0x174
 801a3f4:	468a      	mov	sl, r1
 801a3f6:	f8dd b198 	ldr.w	fp, [sp, #408]	; 0x198
 801a3fa:	900b      	str	r0, [sp, #44]	; 0x2c
 801a3fc:	461c      	mov	r4, r3
 801a3fe:	f1bb 0f00 	cmp.w	fp, #0
 801a402:	f000 80cb 	beq.w	801a59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	f000 80c7 	beq.w	801a59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a40e:	7ba3      	ldrb	r3, [r4, #14]
 801a410:	2b00      	cmp	r3, #0
 801a412:	f000 80c3 	beq.w	801a59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a416:	6810      	ldr	r0, [r2, #0]
 801a418:	6851      	ldr	r1, [r2, #4]
 801a41a:	f9ba 2006 	ldrsh.w	r2, [sl, #6]
 801a41e:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
 801a422:	af0e      	add	r7, sp, #56	; 0x38
 801a424:	463b      	mov	r3, r7
 801a426:	c303      	stmia	r3!, {r0, r1}
 801a428:	f9ba 1004 	ldrsh.w	r1, [sl, #4]
 801a42c:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
 801a430:	2300      	movs	r3, #0
 801a432:	79a2      	ldrb	r2, [r4, #6]
 801a434:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801a438:	a910      	add	r1, sp, #64	; 0x40
 801a43a:	4638      	mov	r0, r7
 801a43c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a440:	f7ff fd2d 	bl	8019e9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a444:	a910      	add	r1, sp, #64	; 0x40
 801a446:	4608      	mov	r0, r1
 801a448:	79a2      	ldrb	r2, [r4, #6]
 801a44a:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 801a44e:	f7ff fd26 	bl	8019e9e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a452:	4648      	mov	r0, r9
 801a454:	f001 ffb6 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
 801a458:	6820      	ldr	r0, [r4, #0]
 801a45a:	6803      	ldr	r3, [r0, #0]
 801a45c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a45e:	4798      	blx	r3
 801a460:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 801a462:	4603      	mov	r3, r0
 801a464:	4659      	mov	r1, fp
 801a466:	4648      	mov	r0, r9
 801a468:	f001 ffc9 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a46c:	a830      	add	r0, sp, #192	; 0xc0
 801a46e:	f001 ffa9 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
 801a472:	f894 8004 	ldrb.w	r8, [r4, #4]
 801a476:	f1b8 0f00 	cmp.w	r8, #0
 801a47a:	d009      	beq.n	801a490 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa2>
 801a47c:	6820      	ldr	r0, [r4, #0]
 801a47e:	6803      	ldr	r3, [r0, #0]
 801a480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a482:	4798      	blx	r3
 801a484:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 801a486:	4603      	mov	r3, r0
 801a488:	4659      	mov	r1, fp
 801a48a:	a830      	add	r0, sp, #192	; 0xc0
 801a48c:	f001 ffb7 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a490:	6820      	ldr	r0, [r4, #0]
 801a492:	6803      	ldr	r3, [r0, #0]
 801a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a496:	4798      	blx	r3
 801a498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a49c:	1946      	adds	r6, r0, r5
 801a49e:	2e00      	cmp	r6, #0
 801a4a0:	dd45      	ble.n	801a52e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x140>
 801a4a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801a4a6:	4298      	cmp	r0, r3
 801a4a8:	dc41      	bgt.n	801a52e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x140>
 801a4aa:	441d      	add	r5, r3
 801a4ac:	fb95 f5f6 	sdiv	r5, r5, r6
 801a4b0:	a846      	add	r0, sp, #280	; 0x118
 801a4b2:	f001 ff87 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
 801a4b6:	7c23      	ldrb	r3, [r4, #16]
 801a4b8:	b14b      	cbz	r3, 801a4ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe0>
 801a4ba:	6820      	ldr	r0, [r4, #0]
 801a4bc:	6803      	ldr	r3, [r0, #0]
 801a4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a4c0:	4798      	blx	r3
 801a4c2:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	4659      	mov	r1, fp
 801a4c8:	a846      	add	r0, sp, #280	; 0x118
 801a4ca:	f001 ff98 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801a4ce:	7c21      	ldrb	r1, [r4, #16]
 801a4d0:	9101      	str	r1, [sp, #4]
 801a4d2:	6821      	ldr	r1, [r4, #0]
 801a4d4:	7963      	ldrb	r3, [r4, #5]
 801a4d6:	9100      	str	r1, [sp, #0]
 801a4d8:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801a4dc:	a946      	add	r1, sp, #280	; 0x118
 801a4de:	a812      	add	r0, sp, #72	; 0x48
 801a4e0:	f7ff fc66 	bl	8019db0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a4e4:	7c23      	ldrb	r3, [r4, #16]
 801a4e6:	bb23      	cbnz	r3, 801a532 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a4e8:	fa1f fb86 	uxth.w	fp, r6
 801a4ec:	2d00      	cmp	r5, #0
 801a4ee:	dd58      	ble.n	801a5a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801a4f0:	7961      	ldrb	r1, [r4, #5]
 801a4f2:	4648      	mov	r0, r9
 801a4f4:	f002 f8a8 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	f1b8 0f00 	cmp.w	r8, #0
 801a4fe:	d005      	beq.n	801a50c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x11e>
 801a500:	9009      	str	r0, [sp, #36]	; 0x24
 801a502:	7961      	ldrb	r1, [r4, #5]
 801a504:	a830      	add	r0, sp, #192	; 0xc0
 801a506:	f002 f89f 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d045      	beq.n	801a59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a510:	2b0a      	cmp	r3, #10
 801a512:	d1eb      	bne.n	801a4ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xfe>
 801a514:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a518:	445b      	add	r3, fp
 801a51a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a51e:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801a522:	eba3 030b 	sub.w	r3, r3, fp
 801a526:	3d01      	subs	r5, #1
 801a528:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 801a52c:	e7de      	b.n	801a4ec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xfe>
 801a52e:	2500      	movs	r5, #0
 801a530:	e7be      	b.n	801a4b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc2>
 801a532:	0073      	lsls	r3, r6, #1
 801a534:	930a      	str	r3, [sp, #40]	; 0x28
 801a536:	b2b3      	uxth	r3, r6
 801a538:	9309      	str	r3, [sp, #36]	; 0x24
 801a53a:	2d00      	cmp	r5, #0
 801a53c:	dd31      	ble.n	801a5a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b4>
 801a53e:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 801a542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a544:	428b      	cmp	r3, r1
 801a546:	bfd4      	ite	le
 801a548:	2100      	movle	r1, #0
 801a54a:	2101      	movgt	r1, #1
 801a54c:	a812      	add	r0, sp, #72	; 0x48
 801a54e:	f7ff fe5d 	bl	801a20c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a552:	f8bd b05a 	ldrh.w	fp, [sp, #90]	; 0x5a
 801a556:	f1bb 0f00 	cmp.w	fp, #0
 801a55a:	d00f      	beq.n	801a57c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18e>
 801a55c:	7961      	ldrb	r1, [r4, #5]
 801a55e:	4648      	mov	r0, r9
 801a560:	f002 f872 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a564:	f1b8 0f00 	cmp.w	r8, #0
 801a568:	d003      	beq.n	801a572 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x184>
 801a56a:	7961      	ldrb	r1, [r4, #5]
 801a56c:	a830      	add	r0, sp, #192	; 0xc0
 801a56e:	f002 f86b 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a572:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a576:	fa1f fb83 	uxth.w	fp, r3
 801a57a:	e7ec      	b.n	801a556 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x168>
 801a57c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a582:	4413      	add	r3, r2
 801a584:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a588:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
 801a58c:	1a9b      	subs	r3, r3, r2
 801a58e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 801a592:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a596:	3d01      	subs	r5, #1
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d1ce      	bne.n	801a53a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 801a59c:	b05d      	add	sp, #372	; 0x174
 801a59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a2:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 801a5a6:	f10d 0536 	add.w	r5, sp, #54	; 0x36
 801a5aa:	7c23      	ldrb	r3, [r4, #16]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d05f      	beq.n	801a670 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x282>
 801a5b0:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 801a5b4:	458b      	cmp	fp, r1
 801a5b6:	bfd4      	ite	le
 801a5b8:	2100      	movle	r1, #0
 801a5ba:	2101      	movgt	r1, #1
 801a5bc:	a812      	add	r0, sp, #72	; 0x48
 801a5be:	f7ff fe25 	bl	801a20c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a5c2:	f1b8 0f00 	cmp.w	r8, #0
 801a5c6:	d04c      	beq.n	801a662 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801a5c8:	7c23      	ldrb	r3, [r4, #16]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d053      	beq.n	801a676 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x288>
 801a5ce:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 801a5d2:	7922      	ldrb	r2, [r4, #4]
 801a5d4:	2a01      	cmp	r2, #1
 801a5d6:	d13c      	bne.n	801a652 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 801a5d8:	f9bd 0044 	ldrsh.w	r0, [sp, #68]	; 0x44
 801a5dc:	1ac0      	subs	r0, r0, r3
 801a5de:	2302      	movs	r3, #2
 801a5e0:	fb90 f0f3 	sdiv	r0, r0, r3
 801a5e4:	b200      	sxth	r0, r0
 801a5e6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a5ea:	4418      	add	r0, r3
 801a5ec:	7c23      	ldrb	r3, [r4, #16]
 801a5ee:	8028      	strh	r0, [r5, #0]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d03a      	beq.n	801a66a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x27c>
 801a5f4:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
 801a5f8:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
 801a5fc:	9205      	str	r2, [sp, #20]
 801a5fe:	2200      	movs	r2, #0
 801a600:	9106      	str	r1, [sp, #24]
 801a602:	9203      	str	r2, [sp, #12]
 801a604:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801a608:	f8cd 9010 	str.w	r9, [sp, #16]
 801a60c:	9402      	str	r4, [sp, #8]
 801a60e:	e88d 00a0 	stmia.w	sp, {r5, r7}
 801a612:	4652      	mov	r2, sl
 801a614:	2100      	movs	r1, #0
 801a616:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a618:	f7ff fc92 	bl	8019f40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a61c:	2800      	cmp	r0, #0
 801a61e:	d1bd      	bne.n	801a59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a620:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a624:	b2b2      	uxth	r2, r6
 801a626:	4611      	mov	r1, r2
 801a628:	4413      	add	r3, r2
 801a62a:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
 801a62e:	1a52      	subs	r2, r2, r1
 801a630:	7c21      	ldrb	r1, [r4, #16]
 801a632:	b21b      	sxth	r3, r3
 801a634:	b212      	sxth	r2, r2
 801a636:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a63a:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
 801a63e:	b109      	cbz	r1, 801a644 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a640:	4296      	cmp	r6, r2
 801a642:	dcab      	bgt.n	801a59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a644:	887a      	ldrh	r2, [r7, #2]
 801a646:	88f9      	ldrh	r1, [r7, #6]
 801a648:	440a      	add	r2, r1
 801a64a:	b212      	sxth	r2, r2
 801a64c:	4293      	cmp	r3, r2
 801a64e:	ddac      	ble.n	801a5aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1bc>
 801a650:	e7a4      	b.n	801a59c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a652:	2a02      	cmp	r2, #2
 801a654:	d107      	bne.n	801a666 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>
 801a656:	7be2      	ldrb	r2, [r4, #15]
 801a658:	f8bd 0044 	ldrh.w	r0, [sp, #68]	; 0x44
 801a65c:	1a80      	subs	r0, r0, r2
 801a65e:	1ac0      	subs	r0, r0, r3
 801a660:	e7c0      	b.n	801a5e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f6>
 801a662:	7be0      	ldrb	r0, [r4, #15]
 801a664:	e7bf      	b.n	801a5e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 801a666:	2000      	movs	r0, #0
 801a668:	e7bd      	b.n	801a5e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f8>
 801a66a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a66e:	e7c3      	b.n	801a5f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x20a>
 801a670:	f1b8 0f00 	cmp.w	r8, #0
 801a674:	d0f5      	beq.n	801a662 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x274>
 801a676:	2300      	movs	r3, #0
 801a678:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a67c:	6821      	ldr	r1, [r4, #0]
 801a67e:	a830      	add	r0, sp, #192	; 0xc0
 801a680:	f7ff fbd6 	bl	8019e30 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a684:	b203      	sxth	r3, r0
 801a686:	e7a4      	b.n	801a5d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e4>

0801a688 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a688:	2b02      	cmp	r3, #2
 801a68a:	d00e      	beq.n	801a6aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801a68c:	2b03      	cmp	r3, #3
 801a68e:	d012      	beq.n	801a6b6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801a690:	2b01      	cmp	r3, #1
 801a692:	d003      	beq.n	801a69c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801a694:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a698:	1850      	adds	r0, r2, r1
 801a69a:	4770      	bx	lr
 801a69c:	8803      	ldrh	r3, [r0, #0]
 801a69e:	8880      	ldrh	r0, [r0, #4]
 801a6a0:	4418      	add	r0, r3
 801a6a2:	b200      	sxth	r0, r0
 801a6a4:	1a80      	subs	r0, r0, r2
 801a6a6:	3801      	subs	r0, #1
 801a6a8:	4770      	bx	lr
 801a6aa:	8803      	ldrh	r3, [r0, #0]
 801a6ac:	8880      	ldrh	r0, [r0, #4]
 801a6ae:	4418      	add	r0, r3
 801a6b0:	b200      	sxth	r0, r0
 801a6b2:	1a40      	subs	r0, r0, r1
 801a6b4:	e7f7      	b.n	801a6a6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a6b6:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a6ba:	4410      	add	r0, r2
 801a6bc:	4770      	bx	lr

0801a6be <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a6be:	2b02      	cmp	r3, #2
 801a6c0:	d008      	beq.n	801a6d4 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801a6c2:	2b03      	cmp	r3, #3
 801a6c4:	d00d      	beq.n	801a6e2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a6c6:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801a6ca:	2b01      	cmp	r3, #1
 801a6cc:	bf14      	ite	ne
 801a6ce:	1880      	addne	r0, r0, r2
 801a6d0:	1840      	addeq	r0, r0, r1
 801a6d2:	4770      	bx	lr
 801a6d4:	8843      	ldrh	r3, [r0, #2]
 801a6d6:	88c0      	ldrh	r0, [r0, #6]
 801a6d8:	4418      	add	r0, r3
 801a6da:	b200      	sxth	r0, r0
 801a6dc:	1a80      	subs	r0, r0, r2
 801a6de:	3801      	subs	r0, #1
 801a6e0:	4770      	bx	lr
 801a6e2:	8843      	ldrh	r3, [r0, #2]
 801a6e4:	88c0      	ldrh	r0, [r0, #6]
 801a6e6:	4418      	add	r0, r3
 801a6e8:	b200      	sxth	r0, r0
 801a6ea:	1a40      	subs	r0, r0, r1
 801a6ec:	e7f7      	b.n	801a6de <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801a6ee <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801a6ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6f0:	f8dd c014 	ldr.w	ip, [sp, #20]
 801a6f4:	9c06      	ldr	r4, [sp, #24]
 801a6f6:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801a6fa:	1e05      	subs	r5, r0, #0
 801a6fc:	bfba      	itte	lt
 801a6fe:	f04f 37ff 	movlt.w	r7, #4294967295
 801a702:	426d      	neglt	r5, r5
 801a704:	2701      	movge	r7, #1
 801a706:	f1bc 0f00 	cmp.w	ip, #0
 801a70a:	bfb8      	it	lt
 801a70c:	f1cc 0c00 	rsblt	ip, ip, #0
 801a710:	f04f 0601 	mov.w	r6, #1
 801a714:	fa4c f001 	asr.w	r0, ip, r1
 801a718:	fa06 f101 	lsl.w	r1, r6, r1
 801a71c:	f101 31ff 	add.w	r1, r1, #4294967295
 801a720:	ea01 010c 	and.w	r1, r1, ip
 801a724:	bfb8      	it	lt
 801a726:	427f      	neglt	r7, r7
 801a728:	434d      	muls	r5, r1
 801a72a:	2c00      	cmp	r4, #0
 801a72c:	f8de 1000 	ldr.w	r1, [lr]
 801a730:	bfb8      	it	lt
 801a732:	4264      	neglt	r4, r4
 801a734:	fb03 1300 	mla	r3, r3, r0, r1
 801a738:	fb95 f1f4 	sdiv	r1, r5, r4
 801a73c:	fb04 5511 	mls	r5, r4, r1, r5
 801a740:	441d      	add	r5, r3
 801a742:	fb95 f3f4 	sdiv	r3, r5, r4
 801a746:	fb04 5413 	mls	r4, r4, r3, r5
 801a74a:	4419      	add	r1, r3
 801a74c:	bfb8      	it	lt
 801a74e:	427f      	neglt	r7, r7
 801a750:	fb02 1000 	mla	r0, r2, r0, r1
 801a754:	f8ce 4000 	str.w	r4, [lr]
 801a758:	4378      	muls	r0, r7
 801a75a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a75c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a760:	4c24      	ldr	r4, [pc, #144]	; (801a7f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801a762:	6807      	ldr	r7, [r0, #0]
 801a764:	69a3      	ldr	r3, [r4, #24]
 801a766:	b086      	sub	sp, #24
 801a768:	4605      	mov	r5, r0
 801a76a:	b92b      	cbnz	r3, 801a778 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801a76c:	6840      	ldr	r0, [r0, #4]
 801a76e:	602f      	str	r7, [r5, #0]
 801a770:	6068      	str	r0, [r5, #4]
 801a772:	b006      	add	sp, #24
 801a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a778:	68a2      	ldr	r2, [r4, #8]
 801a77a:	6820      	ldr	r0, [r4, #0]
 801a77c:	ae06      	add	r6, sp, #24
 801a77e:	f04f 0802 	mov.w	r8, #2
 801a782:	fb93 f1f8 	sdiv	r1, r3, r8
 801a786:	440a      	add	r2, r1
 801a788:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a78c:	69e1      	ldr	r1, [r4, #28]
 801a78e:	9301      	str	r3, [sp, #4]
 801a790:	9700      	str	r7, [sp, #0]
 801a792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a794:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801a796:	9602      	str	r6, [sp, #8]
 801a798:	f7ff ffa9 	bl	801a6ee <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a79c:	69a3      	ldr	r3, [r4, #24]
 801a79e:	9301      	str	r3, [sp, #4]
 801a7a0:	686b      	ldr	r3, [r5, #4]
 801a7a2:	9300      	str	r3, [sp, #0]
 801a7a4:	4607      	mov	r7, r0
 801a7a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a7a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801a7aa:	6a21      	ldr	r1, [r4, #32]
 801a7ac:	9602      	str	r6, [sp, #8]
 801a7ae:	6860      	ldr	r0, [r4, #4]
 801a7b0:	f7ff ff9d 	bl	801a6ee <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a7b4:	6963      	ldr	r3, [r4, #20]
 801a7b6:	69a2      	ldr	r2, [r4, #24]
 801a7b8:	fb92 f8f8 	sdiv	r8, r2, r8
 801a7bc:	4443      	add	r3, r8
 801a7be:	9305      	str	r3, [sp, #20]
 801a7c0:	682b      	ldr	r3, [r5, #0]
 801a7c2:	9201      	str	r2, [sp, #4]
 801a7c4:	9300      	str	r3, [sp, #0]
 801a7c6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801a7c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a7ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a7cc:	9602      	str	r6, [sp, #8]
 801a7ce:	4407      	add	r7, r0
 801a7d0:	68e0      	ldr	r0, [r4, #12]
 801a7d2:	f7ff ff8c 	bl	801a6ee <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a7d6:	69a3      	ldr	r3, [r4, #24]
 801a7d8:	9301      	str	r3, [sp, #4]
 801a7da:	686b      	ldr	r3, [r5, #4]
 801a7dc:	9300      	str	r3, [sp, #0]
 801a7de:	4680      	mov	r8, r0
 801a7e0:	9602      	str	r6, [sp, #8]
 801a7e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801a7e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801a7e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801a7e8:	6920      	ldr	r0, [r4, #16]
 801a7ea:	f7ff ff80 	bl	801a6ee <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801a7ee:	4440      	add	r0, r8
 801a7f0:	e7bd      	b.n	801a76e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801a7f2:	bf00      	nop
 801a7f4:	2001a8b4 	.word	0x2001a8b4

0801a7f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a7f8:	b510      	push	{r4, lr}
 801a7fa:	4b07      	ldr	r3, [pc, #28]	; (801a818 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a7fc:	781b      	ldrb	r3, [r3, #0]
 801a7fe:	2b01      	cmp	r3, #1
 801a800:	d108      	bne.n	801a814 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a802:	4b06      	ldr	r3, [pc, #24]	; (801a81c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a804:	880c      	ldrh	r4, [r1, #0]
 801a806:	881b      	ldrh	r3, [r3, #0]
 801a808:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a80c:	3b01      	subs	r3, #1
 801a80e:	1b1b      	subs	r3, r3, r4
 801a810:	8003      	strh	r3, [r0, #0]
 801a812:	800a      	strh	r2, [r1, #0]
 801a814:	bd10      	pop	{r4, pc}
 801a816:	bf00      	nop
 801a818:	2001a8a4 	.word	0x2001a8a4
 801a81c:	2001a8a8 	.word	0x2001a8a8

0801a820 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a820:	b510      	push	{r4, lr}
 801a822:	4b07      	ldr	r3, [pc, #28]	; (801a840 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a824:	781b      	ldrb	r3, [r3, #0]
 801a826:	2b01      	cmp	r3, #1
 801a828:	d108      	bne.n	801a83c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a82a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a82e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a832:	8003      	strh	r3, [r0, #0]
 801a834:	8893      	ldrh	r3, [r2, #4]
 801a836:	3b01      	subs	r3, #1
 801a838:	1b1b      	subs	r3, r3, r4
 801a83a:	800b      	strh	r3, [r1, #0]
 801a83c:	bd10      	pop	{r4, pc}
 801a83e:	bf00      	nop
 801a840:	2001a8a4 	.word	0x2001a8a4

0801a844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a844:	b513      	push	{r0, r1, r4, lr}
 801a846:	4b0a      	ldr	r3, [pc, #40]	; (801a870 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801a848:	f9b3 4000 	ldrsh.w	r4, [r3]
 801a84c:	4b09      	ldr	r3, [pc, #36]	; (801a874 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801a84e:	f8ad 4004 	strh.w	r4, [sp, #4]
 801a852:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a856:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a85a:	2300      	movs	r3, #0
 801a85c:	466a      	mov	r2, sp
 801a85e:	f8ad 3000 	strh.w	r3, [sp]
 801a862:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a866:	f7ff ffdb 	bl	801a820 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a86a:	b002      	add	sp, #8
 801a86c:	bd10      	pop	{r4, pc}
 801a86e:	bf00      	nop
 801a870:	2001a8a0 	.word	0x2001a8a0
 801a874:	2001a8a2 	.word	0x2001a8a2

0801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a878:	b510      	push	{r4, lr}
 801a87a:	4b0a      	ldr	r3, [pc, #40]	; (801a8a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a87c:	781b      	ldrb	r3, [r3, #0]
 801a87e:	2b01      	cmp	r3, #1
 801a880:	460a      	mov	r2, r1
 801a882:	d10d      	bne.n	801a8a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a884:	8881      	ldrh	r1, [r0, #4]
 801a886:	8803      	ldrh	r3, [r0, #0]
 801a888:	440b      	add	r3, r1
 801a88a:	4601      	mov	r1, r0
 801a88c:	3b01      	subs	r3, #1
 801a88e:	f821 3b02 	strh.w	r3, [r1], #2
 801a892:	f7ff ffc5 	bl	801a820 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a896:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a89a:	88c2      	ldrh	r2, [r0, #6]
 801a89c:	8082      	strh	r2, [r0, #4]
 801a89e:	80c3      	strh	r3, [r0, #6]
 801a8a0:	bd10      	pop	{r4, pc}
 801a8a2:	bf00      	nop
 801a8a4:	2001a8a4 	.word	0x2001a8a4

0801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a8a8:	b507      	push	{r0, r1, r2, lr}
 801a8aa:	4b0a      	ldr	r3, [pc, #40]	; (801a8d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801a8ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a8b0:	4b09      	ldr	r3, [pc, #36]	; (801a8d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801a8b2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a8b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a8ba:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a8be:	2300      	movs	r3, #0
 801a8c0:	4669      	mov	r1, sp
 801a8c2:	f8ad 3000 	strh.w	r3, [sp]
 801a8c6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a8ca:	f7ff ffd5 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a8ce:	b003      	add	sp, #12
 801a8d0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a8d4:	2001a8a0 	.word	0x2001a8a0
 801a8d8:	2001a8a2 	.word	0x2001a8a2

0801a8dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a8dc:	4b03      	ldr	r3, [pc, #12]	; (801a8ec <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a8de:	6818      	ldr	r0, [r3, #0]
 801a8e0:	b110      	cbz	r0, 801a8e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a8e2:	6803      	ldr	r3, [r0, #0]
 801a8e4:	699b      	ldr	r3, [r3, #24]
 801a8e6:	4718      	bx	r3
 801a8e8:	4770      	bx	lr
 801a8ea:	bf00      	nop
 801a8ec:	2001a904 	.word	0x2001a904

0801a8f0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a8f0:	4770      	bx	lr
	...

0801a8f4 <_ZN8touchgfx11Application4drawEv>:
 801a8f4:	b507      	push	{r0, r1, r2, lr}
 801a8f6:	4b0b      	ldr	r3, [pc, #44]	; (801a924 <_ZN8touchgfx11Application4drawEv+0x30>)
 801a8f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a8fc:	4b0a      	ldr	r3, [pc, #40]	; (801a928 <_ZN8touchgfx11Application4drawEv+0x34>)
 801a8fe:	f8ad 1004 	strh.w	r1, [sp, #4]
 801a902:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a906:	f8ad 2006 	strh.w	r2, [sp, #6]
 801a90a:	2300      	movs	r3, #0
 801a90c:	f8ad 3000 	strh.w	r3, [sp]
 801a910:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a914:	6803      	ldr	r3, [r0, #0]
 801a916:	4669      	mov	r1, sp
 801a918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a91a:	4798      	blx	r3
 801a91c:	b003      	add	sp, #12
 801a91e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a922:	bf00      	nop
 801a924:	2001a8a0 	.word	0x2001a8a0
 801a928:	2001a8a2 	.word	0x2001a8a2

0801a92c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a92c:	4b03      	ldr	r3, [pc, #12]	; (801a93c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a92e:	6818      	ldr	r0, [r3, #0]
 801a930:	b110      	cbz	r0, 801a938 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a932:	6803      	ldr	r3, [r0, #0]
 801a934:	69db      	ldr	r3, [r3, #28]
 801a936:	4718      	bx	r3
 801a938:	4770      	bx	lr
 801a93a:	bf00      	nop
 801a93c:	2001a904 	.word	0x2001a904

0801a940 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a940:	4b03      	ldr	r3, [pc, #12]	; (801a950 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a942:	6818      	ldr	r0, [r3, #0]
 801a944:	b110      	cbz	r0, 801a94c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a946:	6803      	ldr	r3, [r0, #0]
 801a948:	6a1b      	ldr	r3, [r3, #32]
 801a94a:	4718      	bx	r3
 801a94c:	4770      	bx	lr
 801a94e:	bf00      	nop
 801a950:	2001a904 	.word	0x2001a904

0801a954 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a954:	4b03      	ldr	r3, [pc, #12]	; (801a964 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a956:	6818      	ldr	r0, [r3, #0]
 801a958:	b110      	cbz	r0, 801a960 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a95a:	6803      	ldr	r3, [r0, #0]
 801a95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a95e:	4718      	bx	r3
 801a960:	4770      	bx	lr
 801a962:	bf00      	nop
 801a964:	2001a904 	.word	0x2001a904

0801a968 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a96c:	4d3b      	ldr	r5, [pc, #236]	; (801aa5c <_ZN8touchgfx11Application15handleTickEventEv+0xf4>)
 801a96e:	4604      	mov	r4, r0
 801a970:	6828      	ldr	r0, [r5, #0]
 801a972:	2800      	cmp	r0, #0
 801a974:	d046      	beq.n	801aa04 <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 801a976:	7a03      	ldrb	r3, [r0, #8]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d143      	bne.n	801aa04 <_ZN8touchgfx11Application15handleTickEventEv+0x9c>
 801a97c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801a980:	6803      	ldr	r3, [r0, #0]
 801a982:	689b      	ldr	r3, [r3, #8]
 801a984:	e03b      	b.n	801a9fe <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801a986:	3b01      	subs	r3, #1
 801a988:	f04f 0c00 	mov.w	ip, #0
 801a98c:	1c5a      	adds	r2, r3, #1
 801a98e:	d031      	beq.n	801a9f4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801a990:	18e2      	adds	r2, r4, r3
 801a992:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801a996:	bb59      	cbnz	r1, 801a9f0 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801a998:	b298      	uxth	r0, r3
 801a99a:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801a99e:	1d25      	adds	r5, r4, #4
 801a9a0:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801a9a4:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801a9a8:	428a      	cmp	r2, r1
 801a9aa:	dd14      	ble.n	801a9d6 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801a9ac:	682e      	ldr	r6, [r5, #0]
 801a9ae:	45b0      	cmp	r8, r6
 801a9b0:	d106      	bne.n	801a9c0 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801a9b2:	46ae      	mov	lr, r5
 801a9b4:	460e      	mov	r6, r1
 801a9b6:	2e1e      	cmp	r6, #30
 801a9b8:	dd05      	ble.n	801a9c6 <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801a9ba:	3a01      	subs	r2, #1
 801a9bc:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801a9c0:	3101      	adds	r1, #1
 801a9c2:	3504      	adds	r5, #4
 801a9c4:	e7ee      	b.n	801a9a4 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801a9c6:	3601      	adds	r6, #1
 801a9c8:	f8de 7004 	ldr.w	r7, [lr, #4]
 801a9cc:	f84e 7b04 	str.w	r7, [lr], #4
 801a9d0:	42b2      	cmp	r2, r6
 801a9d2:	dcf0      	bgt.n	801a9b6 <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801a9d4:	e7f1      	b.n	801a9ba <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801a9d6:	4290      	cmp	r0, r2
 801a9d8:	da07      	bge.n	801a9ea <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801a9da:	1821      	adds	r1, r4, r0
 801a9dc:	3001      	adds	r0, #1
 801a9de:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801a9e2:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801a9e6:	b280      	uxth	r0, r0
 801a9e8:	e7f5      	b.n	801a9d6 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801a9ea:	4422      	add	r2, r4
 801a9ec:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801a9f0:	3b01      	subs	r3, #1
 801a9f2:	e7cb      	b.n	801a98c <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801a9f4:	4b1a      	ldr	r3, [pc, #104]	; (801aa60 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 801a9f6:	6818      	ldr	r0, [r3, #0]
 801a9f8:	b368      	cbz	r0, 801aa56 <_ZN8touchgfx11Application15handleTickEventEv+0xee>
 801a9fa:	6803      	ldr	r3, [r0, #0]
 801a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a9fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa02:	4718      	bx	r3
 801aa04:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801aa08:	b913      	cbnz	r3, 801aa10 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 801aa0a:	b108      	cbz	r0, 801aa10 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 801aa0c:	7a03      	ldrb	r3, [r0, #8]
 801aa0e:	b9a3      	cbnz	r3, 801aa3a <_ZN8touchgfx11Application15handleTickEventEv+0xd2>
 801aa10:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801aa14:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801aa18:	2600      	movs	r6, #0
 801aa1a:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801aa1e:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801aa22:	429e      	cmp	r6, r3
 801aa24:	daaf      	bge.n	801a986 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801aa26:	f817 3b01 	ldrb.w	r3, [r7], #1
 801aa2a:	b123      	cbz	r3, 801aa36 <_ZN8touchgfx11Application15handleTickEventEv+0xce>
 801aa2c:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801aa30:	6803      	ldr	r3, [r0, #0]
 801aa32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa34:	4798      	blx	r3
 801aa36:	3601      	adds	r6, #1
 801aa38:	e7f1      	b.n	801aa1e <_ZN8touchgfx11Application15handleTickEventEv+0xb6>
 801aa3a:	4b09      	ldr	r3, [pc, #36]	; (801aa60 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>)
 801aa3c:	6818      	ldr	r0, [r3, #0]
 801aa3e:	b110      	cbz	r0, 801aa46 <_ZN8touchgfx11Application15handleTickEventEv+0xde>
 801aa40:	6803      	ldr	r3, [r0, #0]
 801aa42:	691b      	ldr	r3, [r3, #16]
 801aa44:	4798      	blx	r3
 801aa46:	6828      	ldr	r0, [r5, #0]
 801aa48:	6803      	ldr	r3, [r0, #0]
 801aa4a:	68db      	ldr	r3, [r3, #12]
 801aa4c:	4798      	blx	r3
 801aa4e:	2301      	movs	r3, #1
 801aa50:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801aa54:	e7dc      	b.n	801aa10 <_ZN8touchgfx11Application15handleTickEventEv+0xa8>
 801aa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa5a:	bf00      	nop
 801aa5c:	2001a908 	.word	0x2001a908
 801aa60:	2001a904 	.word	0x2001a904

0801aa64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801aa64:	b570      	push	{r4, r5, r6, lr}
 801aa66:	4606      	mov	r6, r0
 801aa68:	460c      	mov	r4, r1
 801aa6a:	b929      	cbnz	r1, 801aa78 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801aa6c:	4b0c      	ldr	r3, [pc, #48]	; (801aaa0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801aa6e:	4a0d      	ldr	r2, [pc, #52]	; (801aaa4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801aa70:	480d      	ldr	r0, [pc, #52]	; (801aaa8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801aa72:	2163      	movs	r1, #99	; 0x63
 801aa74:	f005 ffc2 	bl	80209fc <__assert_func>
 801aa78:	4d0c      	ldr	r5, [pc, #48]	; (801aaac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801aa80:	6828      	ldr	r0, [r5, #0]
 801aa82:	b110      	cbz	r0, 801aa8a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801aa84:	6803      	ldr	r3, [r0, #0]
 801aa86:	695b      	ldr	r3, [r3, #20]
 801aa88:	4798      	blx	r3
 801aa8a:	602c      	str	r4, [r5, #0]
 801aa8c:	6823      	ldr	r3, [r4, #0]
 801aa8e:	4620      	mov	r0, r4
 801aa90:	68db      	ldr	r3, [r3, #12]
 801aa92:	4798      	blx	r3
 801aa94:	6833      	ldr	r3, [r6, #0]
 801aa96:	4630      	mov	r0, r6
 801aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa9e:	4718      	bx	r3
 801aaa0:	08024eca 	.word	0x08024eca
 801aaa4:	08024fbc 	.word	0x08024fbc
 801aaa8:	08024ed4 	.word	0x08024ed4
 801aaac:	2001a904 	.word	0x2001a904

0801aab0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801aab0:	b570      	push	{r4, r5, r6, lr}
 801aab2:	f9b1 4000 	ldrsh.w	r4, [r1]
 801aab6:	f9b0 5000 	ldrsh.w	r5, [r0]
 801aaba:	42ac      	cmp	r4, r5
 801aabc:	db18      	blt.n	801aaf0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801aabe:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801aac2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801aac6:	429a      	cmp	r2, r3
 801aac8:	db12      	blt.n	801aaf0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801aaca:	8886      	ldrh	r6, [r0, #4]
 801aacc:	4435      	add	r5, r6
 801aace:	888e      	ldrh	r6, [r1, #4]
 801aad0:	4434      	add	r4, r6
 801aad2:	b22d      	sxth	r5, r5
 801aad4:	b224      	sxth	r4, r4
 801aad6:	42a5      	cmp	r5, r4
 801aad8:	db0a      	blt.n	801aaf0 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801aada:	88c0      	ldrh	r0, [r0, #6]
 801aadc:	4418      	add	r0, r3
 801aade:	88cb      	ldrh	r3, [r1, #6]
 801aae0:	441a      	add	r2, r3
 801aae2:	b200      	sxth	r0, r0
 801aae4:	b212      	sxth	r2, r2
 801aae6:	4290      	cmp	r0, r2
 801aae8:	bfb4      	ite	lt
 801aaea:	2000      	movlt	r0, #0
 801aaec:	2001      	movge	r0, #1
 801aaee:	bd70      	pop	{r4, r5, r6, pc}
 801aaf0:	2000      	movs	r0, #0
 801aaf2:	bd70      	pop	{r4, r5, r6, pc}

0801aaf4 <_ZN8touchgfx11Application11getInstanceEv>:
 801aaf4:	4b01      	ldr	r3, [pc, #4]	; (801aafc <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801aaf6:	6818      	ldr	r0, [r3, #0]
 801aaf8:	4770      	bx	lr
 801aafa:	bf00      	nop
 801aafc:	2001a90c 	.word	0x2001a90c

0801ab00 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE>:
 801ab00:	b538      	push	{r3, r4, r5, lr}
 801ab02:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 801ab06:	2400      	movs	r4, #0
 801ab08:	b2a2      	uxth	r2, r4
 801ab0a:	429a      	cmp	r2, r3
 801ab0c:	da0e      	bge.n	801ab2c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x2c>
 801ab0e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 801ab12:	3401      	adds	r4, #1
 801ab14:	686d      	ldr	r5, [r5, #4]
 801ab16:	428d      	cmp	r5, r1
 801ab18:	d1f6      	bne.n	801ab08 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x8>
 801ab1a:	4410      	add	r0, r2
 801ab1c:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
 801ab20:	2bff      	cmp	r3, #255	; 0xff
 801ab22:	d016      	beq.n	801ab52 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x52>
 801ab24:	3301      	adds	r3, #1
 801ab26:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
 801ab2a:	bd38      	pop	{r3, r4, r5, pc}
 801ab2c:	2b1f      	cmp	r3, #31
 801ab2e:	dd06      	ble.n	801ab3e <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x3e>
 801ab30:	4b08      	ldr	r3, [pc, #32]	; (801ab54 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x54>)
 801ab32:	4a09      	ldr	r2, [pc, #36]	; (801ab58 <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x58>)
 801ab34:	4809      	ldr	r0, [pc, #36]	; (801ab5c <_ZN8touchgfx11Application19registerTimerWidgetEPNS_8DrawableE+0x5c>)
 801ab36:	f240 1121 	movw	r1, #289	; 0x121
 801ab3a:	f005 ff5f 	bl	80209fc <__assert_func>
 801ab3e:	18c2      	adds	r2, r0, r3
 801ab40:	2401      	movs	r4, #1
 801ab42:	f882 4088 	strb.w	r4, [r2, #136]	; 0x88
 801ab46:	191a      	adds	r2, r3, r4
 801ab48:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
 801ab4c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801ab50:	6041      	str	r1, [r0, #4]
 801ab52:	bd38      	pop	{r3, r4, r5, pc}
 801ab54:	08024efe 	.word	0x08024efe
 801ab58:	08025000 	.word	0x08025000
 801ab5c:	08024ed4 	.word	0x08024ed4

0801ab60 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE>:
 801ab60:	b530      	push	{r4, r5, lr}
 801ab62:	f8b0 5084 	ldrh.w	r5, [r0, #132]	; 0x84
 801ab66:	2400      	movs	r4, #0
 801ab68:	b2a3      	uxth	r3, r4
 801ab6a:	42ab      	cmp	r3, r5
 801ab6c:	da0e      	bge.n	801ab8c <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x2c>
 801ab6e:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 801ab72:	6852      	ldr	r2, [r2, #4]
 801ab74:	428a      	cmp	r2, r1
 801ab76:	d107      	bne.n	801ab88 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801ab78:	4403      	add	r3, r0
 801ab7a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ab7e:	b11a      	cbz	r2, 801ab88 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x28>
 801ab80:	3a01      	subs	r2, #1
 801ab82:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 801ab86:	bd30      	pop	{r4, r5, pc}
 801ab88:	3401      	adds	r4, #1
 801ab8a:	e7ed      	b.n	801ab68 <_ZN8touchgfx11Application21unregisterTimerWidgetEPKNS_8DrawableE+0x8>
 801ab8c:	bd30      	pop	{r4, r5, pc}

0801ab8e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801ab8e:	2300      	movs	r3, #0
 801ab90:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ab94:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801ab98:	30a8      	adds	r0, #168	; 0xa8
 801ab9a:	f802 3b01 	strb.w	r3, [r2], #1
 801ab9e:	4282      	cmp	r2, r0
 801aba0:	d1fb      	bne.n	801ab9a <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801aba2:	4770      	bx	lr

0801aba4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801aba4:	4603      	mov	r3, r0
 801aba6:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801abaa:	2200      	movs	r2, #0
 801abac:	801a      	strh	r2, [r3, #0]
 801abae:	805a      	strh	r2, [r3, #2]
 801abb0:	809a      	strh	r2, [r3, #4]
 801abb2:	80da      	strh	r2, [r3, #6]
 801abb4:	3308      	adds	r3, #8
 801abb6:	428b      	cmp	r3, r1
 801abb8:	d1f8      	bne.n	801abac <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801abba:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801abbe:	4770      	bx	lr

0801abc0 <_ZN8touchgfx11ApplicationC1Ev>:
 801abc0:	b570      	push	{r4, r5, r6, lr}
 801abc2:	4b16      	ldr	r3, [pc, #88]	; (801ac1c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801abc4:	6003      	str	r3, [r0, #0]
 801abc6:	2500      	movs	r5, #0
 801abc8:	4604      	mov	r4, r0
 801abca:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801abce:	30a8      	adds	r0, #168	; 0xa8
 801abd0:	f7ff ffe8 	bl	801aba4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801abd4:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801abd8:	f7ff ffe4 	bl	801aba4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801abdc:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801abe0:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801abe4:	490e      	ldr	r1, [pc, #56]	; (801ac20 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801abe6:	480f      	ldr	r0, [pc, #60]	; (801ac24 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801abe8:	4e0f      	ldr	r6, [pc, #60]	; (801ac28 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801abea:	f005 fdeb 	bl	80207c4 <CRC_Lock>
 801abee:	4b0f      	ldr	r3, [pc, #60]	; (801ac2c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801abf0:	b158      	cbz	r0, 801ac0a <_ZN8touchgfx11ApplicationC1Ev+0x4a>
 801abf2:	801d      	strh	r5, [r3, #0]
 801abf4:	4a0e      	ldr	r2, [pc, #56]	; (801ac30 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801abf6:	2300      	movs	r3, #0
 801abf8:	6013      	str	r3, [r2, #0]
 801abfa:	4a0e      	ldr	r2, [pc, #56]	; (801ac34 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801abfc:	6033      	str	r3, [r6, #0]
 801abfe:	4620      	mov	r0, r4
 801ac00:	6013      	str	r3, [r2, #0]
 801ac02:	f7ff ffc4 	bl	801ab8e <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801ac06:	4620      	mov	r0, r4
 801ac08:	bd70      	pop	{r4, r5, r6, pc}
 801ac0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801ac0e:	2002      	movs	r0, #2
 801ac10:	801a      	strh	r2, [r3, #0]
 801ac12:	6030      	str	r0, [r6, #0]
 801ac14:	f000 ff96 	bl	801bb44 <_ZN8touchgfx6Screen4drawEv>
 801ac18:	e7ec      	b.n	801abf4 <_ZN8touchgfx11ApplicationC1Ev+0x34>
 801ac1a:	bf00      	nop
 801ac1c:	08024f88 	.word	0x08024f88
 801ac20:	b5e8b5cd 	.word	0xb5e8b5cd
 801ac24:	f407a5c2 	.word	0xf407a5c2
 801ac28:	2001a904 	.word	0x2001a904
 801ac2c:	20000062 	.word	0x20000062
 801ac30:	2001a90c 	.word	0x2001a90c
 801ac34:	2001a908 	.word	0x2001a908

0801ac38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ac38:	2300      	movs	r3, #0
 801ac3a:	8003      	strh	r3, [r0, #0]
 801ac3c:	8043      	strh	r3, [r0, #2]
 801ac3e:	8083      	strh	r3, [r0, #4]
 801ac40:	80c3      	strh	r3, [r0, #6]
 801ac42:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801ac46:	429a      	cmp	r2, r3
 801ac48:	b530      	push	{r4, r5, lr}
 801ac4a:	da12      	bge.n	801ac72 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ac4c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801ac50:	3b01      	subs	r3, #1
 801ac52:	6825      	ldr	r5, [r4, #0]
 801ac54:	6005      	str	r5, [r0, #0]
 801ac56:	b29b      	uxth	r3, r3
 801ac58:	6865      	ldr	r5, [r4, #4]
 801ac5a:	6045      	str	r5, [r0, #4]
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801ac62:	da06      	bge.n	801ac72 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ac64:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801ac68:	681d      	ldr	r5, [r3, #0]
 801ac6a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801ac6e:	685d      	ldr	r5, [r3, #4]
 801ac70:	6065      	str	r5, [r4, #4]
 801ac72:	bd30      	pop	{r4, r5, pc}

0801ac74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ac74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ac76:	e88d 0006 	stmia.w	sp, {r1, r2}
 801ac7a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ac7e:	2a07      	cmp	r2, #7
 801ac80:	4604      	mov	r4, r0
 801ac82:	466b      	mov	r3, sp
 801ac84:	dd06      	ble.n	801ac94 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ac86:	4b09      	ldr	r3, [pc, #36]	; (801acac <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ac88:	4a09      	ldr	r2, [pc, #36]	; (801acb0 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ac8a:	480a      	ldr	r0, [pc, #40]	; (801acb4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ac8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 801ac90:	f005 feb4 	bl	80209fc <__assert_func>
 801ac94:	1c51      	adds	r1, r2, #1
 801ac96:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ac9a:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801ac9e:	cb03      	ldmia	r3!, {r0, r1}
 801aca0:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801aca4:	6069      	str	r1, [r5, #4]
 801aca6:	b003      	add	sp, #12
 801aca8:	bd30      	pop	{r4, r5, pc}
 801acaa:	bf00      	nop
 801acac:	08024f26 	.word	0x08024f26
 801acb0:	08025045 	.word	0x08025045
 801acb4:	08024f55 	.word	0x08024f55

0801acb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801acb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801acbc:	b089      	sub	sp, #36	; 0x24
 801acbe:	4606      	mov	r6, r0
 801acc0:	4668      	mov	r0, sp
 801acc2:	466c      	mov	r4, sp
 801acc4:	e88d 0006 	stmia.w	sp, {r1, r2}
 801acc8:	f7ee ffa2 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 801accc:	bbb0      	cbnz	r0, 801ad3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801acce:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801acd2:	b1fd      	cbz	r5, 801ad14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801acd4:	3d01      	subs	r5, #1
 801acd6:	af04      	add	r7, sp, #16
 801acd8:	f04f 090a 	mov.w	r9, #10
 801acdc:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801ace0:	ab02      	add	r3, sp, #8
 801ace2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ace6:	6851      	ldr	r1, [r2, #4]
 801ace8:	c303      	stmia	r3!, {r0, r1}
 801acea:	4621      	mov	r1, r4
 801acec:	a802      	add	r0, sp, #8
 801acee:	fa1f f885 	uxth.w	r8, r5
 801acf2:	f7ff fedd 	bl	801aab0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801acf6:	bb08      	cbnz	r0, 801ad3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801acf8:	a902      	add	r1, sp, #8
 801acfa:	4620      	mov	r0, r4
 801acfc:	f7ff fed8 	bl	801aab0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ad00:	b1f8      	cbz	r0, 801ad42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801ad02:	4642      	mov	r2, r8
 801ad04:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ad08:	a806      	add	r0, sp, #24
 801ad0a:	f7ff ff95 	bl	801ac38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad0e:	f115 35ff 	adds.w	r5, r5, #4294967295
 801ad12:	d2e3      	bcs.n	801acdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801ad14:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801ad18:	2b08      	cmp	r3, #8
 801ad1a:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801ad1e:	d108      	bne.n	801ad32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801ad20:	4629      	mov	r1, r5
 801ad22:	a806      	add	r0, sp, #24
 801ad24:	2207      	movs	r2, #7
 801ad26:	f7ff ff87 	bl	801ac38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad2a:	a906      	add	r1, sp, #24
 801ad2c:	4620      	mov	r0, r4
 801ad2e:	f7ee fee3 	bl	8009af8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ad32:	e894 0006 	ldmia.w	r4, {r1, r2}
 801ad36:	4628      	mov	r0, r5
 801ad38:	f7ff ff9c 	bl	801ac74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ad3c:	b009      	add	sp, #36	; 0x24
 801ad3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ad42:	4621      	mov	r1, r4
 801ad44:	a802      	add	r0, sp, #8
 801ad46:	f7ee fe14 	bl	8009972 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ad4a:	b150      	cbz	r0, 801ad62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801ad4c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ad50:	a806      	add	r0, sp, #24
 801ad52:	4642      	mov	r2, r8
 801ad54:	f7ff ff70 	bl	801ac38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad58:	a902      	add	r1, sp, #8
 801ad5a:	4620      	mov	r0, r4
 801ad5c:	f7ee fecc 	bl	8009af8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ad60:	e7d5      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ad62:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ad66:	e887 0003 	stmia.w	r7, {r0, r1}
 801ad6a:	a902      	add	r1, sp, #8
 801ad6c:	4638      	mov	r0, r7
 801ad6e:	f7ee fec3 	bl	8009af8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801ad72:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801ad76:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801ad7a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801ad7e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801ad82:	fb13 f302 	smulbb	r3, r3, r2
 801ad86:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801ad8a:	fb11 f102 	smulbb	r1, r1, r2
 801ad8e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ad92:	fb12 1100 	smlabb	r1, r2, r0, r1
 801ad96:	220b      	movs	r2, #11
 801ad98:	fb09 f303 	mul.w	r3, r9, r3
 801ad9c:	434a      	muls	r2, r1
 801ad9e:	4293      	cmp	r3, r2
 801ada0:	dab5      	bge.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ada2:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ada6:	a806      	add	r0, sp, #24
 801ada8:	4642      	mov	r2, r8
 801adaa:	f7ff ff45 	bl	801ac38 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801adae:	e897 0003 	ldmia.w	r7, {r0, r1}
 801adb2:	e884 0003 	stmia.w	r4, {r0, r1}
 801adb6:	e7aa      	b.n	801ad0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801adb8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801adb8:	b530      	push	{r4, r5, lr}
 801adba:	4b1b      	ldr	r3, [pc, #108]	; (801ae28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801adbc:	b085      	sub	sp, #20
 801adbe:	460c      	mov	r4, r1
 801adc0:	f9b3 1000 	ldrsh.w	r1, [r3]
 801adc4:	4b19      	ldr	r3, [pc, #100]	; (801ae2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801adc6:	f8ad 1004 	strh.w	r1, [sp, #4]
 801adca:	f9b3 2000 	ldrsh.w	r2, [r3]
 801adce:	6861      	ldr	r1, [r4, #4]
 801add0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801add4:	2300      	movs	r3, #0
 801add6:	4605      	mov	r5, r0
 801add8:	6820      	ldr	r0, [r4, #0]
 801adda:	f8ad 3000 	strh.w	r3, [sp]
 801adde:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ade2:	ab02      	add	r3, sp, #8
 801ade4:	c303      	stmia	r3!, {r0, r1}
 801ade6:	4669      	mov	r1, sp
 801ade8:	a802      	add	r0, sp, #8
 801adea:	f7ee fe09 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801adee:	ab02      	add	r3, sp, #8
 801adf0:	cb03      	ldmia	r3!, {r0, r1}
 801adf2:	4b0f      	ldr	r3, [pc, #60]	; (801ae30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801adf4:	6020      	str	r0, [r4, #0]
 801adf6:	6818      	ldr	r0, [r3, #0]
 801adf8:	6061      	str	r1, [r4, #4]
 801adfa:	b138      	cbz	r0, 801ae0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801adfc:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801ae00:	b133      	cbz	r3, 801ae10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801ae02:	6821      	ldr	r1, [r4, #0]
 801ae04:	6862      	ldr	r2, [r4, #4]
 801ae06:	4628      	mov	r0, r5
 801ae08:	f7ff ff56 	bl	801acb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ae0c:	b005      	add	sp, #20
 801ae0e:	bd30      	pop	{r4, r5, pc}
 801ae10:	6803      	ldr	r3, [r0, #0]
 801ae12:	4621      	mov	r1, r4
 801ae14:	689b      	ldr	r3, [r3, #8]
 801ae16:	4798      	blx	r3
 801ae18:	4b06      	ldr	r3, [pc, #24]	; (801ae34 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801ae1a:	6818      	ldr	r0, [r3, #0]
 801ae1c:	6803      	ldr	r3, [r0, #0]
 801ae1e:	4621      	mov	r1, r4
 801ae20:	695b      	ldr	r3, [r3, #20]
 801ae22:	4798      	blx	r3
 801ae24:	e7f2      	b.n	801ae0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ae26:	bf00      	nop
 801ae28:	2001a8a0 	.word	0x2001a8a0
 801ae2c:	2001a8a2 	.word	0x2001a8a2
 801ae30:	2001a904 	.word	0x2001a904
 801ae34:	2001a8ac 	.word	0x2001a8ac

0801ae38 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801ae38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae3c:	4604      	mov	r4, r0
 801ae3e:	b09a      	sub	sp, #104	; 0x68
 801ae40:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801ae44:	b129      	cbz	r1, 801ae52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801ae46:	2300      	movs	r3, #0
 801ae48:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801ae4c:	b01a      	add	sp, #104	; 0x68
 801ae4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae52:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d0f8      	beq.n	801ae4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ae5a:	4fc6      	ldr	r7, [pc, #792]	; (801b174 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x33c>)
 801ae5c:	a809      	add	r0, sp, #36	; 0x24
 801ae5e:	f7ff fea1 	bl	801aba4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ae62:	883d      	ldrh	r5, [r7, #0]
 801ae64:	462e      	mov	r6, r5
 801ae66:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ae6a:	429e      	cmp	r6, r3
 801ae6c:	db10      	blt.n	801ae90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801ae6e:	462e      	mov	r6, r5
 801ae70:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ae74:	429e      	cmp	r6, r3
 801ae76:	da17      	bge.n	801aea8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ae78:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ae82:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ae86:	3601      	adds	r6, #1
 801ae88:	f7ff ff16 	bl	801acb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ae8c:	b2b6      	uxth	r6, r6
 801ae8e:	e7ef      	b.n	801ae70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801ae90:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ae94:	a809      	add	r0, sp, #36	; 0x24
 801ae96:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ae9a:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ae9e:	3601      	adds	r6, #1
 801aea0:	f7ff fee8 	bl	801ac74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801aea4:	b2b6      	uxth	r6, r6
 801aea6:	e7de      	b.n	801ae66 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801aea8:	4eb3      	ldr	r6, [pc, #716]	; (801b178 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x340>)
 801aeaa:	6833      	ldr	r3, [r6, #0]
 801aeac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801aeb0:	2b01      	cmp	r3, #1
 801aeb2:	f040 80a5 	bne.w	801b000 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1c8>
 801aeb6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801aeba:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801aebe:	33aa      	adds	r3, #170	; 0xaa
 801aec0:	f04f 0900 	mov.w	r9, #0
 801aec4:	42a8      	cmp	r0, r5
 801aec6:	f103 0308 	add.w	r3, r3, #8
 801aeca:	dd0a      	ble.n	801aee2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801aecc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801aed0:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801aed4:	440a      	add	r2, r1
 801aed6:	b212      	sxth	r2, r2
 801aed8:	4591      	cmp	r9, r2
 801aeda:	bfb8      	it	lt
 801aedc:	4691      	movlt	r9, r2
 801aede:	3501      	adds	r5, #1
 801aee0:	e7f0      	b.n	801aec4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801aee2:	4ba6      	ldr	r3, [pc, #664]	; (801b17c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x344>)
 801aee4:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 801b188 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x350>
 801aee8:	881d      	ldrh	r5, [r3, #0]
 801aeea:	08ed      	lsrs	r5, r5, #3
 801aeec:	2300      	movs	r3, #0
 801aeee:	2d01      	cmp	r5, #1
 801aef0:	bfb8      	it	lt
 801aef2:	2501      	movlt	r5, #1
 801aef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aef8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aefc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801af00:	f8ad 301a 	strh.w	r3, [sp, #26]
 801af04:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801af08:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801af0c:	6830      	ldr	r0, [r6, #0]
 801af0e:	4413      	add	r3, r2
 801af10:	b21b      	sxth	r3, r3
 801af12:	4599      	cmp	r9, r3
 801af14:	6803      	ldr	r3, [r0, #0]
 801af16:	dd49      	ble.n	801afac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x174>
 801af18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801af1c:	4798      	blx	r3
 801af1e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801af22:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801af26:	4413      	add	r3, r2
 801af28:	b21b      	sxth	r3, r3
 801af2a:	18ea      	adds	r2, r5, r3
 801af2c:	4290      	cmp	r0, r2
 801af2e:	f280 812f 	bge.w	801b190 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 801af32:	4581      	cmp	r9, r0
 801af34:	f340 812c 	ble.w	801b190 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x358>
 801af38:	4298      	cmp	r0, r3
 801af3a:	da02      	bge.n	801af42 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x10a>
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	f300 812a 	bgt.w	801b196 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x35e>
 801af42:	6830      	ldr	r0, [r6, #0]
 801af44:	6803      	ldr	r3, [r0, #0]
 801af46:	2101      	movs	r1, #1
 801af48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801af4c:	4798      	blx	r3
 801af4e:	e7d9      	b.n	801af04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801af50:	4548      	cmp	r0, r9
 801af52:	bfa8      	it	ge
 801af54:	4648      	movge	r0, r9
 801af56:	f9b8 2000 	ldrsh.w	r2, [r8]
 801af5a:	f8b7 a000 	ldrh.w	sl, [r7]
 801af5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801af62:	2100      	movs	r1, #0
 801af64:	1ac0      	subs	r0, r0, r3
 801af66:	f8ad 1014 	strh.w	r1, [sp, #20]
 801af6a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801af6e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801af72:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801af76:	459a      	cmp	sl, r3
 801af78:	dac4      	bge.n	801af04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801af7a:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801af7e:	ab07      	add	r3, sp, #28
 801af80:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801af84:	6851      	ldr	r1, [r2, #4]
 801af86:	c303      	stmia	r3!, {r0, r1}
 801af88:	a807      	add	r0, sp, #28
 801af8a:	a905      	add	r1, sp, #20
 801af8c:	f7ee fd38 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801af90:	a807      	add	r0, sp, #28
 801af92:	f7ee fe3d 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 801af96:	b920      	cbnz	r0, 801afa2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16a>
 801af98:	6823      	ldr	r3, [r4, #0]
 801af9a:	a907      	add	r1, sp, #28
 801af9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801af9e:	4620      	mov	r0, r4
 801afa0:	4798      	blx	r3
 801afa2:	f10a 0a01 	add.w	sl, sl, #1
 801afa6:	fa1f fa8a 	uxth.w	sl, sl
 801afaa:	e7e2      	b.n	801af72 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x13a>
 801afac:	69db      	ldr	r3, [r3, #28]
 801afae:	4798      	blx	r3
 801afb0:	4b73      	ldr	r3, [pc, #460]	; (801b180 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x348>)
 801afb2:	6818      	ldr	r0, [r3, #0]
 801afb4:	b148      	cbz	r0, 801afca <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x192>
 801afb6:	6803      	ldr	r3, [r0, #0]
 801afb8:	689a      	ldr	r2, [r3, #8]
 801afba:	6833      	ldr	r3, [r6, #0]
 801afbc:	f893 1076 	ldrb.w	r1, [r3, #118]	; 0x76
 801afc0:	b109      	cbz	r1, 801afc6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x18e>
 801afc2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 801afc4:	b901      	cbnz	r1, 801afc8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x190>
 801afc6:	6899      	ldr	r1, [r3, #8]
 801afc8:	4790      	blx	r2
 801afca:	4b6e      	ldr	r3, [pc, #440]	; (801b184 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x34c>)
 801afcc:	781b      	ldrb	r3, [r3, #0]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	f43f af3c 	beq.w	801ae4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801afd4:	2300      	movs	r3, #0
 801afd6:	883d      	ldrh	r5, [r7, #0]
 801afd8:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801afdc:	34ea      	adds	r4, #234	; 0xea
 801afde:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801afe2:	429d      	cmp	r5, r3
 801afe4:	f6bf af32 	bge.w	801ae4c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801afe8:	ab1a      	add	r3, sp, #104	; 0x68
 801afea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801afee:	3b44      	subs	r3, #68	; 0x44
 801aff0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801aff4:	4620      	mov	r0, r4
 801aff6:	3501      	adds	r5, #1
 801aff8:	f7ff fe3c 	bl	801ac74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801affc:	b2ad      	uxth	r5, r5
 801affe:	e7ee      	b.n	801afde <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801b000:	2b02      	cmp	r3, #2
 801b002:	f040 809f 	bne.w	801b144 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 801b006:	f8df 9184 	ldr.w	r9, [pc, #388]	; 801b18c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x354>
 801b00a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b00e:	429d      	cmp	r5, r3
 801b010:	dace      	bge.n	801afb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 801b012:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b016:	ab03      	add	r3, sp, #12
 801b018:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b01c:	6851      	ldr	r1, [r2, #4]
 801b01e:	c303      	stmia	r3!, {r0, r1}
 801b020:	f899 3000 	ldrb.w	r3, [r9]
 801b024:	2b01      	cmp	r3, #1
 801b026:	d102      	bne.n	801b02e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1f6>
 801b028:	a803      	add	r0, sp, #12
 801b02a:	f7ff fc3d 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b02e:	a803      	add	r0, sp, #12
 801b030:	f7ee fdee 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b034:	2800      	cmp	r0, #0
 801b036:	d17e      	bne.n	801b136 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2fe>
 801b038:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801b03c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b040:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b044:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b048:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b04c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b050:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b054:	4680      	mov	r8, r0
 801b056:	f8bd a012 	ldrh.w	sl, [sp, #18]
 801b05a:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 801b05e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b062:	6830      	ldr	r0, [r6, #0]
 801b064:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b068:	f8d0 c000 	ldr.w	ip, [r0]
 801b06c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b070:	44d6      	add	lr, sl
 801b072:	ebae 0e02 	sub.w	lr, lr, r2
 801b076:	fa1f fe8e 	uxth.w	lr, lr
 801b07a:	f8cd e000 	str.w	lr, [sp]
 801b07e:	f8dc a084 	ldr.w	sl, [ip, #132]	; 0x84
 801b082:	47d0      	blx	sl
 801b084:	f899 3000 	ldrb.w	r3, [r9]
 801b088:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b08c:	2b01      	cmp	r3, #1
 801b08e:	d155      	bne.n	801b13c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x304>
 801b090:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b094:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b098:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b09c:	f8ad 801c 	strh.w	r8, [sp, #28]
 801b0a0:	3b01      	subs	r3, #1
 801b0a2:	4418      	add	r0, r3
 801b0a4:	f8ad 000a 	strh.w	r0, [sp, #10]
 801b0a8:	f10d 010a 	add.w	r1, sp, #10
 801b0ac:	a802      	add	r0, sp, #8
 801b0ae:	f8ad 801e 	strh.w	r8, [sp, #30]
 801b0b2:	f8ad 8020 	strh.w	r8, [sp, #32]
 801b0b6:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 801b0ba:	f7ff fb9d 	bl	801a7f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801b0be:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b0c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b0c6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b0ca:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801b0ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b0d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801b0d6:	4413      	add	r3, r2
 801b0d8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801b0dc:	f10d 010a 	add.w	r1, sp, #10
 801b0e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b0e4:	f8ad 300a 	strh.w	r3, [sp, #10]
 801b0e8:	a802      	add	r0, sp, #8
 801b0ea:	f7ff fb85 	bl	801a7f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801b0ee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b0f2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801b0f6:	3301      	adds	r3, #1
 801b0f8:	1a9b      	subs	r3, r3, r2
 801b0fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b0fe:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b102:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b106:	1a9b      	subs	r3, r3, r2
 801b108:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b10c:	6823      	ldr	r3, [r4, #0]
 801b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b110:	a907      	add	r1, sp, #28
 801b112:	4620      	mov	r0, r4
 801b114:	4798      	blx	r3
 801b116:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801b11a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b11e:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 801b122:	4413      	add	r3, r2
 801b124:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b128:	440a      	add	r2, r1
 801b12a:	b21b      	sxth	r3, r3
 801b12c:	b212      	sxth	r2, r2
 801b12e:	4293      	cmp	r3, r2
 801b130:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b134:	db8f      	blt.n	801b056 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x21e>
 801b136:	3501      	adds	r5, #1
 801b138:	b2ad      	uxth	r5, r5
 801b13a:	e766      	b.n	801b00a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d2>
 801b13c:	6823      	ldr	r3, [r4, #0]
 801b13e:	a905      	add	r1, sp, #20
 801b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b142:	e7e6      	b.n	801b112 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2da>
 801b144:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b148:	429d      	cmp	r5, r3
 801b14a:	f6bf af31 	bge.w	801afb0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x178>
 801b14e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801b152:	ab07      	add	r3, sp, #28
 801b154:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b158:	6851      	ldr	r1, [r2, #4]
 801b15a:	c303      	stmia	r3!, {r0, r1}
 801b15c:	a807      	add	r0, sp, #28
 801b15e:	f7ee fd57 	bl	8009c10 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b162:	b920      	cbnz	r0, 801b16e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x336>
 801b164:	6823      	ldr	r3, [r4, #0]
 801b166:	a907      	add	r1, sp, #28
 801b168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b16a:	4620      	mov	r0, r4
 801b16c:	4798      	blx	r3
 801b16e:	3501      	adds	r5, #1
 801b170:	b2ad      	uxth	r5, r5
 801b172:	e7e7      	b.n	801b144 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x30c>
 801b174:	20000062 	.word	0x20000062
 801b178:	2001a8ac 	.word	0x2001a8ac
 801b17c:	2001a8a2 	.word	0x2001a8a2
 801b180:	2001a900 	.word	0x2001a900
 801b184:	2001a8aa 	.word	0x2001a8aa
 801b188:	2001a8a0 	.word	0x2001a8a0
 801b18c:	2001a8a4 	.word	0x2001a8a4
 801b190:	4298      	cmp	r0, r3
 801b192:	f6bf aedd 	bge.w	801af50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x118>
 801b196:	4648      	mov	r0, r9
 801b198:	e6dd      	b.n	801af56 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x11e>
 801b19a:	bf00      	nop

0801b19c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801b19c:	2000      	movs	r0, #0
 801b19e:	4770      	bx	lr

0801b1a0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
 801b1a0:	2000      	movs	r0, #0
 801b1a2:	4770      	bx	lr

0801b1a4 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b1a4:	b508      	push	{r3, lr}
 801b1a6:	6803      	ldr	r3, [r0, #0]
 801b1a8:	68db      	ldr	r3, [r3, #12]
 801b1aa:	4798      	blx	r3
 801b1ac:	b140      	cbz	r0, 801b1c0 <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801b1ae:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801b1b2:	7a83      	ldrb	r3, [r0, #10]
 801b1b4:	2a00      	cmp	r2, #0
 801b1b6:	bfb4      	ite	lt
 801b1b8:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801b1bc:	2000      	movge	r0, #0
 801b1be:	4318      	orrs	r0, r3
 801b1c0:	bd08      	pop	{r3, pc}
	...

0801b1c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801b1c4:	b40e      	push	{r1, r2, r3}
 801b1c6:	b533      	push	{r0, r1, r4, r5, lr}
 801b1c8:	ab05      	add	r3, sp, #20
 801b1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1ce:	9301      	str	r3, [sp, #4]
 801b1d0:	4b09      	ldr	r3, [pc, #36]	; (801b1f8 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x34>)
 801b1d2:	685c      	ldr	r4, [r3, #4]
 801b1d4:	f014 0f01 	tst.w	r4, #1
 801b1d8:	ea4f 0464 	mov.w	r4, r4, asr #1
 801b1dc:	bf1b      	ittet	ne
 801b1de:	681b      	ldrne	r3, [r3, #0]
 801b1e0:	5901      	ldrne	r1, [r0, r4]
 801b1e2:	681d      	ldreq	r5, [r3, #0]
 801b1e4:	58cd      	ldrne	r5, [r1, r3]
 801b1e6:	9b01      	ldr	r3, [sp, #4]
 801b1e8:	2100      	movs	r1, #0
 801b1ea:	4420      	add	r0, r4
 801b1ec:	47a8      	blx	r5
 801b1ee:	b002      	add	sp, #8
 801b1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b1f4:	b003      	add	sp, #12
 801b1f6:	4770      	bx	lr
 801b1f8:	20000040 	.word	0x20000040

0801b1fc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801b1fc:	b40c      	push	{r2, r3}
 801b1fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b200:	ab06      	add	r3, sp, #24
 801b202:	f853 2b04 	ldr.w	r2, [r3], #4
 801b206:	9301      	str	r3, [sp, #4]
 801b208:	4b09      	ldr	r3, [pc, #36]	; (801b230 <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801b20a:	685c      	ldr	r4, [r3, #4]
 801b20c:	f014 0f01 	tst.w	r4, #1
 801b210:	ea4f 0464 	mov.w	r4, r4, asr #1
 801b214:	bf1b      	ittet	ne
 801b216:	681b      	ldrne	r3, [r3, #0]
 801b218:	5905      	ldrne	r5, [r0, r4]
 801b21a:	681d      	ldreq	r5, [r3, #0]
 801b21c:	58ed      	ldrne	r5, [r5, r3]
 801b21e:	9b01      	ldr	r3, [sp, #4]
 801b220:	4420      	add	r0, r4
 801b222:	47a8      	blx	r5
 801b224:	b003      	add	sp, #12
 801b226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b22a:	b002      	add	sp, #8
 801b22c:	4770      	bx	lr
 801b22e:	bf00      	nop
 801b230:	20000040 	.word	0x20000040

0801b234 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b234:	b40e      	push	{r1, r2, r3}
 801b236:	b530      	push	{r4, r5, lr}
 801b238:	b098      	sub	sp, #96	; 0x60
 801b23a:	ab1b      	add	r3, sp, #108	; 0x6c
 801b23c:	4604      	mov	r4, r0
 801b23e:	f853 5b04 	ldr.w	r5, [r3], #4
 801b242:	9301      	str	r3, [sp, #4]
 801b244:	a802      	add	r0, sp, #8
 801b246:	f001 f8bd 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
 801b24a:	6823      	ldr	r3, [r4, #0]
 801b24c:	4620      	mov	r0, r4
 801b24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b250:	4798      	blx	r3
 801b252:	9a01      	ldr	r2, [sp, #4]
 801b254:	4603      	mov	r3, r0
 801b256:	4629      	mov	r1, r5
 801b258:	a802      	add	r0, sp, #8
 801b25a:	f001 f8d0 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b25e:	a802      	add	r0, sp, #8
 801b260:	f001 f906 	bl	801c470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b264:	2401      	movs	r4, #1
 801b266:	b140      	cbz	r0, 801b27a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x46>
 801b268:	280a      	cmp	r0, #10
 801b26a:	bf08      	it	eq
 801b26c:	3401      	addeq	r4, #1
 801b26e:	a802      	add	r0, sp, #8
 801b270:	bf08      	it	eq
 801b272:	b224      	sxtheq	r4, r4
 801b274:	f001 f8fc 	bl	801c470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b278:	e7f5      	b.n	801b266 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x32>
 801b27a:	b2a0      	uxth	r0, r4
 801b27c:	b018      	add	sp, #96	; 0x60
 801b27e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b282:	b003      	add	sp, #12
 801b284:	4770      	bx	lr
	...

0801b288 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b288:	b40e      	push	{r1, r2, r3}
 801b28a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b28c:	b098      	sub	sp, #96	; 0x60
 801b28e:	ab1d      	add	r3, sp, #116	; 0x74
 801b290:	4605      	mov	r5, r0
 801b292:	f853 4b04 	ldr.w	r4, [r3], #4
 801b296:	9300      	str	r3, [sp, #0]
 801b298:	a802      	add	r0, sp, #8
 801b29a:	f001 f893 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
 801b29e:	682b      	ldr	r3, [r5, #0]
 801b2a0:	4f24      	ldr	r7, [pc, #144]	; (801b334 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xac>)
 801b2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2a4:	4628      	mov	r0, r5
 801b2a6:	4798      	blx	r3
 801b2a8:	ae18      	add	r6, sp, #96	; 0x60
 801b2aa:	4603      	mov	r3, r0
 801b2ac:	4621      	mov	r1, r4
 801b2ae:	9a00      	ldr	r2, [sp, #0]
 801b2b0:	a802      	add	r0, sp, #8
 801b2b2:	2400      	movs	r4, #0
 801b2b4:	f001 f8a3 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b2b8:	f846 4d5c 	str.w	r4, [r6, #-92]!
 801b2bc:	462a      	mov	r2, r5
 801b2be:	4633      	mov	r3, r6
 801b2c0:	4621      	mov	r1, r4
 801b2c2:	a802      	add	r0, sp, #8
 801b2c4:	f001 fa06 	bl	801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b2c8:	b370      	cbz	r0, 801b328 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0xa0>
 801b2ca:	280a      	cmp	r0, #10
 801b2cc:	d025      	beq.n	801b31a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 801b2ce:	9a01      	ldr	r2, [sp, #4]
 801b2d0:	b31a      	cbz	r2, 801b31a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x92>
 801b2d2:	7b51      	ldrb	r1, [r2, #13]
 801b2d4:	f892 c008 	ldrb.w	ip, [r2, #8]
 801b2d8:	88ab      	ldrh	r3, [r5, #4]
 801b2da:	f011 0f40 	tst.w	r1, #64	; 0x40
 801b2de:	bf14      	ite	ne
 801b2e0:	46be      	movne	lr, r7
 801b2e2:	f04f 0e00 	moveq.w	lr, #0
 801b2e6:	f011 0f20 	tst.w	r1, #32
 801b2ea:	bf14      	ite	ne
 801b2ec:	f44f 7080 	movne.w	r0, #256	; 0x100
 801b2f0:	2000      	moveq	r0, #0
 801b2f2:	ea4e 0e0c 	orr.w	lr, lr, ip
 801b2f6:	ea40 000e 	orr.w	r0, r0, lr
 801b2fa:	f011 0f10 	tst.w	r1, #16
 801b2fe:	eba3 0300 	sub.w	r3, r3, r0
 801b302:	79d0      	ldrb	r0, [r2, #7]
 801b304:	bf14      	ite	ne
 801b306:	f44f 7280 	movne.w	r2, #256	; 0x100
 801b30a:	2200      	moveq	r2, #0
 801b30c:	4302      	orrs	r2, r0
 801b30e:	fa12 f383 	uxtah	r3, r2, r3
 801b312:	b29b      	uxth	r3, r3
 801b314:	42a3      	cmp	r3, r4
 801b316:	bfc8      	it	gt
 801b318:	b21c      	sxthgt	r4, r3
 801b31a:	4633      	mov	r3, r6
 801b31c:	462a      	mov	r2, r5
 801b31e:	2100      	movs	r1, #0
 801b320:	a802      	add	r0, sp, #8
 801b322:	f001 f9d7 	bl	801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b326:	e7cf      	b.n	801b2c8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x40>
 801b328:	b2a0      	uxth	r0, r4
 801b32a:	b018      	add	sp, #96	; 0x60
 801b32c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b330:	b003      	add	sp, #12
 801b332:	4770      	bx	lr
 801b334:	fffffe00 	.word	0xfffffe00

0801b338 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b338:	b40e      	push	{r1, r2, r3}
 801b33a:	b570      	push	{r4, r5, r6, lr}
 801b33c:	b099      	sub	sp, #100	; 0x64
 801b33e:	ab1d      	add	r3, sp, #116	; 0x74
 801b340:	4604      	mov	r4, r0
 801b342:	f853 5b04 	ldr.w	r5, [r3], #4
 801b346:	9300      	str	r3, [sp, #0]
 801b348:	a802      	add	r0, sp, #8
 801b34a:	f001 f83b 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
 801b34e:	6823      	ldr	r3, [r4, #0]
 801b350:	4620      	mov	r0, r4
 801b352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b354:	4798      	blx	r3
 801b356:	4629      	mov	r1, r5
 801b358:	4603      	mov	r3, r0
 801b35a:	9a00      	ldr	r2, [sp, #0]
 801b35c:	a802      	add	r0, sp, #8
 801b35e:	ad18      	add	r5, sp, #96	; 0x60
 801b360:	f001 f84d 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b364:	2100      	movs	r1, #0
 801b366:	f845 1d5c 	str.w	r1, [r5, #-92]!
 801b36a:	4622      	mov	r2, r4
 801b36c:	462b      	mov	r3, r5
 801b36e:	a802      	add	r0, sp, #8
 801b370:	f001 f9b0 	bl	801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b374:	26ff      	movs	r6, #255	; 0xff
 801b376:	b190      	cbz	r0, 801b39e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x66>
 801b378:	280a      	cmp	r0, #10
 801b37a:	d009      	beq.n	801b390 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801b37c:	9a01      	ldr	r2, [sp, #4]
 801b37e:	b13a      	cbz	r2, 801b390 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x58>
 801b380:	7923      	ldrb	r3, [r4, #4]
 801b382:	7a12      	ldrb	r2, [r2, #8]
 801b384:	1a9b      	subs	r3, r3, r2
 801b386:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801b38a:	429e      	cmp	r6, r3
 801b38c:	bfa8      	it	ge
 801b38e:	461e      	movge	r6, r3
 801b390:	462b      	mov	r3, r5
 801b392:	4622      	mov	r2, r4
 801b394:	2100      	movs	r1, #0
 801b396:	a802      	add	r0, sp, #8
 801b398:	f001 f99c 	bl	801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b39c:	e7eb      	b.n	801b376 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x3e>
 801b39e:	4630      	mov	r0, r6
 801b3a0:	b019      	add	sp, #100	; 0x64
 801b3a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b3a6:	b003      	add	sp, #12
 801b3a8:	4770      	bx	lr

0801b3aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b3aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3ae:	4607      	mov	r7, r0
 801b3b0:	b099      	sub	sp, #100	; 0x64
 801b3b2:	a802      	add	r0, sp, #8
 801b3b4:	4614      	mov	r4, r2
 801b3b6:	461d      	mov	r5, r3
 801b3b8:	468a      	mov	sl, r1
 801b3ba:	f001 f803 	bl	801c3c4 <_ZN8touchgfx12TextProviderC1Ev>
 801b3be:	683b      	ldr	r3, [r7, #0]
 801b3c0:	4638      	mov	r0, r7
 801b3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3c4:	4798      	blx	r3
 801b3c6:	462a      	mov	r2, r5
 801b3c8:	4603      	mov	r3, r0
 801b3ca:	4621      	mov	r1, r4
 801b3cc:	a802      	add	r0, sp, #8
 801b3ce:	f001 f816 	bl	801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>
 801b3d2:	f04f 0800 	mov.w	r8, #0
 801b3d6:	46c1      	mov	r9, r8
 801b3d8:	4645      	mov	r5, r8
 801b3da:	2300      	movs	r3, #0
 801b3dc:	9301      	str	r3, [sp, #4]
 801b3de:	463a      	mov	r2, r7
 801b3e0:	ab01      	add	r3, sp, #4
 801b3e2:	4651      	mov	r1, sl
 801b3e4:	a802      	add	r0, sp, #8
 801b3e6:	f001 f975 	bl	801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b3ea:	4606      	mov	r6, r0
 801b3ec:	b108      	cbz	r0, 801b3f2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x48>
 801b3ee:	280a      	cmp	r0, #10
 801b3f0:	d106      	bne.n	801b400 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x56>
 801b3f2:	454d      	cmp	r5, r9
 801b3f4:	dd00      	ble.n	801b3f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x4e>
 801b3f6:	46a9      	mov	r9, r5
 801b3f8:	2500      	movs	r5, #0
 801b3fa:	e018      	b.n	801b42e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x84>
 801b3fc:	46b0      	mov	r8, r6
 801b3fe:	e7ec      	b.n	801b3da <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x30>
 801b400:	9a01      	ldr	r2, [sp, #4]
 801b402:	2a00      	cmp	r2, #0
 801b404:	d0fa      	beq.n	801b3fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b406:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801b40a:	f892 b00a 	ldrb.w	fp, [r2, #10]
 801b40e:	8896      	ldrh	r6, [r2, #4]
 801b410:	2b00      	cmp	r3, #0
 801b412:	683b      	ldr	r3, [r7, #0]
 801b414:	4641      	mov	r1, r8
 801b416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b418:	4638      	mov	r0, r7
 801b41a:	bfb4      	ite	lt
 801b41c:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801b420:	2400      	movge	r4, #0
 801b422:	4798      	blx	r3
 801b424:	ea44 040b 	orr.w	r4, r4, fp
 801b428:	4404      	add	r4, r0
 801b42a:	4425      	add	r5, r4
 801b42c:	b2ad      	uxth	r5, r5
 801b42e:	2e00      	cmp	r6, #0
 801b430:	d1e4      	bne.n	801b3fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b432:	4648      	mov	r0, r9
 801b434:	b019      	add	sp, #100	; 0x64
 801b436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b43a <_ZNK8touchgfx8Drawable7getTypeEv>:
 801b43a:	2000      	movs	r0, #0
 801b43c:	4770      	bx	lr

0801b43e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b43e:	b513      	push	{r0, r1, r4, lr}
 801b440:	1d01      	adds	r1, r0, #4
 801b442:	4603      	mov	r3, r0
 801b444:	c903      	ldmia	r1, {r0, r1}
 801b446:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b44a:	2100      	movs	r1, #0
 801b44c:	f8ad 1000 	strh.w	r1, [sp]
 801b450:	f8ad 1002 	strh.w	r1, [sp, #2]
 801b454:	6819      	ldr	r1, [r3, #0]
 801b456:	4618      	mov	r0, r3
 801b458:	690c      	ldr	r4, [r1, #16]
 801b45a:	4669      	mov	r1, sp
 801b45c:	47a0      	blx	r4
 801b45e:	b002      	add	sp, #8
 801b460:	bd10      	pop	{r4, pc}

0801b462 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b462:	b538      	push	{r3, r4, r5, lr}
 801b464:	680b      	ldr	r3, [r1, #0]
 801b466:	460c      	mov	r4, r1
 801b468:	68db      	ldr	r3, [r3, #12]
 801b46a:	4605      	mov	r5, r0
 801b46c:	4798      	blx	r3
 801b46e:	6823      	ldr	r3, [r4, #0]
 801b470:	4620      	mov	r0, r4
 801b472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b474:	4629      	mov	r1, r5
 801b476:	4798      	blx	r3
 801b478:	4628      	mov	r0, r5
 801b47a:	bd38      	pop	{r3, r4, r5, pc}

0801b47c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b47c:	b410      	push	{r4}
 801b47e:	880a      	ldrh	r2, [r1, #0]
 801b480:	8884      	ldrh	r4, [r0, #4]
 801b482:	4422      	add	r2, r4
 801b484:	800a      	strh	r2, [r1, #0]
 801b486:	88c4      	ldrh	r4, [r0, #6]
 801b488:	884a      	ldrh	r2, [r1, #2]
 801b48a:	4422      	add	r2, r4
 801b48c:	804a      	strh	r2, [r1, #2]
 801b48e:	6940      	ldr	r0, [r0, #20]
 801b490:	b120      	cbz	r0, 801b49c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b492:	6803      	ldr	r3, [r0, #0]
 801b494:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b49a:	4718      	bx	r3
 801b49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b4a0:	4770      	bx	lr

0801b4a2 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b4a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4a4:	460b      	mov	r3, r1
 801b4a6:	b085      	sub	sp, #20
 801b4a8:	4604      	mov	r4, r0
 801b4aa:	b901      	cbnz	r1, 801b4ae <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b4ac:	b1f2      	cbz	r2, 801b4ec <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801b4ae:	1d27      	adds	r7, r4, #4
 801b4b0:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b4b4:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b4b8:	88e1      	ldrh	r1, [r4, #6]
 801b4ba:	440a      	add	r2, r1
 801b4bc:	88a1      	ldrh	r1, [r4, #4]
 801b4be:	4419      	add	r1, r3
 801b4c0:	6823      	ldr	r3, [r4, #0]
 801b4c2:	b209      	sxth	r1, r1
 801b4c4:	4620      	mov	r0, r4
 801b4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b4c8:	b212      	sxth	r2, r2
 801b4ca:	4798      	blx	r3
 801b4cc:	e897 0003 	ldmia.w	r7, {r0, r1}
 801b4d0:	ad02      	add	r5, sp, #8
 801b4d2:	e885 0003 	stmia.w	r5, {r0, r1}
 801b4d6:	6960      	ldr	r0, [r4, #20]
 801b4d8:	b150      	cbz	r0, 801b4f0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801b4da:	6803      	ldr	r3, [r0, #0]
 801b4dc:	4669      	mov	r1, sp
 801b4de:	691b      	ldr	r3, [r3, #16]
 801b4e0:	4798      	blx	r3
 801b4e2:	6960      	ldr	r0, [r4, #20]
 801b4e4:	6803      	ldr	r3, [r0, #0]
 801b4e6:	691b      	ldr	r3, [r3, #16]
 801b4e8:	4629      	mov	r1, r5
 801b4ea:	4798      	blx	r3
 801b4ec:	b005      	add	sp, #20
 801b4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4f0:	f7ff fb00 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 801b4f4:	6803      	ldr	r3, [r0, #0]
 801b4f6:	4669      	mov	r1, sp
 801b4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4fa:	4798      	blx	r3
 801b4fc:	f7ff fafa 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 801b500:	6803      	ldr	r3, [r0, #0]
 801b502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b504:	e7f0      	b.n	801b4e8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801b506 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b506:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b508:	8882      	ldrh	r2, [r0, #4]
 801b50a:	880b      	ldrh	r3, [r1, #0]
 801b50c:	4413      	add	r3, r2
 801b50e:	800b      	strh	r3, [r1, #0]
 801b510:	88c2      	ldrh	r2, [r0, #6]
 801b512:	884b      	ldrh	r3, [r1, #2]
 801b514:	4413      	add	r3, r2
 801b516:	4602      	mov	r2, r0
 801b518:	804b      	strh	r3, [r1, #2]
 801b51a:	4605      	mov	r5, r0
 801b51c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801b520:	460c      	mov	r4, r1
 801b522:	6851      	ldr	r1, [r2, #4]
 801b524:	466b      	mov	r3, sp
 801b526:	c303      	stmia	r3!, {r0, r1}
 801b528:	4621      	mov	r1, r4
 801b52a:	4668      	mov	r0, sp
 801b52c:	f7ee fa68 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801b530:	466b      	mov	r3, sp
 801b532:	cb03      	ldmia	r3!, {r0, r1}
 801b534:	6020      	str	r0, [r4, #0]
 801b536:	6061      	str	r1, [r4, #4]
 801b538:	6968      	ldr	r0, [r5, #20]
 801b53a:	b128      	cbz	r0, 801b548 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801b53c:	6803      	ldr	r3, [r0, #0]
 801b53e:	691b      	ldr	r3, [r3, #16]
 801b540:	4621      	mov	r1, r4
 801b542:	4798      	blx	r3
 801b544:	b003      	add	sp, #12
 801b546:	bd30      	pop	{r4, r5, pc}
 801b548:	f7ff fad4 	bl	801aaf4 <_ZN8touchgfx11Application11getInstanceEv>
 801b54c:	6803      	ldr	r3, [r0, #0]
 801b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b550:	e7f6      	b.n	801b540 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801b552 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b552:	b570      	push	{r4, r5, r6, lr}
 801b554:	8882      	ldrh	r2, [r0, #4]
 801b556:	880b      	ldrh	r3, [r1, #0]
 801b558:	4413      	add	r3, r2
 801b55a:	800b      	strh	r3, [r1, #0]
 801b55c:	88c2      	ldrh	r2, [r0, #6]
 801b55e:	884b      	ldrh	r3, [r1, #2]
 801b560:	460c      	mov	r4, r1
 801b562:	4413      	add	r3, r2
 801b564:	804b      	strh	r3, [r1, #2]
 801b566:	4605      	mov	r5, r0
 801b568:	1d01      	adds	r1, r0, #4
 801b56a:	4620      	mov	r0, r4
 801b56c:	f7ee fa48 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801b570:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b574:	b163      	cbz	r3, 801b590 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b576:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b57a:	b933      	cbnz	r3, 801b58a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801b57c:	bd70      	pop	{r4, r5, r6, pc}
 801b57e:	6803      	ldr	r3, [r0, #0]
 801b580:	4621      	mov	r1, r4
 801b582:	6a1b      	ldr	r3, [r3, #32]
 801b584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b588:	4718      	bx	r3
 801b58a:	6968      	ldr	r0, [r5, #20]
 801b58c:	2800      	cmp	r0, #0
 801b58e:	d1f6      	bne.n	801b57e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801b590:	bd70      	pop	{r4, r5, r6, pc}

0801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b592:	b510      	push	{r4, lr}
 801b594:	4604      	mov	r4, r0
 801b596:	4608      	mov	r0, r1
 801b598:	2300      	movs	r3, #0
 801b59a:	8023      	strh	r3, [r4, #0]
 801b59c:	8063      	strh	r3, [r4, #2]
 801b59e:	6803      	ldr	r3, [r0, #0]
 801b5a0:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b5a4:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b5a8:	80a1      	strh	r1, [r4, #4]
 801b5aa:	80e2      	strh	r2, [r4, #6]
 801b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5ae:	4621      	mov	r1, r4
 801b5b0:	4798      	blx	r3
 801b5b2:	4620      	mov	r0, r4
 801b5b4:	bd10      	pop	{r4, pc}
	...

0801b5b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b5b8:	b530      	push	{r4, r5, lr}
 801b5ba:	8083      	strh	r3, [r0, #4]
 801b5bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b5c0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b5c4:	7183      	strb	r3, [r0, #6]
 801b5c6:	79c3      	ldrb	r3, [r0, #7]
 801b5c8:	6101      	str	r1, [r0, #16]
 801b5ca:	f365 0306 	bfi	r3, r5, #0, #7
 801b5ce:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b5d2:	8282      	strh	r2, [r0, #20]
 801b5d4:	f365 13c7 	bfi	r3, r5, #7, #1
 801b5d8:	71c3      	strb	r3, [r0, #7]
 801b5da:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b5de:	7203      	strb	r3, [r0, #8]
 801b5e0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b5e4:	7243      	strb	r3, [r0, #9]
 801b5e6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b5ea:	8143      	strh	r3, [r0, #10]
 801b5ec:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b5f0:	8183      	strh	r3, [r0, #12]
 801b5f2:	4b01      	ldr	r3, [pc, #4]	; (801b5f8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b5f4:	6003      	str	r3, [r0, #0]
 801b5f6:	bd30      	pop	{r4, r5, pc}
 801b5f8:	08025170 	.word	0x08025170

0801b5fc <_ZNK8touchgfx9ConstFont4findEt>:
 801b5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5fe:	8a84      	ldrh	r4, [r0, #20]
 801b600:	2500      	movs	r5, #0
 801b602:	3c01      	subs	r4, #1
 801b604:	260e      	movs	r6, #14
 801b606:	42a5      	cmp	r5, r4
 801b608:	dc0c      	bgt.n	801b624 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801b60a:	192a      	adds	r2, r5, r4
 801b60c:	6903      	ldr	r3, [r0, #16]
 801b60e:	1052      	asrs	r2, r2, #1
 801b610:	fb06 3302 	mla	r3, r6, r2, r3
 801b614:	889f      	ldrh	r7, [r3, #4]
 801b616:	42b9      	cmp	r1, r7
 801b618:	da01      	bge.n	801b61e <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801b61a:	1e54      	subs	r4, r2, #1
 801b61c:	e7f3      	b.n	801b606 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b61e:	dd02      	ble.n	801b626 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801b620:	1c55      	adds	r5, r2, #1
 801b622:	e7f0      	b.n	801b606 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801b624:	2300      	movs	r3, #0
 801b626:	4618      	mov	r0, r3
 801b628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b62a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b62c:	4605      	mov	r5, r0
 801b62e:	4617      	mov	r7, r2
 801b630:	461e      	mov	r6, r3
 801b632:	f7ff ffe3 	bl	801b5fc <_ZNK8touchgfx9ConstFont4findEt>
 801b636:	b9e0      	cbnz	r0, 801b672 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801b638:	b911      	cbnz	r1, 801b640 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801b63a:	2400      	movs	r4, #0
 801b63c:	4620      	mov	r0, r4
 801b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b640:	290a      	cmp	r1, #10
 801b642:	d0fa      	beq.n	801b63a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b644:	682b      	ldr	r3, [r5, #0]
 801b646:	4628      	mov	r0, r5
 801b648:	691b      	ldr	r3, [r3, #16]
 801b64a:	4798      	blx	r3
 801b64c:	4601      	mov	r1, r0
 801b64e:	4628      	mov	r0, r5
 801b650:	f7ff ffd4 	bl	801b5fc <_ZNK8touchgfx9ConstFont4findEt>
 801b654:	4604      	mov	r4, r0
 801b656:	2800      	cmp	r0, #0
 801b658:	d0ef      	beq.n	801b63a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b65a:	682b      	ldr	r3, [r5, #0]
 801b65c:	4621      	mov	r1, r4
 801b65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b660:	4628      	mov	r0, r5
 801b662:	4798      	blx	r3
 801b664:	6038      	str	r0, [r7, #0]
 801b666:	682b      	ldr	r3, [r5, #0]
 801b668:	4628      	mov	r0, r5
 801b66a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b66c:	4798      	blx	r3
 801b66e:	7030      	strb	r0, [r6, #0]
 801b670:	e7e4      	b.n	801b63c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801b672:	4604      	mov	r4, r0
 801b674:	e7f1      	b.n	801b65a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801b676 <_ZN8touchgfx6memsetEPvhm>:
 801b676:	4402      	add	r2, r0
 801b678:	4290      	cmp	r0, r2
 801b67a:	d002      	beq.n	801b682 <_ZN8touchgfx6memsetEPvhm+0xc>
 801b67c:	f800 1b01 	strb.w	r1, [r0], #1
 801b680:	e7fa      	b.n	801b678 <_ZN8touchgfx6memsetEPvhm+0x2>
 801b682:	4770      	bx	lr

0801b684 <_ZN8touchgfx3clzEl>:
 801b684:	b1e8      	cbz	r0, 801b6c2 <_ZN8touchgfx3clzEl+0x3e>
 801b686:	2800      	cmp	r0, #0
 801b688:	bfb8      	it	lt
 801b68a:	4240      	neglt	r0, r0
 801b68c:	0c03      	lsrs	r3, r0, #16
 801b68e:	041b      	lsls	r3, r3, #16
 801b690:	b9ab      	cbnz	r3, 801b6be <_ZN8touchgfx3clzEl+0x3a>
 801b692:	0400      	lsls	r0, r0, #16
 801b694:	2310      	movs	r3, #16
 801b696:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b69a:	bf04      	itt	eq
 801b69c:	0200      	lsleq	r0, r0, #8
 801b69e:	3308      	addeq	r3, #8
 801b6a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b6a4:	bf04      	itt	eq
 801b6a6:	0100      	lsleq	r0, r0, #4
 801b6a8:	3304      	addeq	r3, #4
 801b6aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b6ae:	bf04      	itt	eq
 801b6b0:	0080      	lsleq	r0, r0, #2
 801b6b2:	3302      	addeq	r3, #2
 801b6b4:	2800      	cmp	r0, #0
 801b6b6:	bfa8      	it	ge
 801b6b8:	3301      	addge	r3, #1
 801b6ba:	1e58      	subs	r0, r3, #1
 801b6bc:	4770      	bx	lr
 801b6be:	2300      	movs	r3, #0
 801b6c0:	e7e9      	b.n	801b696 <_ZN8touchgfx3clzEl+0x12>
 801b6c2:	201f      	movs	r0, #31
 801b6c4:	4770      	bx	lr

0801b6c6 <_ZN8touchgfx6muldivElllRl>:
 801b6c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6ca:	4604      	mov	r4, r0
 801b6cc:	4698      	mov	r8, r3
 801b6ce:	f7ff ffd9 	bl	801b684 <_ZN8touchgfx3clzEl>
 801b6d2:	2601      	movs	r6, #1
 801b6d4:	2c00      	cmp	r4, #0
 801b6d6:	fa04 f500 	lsl.w	r5, r4, r0
 801b6da:	bfba      	itte	lt
 801b6dc:	f04f 37ff 	movlt.w	r7, #4294967295
 801b6e0:	4264      	neglt	r4, r4
 801b6e2:	2701      	movge	r7, #1
 801b6e4:	4086      	lsls	r6, r0
 801b6e6:	2900      	cmp	r1, #0
 801b6e8:	bfb8      	it	lt
 801b6ea:	4249      	neglt	r1, r1
 801b6ec:	f106 36ff 	add.w	r6, r6, #4294967295
 801b6f0:	fa41 fe00 	asr.w	lr, r1, r0
 801b6f4:	bfb8      	it	lt
 801b6f6:	427f      	neglt	r7, r7
 801b6f8:	4031      	ands	r1, r6
 801b6fa:	2a00      	cmp	r2, #0
 801b6fc:	fb95 f3f2 	sdiv	r3, r5, r2
 801b700:	fb04 f401 	mul.w	r4, r4, r1
 801b704:	fb02 5513 	mls	r5, r2, r3, r5
 801b708:	bfb8      	it	lt
 801b70a:	4252      	neglt	r2, r2
 801b70c:	fb94 f0f2 	sdiv	r0, r4, r2
 801b710:	fb02 4410 	mls	r4, r2, r0, r4
 801b714:	fb0e 4405 	mla	r4, lr, r5, r4
 801b718:	fb94 f1f2 	sdiv	r1, r4, r2
 801b71c:	fb02 4211 	mls	r2, r2, r1, r4
 801b720:	4408      	add	r0, r1
 801b722:	bfb8      	it	lt
 801b724:	427f      	neglt	r7, r7
 801b726:	fb0e 0003 	mla	r0, lr, r3, r0
 801b72a:	f8c8 2000 	str.w	r2, [r8]
 801b72e:	4378      	muls	r0, r7
 801b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b734 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801b734:	2002      	movs	r0, #2
 801b736:	4770      	bx	lr

0801b738 <_ZN8touchgfx12GestureEventD1Ev>:
 801b738:	4770      	bx	lr

0801b73a <_ZN8touchgfx12GestureEventD0Ev>:
 801b73a:	b510      	push	{r4, lr}
 801b73c:	210c      	movs	r1, #12
 801b73e:	4604      	mov	r4, r0
 801b740:	f005 f93f 	bl	80209c2 <_ZdlPvj>
 801b744:	4620      	mov	r0, r4
 801b746:	bd10      	pop	{r4, pc}

0801b748 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b748:	b530      	push	{r4, r5, lr}
 801b74a:	460d      	mov	r5, r1
 801b74c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b74e:	b087      	sub	sp, #28
 801b750:	4604      	mov	r4, r0
 801b752:	b301      	cbz	r1, 801b796 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b754:	a801      	add	r0, sp, #4
 801b756:	f7ff ff1c 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b75a:	892a      	ldrh	r2, [r5, #8]
 801b75c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b760:	7928      	ldrb	r0, [r5, #4]
 801b762:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b766:	f88d 0010 	strb.w	r0, [sp, #16]
 801b76a:	1ad2      	subs	r2, r2, r3
 801b76c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b76e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b770:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b774:	441a      	add	r2, r3
 801b776:	896b      	ldrh	r3, [r5, #10]
 801b778:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b77c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b780:	1b5b      	subs	r3, r3, r5
 801b782:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b784:	442b      	add	r3, r5
 801b786:	4d05      	ldr	r5, [pc, #20]	; (801b79c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b788:	9503      	str	r5, [sp, #12]
 801b78a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b78e:	6803      	ldr	r3, [r0, #0]
 801b790:	a903      	add	r1, sp, #12
 801b792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b794:	4798      	blx	r3
 801b796:	b007      	add	sp, #28
 801b798:	bd30      	pop	{r4, r5, pc}
 801b79a:	bf00      	nop
 801b79c:	080251c4 	.word	0x080251c4

0801b7a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7a2:	460c      	mov	r4, r1
 801b7a4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b7a6:	b089      	sub	sp, #36	; 0x24
 801b7a8:	4605      	mov	r5, r0
 801b7aa:	2900      	cmp	r1, #0
 801b7ac:	d053      	beq.n	801b856 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801b7ae:	4668      	mov	r0, sp
 801b7b0:	f7ff feef 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7b4:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801b7b6:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801b7b8:	8922      	ldrh	r2, [r4, #8]
 801b7ba:	88e1      	ldrh	r1, [r4, #6]
 801b7bc:	443a      	add	r2, r7
 801b7be:	4431      	add	r1, r6
 801b7c0:	b212      	sxth	r2, r2
 801b7c2:	b209      	sxth	r1, r1
 801b7c4:	4668      	mov	r0, sp
 801b7c6:	f7ee f8a5 	bl	8009914 <_ZNK8touchgfx4Rect9intersectEss>
 801b7ca:	b1c8      	cbz	r0, 801b800 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801b7cc:	89a2      	ldrh	r2, [r4, #12]
 801b7ce:	8961      	ldrh	r1, [r4, #10]
 801b7d0:	443a      	add	r2, r7
 801b7d2:	4431      	add	r1, r6
 801b7d4:	b212      	sxth	r2, r2
 801b7d6:	b209      	sxth	r1, r1
 801b7d8:	4668      	mov	r0, sp
 801b7da:	f7ee f89b 	bl	8009914 <_ZNK8touchgfx4Rect9intersectEss>
 801b7de:	b978      	cbnz	r0, 801b800 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801b7e0:	4b1e      	ldr	r3, [pc, #120]	; (801b85c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801b7e2:	9304      	str	r3, [sp, #16]
 801b7e4:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b7e8:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b7ec:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b7f0:	2302      	movs	r3, #2
 801b7f2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b7f4:	f88d 3014 	strb.w	r3, [sp, #20]
 801b7f8:	6803      	ldr	r3, [r0, #0]
 801b7fa:	a904      	add	r1, sp, #16
 801b7fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7fe:	4798      	blx	r3
 801b800:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801b802:	a802      	add	r0, sp, #8
 801b804:	f7ff fec5 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b808:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b80c:	88e0      	ldrh	r0, [r4, #6]
 801b80e:	8961      	ldrh	r1, [r4, #10]
 801b810:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801b814:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801b818:	8923      	ldrh	r3, [r4, #8]
 801b81a:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b81c:	7927      	ldrb	r7, [r4, #4]
 801b81e:	f88d 7014 	strb.w	r7, [sp, #20]
 801b822:	1a80      	subs	r0, r0, r2
 801b824:	1a89      	subs	r1, r1, r2
 801b826:	89a2      	ldrh	r2, [r4, #12]
 801b828:	4c0d      	ldr	r4, [pc, #52]	; (801b860 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801b82a:	9404      	str	r4, [sp, #16]
 801b82c:	4470      	add	r0, lr
 801b82e:	eba3 030c 	sub.w	r3, r3, ip
 801b832:	eba2 020c 	sub.w	r2, r2, ip
 801b836:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b83a:	4433      	add	r3, r6
 801b83c:	4471      	add	r1, lr
 801b83e:	4432      	add	r2, r6
 801b840:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b842:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b846:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b84a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b84e:	6803      	ldr	r3, [r0, #0]
 801b850:	a904      	add	r1, sp, #16
 801b852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b854:	4798      	blx	r3
 801b856:	b009      	add	sp, #36	; 0x24
 801b858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b85a:	bf00      	nop
 801b85c:	08023070 	.word	0x08023070
 801b860:	0802305c 	.word	0x0802305c

0801b864 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b868:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801b86a:	790b      	ldrb	r3, [r1, #4]
 801b86c:	b0a1      	sub	sp, #132	; 0x84
 801b86e:	4604      	mov	r4, r0
 801b870:	460d      	mov	r5, r1
 801b872:	b16a      	cbz	r2, 801b890 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801b874:	b963      	cbnz	r3, 801b890 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801b876:	b021      	add	sp, #132	; 0x84
 801b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b87c:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b880:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b884:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b888:	1d20      	adds	r0, r4, #4
 801b88a:	f7ee fb4f 	bl	8009f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b88e:	e0a1      	b.n	801b9d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x170>
 801b890:	2b00      	cmp	r3, #0
 801b892:	f040 809f 	bne.w	801b9d4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x170>
 801b896:	4a65      	ldr	r2, [pc, #404]	; (801ba2c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1c8>)
 801b898:	6812      	ldr	r2, [r2, #0]
 801b89a:	f892 b049 	ldrb.w	fp, [r2, #73]	; 0x49
 801b89e:	86a3      	strh	r3, [r4, #52]	; 0x34
 801b8a0:	f1bb 0f03 	cmp.w	fp, #3
 801b8a4:	86e3      	strh	r3, [r4, #54]	; 0x36
 801b8a6:	dde9      	ble.n	801b87c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801b8a8:	f1bb 0f0c 	cmp.w	fp, #12
 801b8ac:	6323      	str	r3, [r4, #48]	; 0x30
 801b8ae:	f04f 0303 	mov.w	r3, #3
 801b8b2:	bfdc      	itt	le
 801b8b4:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801b8b8:	fb92 f3f3 	sdivle	r3, r2, r3
 801b8bc:	9300      	str	r3, [sp, #0]
 801b8be:	4b5c      	ldr	r3, [pc, #368]	; (801ba30 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801b8c0:	495c      	ldr	r1, [pc, #368]	; (801ba34 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801b8c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b8c6:	4b5c      	ldr	r3, [pc, #368]	; (801ba38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801b8c8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b8cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b8d4:	ab0e      	add	r3, sp, #56	; 0x38
 801b8d6:	2600      	movs	r6, #0
 801b8d8:	2248      	movs	r2, #72	; 0x48
 801b8da:	4618      	mov	r0, r3
 801b8dc:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801b8e0:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801b8e4:	f005 f8fa 	bl	8020adc <memcpy>
 801b8e8:	f04f 32ff 	mov.w	r2, #4294967295
 801b8ec:	f8cd b008 	str.w	fp, [sp, #8]
 801b8f0:	9206      	str	r2, [sp, #24]
 801b8f2:	f04f 0a01 	mov.w	sl, #1
 801b8f6:	9007      	str	r0, [sp, #28]
 801b8f8:	9a00      	ldr	r2, [sp, #0]
 801b8fa:	9b02      	ldr	r3, [sp, #8]
 801b8fc:	fb93 f3f2 	sdiv	r3, r3, r2
 801b900:	f10a 32ff 	add.w	r2, sl, #4294967295
 801b904:	9201      	str	r2, [sp, #4]
 801b906:	9a07      	ldr	r2, [sp, #28]
 801b908:	b29b      	uxth	r3, r3
 801b90a:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801b90e:	3f04      	subs	r7, #4
 801b910:	9303      	str	r3, [sp, #12]
 801b912:	2300      	movs	r3, #0
 801b914:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801b918:	9309      	str	r3, [sp, #36]	; 0x24
 801b91a:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801b91e:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801b922:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801b926:	fb13 f302 	smulbb	r3, r3, r2
 801b92a:	b29b      	uxth	r3, r3
 801b92c:	9304      	str	r3, [sp, #16]
 801b92e:	683b      	ldr	r3, [r7, #0]
 801b930:	fb13 f302 	smulbb	r3, r3, r2
 801b934:	b29b      	uxth	r3, r3
 801b936:	9305      	str	r3, [sp, #20]
 801b938:	9b04      	ldr	r3, [sp, #16]
 801b93a:	4498      	add	r8, r3
 801b93c:	9b05      	ldr	r3, [sp, #20]
 801b93e:	4499      	add	r9, r3
 801b940:	fa0f f888 	sxth.w	r8, r8
 801b944:	fa0f f989 	sxth.w	r9, r9
 801b948:	464a      	mov	r2, r9
 801b94a:	4641      	mov	r1, r8
 801b94c:	a80a      	add	r0, sp, #40	; 0x28
 801b94e:	f7ed ffe1 	bl	8009914 <_ZNK8touchgfx4Rect9intersectEss>
 801b952:	b380      	cbz	r0, 801b9b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801b954:	4641      	mov	r1, r8
 801b956:	ab09      	add	r3, sp, #36	; 0x24
 801b958:	464a      	mov	r2, r9
 801b95a:	1d20      	adds	r0, r4, #4
 801b95c:	f7ee fae6 	bl	8009f2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801b960:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b962:	b341      	cbz	r1, 801b9b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801b964:	42b1      	cmp	r1, r6
 801b966:	d026      	beq.n	801b9b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801b968:	a80c      	add	r0, sp, #48	; 0x30
 801b96a:	f7ff fe12 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b96e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b972:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b976:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801b97a:	2002      	movs	r0, #2
 801b97c:	fb92 f2f0 	sdiv	r2, r2, r0
 801b980:	440a      	add	r2, r1
 801b982:	1a99      	subs	r1, r3, r2
 801b984:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801b988:	fb93 f3f0 	sdiv	r3, r3, r0
 801b98c:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801b990:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801b994:	4403      	add	r3, r0
 801b996:	1ad3      	subs	r3, r2, r3
 801b998:	435b      	muls	r3, r3
 801b99a:	9a06      	ldr	r2, [sp, #24]
 801b99c:	fb01 3301 	mla	r3, r1, r1, r3
 801b9a0:	4293      	cmp	r3, r2
 801b9a2:	d208      	bcs.n	801b9b6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x152>
 801b9a4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b9a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801b9aa:	86a2      	strh	r2, [r4, #52]	; 0x34
 801b9ac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b9b0:	6326      	str	r6, [r4, #48]	; 0x30
 801b9b2:	86e2      	strh	r2, [r4, #54]	; 0x36
 801b9b4:	9306      	str	r3, [sp, #24]
 801b9b6:	9b01      	ldr	r3, [sp, #4]
 801b9b8:	3302      	adds	r3, #2
 801b9ba:	2b08      	cmp	r3, #8
 801b9bc:	9301      	str	r3, [sp, #4]
 801b9be:	f107 0710 	add.w	r7, r7, #16
 801b9c2:	dda6      	ble.n	801b912 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xae>
 801b9c4:	9b02      	ldr	r3, [sp, #8]
 801b9c6:	445b      	add	r3, fp
 801b9c8:	9302      	str	r3, [sp, #8]
 801b9ca:	9b00      	ldr	r3, [sp, #0]
 801b9cc:	f10a 0a01 	add.w	sl, sl, #1
 801b9d0:	4553      	cmp	r3, sl
 801b9d2:	da91      	bge.n	801b8f8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x94>
 801b9d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b9d6:	2900      	cmp	r1, #0
 801b9d8:	f43f af4d 	beq.w	801b876 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801b9dc:	a80c      	add	r0, sp, #48	; 0x30
 801b9de:	f7ff fdd8 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b9e2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801b9e6:	88ea      	ldrh	r2, [r5, #6]
 801b9e8:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801b9ec:	7929      	ldrb	r1, [r5, #4]
 801b9ee:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801b9f2:	1ad2      	subs	r2, r2, r3
 801b9f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b9f6:	441a      	add	r2, r3
 801b9f8:	892b      	ldrh	r3, [r5, #8]
 801b9fa:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801b9fe:	1a1b      	subs	r3, r3, r0
 801ba00:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801ba02:	4403      	add	r3, r0
 801ba04:	480d      	ldr	r0, [pc, #52]	; (801ba3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801ba06:	900e      	str	r0, [sp, #56]	; 0x38
 801ba08:	2600      	movs	r6, #0
 801ba0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801ba0c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801ba10:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801ba14:	6803      	ldr	r3, [r0, #0]
 801ba16:	a90e      	add	r1, sp, #56	; 0x38
 801ba18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ba1a:	4798      	blx	r3
 801ba1c:	792b      	ldrb	r3, [r5, #4]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	f43f af29 	beq.w	801b876 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ba24:	6326      	str	r6, [r4, #48]	; 0x30
 801ba26:	86a6      	strh	r6, [r4, #52]	; 0x34
 801ba28:	86e6      	strh	r6, [r4, #54]	; 0x36
 801ba2a:	e724      	b.n	801b876 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801ba2c:	2001a8ac 	.word	0x2001a8ac
 801ba30:	2001a8a0 	.word	0x2001a8a0
 801ba34:	08022c88 	.word	0x08022c88
 801ba38:	2001a8a2 	.word	0x2001a8a2
 801ba3c:	08023070 	.word	0x08023070

0801ba40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801ba40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba42:	4604      	mov	r4, r0
 801ba44:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801ba48:	3201      	adds	r2, #1
 801ba4a:	d114      	bne.n	801ba76 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801ba4c:	6803      	ldr	r3, [r0, #0]
 801ba4e:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801ba52:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801ba56:	f8ad 1006 	strh.w	r1, [sp, #6]
 801ba5a:	2200      	movs	r2, #0
 801ba5c:	4669      	mov	r1, sp
 801ba5e:	f8ad 2000 	strh.w	r2, [sp]
 801ba62:	f8ad 2002 	strh.w	r2, [sp, #2]
 801ba66:	f8ad 5004 	strh.w	r5, [sp, #4]
 801ba6a:	6a1b      	ldr	r3, [r3, #32]
 801ba6c:	4798      	blx	r3
 801ba6e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801ba72:	e884 0003 	stmia.w	r4, {r0, r1}
 801ba76:	4620      	mov	r0, r4
 801ba78:	b003      	add	sp, #12
 801ba7a:	bd30      	pop	{r4, r5, pc}

0801ba7c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801ba7c:	b513      	push	{r0, r1, r4, lr}
 801ba7e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801ba82:	3301      	adds	r3, #1
 801ba84:	4604      	mov	r4, r0
 801ba86:	d109      	bne.n	801ba9c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801ba88:	4601      	mov	r1, r0
 801ba8a:	4668      	mov	r0, sp
 801ba8c:	f7ff fd81 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba90:	f8bd 3000 	ldrh.w	r3, [sp]
 801ba94:	8423      	strh	r3, [r4, #32]
 801ba96:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801ba9a:	8463      	strh	r3, [r4, #34]	; 0x22
 801ba9c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801baa0:	b002      	add	sp, #8
 801baa2:	bd10      	pop	{r4, pc}

0801baa4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801baa4:	b513      	push	{r0, r1, r4, lr}
 801baa6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801baaa:	3301      	adds	r3, #1
 801baac:	4604      	mov	r4, r0
 801baae:	d109      	bne.n	801bac4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801bab0:	4601      	mov	r1, r0
 801bab2:	4668      	mov	r0, sp
 801bab4:	f7ff fd6d 	bl	801b592 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bab8:	f8bd 3000 	ldrh.w	r3, [sp]
 801babc:	8423      	strh	r3, [r4, #32]
 801babe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bac2:	8463      	strh	r3, [r4, #34]	; 0x22
 801bac4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801bac8:	b002      	add	sp, #8
 801baca:	bd10      	pop	{r4, pc}

0801bacc <_ZN8touchgfx6ScreenC1Ev>:
 801bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bace:	4605      	mov	r5, r0
 801bad0:	4b18      	ldr	r3, [pc, #96]	; (801bb34 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801bad2:	f845 3b04 	str.w	r3, [r5], #4
 801bad6:	2301      	movs	r3, #1
 801bad8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801badc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bae0:	4b15      	ldr	r3, [pc, #84]	; (801bb38 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801bae2:	4916      	ldr	r1, [pc, #88]	; (801bb3c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801bae4:	f9b3 7000 	ldrsh.w	r7, [r3]
 801bae8:	4b15      	ldr	r3, [pc, #84]	; (801bb40 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801baea:	6041      	str	r1, [r0, #4]
 801baec:	2200      	movs	r2, #0
 801baee:	8102      	strh	r2, [r0, #8]
 801baf0:	8142      	strh	r2, [r0, #10]
 801baf2:	8182      	strh	r2, [r0, #12]
 801baf4:	81c2      	strh	r2, [r0, #14]
 801baf6:	8202      	strh	r2, [r0, #16]
 801baf8:	8242      	strh	r2, [r0, #18]
 801bafa:	8282      	strh	r2, [r0, #20]
 801bafc:	82c2      	strh	r2, [r0, #22]
 801bafe:	6182      	str	r2, [r0, #24]
 801bb00:	61c2      	str	r2, [r0, #28]
 801bb02:	6202      	str	r2, [r0, #32]
 801bb04:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801bb08:	62c2      	str	r2, [r0, #44]	; 0x2c
 801bb0a:	6302      	str	r2, [r0, #48]	; 0x30
 801bb0c:	8682      	strh	r2, [r0, #52]	; 0x34
 801bb0e:	86c2      	strh	r2, [r0, #54]	; 0x36
 801bb10:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bb14:	4611      	mov	r1, r2
 801bb16:	4604      	mov	r4, r0
 801bb18:	4628      	mov	r0, r5
 801bb1a:	f7ed fd04 	bl	8009526 <_ZN8touchgfx8Drawable5setXYEss>
 801bb1e:	4639      	mov	r1, r7
 801bb20:	4628      	mov	r0, r5
 801bb22:	f7ed fd1e 	bl	8009562 <_ZN8touchgfx8Drawable8setWidthEs>
 801bb26:	4628      	mov	r0, r5
 801bb28:	4631      	mov	r1, r6
 801bb2a:	f7ed fd29 	bl	8009580 <_ZN8touchgfx8Drawable9setHeightEs>
 801bb2e:	4620      	mov	r0, r4
 801bb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb32:	bf00      	nop
 801bb34:	080251d8 	.word	0x080251d8
 801bb38:	2001a8a0 	.word	0x2001a8a0
 801bb3c:	08022d74 	.word	0x08022d74
 801bb40:	2001a8a2 	.word	0x2001a8a2

0801bb44 <_ZN8touchgfx6Screen4drawEv>:
 801bb44:	b507      	push	{r0, r1, r2, lr}
 801bb46:	4b0b      	ldr	r3, [pc, #44]	; (801bb74 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801bb48:	f9b3 1000 	ldrsh.w	r1, [r3]
 801bb4c:	4b0a      	ldr	r3, [pc, #40]	; (801bb78 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801bb4e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bb52:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb56:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bb5a:	2300      	movs	r3, #0
 801bb5c:	f8ad 3000 	strh.w	r3, [sp]
 801bb60:	f8ad 3002 	strh.w	r3, [sp, #2]
 801bb64:	6803      	ldr	r3, [r0, #0]
 801bb66:	4669      	mov	r1, sp
 801bb68:	689b      	ldr	r3, [r3, #8]
 801bb6a:	4798      	blx	r3
 801bb6c:	b003      	add	sp, #12
 801bb6e:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb72:	bf00      	nop
 801bb74:	2001a8a0 	.word	0x2001a8a0
 801bb78:	2001a8a2 	.word	0x2001a8a2

0801bb7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801bb7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb80:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801bb84:	b087      	sub	sp, #28
 801bb86:	4681      	mov	r9, r0
 801bb88:	460c      	mov	r4, r1
 801bb8a:	4615      	mov	r5, r2
 801bb8c:	b16b      	cbz	r3, 801bbaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bb8e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801bb92:	b153      	cbz	r3, 801bbaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bb94:	4628      	mov	r0, r5
 801bb96:	f7ff ff53 	bl	801ba40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bb9a:	4621      	mov	r1, r4
 801bb9c:	f7ed fee9 	bl	8009972 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bba0:	69eb      	ldr	r3, [r5, #28]
 801bba2:	b928      	cbnz	r0, 801bbb0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801bba4:	461d      	mov	r5, r3
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d1f4      	bne.n	801bb94 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801bbaa:	b007      	add	sp, #28
 801bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbb0:	ae02      	add	r6, sp, #8
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d04a      	beq.n	801bc4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801bbb6:	682b      	ldr	r3, [r5, #0]
 801bbb8:	4629      	mov	r1, r5
 801bbba:	68db      	ldr	r3, [r3, #12]
 801bbbc:	4668      	mov	r0, sp
 801bbbe:	4798      	blx	r3
 801bbc0:	4628      	mov	r0, r5
 801bbc2:	f7ff ff5b 	bl	801ba7c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bbc6:	f8bd 7000 	ldrh.w	r7, [sp]
 801bbca:	4407      	add	r7, r0
 801bbcc:	4628      	mov	r0, r5
 801bbce:	f7ff ff69 	bl	801baa4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bbd2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801bbd6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801bbda:	f8ad 200c 	strh.w	r2, [sp, #12]
 801bbde:	4418      	add	r0, r3
 801bbe0:	4621      	mov	r1, r4
 801bbe2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801bbe6:	f8ad 000a 	strh.w	r0, [sp, #10]
 801bbea:	b23f      	sxth	r7, r7
 801bbec:	4630      	mov	r0, r6
 801bbee:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bbf2:	f8ad 7008 	strh.w	r7, [sp, #8]
 801bbf6:	f7ed ff03 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801bbfa:	4628      	mov	r0, r5
 801bbfc:	f7ff ff20 	bl	801ba40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bc00:	4602      	mov	r2, r0
 801bc02:	e896 0003 	ldmia.w	r6, {r0, r1}
 801bc06:	ab04      	add	r3, sp, #16
 801bc08:	e883 0003 	stmia.w	r3, {r0, r1}
 801bc0c:	4611      	mov	r1, r2
 801bc0e:	4618      	mov	r0, r3
 801bc10:	f7ed fef6 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801bc14:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801bc18:	f9b4 2000 	ldrsh.w	r2, [r4]
 801bc1c:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801bc20:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801bc24:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801bc28:	455a      	cmp	r2, fp
 801bc2a:	f040 8096 	bne.w	801bd5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bc2e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bc32:	4553      	cmp	r3, sl
 801bc34:	f040 8091 	bne.w	801bd5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bc38:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bc3c:	4543      	cmp	r3, r8
 801bc3e:	f040 808c 	bne.w	801bd5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bc42:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bc46:	42bb      	cmp	r3, r7
 801bc48:	f040 8087 	bne.w	801bd5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801bc4c:	4628      	mov	r0, r5
 801bc4e:	f7ff fef7 	bl	801ba40 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801bc52:	6861      	ldr	r1, [r4, #4]
 801bc54:	4602      	mov	r2, r0
 801bc56:	6820      	ldr	r0, [r4, #0]
 801bc58:	4633      	mov	r3, r6
 801bc5a:	c303      	stmia	r3!, {r0, r1}
 801bc5c:	4611      	mov	r1, r2
 801bc5e:	4630      	mov	r0, r6
 801bc60:	f7ed fece 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801bc64:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d09e      	beq.n	801bbaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bc6c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d09a      	beq.n	801bbaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bc74:	4628      	mov	r0, r5
 801bc76:	f7ff ff01 	bl	801ba7c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801bc7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bc7e:	1a18      	subs	r0, r3, r0
 801bc80:	f8ad 0008 	strh.w	r0, [sp, #8]
 801bc84:	4628      	mov	r0, r5
 801bc86:	f7ff ff0d 	bl	801baa4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801bc8a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bc8e:	1a18      	subs	r0, r3, r0
 801bc90:	f8ad 000a 	strh.w	r0, [sp, #10]
 801bc94:	682b      	ldr	r3, [r5, #0]
 801bc96:	4631      	mov	r1, r6
 801bc98:	689b      	ldr	r3, [r3, #8]
 801bc9a:	4628      	mov	r0, r5
 801bc9c:	4798      	blx	r3
 801bc9e:	e784      	b.n	801bbaa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801bca0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801bca4:	4553      	cmp	r3, sl
 801bca6:	da10      	bge.n	801bcca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801bca8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bcac:	f8ad 300a 	strh.w	r3, [sp, #10]
 801bcb0:	ebaa 0303 	sub.w	r3, sl, r3
 801bcb4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bcb8:	f8ad 2008 	strh.w	r2, [sp, #8]
 801bcbc:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bcc0:	69ea      	ldr	r2, [r5, #28]
 801bcc2:	4631      	mov	r1, r6
 801bcc4:	4648      	mov	r0, r9
 801bcc6:	f7ff ff59 	bl	801bb7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bcca:	f9b4 3000 	ldrsh.w	r3, [r4]
 801bcce:	455b      	cmp	r3, fp
 801bcd0:	da0e      	bge.n	801bcf0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801bcd2:	f8ad 3008 	strh.w	r3, [sp, #8]
 801bcd6:	ebab 0303 	sub.w	r3, fp, r3
 801bcda:	f8ad a00a 	strh.w	sl, [sp, #10]
 801bcde:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bce2:	f8ad 700e 	strh.w	r7, [sp, #14]
 801bce6:	69ea      	ldr	r2, [r5, #28]
 801bce8:	4631      	mov	r1, r6
 801bcea:	4648      	mov	r0, r9
 801bcec:	f7ff ff46 	bl	801bb7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bcf0:	8822      	ldrh	r2, [r4, #0]
 801bcf2:	88a3      	ldrh	r3, [r4, #4]
 801bcf4:	44d8      	add	r8, fp
 801bcf6:	4413      	add	r3, r2
 801bcf8:	b29b      	uxth	r3, r3
 801bcfa:	fa1f f888 	uxth.w	r8, r8
 801bcfe:	fa0f f288 	sxth.w	r2, r8
 801bd02:	b219      	sxth	r1, r3
 801bd04:	4291      	cmp	r1, r2
 801bd06:	dd0e      	ble.n	801bd26 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801bd08:	eba3 0308 	sub.w	r3, r3, r8
 801bd0c:	f8ad 2008 	strh.w	r2, [sp, #8]
 801bd10:	f8ad a00a 	strh.w	sl, [sp, #10]
 801bd14:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bd18:	f8ad 700e 	strh.w	r7, [sp, #14]
 801bd1c:	69ea      	ldr	r2, [r5, #28]
 801bd1e:	4631      	mov	r1, r6
 801bd20:	4648      	mov	r0, r9
 801bd22:	f7ff ff2b 	bl	801bb7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bd26:	88e2      	ldrh	r2, [r4, #6]
 801bd28:	8863      	ldrh	r3, [r4, #2]
 801bd2a:	4457      	add	r7, sl
 801bd2c:	4413      	add	r3, r2
 801bd2e:	b29b      	uxth	r3, r3
 801bd30:	b2bf      	uxth	r7, r7
 801bd32:	b23a      	sxth	r2, r7
 801bd34:	b219      	sxth	r1, r3
 801bd36:	428a      	cmp	r2, r1
 801bd38:	da88      	bge.n	801bc4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801bd3a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bd3e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801bd42:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bd46:	1bdb      	subs	r3, r3, r7
 801bd48:	f8ad 0008 	strh.w	r0, [sp, #8]
 801bd4c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bd50:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bd54:	69ea      	ldr	r2, [r5, #28]
 801bd56:	4631      	mov	r1, r6
 801bd58:	e006      	b.n	801bd68 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801bd5a:	f1b8 0f00 	cmp.w	r8, #0
 801bd5e:	d001      	beq.n	801bd64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801bd60:	2f00      	cmp	r7, #0
 801bd62:	d19d      	bne.n	801bca0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801bd64:	69ea      	ldr	r2, [r5, #28]
 801bd66:	4621      	mov	r1, r4
 801bd68:	4648      	mov	r0, r9
 801bd6a:	f7ff ff07 	bl	801bb7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bd6e:	e76d      	b.n	801bc4c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801bd70 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801bd70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd72:	aa02      	add	r2, sp, #8
 801bd74:	2300      	movs	r3, #0
 801bd76:	f842 3d04 	str.w	r3, [r2, #-4]!
 801bd7a:	4604      	mov	r4, r0
 801bd7c:	3004      	adds	r0, #4
 801bd7e:	460d      	mov	r5, r1
 801bd80:	f7ee f9d5 	bl	800a12e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801bd84:	9a01      	ldr	r2, [sp, #4]
 801bd86:	b11a      	cbz	r2, 801bd90 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x20>
 801bd88:	4629      	mov	r1, r5
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	f7ff fef6 	bl	801bb7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801bd90:	b003      	add	sp, #12
 801bd92:	bd30      	pop	{r4, r5, pc}

0801bd94 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801bd94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd96:	4602      	mov	r2, r0
 801bd98:	4604      	mov	r4, r0
 801bd9a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801bd9e:	460d      	mov	r5, r1
 801bda0:	6851      	ldr	r1, [r2, #4]
 801bda2:	466b      	mov	r3, sp
 801bda4:	c303      	stmia	r3!, {r0, r1}
 801bda6:	4629      	mov	r1, r5
 801bda8:	4668      	mov	r0, sp
 801bdaa:	f7ed fe29 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801bdae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801bdb2:	4669      	mov	r1, sp
 801bdb4:	b123      	cbz	r3, 801bdc0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801bdb6:	4620      	mov	r0, r4
 801bdb8:	f7ff ffda 	bl	801bd70 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801bdbc:	b003      	add	sp, #12
 801bdbe:	bd30      	pop	{r4, r5, pc}
 801bdc0:	1d20      	adds	r0, r4, #4
 801bdc2:	f7ee f848 	bl	8009e56 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801bdc6:	e7f9      	b.n	801bdbc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801bdc8 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801bdc8:	680a      	ldr	r2, [r1, #0]
 801bdca:	460b      	mov	r3, r1
 801bdcc:	6952      	ldr	r2, [r2, #20]
 801bdce:	1d01      	adds	r1, r0, #4
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	4710      	bx	r2

0801bdd4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801bdd4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bddc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bde0:	bfcc      	ite	gt
 801bde2:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801bde6:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801bdea:	b082      	sub	sp, #8
 801bdec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801bdf0:	edcd 7a01 	vstr	s15, [sp, #4]
 801bdf4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801bdf8:	b002      	add	sp, #8
 801bdfa:	4770      	bx	lr

0801bdfc <_ZN8touchgfx15EasingEquations11backEaseOutEtsst>:
 801bdfc:	b510      	push	{r4, lr}
 801bdfe:	4298      	cmp	r0, r3
 801be00:	eb01 0402 	add.w	r4, r1, r2
 801be04:	b224      	sxth	r4, r4
 801be06:	da25      	bge.n	801be54 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801be08:	b323      	cbz	r3, 801be54 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x58>
 801be0a:	ee07 0a90 	vmov	s15, r0
 801be0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801be12:	ee07 3a90 	vmov	s15, r3
 801be16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801be1a:	ee06 1a10 	vmov	s12, r1
 801be1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801be22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be2a:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801be2e:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 801be58 <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x5c>
 801be32:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 801be5c <_ZN8touchgfx15EasingEquations11backEaseOutEtsst+0x60>
 801be36:	eea7 6a85 	vfma.f32	s12, s15, s10
 801be3a:	ee67 5aa7 	vmul.f32	s11, s15, s15
 801be3e:	ee06 2a90 	vmov	s13, r2
 801be42:	eea5 7a86 	vfma.f32	s14, s11, s12
 801be46:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801be4a:	eea6 0a87 	vfma.f32	s0, s13, s14
 801be4e:	f7ff ffc1 	bl	801bdd4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801be52:	4604      	mov	r4, r0
 801be54:	4620      	mov	r0, r4
 801be56:	bd10      	pop	{r4, pc}
 801be58:	402ce6b0 	.word	0x402ce6b0
 801be5c:	3fd9cd60 	.word	0x3fd9cd60

0801be60 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801be60:	b510      	push	{r4, lr}
 801be62:	4298      	cmp	r0, r3
 801be64:	eb01 0402 	add.w	r4, r1, r2
 801be68:	b224      	sxth	r4, r4
 801be6a:	da1f      	bge.n	801beac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801be6c:	b1f3      	cbz	r3, 801beac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801be6e:	ee07 0a90 	vmov	s15, r0
 801be72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801be76:	ee07 3a90 	vmov	s15, r3
 801be7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801be7e:	ee06 1a10 	vmov	s12, r1
 801be82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801be86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801be8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801be8e:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801be92:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801be96:	ee06 2a90 	vmov	s13, r2
 801be9a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801be9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801bea2:	eea6 0a87 	vfma.f32	s0, s13, s14
 801bea6:	f7ff ff95 	bl	801bdd4 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801beaa:	4604      	mov	r4, r0
 801beac:	4620      	mov	r0, r4
 801beae:	bd10      	pop	{r4, pc}

0801beb0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>:
 801beb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 801beb4:	4b05      	ldr	r3, [pc, #20]	; (801becc <_ZNK8touchgfx9GlyphNode3topEv.isra.2+0x1c>)
 801beb6:	bf08      	it	eq
 801beb8:	2300      	moveq	r3, #0
 801beba:	f011 0f20 	tst.w	r1, #32
 801bebe:	bf14      	ite	ne
 801bec0:	f44f 7280 	movne.w	r2, #256	; 0x100
 801bec4:	2200      	moveq	r2, #0
 801bec6:	4318      	orrs	r0, r3
 801bec8:	4310      	orrs	r0, r2
 801beca:	4770      	bx	lr
 801becc:	fffffe00 	.word	0xfffffe00

0801bed0 <_ZN8touchgfx9GlyphNode6setTopEs>:
 801bed0:	7b43      	ldrb	r3, [r0, #13]
 801bed2:	7201      	strb	r1, [r0, #8]
 801bed4:	b289      	uxth	r1, r1
 801bed6:	f003 039f 	and.w	r3, r3, #159	; 0x9f
 801beda:	05ca      	lsls	r2, r1, #23
 801bedc:	bf48      	it	mi
 801bede:	f043 0320 	orrmi.w	r3, r3, #32
 801bee2:	7343      	strb	r3, [r0, #13]
 801bee4:	058b      	lsls	r3, r1, #22
 801bee6:	bf42      	ittt	mi
 801bee8:	7b43      	ldrbmi	r3, [r0, #13]
 801beea:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 801beee:	7343      	strbmi	r3, [r0, #13]
 801bef0:	4770      	bx	lr
	...

0801bef4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bef6:	4d1c      	ldr	r5, [pc, #112]	; (801bf68 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801bef8:	4604      	mov	r4, r0
 801befa:	2700      	movs	r7, #0
 801befc:	2601      	movs	r6, #1
 801befe:	6863      	ldr	r3, [r4, #4]
 801bf00:	b93b      	cbnz	r3, 801bf12 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801bf02:	6821      	ldr	r1, [r4, #0]
 801bf04:	2900      	cmp	r1, #0
 801bf06:	d02c      	beq.n	801bf62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801bf08:	6828      	ldr	r0, [r5, #0]
 801bf0a:	6803      	ldr	r3, [r0, #0]
 801bf0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf0e:	4798      	blx	r3
 801bf10:	6060      	str	r0, [r4, #4]
 801bf12:	7c23      	ldrb	r3, [r4, #16]
 801bf14:	b16b      	cbz	r3, 801bf32 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801bf16:	68e3      	ldr	r3, [r4, #12]
 801bf18:	b12b      	cbz	r3, 801bf26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801bf1a:	881a      	ldrh	r2, [r3, #0]
 801bf1c:	b11a      	cbz	r2, 801bf26 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801bf1e:	1c9a      	adds	r2, r3, #2
 801bf20:	60e2      	str	r2, [r4, #12]
 801bf22:	8818      	ldrh	r0, [r3, #0]
 801bf24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf26:	6828      	ldr	r0, [r5, #0]
 801bf28:	7427      	strb	r7, [r4, #16]
 801bf2a:	6803      	ldr	r3, [r0, #0]
 801bf2c:	6821      	ldr	r1, [r4, #0]
 801bf2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bf30:	4798      	blx	r3
 801bf32:	6863      	ldr	r3, [r4, #4]
 801bf34:	881a      	ldrh	r2, [r3, #0]
 801bf36:	b1a2      	cbz	r2, 801bf62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801bf38:	2a02      	cmp	r2, #2
 801bf3a:	f103 0202 	add.w	r2, r3, #2
 801bf3e:	6062      	str	r2, [r4, #4]
 801bf40:	d1ef      	bne.n	801bf22 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801bf42:	6828      	ldr	r0, [r5, #0]
 801bf44:	6803      	ldr	r3, [r0, #0]
 801bf46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bf48:	68a3      	ldr	r3, [r4, #8]
 801bf4a:	1d19      	adds	r1, r3, #4
 801bf4c:	60a1      	str	r1, [r4, #8]
 801bf4e:	6819      	ldr	r1, [r3, #0]
 801bf50:	4790      	blx	r2
 801bf52:	60e0      	str	r0, [r4, #12]
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d0d2      	beq.n	801befe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bf58:	8803      	ldrh	r3, [r0, #0]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d0cf      	beq.n	801befe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bf5e:	7426      	strb	r6, [r4, #16]
 801bf60:	e7cd      	b.n	801befe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801bf62:	2000      	movs	r0, #0
 801bf64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bf66:	bf00      	nop
 801bf68:	2001a8ac 	.word	0x2001a8ac

0801bf6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bf6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bf6e:	4605      	mov	r5, r0
 801bf70:	4608      	mov	r0, r1
 801bf72:	b301      	cbz	r1, 801bfb6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x4a>
 801bf74:	f105 0440 	add.w	r4, r5, #64	; 0x40
 801bf78:	460b      	mov	r3, r1
 801bf7a:	f101 0708 	add.w	r7, r1, #8
 801bf7e:	4622      	mov	r2, r4
 801bf80:	6818      	ldr	r0, [r3, #0]
 801bf82:	6859      	ldr	r1, [r3, #4]
 801bf84:	4626      	mov	r6, r4
 801bf86:	c603      	stmia	r6!, {r0, r1}
 801bf88:	3308      	adds	r3, #8
 801bf8a:	42bb      	cmp	r3, r7
 801bf8c:	4634      	mov	r4, r6
 801bf8e:	d1f7      	bne.n	801bf80 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801bf90:	6818      	ldr	r0, [r3, #0]
 801bf92:	6030      	str	r0, [r6, #0]
 801bf94:	889b      	ldrh	r3, [r3, #4]
 801bf96:	80b3      	strh	r3, [r6, #4]
 801bf98:	f895 304d 	ldrb.w	r3, [r5, #77]	; 0x4d
 801bf9c:	f895 1046 	ldrb.w	r1, [r5, #70]	; 0x46
 801bfa0:	f013 0f08 	tst.w	r3, #8
 801bfa4:	bf14      	ite	ne
 801bfa6:	f44f 7380 	movne.w	r3, #256	; 0x100
 801bfaa:	2300      	moveq	r3, #0
 801bfac:	430b      	orrs	r3, r1
 801bfae:	425b      	negs	r3, r3
 801bfb0:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 801bfb4:	4610      	mov	r0, r2
 801bfb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bfb8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bfb8:	b538      	push	{r3, r4, r5, lr}
 801bfba:	460c      	mov	r4, r1
 801bfbc:	6811      	ldr	r1, [r2, #0]
 801bfbe:	4610      	mov	r0, r2
 801bfc0:	68cd      	ldr	r5, [r1, #12]
 801bfc2:	4619      	mov	r1, r3
 801bfc4:	47a8      	blx	r5
 801bfc6:	2800      	cmp	r0, #0
 801bfc8:	bf08      	it	eq
 801bfca:	4620      	moveq	r0, r4
 801bfcc:	bd38      	pop	{r3, r4, r5, pc}

0801bfce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801bfce:	b570      	push	{r4, r5, r6, lr}
 801bfd0:	8810      	ldrh	r0, [r2, #0]
 801bfd2:	4283      	cmp	r3, r0
 801bfd4:	db17      	blt.n	801c006 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bfd6:	1e48      	subs	r0, r1, #1
 801bfd8:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801bfdc:	4283      	cmp	r3, r0
 801bfde:	dc12      	bgt.n	801c006 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bfe0:	2400      	movs	r4, #0
 801bfe2:	428c      	cmp	r4, r1
 801bfe4:	da0f      	bge.n	801c006 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801bfe6:	1860      	adds	r0, r4, r1
 801bfe8:	1040      	asrs	r0, r0, #1
 801bfea:	0085      	lsls	r5, r0, #2
 801bfec:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801bff0:	42b3      	cmp	r3, r6
 801bff2:	dd02      	ble.n	801bffa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801bff4:	3001      	adds	r0, #1
 801bff6:	b284      	uxth	r4, r0
 801bff8:	e7f3      	b.n	801bfe2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801bffa:	d102      	bne.n	801c002 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x34>
 801bffc:	442a      	add	r2, r5
 801bffe:	8850      	ldrh	r0, [r2, #2]
 801c000:	bd70      	pop	{r4, r5, r6, pc}
 801c002:	b281      	uxth	r1, r0
 801c004:	e7ed      	b.n	801bfe2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c006:	2000      	movs	r0, #0
 801c008:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c00c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>:
 801c00c:	b510      	push	{r4, lr}
 801c00e:	8ac3      	ldrh	r3, [r0, #22]
 801c010:	4299      	cmp	r1, r3
 801c012:	db05      	blt.n	801c020 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x14>
 801c014:	4b07      	ldr	r3, [pc, #28]	; (801c034 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x28>)
 801c016:	4a08      	ldr	r2, [pc, #32]	; (801c038 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x2c>)
 801c018:	4808      	ldr	r0, [pc, #32]	; (801c03c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt+0x30>)
 801c01a:	21ee      	movs	r1, #238	; 0xee
 801c01c:	f004 fcee 	bl	80209fc <__assert_func>
 801c020:	8a83      	ldrh	r3, [r0, #20]
 801c022:	240a      	movs	r4, #10
 801c024:	4419      	add	r1, r3
 801c026:	fbb1 f3f4 	udiv	r3, r1, r4
 801c02a:	fb04 1113 	mls	r1, r4, r3, r1
 801c02e:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801c032:	bd10      	pop	{r4, pc}
 801c034:	08025225 	.word	0x08025225
 801c038:	0802565a 	.word	0x0802565a
 801c03c:	08025233 	.word	0x08025233

0801c040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>:
 801c040:	b508      	push	{r3, lr}
 801c042:	8ac3      	ldrh	r3, [r0, #22]
 801c044:	4299      	cmp	r1, r3
 801c046:	db05      	blt.n	801c054 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x14>
 801c048:	4b07      	ldr	r3, [pc, #28]	; (801c068 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x28>)
 801c04a:	4a08      	ldr	r2, [pc, #32]	; (801c06c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x2c>)
 801c04c:	4808      	ldr	r0, [pc, #32]	; (801c070 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt+0x30>)
 801c04e:	21c4      	movs	r1, #196	; 0xc4
 801c050:	f004 fcd4 	bl	80209fc <__assert_func>
 801c054:	8a83      	ldrh	r3, [r0, #20]
 801c056:	220a      	movs	r2, #10
 801c058:	4419      	add	r1, r3
 801c05a:	fbb1 f3f2 	udiv	r3, r1, r2
 801c05e:	fb02 1113 	mls	r1, r2, r3, r1
 801c062:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 801c066:	bd08      	pop	{r3, pc}
 801c068:	08025225 	.word	0x08025225
 801c06c:	080253a6 	.word	0x080253a6
 801c070:	08025233 	.word	0x08025233

0801c074 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c078:	4604      	mov	r4, r0
 801c07a:	4689      	mov	r9, r1
 801c07c:	4616      	mov	r6, r2
 801c07e:	b942      	cbnz	r2, 801c092 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801c080:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
 801c084:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801c088:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 801c08c:	4630      	mov	r0, r6
 801c08e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c092:	8895      	ldrh	r5, [r2, #4]
 801c094:	4613      	mov	r3, r2
 801c096:	f100 0240 	add.w	r2, r0, #64	; 0x40
 801c09a:	f106 0e08 	add.w	lr, r6, #8
 801c09e:	4692      	mov	sl, r2
 801c0a0:	6818      	ldr	r0, [r3, #0]
 801c0a2:	6859      	ldr	r1, [r3, #4]
 801c0a4:	4617      	mov	r7, r2
 801c0a6:	c703      	stmia	r7!, {r0, r1}
 801c0a8:	3308      	adds	r3, #8
 801c0aa:	4573      	cmp	r3, lr
 801c0ac:	463a      	mov	r2, r7
 801c0ae:	d1f7      	bne.n	801c0a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x2c>
 801c0b0:	6818      	ldr	r0, [r3, #0]
 801c0b2:	6038      	str	r0, [r7, #0]
 801c0b4:	889b      	ldrh	r3, [r3, #4]
 801c0b6:	80bb      	strh	r3, [r7, #4]
 801c0b8:	f894 b04d 	ldrb.w	fp, [r4, #77]	; 0x4d
 801c0bc:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 801c0c0:	f46f 6363 	mvn.w	r3, #3632	; 0xe30
 801c0c4:	f01b 0f10 	tst.w	fp, #16
 801c0c8:	442b      	add	r3, r5
 801c0ca:	bf14      	ite	ne
 801c0cc:	f44f 7880 	movne.w	r8, #256	; 0x100
 801c0d0:	f04f 0800 	moveq.w	r8, #0
 801c0d4:	b29a      	uxth	r2, r3
 801c0d6:	ea48 0801 	orr.w	r8, r8, r1
 801c0da:	2a1d      	cmp	r2, #29
 801c0dc:	fa1f f788 	uxth.w	r7, r8
 801c0e0:	d843      	bhi.n	801c16a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf6>
 801c0e2:	2301      	movs	r3, #1
 801c0e4:	4093      	lsls	r3, r2
 801c0e6:	4a56      	ldr	r2, [pc, #344]	; (801c240 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1cc>)
 801c0e8:	4213      	tst	r3, r2
 801c0ea:	ea4f 08e8 	mov.w	r8, r8, asr #3
 801c0ee:	d114      	bne.n	801c11a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa6>
 801c0f0:	f413 7f60 	tst.w	r3, #896	; 0x380
 801c0f4:	d03d      	beq.n	801c172 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xfe>
 801c0f6:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 801c0fa:	fa1f f888 	uxth.w	r8, r8
 801c0fe:	eba1 0108 	sub.w	r1, r1, r8
 801c102:	4650      	mov	r0, sl
 801c104:	b209      	sxth	r1, r1
 801c106:	f7ff fee3 	bl	801bed0 <_ZN8touchgfx9GlyphNode6setTopEs>
 801c10a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 801c10e:	1bc7      	subs	r7, r0, r7
 801c110:	eba7 0808 	sub.w	r8, r7, r8
 801c114:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
 801c118:	e025      	b.n	801c166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 801c11a:	2100      	movs	r1, #0
 801c11c:	f104 001a 	add.w	r0, r4, #26
 801c120:	f7ff ff8e 	bl	801c040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c124:	f640 6333 	movw	r3, #3635	; 0xe33
 801c128:	4298      	cmp	r0, r3
 801c12a:	4601      	mov	r1, r0
 801c12c:	d10a      	bne.n	801c144 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd0>
 801c12e:	f8d9 3000 	ldr.w	r3, [r9]
 801c132:	4648      	mov	r0, r9
 801c134:	68db      	ldr	r3, [r3, #12]
 801c136:	4798      	blx	r3
 801c138:	7b41      	ldrb	r1, [r0, #13]
 801c13a:	7a00      	ldrb	r0, [r0, #8]
 801c13c:	f7ff feb8 	bl	801beb0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c140:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801c144:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
 801c148:	4439      	add	r1, r7
 801c14a:	4441      	add	r1, r8
 801c14c:	b209      	sxth	r1, r1
 801c14e:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
 801c152:	4650      	mov	r0, sl
 801c154:	f7ff febc 	bl	801bed0 <_ZN8touchgfx9GlyphNode6setTopEs>
 801c158:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 801c15c:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 801c160:	1a9b      	subs	r3, r3, r2
 801c162:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801c166:	4656      	mov	r6, sl
 801c168:	e790      	b.n	801c08c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801c16a:	f640 631b 	movw	r3, #3611	; 0xe1b
 801c16e:	429d      	cmp	r5, r3
 801c170:	d005      	beq.n	801c17e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x10a>
 801c172:	f025 0302 	bic.w	r3, r5, #2
 801c176:	f640 621d 	movw	r2, #3613	; 0xe1d
 801c17a:	4293      	cmp	r3, r2
 801c17c:	d11c      	bne.n	801c1b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801c17e:	1e6b      	subs	r3, r5, #1
 801c180:	b29b      	uxth	r3, r3
 801c182:	464a      	mov	r2, r9
 801c184:	4631      	mov	r1, r6
 801c186:	4620      	mov	r0, r4
 801c188:	f7ff ff16 	bl	801bfb8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c18c:	7b41      	ldrb	r1, [r0, #13]
 801c18e:	7a00      	ldrb	r0, [r0, #8]
 801c190:	f7ff fe8e 	bl	801beb0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c194:	f994 304d 	ldrsb.w	r3, [r4, #77]	; 0x4d
 801c198:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 801c19c:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	bfb4      	ite	lt
 801c1a4:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801c1a8:	2300      	movge	r3, #0
 801c1aa:	4313      	orrs	r3, r2
 801c1ac:	115a      	asrs	r2, r3, #5
 801c1ae:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c1b2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 801c1b6:	e036      	b.n	801c226 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b2>
 801c1b8:	4659      	mov	r1, fp
 801c1ba:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801c1be:	f7ff fe77 	bl	801beb0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c1c2:	f025 0310 	bic.w	r3, r5, #16
 801c1c6:	f640 6209 	movw	r2, #3593	; 0xe09
 801c1ca:	4293      	cmp	r3, r2
 801c1cc:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
 801c1d0:	d003      	beq.n	801c1da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x166>
 801c1d2:	f640 6313 	movw	r3, #3603	; 0xe13
 801c1d6:	429d      	cmp	r5, r3
 801c1d8:	d12f      	bne.n	801c23a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c6>
 801c1da:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 801c1de:	f01b 0f80 	tst.w	fp, #128	; 0x80
 801c1e2:	bf14      	ite	ne
 801c1e4:	f44f 7880 	movne.w	r8, #256	; 0x100
 801c1e8:	f04f 0800 	moveq.w	r8, #0
 801c1ec:	ea48 0803 	orr.w	r8, r8, r3
 801c1f0:	f640 6313 	movw	r3, #3603	; 0xe13
 801c1f4:	429d      	cmp	r5, r3
 801c1f6:	bf1a      	itte	ne
 801c1f8:	f105 33ff 	addne.w	r3, r5, #4294967295
 801c1fc:	b29b      	uxthne	r3, r3
 801c1fe:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801c202:	464a      	mov	r2, r9
 801c204:	4631      	mov	r1, r6
 801c206:	4620      	mov	r0, r4
 801c208:	f7ff fed6 	bl	801bfb8 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c20c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801c210:	7a82      	ldrb	r2, [r0, #10]
 801c212:	2b00      	cmp	r3, #0
 801c214:	bfb4      	ite	lt
 801c216:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801c21a:	2300      	movge	r3, #0
 801c21c:	4313      	orrs	r3, r2
 801c21e:	eba8 0803 	sub.w	r8, r8, r3
 801c222:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
 801c226:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 801c22a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 801c22e:	f7ff fe3f 	bl	801beb0 <_ZNK8touchgfx9GlyphNode3topEv.isra.2>
 801c232:	1bc0      	subs	r0, r0, r7
 801c234:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
 801c238:	e795      	b.n	801c166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf2>
 801c23a:	2300      	movs	r3, #0
 801c23c:	e7b9      	b.n	801c1b2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13e>
 801c23e:	bf00      	nop
 801c240:	3fc00079 	.word	0x3fc00079

0801c244 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c248:	460d      	mov	r5, r1
 801c24a:	2600      	movs	r6, #0
 801c24c:	f102 3eff 	add.w	lr, r2, #4294967295
 801c250:	b2b1      	uxth	r1, r6
 801c252:	4291      	cmp	r1, r2
 801c254:	da1a      	bge.n	801c28c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x48>
 801c256:	ebae 0101 	sub.w	r1, lr, r1
 801c25a:	b28c      	uxth	r4, r1
 801c25c:	8b01      	ldrh	r1, [r0, #24]
 801c25e:	f835 7b02 	ldrh.w	r7, [r5], #2
 801c262:	428c      	cmp	r4, r1
 801c264:	db05      	blt.n	801c272 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2e>
 801c266:	4b14      	ldr	r3, [pc, #80]	; (801c2b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x74>)
 801c268:	4a14      	ldr	r2, [pc, #80]	; (801c2bc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x78>)
 801c26a:	4815      	ldr	r0, [pc, #84]	; (801c2c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x7c>)
 801c26c:	21c4      	movs	r1, #196	; 0xc4
 801c26e:	f004 fbc5 	bl	80209fc <__assert_func>
 801c272:	8ac1      	ldrh	r1, [r0, #22]
 801c274:	4421      	add	r1, r4
 801c276:	f001 0101 	and.w	r1, r1, #1
 801c27a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c27e:	3601      	adds	r6, #1
 801c280:	8a49      	ldrh	r1, [r1, #18]
 801c282:	42b9      	cmp	r1, r7
 801c284:	d0e4      	beq.n	801c250 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0xc>
 801c286:	2000      	movs	r0, #0
 801c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c28c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
 801c290:	2600      	movs	r6, #0
 801c292:	441f      	add	r7, r3
 801c294:	f100 041a 	add.w	r4, r0, #26
 801c298:	b2b1      	uxth	r1, r6
 801c29a:	42b9      	cmp	r1, r7
 801c29c:	da09      	bge.n	801c2b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x6e>
 801c29e:	4620      	mov	r0, r4
 801c2a0:	f7ff fece 	bl	801c040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c2a4:	f835 8016 	ldrh.w	r8, [r5, r6, lsl #1]
 801c2a8:	4580      	cmp	r8, r0
 801c2aa:	f106 0601 	add.w	r6, r6, #1
 801c2ae:	d0f3      	beq.n	801c298 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x54>
 801c2b0:	e7e9      	b.n	801c286 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x42>
 801c2b2:	2001      	movs	r0, #1
 801c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2b8:	08025225 	.word	0x08025225
 801c2bc:	080257bc 	.word	0x080257bc
 801c2c0:	08025233 	.word	0x08025233

0801c2c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>:
 801c2c4:	b538      	push	{r3, r4, r5, lr}
 801c2c6:	8ac3      	ldrh	r3, [r0, #22]
 801c2c8:	428b      	cmp	r3, r1
 801c2ca:	da05      	bge.n	801c2d8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x14>
 801c2cc:	4b08      	ldr	r3, [pc, #32]	; (801c2f0 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x2c>)
 801c2ce:	4a09      	ldr	r2, [pc, #36]	; (801c2f4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x30>)
 801c2d0:	4809      	ldr	r0, [pc, #36]	; (801c2f8 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt+0x34>)
 801c2d2:	21c9      	movs	r1, #201	; 0xc9
 801c2d4:	f004 fb92 	bl	80209fc <__assert_func>
 801c2d8:	8a82      	ldrh	r2, [r0, #20]
 801c2da:	250a      	movs	r5, #10
 801c2dc:	440a      	add	r2, r1
 801c2de:	1a5b      	subs	r3, r3, r1
 801c2e0:	fbb2 f4f5 	udiv	r4, r2, r5
 801c2e4:	fb05 2214 	mls	r2, r5, r4, r2
 801c2e8:	8282      	strh	r2, [r0, #20]
 801c2ea:	82c3      	strh	r3, [r0, #22]
 801c2ec:	bd38      	pop	{r3, r4, r5, pc}
 801c2ee:	bf00      	nop
 801c2f0:	08025219 	.word	0x08025219
 801c2f4:	080255d5 	.word	0x080255d5
 801c2f8:	08025233 	.word	0x08025233

0801c2fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>:
 801c2fc:	b538      	push	{r3, r4, r5, lr}
 801c2fe:	8ac3      	ldrh	r3, [r0, #22]
 801c300:	2b09      	cmp	r3, #9
 801c302:	d905      	bls.n	801c310 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x14>
 801c304:	4b08      	ldr	r3, [pc, #32]	; (801c328 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x2c>)
 801c306:	4a09      	ldr	r2, [pc, #36]	; (801c32c <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x30>)
 801c308:	4809      	ldr	r0, [pc, #36]	; (801c330 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt+0x34>)
 801c30a:	21e8      	movs	r1, #232	; 0xe8
 801c30c:	f004 fb76 	bl	80209fc <__assert_func>
 801c310:	8a82      	ldrh	r2, [r0, #20]
 801c312:	250a      	movs	r5, #10
 801c314:	441a      	add	r2, r3
 801c316:	fbb2 f4f5 	udiv	r4, r2, r5
 801c31a:	fb05 2214 	mls	r2, r5, r4, r2
 801c31e:	3301      	adds	r3, #1
 801c320:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
 801c324:	82c3      	strh	r3, [r0, #22]
 801c326:	bd38      	pop	{r3, r4, r5, pc}
 801c328:	0802520d 	.word	0x0802520d
 801c32c:	08025525 	.word	0x08025525
 801c330:	08025233 	.word	0x08025233

0801c334 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c334:	b538      	push	{r3, r4, r5, lr}
 801c336:	4604      	mov	r4, r0
 801c338:	f100 051a 	add.w	r5, r0, #26
 801c33c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c33e:	2b0a      	cmp	r3, #10
 801c340:	d01c      	beq.n	801c37c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801c342:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 801c344:	b962      	cbnz	r2, 801c360 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x2c>
 801c346:	f104 051a 	add.w	r5, r4, #26
 801c34a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c34c:	2b0a      	cmp	r3, #10
 801c34e:	d015      	beq.n	801c37c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x48>
 801c350:	4620      	mov	r0, r4
 801c352:	f7ff fdcf 	bl	801bef4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c356:	4601      	mov	r1, r0
 801c358:	4628      	mov	r0, r5
 801c35a:	f7ff ffcf 	bl	801c2fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801c35e:	e7f4      	b.n	801c34a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x16>
 801c360:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c362:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 801c366:	3301      	adds	r3, #1
 801c368:	f003 0301 	and.w	r3, r3, #1
 801c36c:	3a01      	subs	r2, #1
 801c36e:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801c370:	86e3      	strh	r3, [r4, #54]	; 0x36
 801c372:	8722      	strh	r2, [r4, #56]	; 0x38
 801c374:	4628      	mov	r0, r5
 801c376:	f7ff ffc1 	bl	801c2fc <_ZN8touchgfx12TextProvider14circularBufferILj10EE8pushBackEt>
 801c37a:	e7df      	b.n	801c33c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x8>
 801c37c:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c380 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801c380:	2300      	movs	r3, #0
 801c382:	b510      	push	{r4, lr}
 801c384:	6043      	str	r3, [r0, #4]
 801c386:	60c3      	str	r3, [r0, #12]
 801c388:	7403      	strb	r3, [r0, #16]
 801c38a:	8603      	strh	r3, [r0, #48]	; 0x30
 801c38c:	8303      	strh	r3, [r0, #24]
 801c38e:	8703      	strh	r3, [r0, #56]	; 0x38
 801c390:	4604      	mov	r4, r0
 801c392:	f7ff ffcf 	bl	801c334 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c396:	4a0a      	ldr	r2, [pc, #40]	; (801c3c0 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x40>)
 801c398:	6813      	ldr	r3, [r2, #0]
 801c39a:	4611      	mov	r1, r2
 801c39c:	b913      	cbnz	r3, 801c3a4 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x24>
 801c39e:	6852      	ldr	r2, [r2, #4]
 801c3a0:	07d2      	lsls	r2, r2, #31
 801c3a2:	d50c      	bpl.n	801c3be <_ZN8touchgfx12TextProvider18initializeInternalEv+0x3e>
 801c3a4:	6848      	ldr	r0, [r1, #4]
 801c3a6:	f010 0f01 	tst.w	r0, #1
 801c3aa:	ea4f 0060 	mov.w	r0, r0, asr #1
 801c3ae:	bf18      	it	ne
 801c3b0:	5822      	ldrne	r2, [r4, r0]
 801c3b2:	4420      	add	r0, r4
 801c3b4:	bf18      	it	ne
 801c3b6:	58d3      	ldrne	r3, [r2, r3]
 801c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3bc:	4718      	bx	r3
 801c3be:	bd10      	pop	{r4, pc}
 801c3c0:	20008ba0 	.word	0x20008ba0

0801c3c4 <_ZN8touchgfx12TextProviderC1Ev>:
 801c3c4:	b510      	push	{r4, lr}
 801c3c6:	2300      	movs	r3, #0
 801c3c8:	2201      	movs	r2, #1
 801c3ca:	4604      	mov	r4, r0
 801c3cc:	6003      	str	r3, [r0, #0]
 801c3ce:	6043      	str	r3, [r0, #4]
 801c3d0:	60c3      	str	r3, [r0, #12]
 801c3d2:	7403      	strb	r3, [r0, #16]
 801c3d4:	82c3      	strh	r3, [r0, #22]
 801c3d6:	8303      	strh	r3, [r0, #24]
 801c3d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c3da:	8603      	strh	r3, [r0, #48]	; 0x30
 801c3dc:	86c3      	strh	r3, [r0, #54]	; 0x36
 801c3de:	8703      	strh	r3, [r0, #56]	; 0x38
 801c3e0:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c3e2:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 801c3e6:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
 801c3ea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 801c3ee:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
 801c3f2:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 801c3f6:	f7ff ffc3 	bl	801c380 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c3fa:	4620      	mov	r0, r4
 801c3fc:	bd10      	pop	{r4, pc}

0801c3fe <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_>:
 801c3fe:	b410      	push	{r4}
 801c400:	6082      	str	r2, [r0, #8]
 801c402:	6001      	str	r1, [r0, #0]
 801c404:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c406:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c40a:	f7ff bfb9 	b.w	801c380 <_ZN8touchgfx12TextProvider18initializeInternalEv>
	...

0801c410 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>:
 801c410:	b508      	push	{r3, lr}
 801c412:	88c2      	ldrh	r2, [r0, #6]
 801c414:	440a      	add	r2, r1
 801c416:	2a02      	cmp	r2, #2
 801c418:	dd05      	ble.n	801c426 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x16>
 801c41a:	4b06      	ldr	r3, [pc, #24]	; (801c434 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x24>)
 801c41c:	4a06      	ldr	r2, [pc, #24]	; (801c438 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x28>)
 801c41e:	4807      	ldr	r0, [pc, #28]	; (801c43c <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt+0x2c>)
 801c420:	21dd      	movs	r1, #221	; 0xdd
 801c422:	f004 faeb 	bl	80209fc <__assert_func>
 801c426:	8883      	ldrh	r3, [r0, #4]
 801c428:	80c2      	strh	r2, [r0, #6]
 801c42a:	1a59      	subs	r1, r3, r1
 801c42c:	f001 0101 	and.w	r1, r1, #1
 801c430:	8081      	strh	r1, [r0, #4]
 801c432:	bd08      	pop	{r3, pc}
 801c434:	0802525f 	.word	0x0802525f
 801c438:	08025734 	.word	0x08025734
 801c43c:	08025233 	.word	0x08025233

0801c440 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>:
 801c440:	b508      	push	{r3, lr}
 801c442:	88c3      	ldrh	r3, [r0, #6]
 801c444:	4299      	cmp	r1, r3
 801c446:	db05      	blt.n	801c454 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x14>
 801c448:	4b06      	ldr	r3, [pc, #24]	; (801c464 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x24>)
 801c44a:	4a07      	ldr	r2, [pc, #28]	; (801c468 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x28>)
 801c44c:	4807      	ldr	r0, [pc, #28]	; (801c46c <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt+0x2c>)
 801c44e:	21ee      	movs	r1, #238	; 0xee
 801c450:	f004 fad4 	bl	80209fc <__assert_func>
 801c454:	8883      	ldrh	r3, [r0, #4]
 801c456:	4419      	add	r1, r3
 801c458:	f001 0101 	and.w	r1, r1, #1
 801c45c:	f820 2011 	strh.w	r2, [r0, r1, lsl #1]
 801c460:	bd08      	pop	{r3, pc}
 801c462:	bf00      	nop
 801c464:	08025225 	.word	0x08025225
 801c468:	0802588e 	.word	0x0802588e
 801c46c:	08025233 	.word	0x08025233

0801c470 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c470:	b570      	push	{r4, r5, r6, lr}
 801c472:	8e02      	ldrh	r2, [r0, #48]	; 0x30
 801c474:	4604      	mov	r4, r0
 801c476:	b92a      	cbnz	r2, 801c484 <_ZN8touchgfx12TextProvider11getNextCharEv+0x14>
 801c478:	4b12      	ldr	r3, [pc, #72]	; (801c4c4 <_ZN8touchgfx12TextProvider11getNextCharEv+0x54>)
 801c47a:	4a13      	ldr	r2, [pc, #76]	; (801c4c8 <_ZN8touchgfx12TextProvider11getNextCharEv+0x58>)
 801c47c:	4813      	ldr	r0, [pc, #76]	; (801c4cc <_ZN8touchgfx12TextProvider11getNextCharEv+0x5c>)
 801c47e:	21cf      	movs	r1, #207	; 0xcf
 801c480:	f004 fabc 	bl	80209fc <__assert_func>
 801c484:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801c486:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 801c48a:	260a      	movs	r6, #10
 801c48c:	3301      	adds	r3, #1
 801c48e:	8b4d      	ldrh	r5, [r1, #26]
 801c490:	fbb3 f1f6 	udiv	r1, r3, r6
 801c494:	3a01      	subs	r2, #1
 801c496:	fb06 3311 	mls	r3, r6, r1, r3
 801c49a:	8602      	strh	r2, [r0, #48]	; 0x30
 801c49c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 801c49e:	f7ff ff49 	bl	801c334 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c4a2:	8b23      	ldrh	r3, [r4, #24]
 801c4a4:	2b02      	cmp	r3, #2
 801c4a6:	bf04      	itt	eq
 801c4a8:	2301      	moveq	r3, #1
 801c4aa:	8323      	strheq	r3, [r4, #24]
 801c4ac:	3412      	adds	r4, #18
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	2101      	movs	r1, #1
 801c4b2:	f7ff ffad 	bl	801c410 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	462a      	mov	r2, r5
 801c4ba:	2100      	movs	r1, #0
 801c4bc:	f7ff ffc0 	bl	801c440 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801c4c0:	4628      	mov	r0, r5
 801c4c2:	bd70      	pop	{r4, r5, r6, pc}
 801c4c4:	08025204 	.word	0x08025204
 801c4c8:	08025479 	.word	0x08025479
 801c4cc:	08025233 	.word	0x08025233

0801c4d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c4d0:	428a      	cmp	r2, r1
 801c4d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4d6:	4604      	mov	r4, r0
 801c4d8:	460e      	mov	r6, r1
 801c4da:	4615      	mov	r5, r2
 801c4dc:	469a      	mov	sl, r3
 801c4de:	dd2b      	ble.n	801c538 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801c4e0:	eba2 0801 	sub.w	r8, r2, r1
 801c4e4:	fa1f f888 	uxth.w	r8, r8
 801c4e8:	2700      	movs	r7, #0
 801c4ea:	f100 0932 	add.w	r9, r0, #50	; 0x32
 801c4ee:	f04f 0b0a 	mov.w	fp, #10
 801c4f2:	b2bb      	uxth	r3, r7
 801c4f4:	4543      	cmp	r3, r8
 801c4f6:	da1f      	bge.n	801c538 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x68>
 801c4f8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c4fa:	3701      	adds	r7, #1
 801c4fc:	b92b      	cbnz	r3, 801c50a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x3a>
 801c4fe:	4b22      	ldr	r3, [pc, #136]	; (801c588 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xb8>)
 801c500:	4a22      	ldr	r2, [pc, #136]	; (801c58c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xbc>)
 801c502:	21d7      	movs	r1, #215	; 0xd7
 801c504:	4822      	ldr	r0, [pc, #136]	; (801c590 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc0>)
 801c506:	f004 fa79 	bl	80209fc <__assert_func>
 801c50a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 801c50c:	3b01      	subs	r3, #1
 801c50e:	b29b      	uxth	r3, r3
 801c510:	441a      	add	r2, r3
 801c512:	8623      	strh	r3, [r4, #48]	; 0x30
 801c514:	fbb2 f3fb 	udiv	r3, r2, fp
 801c518:	fb0b 2313 	mls	r3, fp, r3, r2
 801c51c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c520:	4648      	mov	r0, r9
 801c522:	8b5a      	ldrh	r2, [r3, #26]
 801c524:	9201      	str	r2, [sp, #4]
 801c526:	2101      	movs	r1, #1
 801c528:	f7ff ff72 	bl	801c410 <_ZN8touchgfx12TextProvider14circularBufferILj2EE13allocateFrontEt>
 801c52c:	9a01      	ldr	r2, [sp, #4]
 801c52e:	2100      	movs	r1, #0
 801c530:	4648      	mov	r0, r9
 801c532:	f7ff ff85 	bl	801c440 <_ZN8touchgfx12TextProvider14circularBufferILj2EE9replaceAtEtt>
 801c536:	e7dc      	b.n	801c4f2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x22>
 801c538:	f104 071a 	add.w	r7, r4, #26
 801c53c:	4631      	mov	r1, r6
 801c53e:	4638      	mov	r0, r7
 801c540:	f7ff fec0 	bl	801c2c4 <_ZN8touchgfx12TextProvider14circularBufferILj10EE9dropFrontEt>
 801c544:	260a      	movs	r6, #10
 801c546:	b1c5      	cbz	r5, 801c57a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c548:	3d01      	subs	r5, #1
 801c54a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c54c:	b2ad      	uxth	r5, r5
 801c54e:	2b09      	cmp	r3, #9
 801c550:	f83a 2015 	ldrh.w	r2, [sl, r5, lsl #1]
 801c554:	dd03      	ble.n	801c55e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x8e>
 801c556:	4b0f      	ldr	r3, [pc, #60]	; (801c594 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc4>)
 801c558:	4a0f      	ldr	r2, [pc, #60]	; (801c598 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xc8>)
 801c55a:	21dd      	movs	r1, #221	; 0xdd
 801c55c:	e7d2      	b.n	801c504 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x34>
 801c55e:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 801c560:	3109      	adds	r1, #9
 801c562:	3301      	adds	r3, #1
 801c564:	fbb1 f0f6 	udiv	r0, r1, r6
 801c568:	fb06 1110 	mls	r1, r6, r0, r1
 801c56c:	85e1      	strh	r1, [r4, #46]	; 0x2e
 801c56e:	8623      	strh	r3, [r4, #48]	; 0x30
 801c570:	2100      	movs	r1, #0
 801c572:	4638      	mov	r0, r7
 801c574:	f7ff fd4a 	bl	801c00c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c578:	e7e5      	b.n	801c546 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x76>
 801c57a:	4620      	mov	r0, r4
 801c57c:	b003      	add	sp, #12
 801c57e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c582:	f7ff bed7 	b.w	801c334 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c586:	bf00      	nop
 801c588:	08025204 	.word	0x08025204
 801c58c:	080252fb 	.word	0x080252fb
 801c590:	08025233 	.word	0x08025233
 801c594:	0802525f 	.word	0x0802525f
 801c598:	08025272 	.word	0x08025272

0801c59c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5a0:	4605      	mov	r5, r0
 801c5a2:	4616      	mov	r6, r2
 801c5a4:	1c8c      	adds	r4, r1, #2
 801c5a6:	8809      	ldrh	r1, [r1, #0]
 801c5a8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c5ac:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c5b0:	42b3      	cmp	r3, r6
 801c5b2:	d124      	bne.n	801c5fe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c5b4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c5b8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c5bc:	f001 070f 	and.w	r7, r1, #15
 801c5c0:	f8cd 8000 	str.w	r8, [sp]
 801c5c4:	464b      	mov	r3, r9
 801c5c6:	4652      	mov	r2, sl
 801c5c8:	4621      	mov	r1, r4
 801c5ca:	4628      	mov	r0, r5
 801c5cc:	f7ff fe3a 	bl	801c244 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c5d0:	4683      	mov	fp, r0
 801c5d2:	b168      	cbz	r0, 801c5f0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c5d4:	eb0a 0109 	add.w	r1, sl, r9
 801c5d8:	4441      	add	r1, r8
 801c5da:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c5de:	463a      	mov	r2, r7
 801c5e0:	4649      	mov	r1, r9
 801c5e2:	4628      	mov	r0, r5
 801c5e4:	f7ff ff74 	bl	801c4d0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c5e8:	4658      	mov	r0, fp
 801c5ea:	b003      	add	sp, #12
 801c5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5f0:	eb07 010a 	add.w	r1, r7, sl
 801c5f4:	4449      	add	r1, r9
 801c5f6:	4441      	add	r1, r8
 801c5f8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c5fc:	e7d2      	b.n	801c5a4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c5fe:	f04f 0b00 	mov.w	fp, #0
 801c602:	e7f1      	b.n	801c5e8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c604 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c608:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 801c60a:	886f      	ldrh	r7, [r5, #2]
 801c60c:	4604      	mov	r4, r0
 801c60e:	087f      	lsrs	r7, r7, #1
 801c610:	260b      	movs	r6, #11
 801c612:	f100 091a 	add.w	r9, r0, #26
 801c616:	3e01      	subs	r6, #1
 801c618:	d013      	beq.n	801c642 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801c61a:	2100      	movs	r1, #0
 801c61c:	4648      	mov	r0, r9
 801c61e:	f7ff fd0f 	bl	801c040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c622:	462a      	mov	r2, r5
 801c624:	4680      	mov	r8, r0
 801c626:	4603      	mov	r3, r0
 801c628:	4639      	mov	r1, r7
 801c62a:	4620      	mov	r0, r4
 801c62c:	f7ff fccf 	bl	801bfce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c630:	b138      	cbz	r0, 801c642 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3e>
 801c632:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c636:	4642      	mov	r2, r8
 801c638:	4620      	mov	r0, r4
 801c63a:	f7ff ffaf 	bl	801c59c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c63e:	2800      	cmp	r0, #0
 801c640:	d1e9      	bne.n	801c616 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x12>
 801c642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801c648:	b570      	push	{r4, r5, r6, lr}
 801c64a:	4b21      	ldr	r3, [pc, #132]	; (801c6d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 801c64c:	681a      	ldr	r2, [r3, #0]
 801c64e:	4604      	mov	r4, r0
 801c650:	b912      	cbnz	r2, 801c658 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x10>
 801c652:	6858      	ldr	r0, [r3, #4]
 801c654:	07c0      	lsls	r0, r0, #31
 801c656:	d511      	bpl.n	801c67c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 801c658:	6858      	ldr	r0, [r3, #4]
 801c65a:	f010 0f01 	tst.w	r0, #1
 801c65e:	ea4f 0060 	mov.w	r0, r0, asr #1
 801c662:	f104 051a 	add.w	r5, r4, #26
 801c666:	bf18      	it	ne
 801c668:	5823      	ldrne	r3, [r4, r0]
 801c66a:	4420      	add	r0, r4
 801c66c:	bf18      	it	ne
 801c66e:	589a      	ldrne	r2, [r3, r2]
 801c670:	4790      	blx	r2
 801c672:	2100      	movs	r1, #0
 801c674:	4602      	mov	r2, r0
 801c676:	4628      	mov	r0, r5
 801c678:	f7ff fcc8 	bl	801c00c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c67c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801c67e:	b133      	cbz	r3, 801c68e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801c680:	f104 051a 	add.w	r5, r4, #26
 801c684:	2100      	movs	r1, #0
 801c686:	4628      	mov	r0, r5
 801c688:	f7ff fcda 	bl	801c040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c68c:	b920      	cbnz	r0, 801c698 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x50>
 801c68e:	4620      	mov	r0, r4
 801c690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c694:	f7ff beec 	b.w	801c470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c698:	4620      	mov	r0, r4
 801c69a:	f7ff ffb3 	bl	801c604 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 801c69e:	2101      	movs	r1, #1
 801c6a0:	4628      	mov	r0, r5
 801c6a2:	f7ff fccd 	bl	801c040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c6a6:	f640 133f 	movw	r3, #2367	; 0x93f
 801c6aa:	4298      	cmp	r0, r3
 801c6ac:	4606      	mov	r6, r0
 801c6ae:	d1ee      	bne.n	801c68e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801c6b0:	2100      	movs	r1, #0
 801c6b2:	4628      	mov	r0, r5
 801c6b4:	f7ff fcc4 	bl	801c040 <_ZN8touchgfx12TextProvider14circularBufferILj10EE8peekCharEt>
 801c6b8:	2101      	movs	r1, #1
 801c6ba:	4602      	mov	r2, r0
 801c6bc:	4628      	mov	r0, r5
 801c6be:	f7ff fca5 	bl	801c00c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c6c2:	4632      	mov	r2, r6
 801c6c4:	2100      	movs	r1, #0
 801c6c6:	4628      	mov	r0, r5
 801c6c8:	f7ff fca0 	bl	801c00c <_ZN8touchgfx12TextProvider14circularBufferILj10EE9replaceAtEtt>
 801c6cc:	e7df      	b.n	801c68e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x46>
 801c6ce:	bf00      	nop
 801c6d0:	20008ba8 	.word	0x20008ba8

0801c6d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6d6:	4617      	mov	r7, r2
 801c6d8:	461e      	mov	r6, r3
 801c6da:	4605      	mov	r5, r0
 801c6dc:	f7ff ffb4 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c6e0:	683b      	ldr	r3, [r7, #0]
 801c6e2:	4604      	mov	r4, r0
 801c6e4:	68db      	ldr	r3, [r3, #12]
 801c6e6:	4601      	mov	r1, r0
 801c6e8:	4638      	mov	r0, r7
 801c6ea:	4798      	blx	r3
 801c6ec:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c6f0:	b29b      	uxth	r3, r3
 801c6f2:	2b7f      	cmp	r3, #127	; 0x7f
 801c6f4:	4602      	mov	r2, r0
 801c6f6:	6030      	str	r0, [r6, #0]
 801c6f8:	d816      	bhi.n	801c728 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x54>
 801c6fa:	4639      	mov	r1, r7
 801c6fc:	4628      	mov	r0, r5
 801c6fe:	f7ff fcb9 	bl	801c074 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c702:	6030      	str	r0, [r6, #0]
 801c704:	6833      	ldr	r3, [r6, #0]
 801c706:	b15b      	cbz	r3, 801c720 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x4c>
 801c708:	7a9a      	ldrb	r2, [r3, #10]
 801c70a:	f993 300d 	ldrsb.w	r3, [r3, #13]
 801c70e:	2b00      	cmp	r3, #0
 801c710:	bfb4      	ite	lt
 801c712:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801c716:	2300      	movge	r3, #0
 801c718:	4313      	orrs	r3, r2
 801c71a:	bf0c      	ite	eq
 801c71c:	2301      	moveq	r3, #1
 801c71e:	2300      	movne	r3, #0
 801c720:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c724:	4620      	mov	r0, r4
 801c726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c728:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d0e9      	beq.n	801c704 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c730:	f640 1302 	movw	r3, #2306	; 0x902
 801c734:	429c      	cmp	r4, r3
 801c736:	d1e5      	bne.n	801c704 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x30>
 801c738:	4601      	mov	r1, r0
 801c73a:	4628      	mov	r0, r5
 801c73c:	f7ff fc16 	bl	801bf6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c740:	e7df      	b.n	801c702 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x2e>

0801c742 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c746:	4617      	mov	r7, r2
 801c748:	461e      	mov	r6, r3
 801c74a:	4605      	mov	r5, r0
 801c74c:	f7ff ff7c 	bl	801c648 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c750:	683b      	ldr	r3, [r7, #0]
 801c752:	9a06      	ldr	r2, [sp, #24]
 801c754:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801c758:	9b07      	ldr	r3, [sp, #28]
 801c75a:	4604      	mov	r4, r0
 801c75c:	4601      	mov	r1, r0
 801c75e:	4638      	mov	r0, r7
 801c760:	47c0      	blx	r8
 801c762:	f5a4 6360 	sub.w	r3, r4, #3584	; 0xe00
 801c766:	b29b      	uxth	r3, r3
 801c768:	2b7f      	cmp	r3, #127	; 0x7f
 801c76a:	4602      	mov	r2, r0
 801c76c:	6030      	str	r0, [r6, #0]
 801c76e:	d817      	bhi.n	801c7a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x5e>
 801c770:	4639      	mov	r1, r7
 801c772:	4628      	mov	r0, r5
 801c774:	f7ff fc7e 	bl	801c074 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c778:	6030      	str	r0, [r6, #0]
 801c77a:	6833      	ldr	r3, [r6, #0]
 801c77c:	b15b      	cbz	r3, 801c796 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x54>
 801c77e:	7a9a      	ldrb	r2, [r3, #10]
 801c780:	f993 300d 	ldrsb.w	r3, [r3, #13]
 801c784:	2b00      	cmp	r3, #0
 801c786:	bfb4      	ite	lt
 801c788:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801c78c:	2300      	movge	r3, #0
 801c78e:	4313      	orrs	r3, r2
 801c790:	bf0c      	ite	eq
 801c792:	2301      	moveq	r3, #1
 801c794:	2300      	movne	r3, #0
 801c796:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801c79a:	4620      	mov	r0, r4
 801c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7a0:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 801c7a4:	2b00      	cmp	r3, #0
 801c7a6:	d0e8      	beq.n	801c77a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c7a8:	f640 1302 	movw	r3, #2306	; 0x902
 801c7ac:	429c      	cmp	r4, r3
 801c7ae:	d1e4      	bne.n	801c77a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x38>
 801c7b0:	4601      	mov	r1, r0
 801c7b2:	4628      	mov	r0, r5
 801c7b4:	f7ff fbda 	bl	801bf6c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c7b8:	e7de      	b.n	801c778 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x36>

0801c7ba <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c7ba:	4602      	mov	r2, r0
 801c7bc:	b148      	cbz	r0, 801c7d2 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c7be:	2300      	movs	r3, #0
 801c7c0:	b298      	uxth	r0, r3
 801c7c2:	3301      	adds	r3, #1
 801c7c4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c7c8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c7cc:	2900      	cmp	r1, #0
 801c7ce:	d1f7      	bne.n	801c7c0 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c7d0:	4770      	bx	lr
 801c7d2:	4770      	bx	lr

0801c7d4 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801c7d4:	b140      	cbz	r0, 801c7e8 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801c7d6:	4602      	mov	r2, r0
 801c7d8:	1a13      	subs	r3, r2, r0
 801c7da:	f812 1b01 	ldrb.w	r1, [r2], #1
 801c7de:	b29b      	uxth	r3, r3
 801c7e0:	2900      	cmp	r1, #0
 801c7e2:	d1f9      	bne.n	801c7d8 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801c7e4:	4618      	mov	r0, r3
 801c7e6:	4770      	bx	lr
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	e7fb      	b.n	801c7e4 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801c7ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c7ec:	b530      	push	{r4, r5, lr}
 801c7ee:	b169      	cbz	r1, 801c80c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 801c7f0:	b168      	cbz	r0, 801c80e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801c7f2:	1e85      	subs	r5, r0, #2
 801c7f4:	460b      	mov	r3, r1
 801c7f6:	1a58      	subs	r0, r3, r1
 801c7f8:	b280      	uxth	r0, r0
 801c7fa:	4290      	cmp	r0, r2
 801c7fc:	da07      	bge.n	801c80e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801c7fe:	f813 4b01 	ldrb.w	r4, [r3], #1
 801c802:	f825 4f02 	strh.w	r4, [r5, #2]!
 801c806:	2c00      	cmp	r4, #0
 801c808:	d1f5      	bne.n	801c7f6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c80a:	bd30      	pop	{r4, r5, pc}
 801c80c:	4608      	mov	r0, r1
 801c80e:	bd30      	pop	{r4, r5, pc}

0801c810 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 801c810:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c812:	b08b      	sub	sp, #44	; 0x2c
 801c814:	460f      	mov	r7, r1
 801c816:	2100      	movs	r1, #0
 801c818:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c81c:	ad01      	add	r5, sp, #4
 801c81e:	211f      	movs	r1, #31
 801c820:	fbb0 f6f3 	udiv	r6, r0, r3
 801c824:	fb03 0416 	mls	r4, r3, r6, r0
 801c828:	2c09      	cmp	r4, #9
 801c82a:	bfd4      	ite	le
 801c82c:	3430      	addle	r4, #48	; 0x30
 801c82e:	3457      	addgt	r4, #87	; 0x57
 801c830:	b2e4      	uxtb	r4, r4
 801c832:	554c      	strb	r4, [r1, r5]
 801c834:	4630      	mov	r0, r6
 801c836:	1e4c      	subs	r4, r1, #1
 801c838:	b92e      	cbnz	r6, 801c846 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 801c83a:	4429      	add	r1, r5
 801c83c:	4638      	mov	r0, r7
 801c83e:	f7ff ffd5 	bl	801c7ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c842:	b00b      	add	sp, #44	; 0x2c
 801c844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c846:	4621      	mov	r1, r4
 801c848:	e7ea      	b.n	801c820 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

0801c84a <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c84a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c84c:	4606      	mov	r6, r0
 801c84e:	b08b      	sub	sp, #44	; 0x2c
 801c850:	4608      	mov	r0, r1
 801c852:	b349      	cbz	r1, 801c8a8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5e>
 801c854:	1e99      	subs	r1, r3, #2
 801c856:	290e      	cmp	r1, #14
 801c858:	d826      	bhi.n	801c8a8 <_ZN8touchgfx7Unicode4itoaElPtti+0x5e>
 801c85a:	2100      	movs	r1, #0
 801c85c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c860:	4634      	mov	r4, r6
 801c862:	251f      	movs	r5, #31
 801c864:	fb94 f7f3 	sdiv	r7, r4, r3
 801c868:	fb03 4417 	mls	r4, r3, r7, r4
 801c86c:	2c00      	cmp	r4, #0
 801c86e:	bfb8      	it	lt
 801c870:	4264      	neglt	r4, r4
 801c872:	2c09      	cmp	r4, #9
 801c874:	f105 31ff 	add.w	r1, r5, #4294967295
 801c878:	f10d 0e04 	add.w	lr, sp, #4
 801c87c:	bfd4      	ite	le
 801c87e:	3430      	addle	r4, #48	; 0x30
 801c880:	3457      	addgt	r4, #87	; 0x57
 801c882:	448e      	add	lr, r1
 801c884:	b2e4      	uxtb	r4, r4
 801c886:	f88e 4001 	strb.w	r4, [lr, #1]
 801c88a:	463c      	mov	r4, r7
 801c88c:	b977      	cbnz	r7, 801c8ac <_ZN8touchgfx7Unicode4itoaElPtti+0x62>
 801c88e:	2e00      	cmp	r6, #0
 801c890:	da05      	bge.n	801c89e <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c892:	ab0a      	add	r3, sp, #40	; 0x28
 801c894:	4419      	add	r1, r3
 801c896:	232d      	movs	r3, #45	; 0x2d
 801c898:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c89c:	1ea9      	subs	r1, r5, #2
 801c89e:	3101      	adds	r1, #1
 801c8a0:	ab01      	add	r3, sp, #4
 801c8a2:	4419      	add	r1, r3
 801c8a4:	f7ff ffa2 	bl	801c7ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c8a8:	b00b      	add	sp, #44	; 0x2c
 801c8aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8ac:	460d      	mov	r5, r1
 801c8ae:	e7d9      	b.n	801c864 <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

0801c8b0 <_ZN8touchgfx7Unicode4atoiEPKt>:
 801c8b0:	b510      	push	{r4, lr}
 801c8b2:	b158      	cbz	r0, 801c8cc <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c8b4:	1e82      	subs	r2, r0, #2
 801c8b6:	210a      	movs	r1, #10
 801c8b8:	2000      	movs	r0, #0
 801c8ba:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801c8be:	3b30      	subs	r3, #48	; 0x30
 801c8c0:	b29c      	uxth	r4, r3
 801c8c2:	2c09      	cmp	r4, #9
 801c8c4:	d802      	bhi.n	801c8cc <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801c8c6:	fb01 3000 	mla	r0, r1, r0, r3
 801c8ca:	e7f6      	b.n	801c8ba <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801c8cc:	bd10      	pop	{r4, pc}

0801c8ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801c8ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8d2:	b085      	sub	sp, #20
 801c8d4:	f8d0 8000 	ldr.w	r8, [r0]
 801c8d8:	9203      	str	r2, [sp, #12]
 801c8da:	468a      	mov	sl, r1
 801c8dc:	4681      	mov	r9, r0
 801c8de:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801c8e2:	9102      	str	r1, [sp, #8]
 801c8e4:	461c      	mov	r4, r3
 801c8e6:	4640      	mov	r0, r8
 801c8e8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801c8ec:	9301      	str	r3, [sp, #4]
 801c8ee:	f7ff ff64 	bl	801c7ba <_ZN8touchgfx7Unicode6strlenEPKt>
 801c8f2:	9a03      	ldr	r2, [sp, #12]
 801c8f4:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801c8f8:	8812      	ldrh	r2, [r2, #0]
 801c8fa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801c8fc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c8fe:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801c900:	9902      	ldr	r1, [sp, #8]
 801c902:	f1ba 0f00 	cmp.w	sl, #0
 801c906:	bf0c      	ite	eq
 801c908:	4603      	moveq	r3, r0
 801c90a:	1c43      	addne	r3, r0, #1
 801c90c:	2a69      	cmp	r2, #105	; 0x69
 801c90e:	b29b      	uxth	r3, r3
 801c910:	d004      	beq.n	801c91c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801c912:	d852      	bhi.n	801c9ba <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801c914:	2a58      	cmp	r2, #88	; 0x58
 801c916:	d001      	beq.n	801c91c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801c918:	2a64      	cmp	r2, #100	; 0x64
 801c91a:	d159      	bne.n	801c9d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801c91c:	b19c      	cbz	r4, 801c946 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801c91e:	b956      	cbnz	r6, 801c936 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801c920:	2801      	cmp	r0, #1
 801c922:	d108      	bne.n	801c936 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801c924:	f8b8 2000 	ldrh.w	r2, [r8]
 801c928:	2a30      	cmp	r2, #48	; 0x30
 801c92a:	bf02      	ittt	eq
 801c92c:	f108 0202 	addeq.w	r2, r8, #2
 801c930:	f8c9 2000 	streq.w	r2, [r9]
 801c934:	4630      	moveq	r0, r6
 801c936:	429e      	cmp	r6, r3
 801c938:	dd4c      	ble.n	801c9d4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 801c93a:	b2b6      	uxth	r6, r6
 801c93c:	1af4      	subs	r4, r6, r3
 801c93e:	b2a4      	uxth	r4, r4
 801c940:	4633      	mov	r3, r6
 801c942:	f04f 0b00 	mov.w	fp, #0
 801c946:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801c94a:	9a01      	ldr	r2, [sp, #4]
 801c94c:	3e01      	subs	r6, #1
 801c94e:	b162      	cbz	r2, 801c96a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801c950:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c952:	4293      	cmp	r3, r2
 801c954:	da09      	bge.n	801c96a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801c956:	1ad2      	subs	r2, r2, r3
 801c958:	b292      	uxth	r2, r2
 801c95a:	b939      	cbnz	r1, 801c96c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801c95c:	f1bb 0f00 	cmp.w	fp, #0
 801c960:	d050      	beq.n	801ca04 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801c962:	2800      	cmp	r0, #0
 801c964:	d04e      	beq.n	801ca04 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801c966:	4414      	add	r4, r2
 801c968:	b2a4      	uxth	r4, r4
 801c96a:	2200      	movs	r2, #0
 801c96c:	682b      	ldr	r3, [r5, #0]
 801c96e:	42b3      	cmp	r3, r6
 801c970:	da07      	bge.n	801c982 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801c972:	f1ba 0f00 	cmp.w	sl, #0
 801c976:	d004      	beq.n	801c982 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801c978:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801c97c:	682b      	ldr	r3, [r5, #0]
 801c97e:	3301      	adds	r3, #1
 801c980:	602b      	str	r3, [r5, #0]
 801c982:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801c986:	b124      	cbz	r4, 801c992 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801c988:	6829      	ldr	r1, [r5, #0]
 801c98a:	3c01      	subs	r4, #1
 801c98c:	428e      	cmp	r6, r1
 801c98e:	b2a4      	uxth	r4, r4
 801c990:	dc22      	bgt.n	801c9d8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 801c992:	b140      	cbz	r0, 801c9a6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801c994:	f8d9 3000 	ldr.w	r3, [r9]
 801c998:	8819      	ldrh	r1, [r3, #0]
 801c99a:	b121      	cbz	r1, 801c9a6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801c99c:	6829      	ldr	r1, [r5, #0]
 801c99e:	3801      	subs	r0, #1
 801c9a0:	428e      	cmp	r6, r1
 801c9a2:	b280      	uxth	r0, r0
 801c9a4:	dc1e      	bgt.n	801c9e4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801c9a6:	2020      	movs	r0, #32
 801c9a8:	b122      	cbz	r2, 801c9b4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 801c9aa:	6829      	ldr	r1, [r5, #0]
 801c9ac:	3a01      	subs	r2, #1
 801c9ae:	428e      	cmp	r6, r1
 801c9b0:	b292      	uxth	r2, r2
 801c9b2:	dc21      	bgt.n	801c9f8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 801c9b4:	b005      	add	sp, #20
 801c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9ba:	2a73      	cmp	r2, #115	; 0x73
 801c9bc:	d003      	beq.n	801c9c6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 801c9be:	2a78      	cmp	r2, #120	; 0x78
 801c9c0:	d0ac      	beq.n	801c91c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801c9c2:	2a6f      	cmp	r2, #111	; 0x6f
 801c9c4:	e7a9      	b.n	801c91a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 801c9c6:	2c00      	cmp	r4, #0
 801c9c8:	d0bd      	beq.n	801c946 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801c9ca:	4286      	cmp	r6, r0
 801c9cc:	da00      	bge.n	801c9d0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801c9ce:	b2b0      	uxth	r0, r6
 801c9d0:	2400      	movs	r4, #0
 801c9d2:	e7b8      	b.n	801c946 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801c9d4:	2400      	movs	r4, #0
 801c9d6:	e7b4      	b.n	801c942 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 801c9d8:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801c9dc:	682b      	ldr	r3, [r5, #0]
 801c9de:	3301      	adds	r3, #1
 801c9e0:	602b      	str	r3, [r5, #0]
 801c9e2:	e7d0      	b.n	801c986 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 801c9e4:	1c9c      	adds	r4, r3, #2
 801c9e6:	f8c9 4000 	str.w	r4, [r9]
 801c9ea:	881b      	ldrh	r3, [r3, #0]
 801c9ec:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 801c9f0:	682b      	ldr	r3, [r5, #0]
 801c9f2:	3301      	adds	r3, #1
 801c9f4:	602b      	str	r3, [r5, #0]
 801c9f6:	e7cc      	b.n	801c992 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801c9f8:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 801c9fc:	682b      	ldr	r3, [r5, #0]
 801c9fe:	3301      	adds	r3, #1
 801ca00:	602b      	str	r3, [r5, #0]
 801ca02:	e7d1      	b.n	801c9a8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 801ca04:	2a00      	cmp	r2, #0
 801ca06:	d0b1      	beq.n	801c96c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801ca08:	f04f 0e20 	mov.w	lr, #32
 801ca0c:	6829      	ldr	r1, [r5, #0]
 801ca0e:	3a01      	subs	r2, #1
 801ca10:	42b1      	cmp	r1, r6
 801ca12:	b292      	uxth	r2, r2
 801ca14:	daa9      	bge.n	801c96a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801ca16:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801ca1a:	682b      	ldr	r3, [r5, #0]
 801ca1c:	3301      	adds	r3, #1
 801ca1e:	602b      	str	r3, [r5, #0]
 801ca20:	2a00      	cmp	r2, #0
 801ca22:	d1f3      	bne.n	801ca0c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 801ca24:	e7a2      	b.n	801c96c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

0801ca26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801ca26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca2a:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ca2e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801ca32:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801ca34:	9f08      	ldr	r7, [sp, #32]
 801ca36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801ca38:	4604      	mov	r4, r0
 801ca3a:	2000      	movs	r0, #0
 801ca3c:	8008      	strh	r0, [r1, #0]
 801ca3e:	f04f 0801 	mov.w	r8, #1
 801ca42:	7010      	strb	r0, [r2, #0]
 801ca44:	7018      	strb	r0, [r3, #0]
 801ca46:	f88e 0000 	strb.w	r0, [lr]
 801ca4a:	f88c 0000 	strb.w	r0, [ip]
 801ca4e:	7030      	strb	r0, [r6, #0]
 801ca50:	6820      	ldr	r0, [r4, #0]
 801ca52:	8800      	ldrh	r0, [r0, #0]
 801ca54:	b190      	cbz	r0, 801ca7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801ca56:	282b      	cmp	r0, #43	; 0x2b
 801ca58:	d001      	beq.n	801ca5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 801ca5a:	2820      	cmp	r0, #32
 801ca5c:	d104      	bne.n	801ca68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 801ca5e:	8008      	strh	r0, [r1, #0]
 801ca60:	6820      	ldr	r0, [r4, #0]
 801ca62:	3002      	adds	r0, #2
 801ca64:	6020      	str	r0, [r4, #0]
 801ca66:	e7f3      	b.n	801ca50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 801ca68:	282d      	cmp	r0, #45	; 0x2d
 801ca6a:	d102      	bne.n	801ca72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 801ca6c:	f882 8000 	strb.w	r8, [r2]
 801ca70:	e7f6      	b.n	801ca60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801ca72:	2823      	cmp	r0, #35	; 0x23
 801ca74:	d102      	bne.n	801ca7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801ca76:	f883 8000 	strb.w	r8, [r3]
 801ca7a:	e7f1      	b.n	801ca60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801ca7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ca80:	2b09      	cmp	r3, #9
 801ca82:	d901      	bls.n	801ca88 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 801ca84:	282a      	cmp	r0, #42	; 0x2a
 801ca86:	d114      	bne.n	801cab2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801ca88:	2201      	movs	r2, #1
 801ca8a:	f88c 2000 	strb.w	r2, [ip]
 801ca8e:	6823      	ldr	r3, [r4, #0]
 801ca90:	8819      	ldrh	r1, [r3, #0]
 801ca92:	2930      	cmp	r1, #48	; 0x30
 801ca94:	bf02      	ittt	eq
 801ca96:	3302      	addeq	r3, #2
 801ca98:	6023      	streq	r3, [r4, #0]
 801ca9a:	f88e 2000 	strbeq.w	r2, [lr]
 801ca9e:	6820      	ldr	r0, [r4, #0]
 801caa0:	8803      	ldrh	r3, [r0, #0]
 801caa2:	2b2a      	cmp	r3, #42	; 0x2a
 801caa4:	d11e      	bne.n	801cae4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 801caa6:	f04f 33ff 	mov.w	r3, #4294967295
 801caaa:	603b      	str	r3, [r7, #0]
 801caac:	6823      	ldr	r3, [r4, #0]
 801caae:	3302      	adds	r3, #2
 801cab0:	6023      	str	r3, [r4, #0]
 801cab2:	6823      	ldr	r3, [r4, #0]
 801cab4:	881b      	ldrh	r3, [r3, #0]
 801cab6:	2b2e      	cmp	r3, #46	; 0x2e
 801cab8:	d112      	bne.n	801cae0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801caba:	2301      	movs	r3, #1
 801cabc:	7033      	strb	r3, [r6, #0]
 801cabe:	6823      	ldr	r3, [r4, #0]
 801cac0:	1c98      	adds	r0, r3, #2
 801cac2:	6020      	str	r0, [r4, #0]
 801cac4:	885b      	ldrh	r3, [r3, #2]
 801cac6:	2b2a      	cmp	r3, #42	; 0x2a
 801cac8:	d118      	bne.n	801cafc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 801caca:	f04f 33ff 	mov.w	r3, #4294967295
 801cace:	602b      	str	r3, [r5, #0]
 801cad0:	6823      	ldr	r3, [r4, #0]
 801cad2:	3302      	adds	r3, #2
 801cad4:	6023      	str	r3, [r4, #0]
 801cad6:	682b      	ldr	r3, [r5, #0]
 801cad8:	2b06      	cmp	r3, #6
 801cada:	bfa8      	it	ge
 801cadc:	2306      	movge	r3, #6
 801cade:	602b      	str	r3, [r5, #0]
 801cae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cae4:	f7ff fee4 	bl	801c8b0 <_ZN8touchgfx7Unicode4atoiEPKt>
 801cae8:	6038      	str	r0, [r7, #0]
 801caea:	6822      	ldr	r2, [r4, #0]
 801caec:	8813      	ldrh	r3, [r2, #0]
 801caee:	3b30      	subs	r3, #48	; 0x30
 801caf0:	b29b      	uxth	r3, r3
 801caf2:	2b09      	cmp	r3, #9
 801caf4:	d8dd      	bhi.n	801cab2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801caf6:	3202      	adds	r2, #2
 801caf8:	6022      	str	r2, [r4, #0]
 801cafa:	e7f6      	b.n	801caea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 801cafc:	f7ff fed8 	bl	801c8b0 <_ZN8touchgfx7Unicode4atoiEPKt>
 801cb00:	6028      	str	r0, [r5, #0]
 801cb02:	6822      	ldr	r2, [r4, #0]
 801cb04:	8813      	ldrh	r3, [r2, #0]
 801cb06:	3b30      	subs	r3, #48	; 0x30
 801cb08:	b29b      	uxth	r3, r3
 801cb0a:	2b09      	cmp	r3, #9
 801cb0c:	d8e3      	bhi.n	801cad6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 801cb0e:	3202      	adds	r2, #2
 801cb10:	6022      	str	r2, [r4, #0]
 801cb12:	e7f6      	b.n	801cb02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>

0801cb14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801cb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb18:	b0a3      	sub	sp, #140	; 0x8c
 801cb1a:	2500      	movs	r5, #0
 801cb1c:	af11      	add	r7, sp, #68	; 0x44
 801cb1e:	4606      	mov	r6, r0
 801cb20:	4689      	mov	r9, r1
 801cb22:	9209      	str	r2, [sp, #36]	; 0x24
 801cb24:	4629      	mov	r1, r5
 801cb26:	2242      	movs	r2, #66	; 0x42
 801cb28:	4638      	mov	r0, r7
 801cb2a:	461c      	mov	r4, r3
 801cb2c:	950d      	str	r5, [sp, #52]	; 0x34
 801cb2e:	f7fe fda2 	bl	801b676 <_ZN8touchgfx6memsetEPvhm>
 801cb32:	b116      	cbz	r6, 801cb3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801cb34:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cb36:	b921      	cbnz	r1, 801cb42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 801cb38:	8031      	strh	r1, [r6, #0]
 801cb3a:	4630      	mov	r0, r6
 801cb3c:	b023      	add	sp, #140	; 0x8c
 801cb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb42:	f8df a250 	ldr.w	sl, [pc, #592]	; 801cd94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 801cb46:	f8da 0000 	ldr.w	r0, [sl]
 801cb4a:	6803      	ldr	r3, [r0, #0]
 801cb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb4e:	4798      	blx	r3
 801cb50:	f109 3bff 	add.w	fp, r9, #4294967295
 801cb54:	9009      	str	r0, [sp, #36]	; 0x24
 801cb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb58:	881a      	ldrh	r2, [r3, #0]
 801cb5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb5c:	2a00      	cmp	r2, #0
 801cb5e:	f000 80c1 	beq.w	801cce4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d0>
 801cb62:	459b      	cmp	fp, r3
 801cb64:	f340 80be 	ble.w	801cce4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d0>
 801cb68:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801cb6c:	f8b8 2000 	ldrh.w	r2, [r8]
 801cb70:	2a00      	cmp	r2, #0
 801cb72:	d0f0      	beq.n	801cb56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801cb74:	2a25      	cmp	r2, #37	; 0x25
 801cb76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cb78:	f000 80b8 	beq.w	801ccec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d8>
 801cb7c:	459b      	cmp	fp, r3
 801cb7e:	f340 80b5 	ble.w	801ccec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d8>
 801cb82:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801cb86:	f108 0202 	add.w	r2, r8, #2
 801cb8a:	3301      	adds	r3, #1
 801cb8c:	9209      	str	r2, [sp, #36]	; 0x24
 801cb8e:	930d      	str	r3, [sp, #52]	; 0x34
 801cb90:	e7ea      	b.n	801cb68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 801cb92:	3b63      	subs	r3, #99	; 0x63
 801cb94:	2b01      	cmp	r3, #1
 801cb96:	f200 80f3 	bhi.w	801cd80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26c>
 801cb9a:	9710      	str	r7, [sp, #64]	; 0x40
 801cb9c:	8813      	ldrh	r3, [r2, #0]
 801cb9e:	2b69      	cmp	r3, #105	; 0x69
 801cba0:	d068      	beq.n	801cc74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801cba2:	d81c      	bhi.n	801cbde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 801cba4:	2b63      	cmp	r3, #99	; 0x63
 801cba6:	d031      	beq.n	801cc0c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 801cba8:	2b64      	cmp	r3, #100	; 0x64
 801cbaa:	d063      	beq.n	801cc74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801cbac:	2b58      	cmp	r3, #88	; 0x58
 801cbae:	f000 8082 	beq.w	801ccb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 801cbb2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801cbb6:	46a0      	mov	r8, r4
 801cbb8:	e02f      	b.n	801cc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801cbba:	2b73      	cmp	r3, #115	; 0x73
 801cbbc:	d0ed      	beq.n	801cb9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801cbbe:	d803      	bhi.n	801cbc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 801cbc0:	2b6f      	cmp	r3, #111	; 0x6f
 801cbc2:	f040 80dd 	bne.w	801cd80 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26c>
 801cbc6:	e7e8      	b.n	801cb9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801cbc8:	2b75      	cmp	r3, #117	; 0x75
 801cbca:	d0e6      	beq.n	801cb9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801cbcc:	2b78      	cmp	r3, #120	; 0x78
 801cbce:	e7f8      	b.n	801cbc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 801cbd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cbd2:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801cbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbd8:	3302      	adds	r3, #2
 801cbda:	9309      	str	r3, [sp, #36]	; 0x24
 801cbdc:	e7bb      	b.n	801cb56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801cbde:	2b73      	cmp	r3, #115	; 0x73
 801cbe0:	d037      	beq.n	801cc52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 801cbe2:	d808      	bhi.n	801cbf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 801cbe4:	2b6f      	cmp	r3, #111	; 0x6f
 801cbe6:	d1e4      	bne.n	801cbb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801cbe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cbea:	f104 0804 	add.w	r8, r4, #4
 801cbee:	eba9 0202 	sub.w	r2, r9, r2
 801cbf2:	2308      	movs	r3, #8
 801cbf4:	e059      	b.n	801ccaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801cbf6:	2b75      	cmp	r3, #117	; 0x75
 801cbf8:	d051      	beq.n	801cc9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 801cbfa:	2b78      	cmp	r3, #120	; 0x78
 801cbfc:	d1d9      	bne.n	801cbb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801cbfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc00:	f104 0804 	add.w	r8, r4, #4
 801cc04:	eba9 0202 	sub.w	r2, r9, r2
 801cc08:	2310      	movs	r3, #16
 801cc0a:	e04e      	b.n	801ccaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801cc0c:	7823      	ldrb	r3, [r4, #0]
 801cc0e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801cc12:	f104 0804 	add.w	r8, r4, #4
 801cc16:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801cc1a:	aa0d      	add	r2, sp, #52	; 0x34
 801cc1c:	9205      	str	r2, [sp, #20]
 801cc1e:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801cc22:	9204      	str	r2, [sp, #16]
 801cc24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc26:	9203      	str	r2, [sp, #12]
 801cc28:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801cc2c:	9202      	str	r2, [sp, #8]
 801cc2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cc30:	9201      	str	r2, [sp, #4]
 801cc32:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801cc36:	9200      	str	r2, [sp, #0]
 801cc38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801cc3c:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801cc40:	9607      	str	r6, [sp, #28]
 801cc42:	f8cd 9018 	str.w	r9, [sp, #24]
 801cc46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cc48:	a810      	add	r0, sp, #64	; 0x40
 801cc4a:	f7ff fe40 	bl	801c8ce <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801cc4e:	4644      	mov	r4, r8
 801cc50:	e7c1      	b.n	801cbd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801cc52:	f8da 0000 	ldr.w	r0, [sl]
 801cc56:	6821      	ldr	r1, [r4, #0]
 801cc58:	6803      	ldr	r3, [r0, #0]
 801cc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc5c:	4798      	blx	r3
 801cc5e:	9010      	str	r0, [sp, #64]	; 0x40
 801cc60:	f8da 0000 	ldr.w	r0, [sl]
 801cc64:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cc66:	6803      	ldr	r3, [r0, #0]
 801cc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc6a:	4798      	blx	r3
 801cc6c:	f104 0804 	add.w	r8, r4, #4
 801cc70:	9009      	str	r0, [sp, #36]	; 0x24
 801cc72:	e7d2      	b.n	801cc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801cc74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cc76:	6820      	ldr	r0, [r4, #0]
 801cc78:	eba9 0202 	sub.w	r2, r9, r2
 801cc7c:	230a      	movs	r3, #10
 801cc7e:	b292      	uxth	r2, r2
 801cc80:	4639      	mov	r1, r7
 801cc82:	f7ff fde2 	bl	801c84a <_ZN8touchgfx7Unicode4itoaElPtti>
 801cc86:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801cc8a:	2b2d      	cmp	r3, #45	; 0x2d
 801cc8c:	f104 0804 	add.w	r8, r4, #4
 801cc90:	d1c3      	bne.n	801cc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801cc92:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cc96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc98:	3302      	adds	r3, #2
 801cc9a:	9310      	str	r3, [sp, #64]	; 0x40
 801cc9c:	e7bd      	b.n	801cc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801cc9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cca0:	f104 0804 	add.w	r8, r4, #4
 801cca4:	eba9 0202 	sub.w	r2, r9, r2
 801cca8:	230a      	movs	r3, #10
 801ccaa:	b292      	uxth	r2, r2
 801ccac:	4639      	mov	r1, r7
 801ccae:	6820      	ldr	r0, [r4, #0]
 801ccb0:	f7ff fdae 	bl	801c810 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801ccb4:	e7b1      	b.n	801cc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ccb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ccb8:	6820      	ldr	r0, [r4, #0]
 801ccba:	eba9 0202 	sub.w	r2, r9, r2
 801ccbe:	b292      	uxth	r2, r2
 801ccc0:	2310      	movs	r3, #16
 801ccc2:	4639      	mov	r1, r7
 801ccc4:	f7ff fda4 	bl	801c810 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801ccc8:	f104 0804 	add.w	r8, r4, #4
 801cccc:	463a      	mov	r2, r7
 801ccce:	8813      	ldrh	r3, [r2, #0]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d0a2      	beq.n	801cc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ccd4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ccd8:	2919      	cmp	r1, #25
 801ccda:	bf9c      	itt	ls
 801ccdc:	3b20      	subls	r3, #32
 801ccde:	8013      	strhls	r3, [r2, #0]
 801cce0:	3202      	adds	r2, #2
 801cce2:	e7f4      	b.n	801ccce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 801cce4:	2200      	movs	r2, #0
 801cce6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ccea:	e726      	b.n	801cb3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801ccec:	459b      	cmp	fp, r3
 801ccee:	f77f af32 	ble.w	801cb56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801ccf2:	f108 0302 	add.w	r3, r8, #2
 801ccf6:	9309      	str	r3, [sp, #36]	; 0x24
 801ccf8:	ab0f      	add	r3, sp, #60	; 0x3c
 801ccfa:	9304      	str	r3, [sp, #16]
 801ccfc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801cd00:	9303      	str	r3, [sp, #12]
 801cd02:	ab0e      	add	r3, sp, #56	; 0x38
 801cd04:	9302      	str	r3, [sp, #8]
 801cd06:	ab0c      	add	r3, sp, #48	; 0x30
 801cd08:	9301      	str	r3, [sp, #4]
 801cd0a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801cd0e:	9300      	str	r3, [sp, #0]
 801cd10:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801cd14:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801cd18:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801cd1c:	a809      	add	r0, sp, #36	; 0x24
 801cd1e:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801cd22:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801cd26:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801cd2a:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801cd2e:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801cd32:	950e      	str	r5, [sp, #56]	; 0x38
 801cd34:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801cd38:	950f      	str	r5, [sp, #60]	; 0x3c
 801cd3a:	f7ff fe74 	bl	801ca26 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801cd3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cd40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	bfbe      	ittt	lt
 801cd46:	6823      	ldrlt	r3, [r4, #0]
 801cd48:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cd4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cd4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cd50:	bfb8      	it	lt
 801cd52:	3404      	addlt	r4, #4
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	bfbe      	ittt	lt
 801cd58:	6823      	ldrlt	r3, [r4, #0]
 801cd5a:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cd5e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801cd60:	8813      	ldrh	r3, [r2, #0]
 801cd62:	bfb8      	it	lt
 801cd64:	3404      	addlt	r4, #4
 801cd66:	2b69      	cmp	r3, #105	; 0x69
 801cd68:	f43f af17 	beq.w	801cb9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801cd6c:	f63f af25 	bhi.w	801cbba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 801cd70:	2b58      	cmp	r3, #88	; 0x58
 801cd72:	f43f af12 	beq.w	801cb9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801cd76:	f63f af0c 	bhi.w	801cb92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 801cd7a:	2b25      	cmp	r3, #37	; 0x25
 801cd7c:	f43f af28 	beq.w	801cbd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 801cd80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd82:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 801cd86:	f8b8 2000 	ldrh.w	r2, [r8]
 801cd8a:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801cd8e:	3301      	adds	r3, #1
 801cd90:	930d      	str	r3, [sp, #52]	; 0x34
 801cd92:	e720      	b.n	801cbd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801cd94:	2001a8ac 	.word	0x2001a8ac

0801cd98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801cd98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd9a:	4605      	mov	r5, r0
 801cd9c:	b0a1      	sub	sp, #132	; 0x84
 801cd9e:	4610      	mov	r0, r2
 801cda0:	460e      	mov	r6, r1
 801cda2:	4614      	mov	r4, r2
 801cda4:	461f      	mov	r7, r3
 801cda6:	f7ff fd15 	bl	801c7d4 <_ZN8touchgfx7Unicode6strlenEPKc>
 801cdaa:	283f      	cmp	r0, #63	; 0x3f
 801cdac:	dd06      	ble.n	801cdbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 801cdae:	4b0a      	ldr	r3, [pc, #40]	; (801cdd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 801cdb0:	4a0a      	ldr	r2, [pc, #40]	; (801cddc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 801cdb2:	480b      	ldr	r0, [pc, #44]	; (801cde0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 801cdb4:	f240 11bf 	movw	r1, #447	; 0x1bf
 801cdb8:	f003 fe20 	bl	80209fc <__assert_func>
 801cdbc:	4621      	mov	r1, r4
 801cdbe:	2240      	movs	r2, #64	; 0x40
 801cdc0:	4668      	mov	r0, sp
 801cdc2:	f7ff fd13 	bl	801c7ec <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801cdc6:	463b      	mov	r3, r7
 801cdc8:	466a      	mov	r2, sp
 801cdca:	4631      	mov	r1, r6
 801cdcc:	4628      	mov	r0, r5
 801cdce:	f7ff fea1 	bl	801cb14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 801cdd2:	b021      	add	sp, #132	; 0x84
 801cdd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cdd6:	bf00      	nop
 801cdd8:	08025967 	.word	0x08025967
 801cddc:	080259aa 	.word	0x080259aa
 801cde0:	08025984 	.word	0x08025984

0801cde4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801cde4:	b40c      	push	{r2, r3}
 801cde6:	b507      	push	{r0, r1, r2, lr}
 801cde8:	ab04      	add	r3, sp, #16
 801cdea:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdee:	9301      	str	r3, [sp, #4]
 801cdf0:	f7ff ffd2 	bl	801cd98 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801cdf4:	b003      	add	sp, #12
 801cdf6:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdfa:	b002      	add	sp, #8
 801cdfc:	4770      	bx	lr
	...

0801ce00 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801ce00:	4b01      	ldr	r3, [pc, #4]	; (801ce08 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801ce02:	6018      	str	r0, [r3, #0]
 801ce04:	4770      	bx	lr
 801ce06:	bf00      	nop
 801ce08:	2001a920 	.word	0x2001a920

0801ce0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801ce0c:	4b07      	ldr	r3, [pc, #28]	; (801ce2c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x20>)
 801ce0e:	881a      	ldrh	r2, [r3, #0]
 801ce10:	4290      	cmp	r0, r2
 801ce12:	db09      	blt.n	801ce28 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801ce14:	4b06      	ldr	r3, [pc, #24]	; (801ce30 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x24>)
 801ce16:	881b      	ldrh	r3, [r3, #0]
 801ce18:	4413      	add	r3, r2
 801ce1a:	4298      	cmp	r0, r3
 801ce1c:	da04      	bge.n	801ce28 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x1c>
 801ce1e:	4b05      	ldr	r3, [pc, #20]	; (801ce34 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x28>)
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801ce26:	4770      	bx	lr
 801ce28:	2000      	movs	r0, #0
 801ce2a:	4770      	bx	lr
 801ce2c:	2001a940 	.word	0x2001a940
 801ce30:	2001a944 	.word	0x2001a944
 801ce34:	2001a924 	.word	0x2001a924

0801ce38 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801ce38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce3c:	4e26      	ldr	r6, [pc, #152]	; (801ced8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801ce3e:	6833      	ldr	r3, [r6, #0]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d046      	beq.n	801ced2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801ce44:	4a25      	ldr	r2, [pc, #148]	; (801cedc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801ce46:	4d26      	ldr	r5, [pc, #152]	; (801cee0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801ce48:	8810      	ldrh	r0, [r2, #0]
 801ce4a:	882c      	ldrh	r4, [r5, #0]
 801ce4c:	4f25      	ldr	r7, [pc, #148]	; (801cee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801ce4e:	4420      	add	r0, r4
 801ce50:	1c42      	adds	r2, r0, #1
 801ce52:	f022 0201 	bic.w	r2, r2, #1
 801ce56:	0412      	lsls	r2, r2, #16
 801ce58:	0c12      	lsrs	r2, r2, #16
 801ce5a:	0051      	lsls	r1, r2, #1
 801ce5c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 801ce60:	220e      	movs	r2, #14
 801ce62:	fb02 fe04 	mul.w	lr, r2, r4
 801ce66:	eb08 0c01 	add.w	ip, r8, r1
 801ce6a:	eb03 0208 	add.w	r2, r3, r8
 801ce6e:	4c1e      	ldr	r4, [pc, #120]	; (801cee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801ce70:	603a      	str	r2, [r7, #0]
 801ce72:	eb03 020c 	add.w	r2, r3, ip
 801ce76:	6022      	str	r2, [r4, #0]
 801ce78:	44f4      	add	ip, lr
 801ce7a:	4a1c      	ldr	r2, [pc, #112]	; (801ceec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801ce7c:	4463      	add	r3, ip
 801ce7e:	6013      	str	r3, [r2, #0]
 801ce80:	4a1b      	ldr	r2, [pc, #108]	; (801cef0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801ce82:	2300      	movs	r3, #0
 801ce84:	8013      	strh	r3, [r2, #0]
 801ce86:	4a1b      	ldr	r2, [pc, #108]	; (801cef4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 801ce88:	6812      	ldr	r2, [r2, #0]
 801ce8a:	eba2 0208 	sub.w	r2, r2, r8
 801ce8e:	1a52      	subs	r2, r2, r1
 801ce90:	4919      	ldr	r1, [pc, #100]	; (801cef8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xc0>)
 801ce92:	eba2 020e 	sub.w	r2, r2, lr
 801ce96:	600a      	str	r2, [r1, #0]
 801ce98:	4a18      	ldr	r2, [pc, #96]	; (801cefc <_ZN8touchgfx6Bitmap10clearCacheEv+0xc4>)
 801ce9a:	469e      	mov	lr, r3
 801ce9c:	8013      	strh	r3, [r2, #0]
 801ce9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801cea2:	4283      	cmp	r3, r0
 801cea4:	d007      	beq.n	801ceb6 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7e>
 801cea6:	6832      	ldr	r2, [r6, #0]
 801cea8:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 801ceac:	683a      	ldr	r2, [r7, #0]
 801ceae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801ceb2:	3301      	adds	r3, #1
 801ceb4:	e7f5      	b.n	801cea2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6a>
 801ceb6:	882d      	ldrh	r5, [r5, #0]
 801ceb8:	6820      	ldr	r0, [r4, #0]
 801ceba:	2300      	movs	r3, #0
 801cebc:	240e      	movs	r4, #14
 801cebe:	42ab      	cmp	r3, r5
 801cec0:	d207      	bcs.n	801ced2 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9a>
 801cec2:	fb04 0203 	mla	r2, r4, r3, r0
 801cec6:	3301      	adds	r3, #1
 801cec8:	7b11      	ldrb	r1, [r2, #12]
 801ceca:	f36f 1145 	bfc	r1, #5, #1
 801cece:	7311      	strb	r1, [r2, #12]
 801ced0:	e7f5      	b.n	801cebe <_ZN8touchgfx6Bitmap10clearCacheEv+0x86>
 801ced2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ced6:	bf00      	nop
 801ced8:	2001a924 	.word	0x2001a924
 801cedc:	2001a940 	.word	0x2001a940
 801cee0:	2001a944 	.word	0x2001a944
 801cee4:	2001a938 	.word	0x2001a938
 801cee8:	2001a928 	.word	0x2001a928
 801ceec:	2001a930 	.word	0x2001a930
 801cef0:	2001a942 	.word	0x2001a942
 801cef4:	2001a92c 	.word	0x2001a92c
 801cef8:	2001a93c 	.word	0x2001a93c
 801cefc:	2001a934 	.word	0x2001a934

0801cf00 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801cf00:	b510      	push	{r4, lr}
 801cf02:	4b10      	ldr	r3, [pc, #64]	; (801cf44 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	b9db      	cbnz	r3, 801cf40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cf08:	b1d1      	cbz	r1, 801cf40 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>
 801cf0a:	4b0f      	ldr	r3, [pc, #60]	; (801cf48 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 801cf0c:	801a      	strh	r2, [r3, #0]
 801cf0e:	4b0f      	ldr	r3, [pc, #60]	; (801cf4c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 801cf10:	881b      	ldrh	r3, [r3, #0]
 801cf12:	b292      	uxth	r2, r2
 801cf14:	240e      	movs	r4, #14
 801cf16:	4413      	add	r3, r2
 801cf18:	4362      	muls	r2, r4
 801cf1a:	2406      	movs	r4, #6
 801cf1c:	fb04 2203 	mla	r2, r4, r3, r2
 801cf20:	4291      	cmp	r1, r2
 801cf22:	d805      	bhi.n	801cf30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x30>
 801cf24:	4b0a      	ldr	r3, [pc, #40]	; (801cf50 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 801cf26:	4a0b      	ldr	r2, [pc, #44]	; (801cf54 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 801cf28:	480b      	ldr	r0, [pc, #44]	; (801cf58 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 801cf2a:	2137      	movs	r1, #55	; 0x37
 801cf2c:	f003 fd66 	bl	80209fc <__assert_func>
 801cf30:	4b0a      	ldr	r3, [pc, #40]	; (801cf5c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 801cf32:	6019      	str	r1, [r3, #0]
 801cf34:	4b0a      	ldr	r3, [pc, #40]	; (801cf60 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x60>)
 801cf36:	6018      	str	r0, [r3, #0]
 801cf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cf3c:	f7ff bf7c 	b.w	801ce38 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801cf40:	bd10      	pop	{r4, pc}
 801cf42:	bf00      	nop
 801cf44:	2001a930 	.word	0x2001a930
 801cf48:	2001a944 	.word	0x2001a944
 801cf4c:	2001a940 	.word	0x2001a940
 801cf50:	08025a8c 	.word	0x08025a8c
 801cf54:	08025b21 	.word	0x08025b21
 801cf58:	08025a67 	.word	0x08025a67
 801cf5c:	2001a92c 	.word	0x2001a92c
 801cf60:	2001a924 	.word	0x2001a924

0801cf64 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801cf64:	b470      	push	{r4, r5, r6}
 801cf66:	4c07      	ldr	r4, [pc, #28]	; (801cf84 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801cf68:	6826      	ldr	r6, [r4, #0]
 801cf6a:	4605      	mov	r5, r0
 801cf6c:	4610      	mov	r0, r2
 801cf6e:	9a03      	ldr	r2, [sp, #12]
 801cf70:	b936      	cbnz	r6, 801cf80 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801cf72:	6025      	str	r5, [r4, #0]
 801cf74:	4c04      	ldr	r4, [pc, #16]	; (801cf88 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801cf76:	8021      	strh	r1, [r4, #0]
 801cf78:	bc70      	pop	{r4, r5, r6}
 801cf7a:	4619      	mov	r1, r3
 801cf7c:	f7ff bfc0 	b.w	801cf00 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801cf80:	bc70      	pop	{r4, r5, r6}
 801cf82:	4770      	bx	lr
 801cf84:	2001a948 	.word	0x2001a948
 801cf88:	2001a940 	.word	0x2001a940

0801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801cf8c:	b508      	push	{r3, lr}
 801cf8e:	4b14      	ldr	r3, [pc, #80]	; (801cfe0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801cf90:	6819      	ldr	r1, [r3, #0]
 801cf92:	b931      	cbnz	r1, 801cfa2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 801cf94:	4b13      	ldr	r3, [pc, #76]	; (801cfe4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801cf96:	4a14      	ldr	r2, [pc, #80]	; (801cfe8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801cf98:	4814      	ldr	r0, [pc, #80]	; (801cfec <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801cf9a:	f240 21e3 	movw	r1, #739	; 0x2e3
 801cf9e:	f003 fd2d 	bl	80209fc <__assert_func>
 801cfa2:	4a13      	ldr	r2, [pc, #76]	; (801cff0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801cfa4:	8803      	ldrh	r3, [r0, #0]
 801cfa6:	8812      	ldrh	r2, [r2, #0]
 801cfa8:	4293      	cmp	r3, r2
 801cfaa:	da04      	bge.n	801cfb6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 801cfac:	2214      	movs	r2, #20
 801cfae:	fb02 1303 	mla	r3, r2, r3, r1
 801cfb2:	8918      	ldrh	r0, [r3, #8]
 801cfb4:	bd08      	pop	{r3, pc}
 801cfb6:	490f      	ldr	r1, [pc, #60]	; (801cff4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 801cfb8:	8809      	ldrh	r1, [r1, #0]
 801cfba:	4411      	add	r1, r2
 801cfbc:	428b      	cmp	r3, r1
 801cfbe:	da06      	bge.n	801cfce <_ZNK8touchgfx6Bitmap8getWidthEv+0x42>
 801cfc0:	1a9b      	subs	r3, r3, r2
 801cfc2:	4a0d      	ldr	r2, [pc, #52]	; (801cff8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 801cfc4:	6812      	ldr	r2, [r2, #0]
 801cfc6:	210e      	movs	r1, #14
 801cfc8:	fb01 2303 	mla	r3, r1, r3, r2
 801cfcc:	e7f1      	b.n	801cfb2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 801cfce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cfd2:	4293      	cmp	r3, r2
 801cfd4:	bf06      	itte	eq
 801cfd6:	4b09      	ldreq	r3, [pc, #36]	; (801cffc <_ZNK8touchgfx6Bitmap8getWidthEv+0x70>)
 801cfd8:	8818      	ldrheq	r0, [r3, #0]
 801cfda:	2000      	movne	r0, #0
 801cfdc:	bd08      	pop	{r3, pc}
 801cfde:	bf00      	nop
 801cfe0:	2001a948 	.word	0x2001a948
 801cfe4:	08025ae5 	.word	0x08025ae5
 801cfe8:	08025bce 	.word	0x08025bce
 801cfec:	08025a67 	.word	0x08025a67
 801cff0:	2001a940 	.word	0x2001a940
 801cff4:	2001a944 	.word	0x2001a944
 801cff8:	2001a928 	.word	0x2001a928
 801cffc:	2001a8a0 	.word	0x2001a8a0

0801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d000:	b508      	push	{r3, lr}
 801d002:	4b14      	ldr	r3, [pc, #80]	; (801d054 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d004:	6819      	ldr	r1, [r3, #0]
 801d006:	b931      	cbnz	r1, 801d016 <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 801d008:	4b13      	ldr	r3, [pc, #76]	; (801d058 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d00a:	4a14      	ldr	r2, [pc, #80]	; (801d05c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d00c:	4814      	ldr	r0, [pc, #80]	; (801d060 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d00e:	f240 21f7 	movw	r1, #759	; 0x2f7
 801d012:	f003 fcf3 	bl	80209fc <__assert_func>
 801d016:	4a13      	ldr	r2, [pc, #76]	; (801d064 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d018:	8803      	ldrh	r3, [r0, #0]
 801d01a:	8812      	ldrh	r2, [r2, #0]
 801d01c:	4293      	cmp	r3, r2
 801d01e:	da04      	bge.n	801d02a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 801d020:	2214      	movs	r2, #20
 801d022:	fb02 1303 	mla	r3, r2, r3, r1
 801d026:	8958      	ldrh	r0, [r3, #10]
 801d028:	bd08      	pop	{r3, pc}
 801d02a:	490f      	ldr	r1, [pc, #60]	; (801d068 <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 801d02c:	8809      	ldrh	r1, [r1, #0]
 801d02e:	4411      	add	r1, r2
 801d030:	428b      	cmp	r3, r1
 801d032:	da06      	bge.n	801d042 <_ZNK8touchgfx6Bitmap9getHeightEv+0x42>
 801d034:	1a9b      	subs	r3, r3, r2
 801d036:	4a0d      	ldr	r2, [pc, #52]	; (801d06c <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 801d038:	6812      	ldr	r2, [r2, #0]
 801d03a:	210e      	movs	r1, #14
 801d03c:	fb01 2303 	mla	r3, r1, r3, r2
 801d040:	e7f1      	b.n	801d026 <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 801d042:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d046:	4293      	cmp	r3, r2
 801d048:	bf06      	itte	eq
 801d04a:	4b09      	ldreq	r3, [pc, #36]	; (801d070 <_ZNK8touchgfx6Bitmap9getHeightEv+0x70>)
 801d04c:	8818      	ldrheq	r0, [r3, #0]
 801d04e:	2000      	movne	r0, #0
 801d050:	bd08      	pop	{r3, pc}
 801d052:	bf00      	nop
 801d054:	2001a948 	.word	0x2001a948
 801d058:	08025ae5 	.word	0x08025ae5
 801d05c:	08025bfa 	.word	0x08025bfa
 801d060:	08025a67 	.word	0x08025a67
 801d064:	2001a940 	.word	0x2001a940
 801d068:	2001a944 	.word	0x2001a944
 801d06c:	2001a928 	.word	0x2001a928
 801d070:	2001a8a2 	.word	0x2001a8a2

0801d074 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801d074:	b510      	push	{r4, lr}
 801d076:	4b23      	ldr	r3, [pc, #140]	; (801d104 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801d078:	681c      	ldr	r4, [r3, #0]
 801d07a:	b934      	cbnz	r4, 801d08a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 801d07c:	4b22      	ldr	r3, [pc, #136]	; (801d108 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801d07e:	4a23      	ldr	r2, [pc, #140]	; (801d10c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801d080:	4823      	ldr	r0, [pc, #140]	; (801d110 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801d082:	f240 310b 	movw	r1, #779	; 0x30b
 801d086:	f003 fcb9 	bl	80209fc <__assert_func>
 801d08a:	4a22      	ldr	r2, [pc, #136]	; (801d114 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801d08c:	880b      	ldrh	r3, [r1, #0]
 801d08e:	8812      	ldrh	r2, [r2, #0]
 801d090:	4293      	cmp	r3, r2
 801d092:	da11      	bge.n	801d0b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x44>
 801d094:	2214      	movs	r2, #20
 801d096:	fb02 4303 	mla	r3, r2, r3, r4
 801d09a:	8a1a      	ldrh	r2, [r3, #16]
 801d09c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801d0a0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801d0a4:	8a5b      	ldrh	r3, [r3, #18]
 801d0a6:	8004      	strh	r4, [r0, #0]
 801d0a8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d0ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d0b0:	8041      	strh	r1, [r0, #2]
 801d0b2:	8082      	strh	r2, [r0, #4]
 801d0b4:	80c3      	strh	r3, [r0, #6]
 801d0b6:	bd10      	pop	{r4, pc}
 801d0b8:	4917      	ldr	r1, [pc, #92]	; (801d118 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 801d0ba:	8809      	ldrh	r1, [r1, #0]
 801d0bc:	4411      	add	r1, r2
 801d0be:	428b      	cmp	r3, r1
 801d0c0:	da0a      	bge.n	801d0d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x64>
 801d0c2:	1a9b      	subs	r3, r3, r2
 801d0c4:	4a15      	ldr	r2, [pc, #84]	; (801d11c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 801d0c6:	6812      	ldr	r2, [r2, #0]
 801d0c8:	210e      	movs	r1, #14
 801d0ca:	fb01 2303 	mla	r3, r1, r3, r2
 801d0ce:	681a      	ldr	r2, [r3, #0]
 801d0d0:	6002      	str	r2, [r0, #0]
 801d0d2:	685a      	ldr	r2, [r3, #4]
 801d0d4:	6042      	str	r2, [r0, #4]
 801d0d6:	bd10      	pop	{r4, pc}
 801d0d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d0dc:	4293      	cmp	r3, r2
 801d0de:	d10b      	bne.n	801d0f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>
 801d0e0:	4b0f      	ldr	r3, [pc, #60]	; (801d120 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 801d0e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801d0e6:	4b0f      	ldr	r3, [pc, #60]	; (801d124 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xb0>)
 801d0e8:	8081      	strh	r1, [r0, #4]
 801d0ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d0ee:	80c2      	strh	r2, [r0, #6]
 801d0f0:	2300      	movs	r3, #0
 801d0f2:	8003      	strh	r3, [r0, #0]
 801d0f4:	8043      	strh	r3, [r0, #2]
 801d0f6:	bd10      	pop	{r4, pc}
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	8003      	strh	r3, [r0, #0]
 801d0fc:	8043      	strh	r3, [r0, #2]
 801d0fe:	8083      	strh	r3, [r0, #4]
 801d100:	e7d8      	b.n	801d0b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x40>
 801d102:	bf00      	nop
 801d104:	2001a948 	.word	0x2001a948
 801d108:	08025ae5 	.word	0x08025ae5
 801d10c:	08025b67 	.word	0x08025b67
 801d110:	08025a67 	.word	0x08025a67
 801d114:	2001a940 	.word	0x2001a940
 801d118:	2001a944 	.word	0x2001a944
 801d11c:	2001a928 	.word	0x2001a928
 801d120:	2001a8a0 	.word	0x2001a8a0
 801d124:	2001a8a2 	.word	0x2001a8a2

0801d128 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d128:	4b18      	ldr	r3, [pc, #96]	; (801d18c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	b34b      	cbz	r3, 801d182 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d12e:	4a18      	ldr	r2, [pc, #96]	; (801d190 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d130:	8800      	ldrh	r0, [r0, #0]
 801d132:	8812      	ldrh	r2, [r2, #0]
 801d134:	4290      	cmp	r0, r2
 801d136:	da11      	bge.n	801d15c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x34>
 801d138:	2214      	movs	r2, #20
 801d13a:	fb02 3300 	mla	r3, r2, r0, r3
 801d13e:	8a1a      	ldrh	r2, [r3, #16]
 801d140:	8919      	ldrh	r1, [r3, #8]
 801d142:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d146:	428a      	cmp	r2, r1
 801d148:	db1d      	blt.n	801d186 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d14a:	8a58      	ldrh	r0, [r3, #18]
 801d14c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d150:	895b      	ldrh	r3, [r3, #10]
 801d152:	4298      	cmp	r0, r3
 801d154:	bfac      	ite	ge
 801d156:	2000      	movge	r0, #0
 801d158:	2001      	movlt	r0, #1
 801d15a:	4770      	bx	lr
 801d15c:	4b0d      	ldr	r3, [pc, #52]	; (801d194 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d15e:	881b      	ldrh	r3, [r3, #0]
 801d160:	4413      	add	r3, r2
 801d162:	4298      	cmp	r0, r3
 801d164:	da0d      	bge.n	801d182 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5a>
 801d166:	4b0c      	ldr	r3, [pc, #48]	; (801d198 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x70>)
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	1a80      	subs	r0, r0, r2
 801d16c:	220e      	movs	r2, #14
 801d16e:	fb02 3300 	mla	r3, r2, r0, r3
 801d172:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d176:	891a      	ldrh	r2, [r3, #8]
 801d178:	4291      	cmp	r1, r2
 801d17a:	db04      	blt.n	801d186 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5e>
 801d17c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d180:	e7e6      	b.n	801d150 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x28>
 801d182:	2000      	movs	r0, #0
 801d184:	4770      	bx	lr
 801d186:	2001      	movs	r0, #1
 801d188:	4770      	bx	lr
 801d18a:	bf00      	nop
 801d18c:	2001a948 	.word	0x2001a948
 801d190:	2001a940 	.word	0x2001a940
 801d194:	2001a944 	.word	0x2001a944
 801d198:	2001a928 	.word	0x2001a928

0801d19c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d19c:	b508      	push	{r3, lr}
 801d19e:	4b11      	ldr	r3, [pc, #68]	; (801d1e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 801d1a0:	6819      	ldr	r1, [r3, #0]
 801d1a2:	b931      	cbnz	r1, 801d1b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d1a4:	4b10      	ldr	r3, [pc, #64]	; (801d1e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d1a6:	4a11      	ldr	r2, [pc, #68]	; (801d1ec <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d1a8:	4811      	ldr	r0, [pc, #68]	; (801d1f0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d1aa:	f240 312f 	movw	r1, #815	; 0x32f
 801d1ae:	f003 fc25 	bl	80209fc <__assert_func>
 801d1b2:	8803      	ldrh	r3, [r0, #0]
 801d1b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d1b8:	4293      	cmp	r3, r2
 801d1ba:	d011      	beq.n	801d1e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 801d1bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d1c0:	4293      	cmp	r3, r2
 801d1c2:	d103      	bne.n	801d1cc <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 801d1c4:	4b0b      	ldr	r3, [pc, #44]	; (801d1f4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d1ca:	bd08      	pop	{r3, pc}
 801d1cc:	4a0a      	ldr	r2, [pc, #40]	; (801d1f8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d1ce:	6812      	ldr	r2, [r2, #0]
 801d1d0:	b112      	cbz	r2, 801d1d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 801d1d2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d1d6:	b920      	cbnz	r0, 801d1e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d1d8:	2214      	movs	r2, #20
 801d1da:	4353      	muls	r3, r2
 801d1dc:	58c8      	ldr	r0, [r1, r3]
 801d1de:	bd08      	pop	{r3, pc}
 801d1e0:	2000      	movs	r0, #0
 801d1e2:	bd08      	pop	{r3, pc}
 801d1e4:	2001a948 	.word	0x2001a948
 801d1e8:	08025ae5 	.word	0x08025ae5
 801d1ec:	08025b9d 	.word	0x08025b9d
 801d1f0:	08025a67 	.word	0x08025a67
 801d1f4:	2001a8ac 	.word	0x2001a8ac
 801d1f8:	2001a924 	.word	0x2001a924

0801d1fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d1fc:	8802      	ldrh	r2, [r0, #0]
 801d1fe:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801d202:	429a      	cmp	r2, r3
 801d204:	dc40      	bgt.n	801d288 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d206:	4b21      	ldr	r3, [pc, #132]	; (801d28c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>)
 801d208:	881b      	ldrh	r3, [r3, #0]
 801d20a:	429a      	cmp	r2, r3
 801d20c:	da20      	bge.n	801d250 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x54>
 801d20e:	4b20      	ldr	r3, [pc, #128]	; (801d290 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d210:	6819      	ldr	r1, [r3, #0]
 801d212:	2314      	movs	r3, #20
 801d214:	fb03 1302 	mla	r3, r3, r2, r1
 801d218:	6858      	ldr	r0, [r3, #4]
 801d21a:	2800      	cmp	r0, #0
 801d21c:	d035      	beq.n	801d28a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d21e:	491d      	ldr	r1, [pc, #116]	; (801d294 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d220:	6809      	ldr	r1, [r1, #0]
 801d222:	2900      	cmp	r1, #0
 801d224:	d031      	beq.n	801d28a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d226:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d22a:	b371      	cbz	r1, 801d28a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d22c:	7c5a      	ldrb	r2, [r3, #17]
 801d22e:	7cd8      	ldrb	r0, [r3, #19]
 801d230:	0952      	lsrs	r2, r2, #5
 801d232:	00d2      	lsls	r2, r2, #3
 801d234:	ea42 1250 	orr.w	r2, r2, r0, lsr #5
 801d238:	2a0b      	cmp	r2, #11
 801d23a:	8958      	ldrh	r0, [r3, #10]
 801d23c:	891a      	ldrh	r2, [r3, #8]
 801d23e:	fb00 f002 	mul.w	r0, r0, r2
 801d242:	bf18      	it	ne
 801d244:	0040      	lslne	r0, r0, #1
 801d246:	3003      	adds	r0, #3
 801d248:	f020 0003 	bic.w	r0, r0, #3
 801d24c:	4408      	add	r0, r1
 801d24e:	4770      	bx	lr
 801d250:	4911      	ldr	r1, [pc, #68]	; (801d298 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d252:	8809      	ldrh	r1, [r1, #0]
 801d254:	4419      	add	r1, r3
 801d256:	428a      	cmp	r2, r1
 801d258:	da16      	bge.n	801d288 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d25a:	4910      	ldr	r1, [pc, #64]	; (801d29c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d25c:	6809      	ldr	r1, [r1, #0]
 801d25e:	1ad3      	subs	r3, r2, r3
 801d260:	200e      	movs	r0, #14
 801d262:	fb00 1303 	mla	r3, r0, r3, r1
 801d266:	7b19      	ldrb	r1, [r3, #12]
 801d268:	f001 011f 	and.w	r1, r1, #31
 801d26c:	290b      	cmp	r1, #11
 801d26e:	d10b      	bne.n	801d288 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8c>
 801d270:	8919      	ldrh	r1, [r3, #8]
 801d272:	8958      	ldrh	r0, [r3, #10]
 801d274:	4b07      	ldr	r3, [pc, #28]	; (801d294 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d276:	4348      	muls	r0, r1
 801d278:	6819      	ldr	r1, [r3, #0]
 801d27a:	3003      	adds	r0, #3
 801d27c:	f020 0303 	bic.w	r3, r0, #3
 801d280:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d284:	4418      	add	r0, r3
 801d286:	4770      	bx	lr
 801d288:	2000      	movs	r0, #0
 801d28a:	4770      	bx	lr
 801d28c:	2001a940 	.word	0x2001a940
 801d290:	2001a948 	.word	0x2001a948
 801d294:	2001a924 	.word	0x2001a924
 801d298:	2001a944 	.word	0x2001a944
 801d29c:	2001a928 	.word	0x2001a928

0801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d2a0:	4b18      	ldr	r3, [pc, #96]	; (801d304 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801d2a2:	6819      	ldr	r1, [r3, #0]
 801d2a4:	8803      	ldrh	r3, [r0, #0]
 801d2a6:	b1e1      	cbz	r1, 801d2e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801d2a8:	4a17      	ldr	r2, [pc, #92]	; (801d308 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d2aa:	8812      	ldrh	r2, [r2, #0]
 801d2ac:	4293      	cmp	r3, r2
 801d2ae:	da09      	bge.n	801d2c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d2b0:	2214      	movs	r2, #20
 801d2b2:	fb02 1303 	mla	r3, r2, r3, r1
 801d2b6:	7c58      	ldrb	r0, [r3, #17]
 801d2b8:	7cdb      	ldrb	r3, [r3, #19]
 801d2ba:	0940      	lsrs	r0, r0, #5
 801d2bc:	00c0      	lsls	r0, r0, #3
 801d2be:	ea40 1053 	orr.w	r0, r0, r3, lsr #5
 801d2c2:	4770      	bx	lr
 801d2c4:	4911      	ldr	r1, [pc, #68]	; (801d30c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d2c6:	8809      	ldrh	r1, [r1, #0]
 801d2c8:	4411      	add	r1, r2
 801d2ca:	428b      	cmp	r3, r1
 801d2cc:	da09      	bge.n	801d2e2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801d2ce:	1a9b      	subs	r3, r3, r2
 801d2d0:	4a0f      	ldr	r2, [pc, #60]	; (801d310 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>)
 801d2d2:	6812      	ldr	r2, [r2, #0]
 801d2d4:	210e      	movs	r1, #14
 801d2d6:	fb01 2303 	mla	r3, r1, r3, r2
 801d2da:	7b18      	ldrb	r0, [r3, #12]
 801d2dc:	f000 001f 	and.w	r0, r0, #31
 801d2e0:	4770      	bx	lr
 801d2e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d2e6:	4293      	cmp	r3, r2
 801d2e8:	d10a      	bne.n	801d300 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801d2ea:	4b0a      	ldr	r3, [pc, #40]	; (801d314 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801d2f2:	b10a      	cbz	r2, 801d2f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 801d2f4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801d2f6:	b900      	cbnz	r0, 801d2fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d2f8:	6898      	ldr	r0, [r3, #8]
 801d2fa:	6803      	ldr	r3, [r0, #0]
 801d2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d2fe:	4718      	bx	r3
 801d300:	2000      	movs	r0, #0
 801d302:	4770      	bx	lr
 801d304:	2001a948 	.word	0x2001a948
 801d308:	2001a940 	.word	0x2001a940
 801d30c:	2001a944 	.word	0x2001a944
 801d310:	2001a928 	.word	0x2001a928
 801d314:	2001a8ac 	.word	0x2001a8ac

0801d318 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801d318:	2010      	movs	r0, #16
 801d31a:	4770      	bx	lr

0801d31c <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801d31c:	2000      	movs	r0, #0
 801d31e:	4770      	bx	lr

0801d320 <_ZNK8touchgfx8LCD16bpp20getColorFrom24BitRGBEhhh>:
 801d320:	00d2      	lsls	r2, r2, #3
 801d322:	0209      	lsls	r1, r1, #8
 801d324:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d328:	ea42 02d3 	orr.w	r2, r2, r3, lsr #3
 801d32c:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 801d330:	4310      	orrs	r0, r2
 801d332:	4770      	bx	lr

0801d334 <_ZNK8touchgfx8LCD16bpp11getRedColorENS_9colortypeE>:
 801d334:	1209      	asrs	r1, r1, #8
 801d336:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801d33a:	4770      	bx	lr

0801d33c <_ZNK8touchgfx8LCD16bpp13getGreenColorENS_9colortypeE>:
 801d33c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 801d340:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 801d344:	4770      	bx	lr

0801d346 <_ZNK8touchgfx8LCD16bpp12getBlueColorENS_9colortypeE>:
 801d346:	00c9      	lsls	r1, r1, #3
 801d348:	f001 00f8 	and.w	r0, r1, #248	; 0xf8
 801d34c:	4770      	bx	lr

0801d34e <_ZN8touchgfx8LCD16bpp4initEv>:
 801d34e:	4770      	bx	lr

0801d350 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801d350:	b508      	push	{r3, lr}
 801d352:	4b06      	ldr	r3, [pc, #24]	; (801d36c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x1c>)
 801d354:	8818      	ldrh	r0, [r3, #0]
 801d356:	b928      	cbnz	r0, 801d364 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x14>
 801d358:	4b05      	ldr	r3, [pc, #20]	; (801d370 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x20>)
 801d35a:	4a06      	ldr	r2, [pc, #24]	; (801d374 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x24>)
 801d35c:	4806      	ldr	r0, [pc, #24]	; (801d378 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0x28>)
 801d35e:	21d5      	movs	r1, #213	; 0xd5
 801d360:	f003 fb4c 	bl	80209fc <__assert_func>
 801d364:	0040      	lsls	r0, r0, #1
 801d366:	b280      	uxth	r0, r0
 801d368:	bd08      	pop	{r3, pc}
 801d36a:	bf00      	nop
 801d36c:	2001a8a6 	.word	0x2001a8a6
 801d370:	08025fb6 	.word	0x08025fb6
 801d374:	08026299 	.word	0x08026299
 801d378:	08025ff8 	.word	0x08025ff8

0801d37c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801d37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d380:	b099      	sub	sp, #100	; 0x64
 801d382:	461d      	mov	r5, r3
 801d384:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 801d388:	9307      	str	r3, [sp, #28]
 801d38a:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d38e:	9306      	str	r3, [sp, #24]
 801d390:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d392:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 801d396:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 801d39a:	2600      	movs	r6, #0
 801d39c:	a816      	add	r0, sp, #88	; 0x58
 801d39e:	4617      	mov	r7, r2
 801d3a0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d3a4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801d3a8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 801d3ac:	468a      	mov	sl, r1
 801d3ae:	f8ad 6058 	strh.w	r6, [sp, #88]	; 0x58
 801d3b2:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
 801d3b6:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
 801d3ba:	f7fd fa75 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d3be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801d3c0:	682c      	ldr	r4, [r5, #0]
 801d3c2:	6818      	ldr	r0, [r3, #0]
 801d3c4:	f9b8 3000 	ldrsh.w	r3, [r8]
 801d3c8:	f9b9 e000 	ldrsh.w	lr, [r9]
 801d3cc:	18e1      	adds	r1, r4, r3
 801d3ce:	1b00      	subs	r0, r0, r4
 801d3d0:	ebae 0c01 	sub.w	ip, lr, r1
 801d3d4:	4560      	cmp	r0, ip
 801d3d6:	f341 85fb 	ble.w	801efd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801d3da:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 801d3de:	44f1      	add	r9, lr
 801d3e0:	fa0f f989 	sxth.w	r9, r9
 801d3e4:	4549      	cmp	r1, r9
 801d3e6:	f301 85f3 	bgt.w	801efd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801d3ea:	9a06      	ldr	r2, [sp, #24]
 801d3ec:	ed95 3a07 	vldr	s6, [r5, #28]
 801d3f0:	f9b8 8002 	ldrsh.w	r8, [r8, #2]
 801d3f4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 801d3f8:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 801d3fc:	edd7 4a0b 	vldr	s9, [r7, #44]	; 0x2c
 801d400:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 801d404:	ed95 2a0d 	vldr	s4, [r5, #52]	; 0x34
 801d408:	f8da b000 	ldr.w	fp, [sl]
 801d40c:	43d2      	mvns	r2, r2
 801d40e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 801d412:	b2d2      	uxtb	r2, r2
 801d414:	eec4 3a03 	vdiv.f32	s7, s8, s6
 801d418:	9208      	str	r2, [sp, #32]
 801d41a:	696a      	ldr	r2, [r5, #20]
 801d41c:	4442      	add	r2, r8
 801d41e:	f8da 8004 	ldr.w	r8, [sl, #4]
 801d422:	fb08 4802 	mla	r8, r8, r2, r4
 801d426:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 801d42a:	4282      	cmp	r2, r0
 801d42c:	bfa8      	it	ge
 801d42e:	4602      	movge	r2, r0
 801d430:	4498      	add	r8, r3
 801d432:	458e      	cmp	lr, r1
 801d434:	ee07 2a10 	vmov	s14, r2
 801d438:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d43c:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 801d440:	ee27 5a05 	vmul.f32	s10, s14, s10
 801d444:	ee67 4a24 	vmul.f32	s9, s14, s9
 801d448:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d44c:	ee37 6aa4 	vadd.f32	s12, s15, s9
 801d450:	ee72 5a07 	vadd.f32	s11, s4, s14
 801d454:	9209      	str	r2, [sp, #36]	; 0x24
 801d456:	ee73 6a05 	vadd.f32	s13, s6, s10
 801d45a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801d45e:	ee22 2a23 	vmul.f32	s4, s4, s7
 801d462:	dc01      	bgt.n	801d468 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xec>
 801d464:	960b      	str	r6, [sp, #44]	; 0x2c
 801d466:	e02a      	b.n	801d4be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x142>
 801d468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d46a:	fb9c f1f2 	sdiv	r1, ip, r2
 801d46e:	ee03 1a90 	vmov	s7, r1
 801d472:	434a      	muls	r2, r1
 801d474:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801d478:	ebac 0502 	sub.w	r5, ip, r2
 801d47c:	2900      	cmp	r1, #0
 801d47e:	950b      	str	r5, [sp, #44]	; 0x2c
 801d480:	eee5 6a23 	vfma.f32	s13, s10, s7
 801d484:	eea4 6aa3 	vfma.f32	s12, s9, s7
 801d488:	eee7 5a23 	vfma.f32	s11, s14, s7
 801d48c:	dd13      	ble.n	801d4b6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 801d48e:	ee76 7ac5 	vsub.f32	s15, s13, s10
 801d492:	ee35 2ac7 	vsub.f32	s4, s11, s14
 801d496:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d49e:	bf18      	it	ne
 801d4a0:	eec4 3a27 	vdivne.f32	s7, s8, s15
 801d4a4:	ee76 7a64 	vsub.f32	s15, s12, s9
 801d4a8:	bf08      	it	eq
 801d4aa:	eef0 3a44 	vmoveq.f32	s7, s8
 801d4ae:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801d4b2:	ee22 2a23 	vmul.f32	s4, s4, s7
 801d4b6:	1a80      	subs	r0, r0, r2
 801d4b8:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 801d4bc:	4414      	add	r4, r2
 801d4be:	18e2      	adds	r2, r4, r3
 801d4c0:	4402      	add	r2, r0
 801d4c2:	4591      	cmp	r9, r2
 801d4c4:	bfbc      	itt	lt
 801d4c6:	eba9 0003 	sublt.w	r0, r9, r3
 801d4ca:	1b00      	sublt	r0, r0, r4
 801d4cc:	2800      	cmp	r0, #0
 801d4ce:	f341 857f 	ble.w	801efd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801d4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4d6:	fb90 f3f3 	sdiv	r3, r0, r3
 801d4da:	930a      	str	r3, [sp, #40]	; 0x28
 801d4dc:	fb02 0313 	mls	r3, r2, r3, r0
 801d4e0:	930d      	str	r3, [sp, #52]	; 0x34
 801d4e2:	b91b      	cbnz	r3, 801d4ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x170>
 801d4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4e6:	920d      	str	r2, [sp, #52]	; 0x34
 801d4e8:	3b01      	subs	r3, #1
 801d4ea:	930a      	str	r3, [sp, #40]	; 0x28
 801d4ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d4ee:	eddf 3a80 	vldr	s7, [pc, #512]	; 801d6f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x374>
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	9302      	str	r3, [sp, #8]
 801d4f6:	9b07      	ldr	r3, [sp, #28]
 801d4f8:	f003 0301 	and.w	r3, r3, #1
 801d4fc:	9315      	str	r3, [sp, #84]	; 0x54
 801d4fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801d502:	9300      	str	r3, [sp, #0]
 801d504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d506:	2b00      	cmp	r3, #0
 801d508:	dc03      	bgt.n	801d512 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801d50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	f341 855f 	ble.w	801efd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801d512:	ee84 3a26 	vdiv.f32	s6, s8, s13
 801d516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d518:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d51a:	eef0 1a67 	vmov.f32	s3, s15
 801d51e:	ee66 2a03 	vmul.f32	s5, s12, s6
 801d522:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 801d526:	ee25 3a83 	vmul.f32	s6, s11, s6
 801d52a:	ee72 7ae7 	vsub.f32	s15, s5, s15
 801d52e:	ee11 ca90 	vmov	ip, s3
 801d532:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801d536:	eef0 1a42 	vmov.f32	s3, s4
 801d53a:	ee33 2a42 	vsub.f32	s4, s6, s4
 801d53e:	ee17 2a90 	vmov	r2, s15
 801d542:	eebe 2ac8 	vcvt.s32.f32	s4, s4, #16
 801d546:	fb92 f3f3 	sdiv	r3, r2, r3
 801d54a:	ee12 2a10 	vmov	r2, s4
 801d54e:	9304      	str	r3, [sp, #16]
 801d550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d552:	fb92 f3f3 	sdiv	r3, r2, r3
 801d556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d558:	9305      	str	r3, [sp, #20]
 801d55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d55c:	2900      	cmp	r1, #0
 801d55e:	bfc8      	it	gt
 801d560:	4613      	movgt	r3, r2
 801d562:	9301      	str	r3, [sp, #4]
 801d564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d566:	eefe 1ac8 	vcvt.s32.f32	s3, s3, #16
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	ee11 aa90 	vmov	sl, s3
 801d570:	dd0d      	ble.n	801d58e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x212>
 801d572:	9a04      	ldr	r2, [sp, #16]
 801d574:	fb02 cc03 	mla	ip, r2, r3, ip
 801d578:	9a05      	ldr	r2, [sp, #20]
 801d57a:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 801d57e:	fb02 aa03 	mla	sl, r2, r3, sl
 801d582:	9b01      	ldr	r3, [sp, #4]
 801d584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d586:	1a9b      	subs	r3, r3, r2
 801d588:	9301      	str	r3, [sp, #4]
 801d58a:	2300      	movs	r3, #0
 801d58c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d58e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d590:	b91b      	cbnz	r3, 801d59a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x21e>
 801d592:	f50c 4c00 	add.w	ip, ip, #32768	; 0x8000
 801d596:	f50a 4a00 	add.w	sl, sl, #32768	; 0x8000
 801d59a:	ea5f 432c 	movs.w	r3, ip, asr #16
 801d59e:	d43e      	bmi.n	801d61e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801d5a0:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
 801d5a4:	4283      	cmp	r3, r0
 801d5a6:	da3a      	bge.n	801d61e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801d5a8:	ea5f 432a 	movs.w	r3, sl, asr #16
 801d5ac:	d437      	bmi.n	801d61e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801d5ae:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801d5b2:	428b      	cmp	r3, r1
 801d5b4:	da33      	bge.n	801d61e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801d5b6:	9b01      	ldr	r3, [sp, #4]
 801d5b8:	9a04      	ldr	r2, [sp, #16]
 801d5ba:	3b01      	subs	r3, #1
 801d5bc:	fb03 c202 	mla	r2, r3, r2, ip
 801d5c0:	1412      	asrs	r2, r2, #16
 801d5c2:	d42c      	bmi.n	801d61e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801d5c4:	4282      	cmp	r2, r0
 801d5c6:	da2a      	bge.n	801d61e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801d5c8:	9a05      	ldr	r2, [sp, #20]
 801d5ca:	fb03 a302 	mla	r3, r3, r2, sl
 801d5ce:	141b      	asrs	r3, r3, #16
 801d5d0:	d425      	bmi.n	801d61e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a2>
 801d5d2:	428b      	cmp	r3, r1
 801d5d4:	bfb4      	ite	lt
 801d5d6:	2300      	movlt	r3, #0
 801d5d8:	2301      	movge	r3, #1
 801d5da:	9303      	str	r3, [sp, #12]
 801d5dc:	9b07      	ldr	r3, [sp, #28]
 801d5de:	2b09      	cmp	r3, #9
 801d5e0:	f000 8446 	beq.w	801de70 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xaf4>
 801d5e4:	f200 8086 	bhi.w	801d6f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x378>
 801d5e8:	2b02      	cmp	r3, #2
 801d5ea:	f000 869d 	beq.w	801e328 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfac>
 801d5ee:	d818      	bhi.n	801d622 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 801d5f0:	2b00      	cmp	r3, #0
 801d5f2:	f001 8437 	beq.w	801ee64 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ae8>
 801d5f6:	2b01      	cmp	r3, #1
 801d5f8:	f000 86ff 	beq.w	801e3fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x107e>
 801d5fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d604:	ee36 6a24 	vadd.f32	s12, s12, s9
 801d608:	ee75 5a87 	vadd.f32	s11, s11, s14
 801d60c:	f341 84e0 	ble.w	801efd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c54>
 801d610:	3b01      	subs	r3, #1
 801d612:	930a      	str	r3, [sp, #40]	; 0x28
 801d614:	eeb0 2a43 	vmov.f32	s4, s6
 801d618:	eef0 7a62 	vmov.f32	s15, s5
 801d61c:	e772      	b.n	801d504 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 801d61e:	2301      	movs	r3, #1
 801d620:	e7db      	b.n	801d5da <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x25e>
 801d622:	9b07      	ldr	r3, [sp, #28]
 801d624:	2b03      	cmp	r3, #3
 801d626:	f000 84cf 	beq.w	801dfc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc4c>
 801d62a:	2b08      	cmp	r3, #8
 801d62c:	d1e6      	bne.n	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801d62e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801d632:	465c      	mov	r4, fp
 801d634:	2500      	movs	r5, #0
 801d636:	9b01      	ldr	r3, [sp, #4]
 801d638:	42ab      	cmp	r3, r5
 801d63a:	f341 806d 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d63e:	9b03      	ldr	r3, [sp, #12]
 801d640:	ea4f 422c 	mov.w	r2, ip, asr #16
 801d644:	ea4f 412a 	mov.w	r1, sl, asr #16
 801d648:	b15b      	cbz	r3, 801d662 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2e6>
 801d64a:	2a00      	cmp	r2, #0
 801d64c:	db48      	blt.n	801d6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801d64e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801d652:	429a      	cmp	r2, r3
 801d654:	da44      	bge.n	801d6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801d656:	2900      	cmp	r1, #0
 801d658:	db42      	blt.n	801d6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801d65a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801d65e:	4299      	cmp	r1, r3
 801d660:	da3e      	bge.n	801d6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801d662:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801d666:	fb01 2303 	mla	r3, r1, r3, r2
 801d66a:	9a02      	ldr	r2, [sp, #8]
 801d66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d670:	9a06      	ldr	r2, [sp, #24]
 801d672:	2aff      	cmp	r2, #255	; 0xff
 801d674:	f001 848a 	beq.w	801ef8c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c10>
 801d678:	8822      	ldrh	r2, [r4, #0]
 801d67a:	f8bd 7000 	ldrh.w	r7, [sp]
 801d67e:	f8bd e000 	ldrh.w	lr, [sp]
 801d682:	1210      	asrs	r0, r2, #8
 801d684:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801d688:	fb11 f107 	smulbb	r1, r1, r7
 801d68c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d690:	fb00 1006 	mla	r0, r0, r6, r1
 801d694:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801d698:	10d1      	asrs	r1, r2, #3
 801d69a:	b2db      	uxtb	r3, r3
 801d69c:	00d2      	lsls	r2, r2, #3
 801d69e:	fb17 f70e 	smulbb	r7, r7, lr
 801d6a2:	b2d2      	uxtb	r2, r2
 801d6a4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d6a8:	fb13 f30e 	smulbb	r3, r3, lr
 801d6ac:	b280      	uxth	r0, r0
 801d6ae:	fb01 7106 	mla	r1, r1, r6, r7
 801d6b2:	fb02 3306 	mla	r3, r2, r6, r3
 801d6b6:	b289      	uxth	r1, r1
 801d6b8:	b29b      	uxth	r3, r3
 801d6ba:	1c42      	adds	r2, r0, #1
 801d6bc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d6c0:	1c4f      	adds	r7, r1, #1
 801d6c2:	1c5a      	adds	r2, r3, #1
 801d6c4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d6c8:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801d6cc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801d6d0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801d6d4:	097f      	lsrs	r7, r7, #5
 801d6d6:	4318      	orrs	r0, r3
 801d6d8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801d6dc:	4338      	orrs	r0, r7
 801d6de:	8020      	strh	r0, [r4, #0]
 801d6e0:	9b04      	ldr	r3, [sp, #16]
 801d6e2:	449c      	add	ip, r3
 801d6e4:	9b05      	ldr	r3, [sp, #20]
 801d6e6:	3402      	adds	r4, #2
 801d6e8:	449a      	add	sl, r3
 801d6ea:	3501      	adds	r5, #1
 801d6ec:	e7a3      	b.n	801d636 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2ba>
 801d6ee:	bf00      	nop
 801d6f0:	37800000 	.word	0x37800000
 801d6f4:	9b07      	ldr	r3, [sp, #28]
 801d6f6:	2b2c      	cmp	r3, #44	; 0x2c
 801d6f8:	f001 81a3 	beq.w	801ea42 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16c6>
 801d6fc:	f200 819d 	bhi.w	801da3a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6be>
 801d700:	2b0a      	cmp	r3, #10
 801d702:	f000 8349 	beq.w	801dd98 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa1c>
 801d706:	2b0b      	cmp	r3, #11
 801d708:	f47f af78 	bne.w	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801d70c:	2300      	movs	r3, #0
 801d70e:	465f      	mov	r7, fp
 801d710:	930c      	str	r3, [sp, #48]	; 0x30
 801d712:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 801d716:	9b01      	ldr	r3, [sp, #4]
 801d718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d71a:	4293      	cmp	r3, r2
 801d71c:	f340 87fc 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801d720:	9a03      	ldr	r2, [sp, #12]
 801d722:	ea4f 412c 	mov.w	r1, ip, asr #16
 801d726:	ea4f 432a 	mov.w	r3, sl, asr #16
 801d72a:	b17a      	cbz	r2, 801d74c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x3d0>
 801d72c:	2900      	cmp	r1, #0
 801d72e:	f2c0 817b 	blt.w	801da28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801d732:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d736:	4291      	cmp	r1, r2
 801d738:	f280 8176 	bge.w	801da28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	f2c0 8173 	blt.w	801da28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801d742:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801d746:	4293      	cmp	r3, r2
 801d748:	f280 816e 	bge.w	801da28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801d74c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801d750:	9802      	ldr	r0, [sp, #8]
 801d752:	fb03 1102 	mla	r1, r3, r2, r1
 801d756:	9b02      	ldr	r3, [sp, #8]
 801d758:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d75c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 801d760:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801d764:	685d      	ldr	r5, [r3, #4]
 801d766:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801d76a:	0e0e      	lsrs	r6, r1, #24
 801d76c:	6858      	ldr	r0, [r3, #4]
 801d76e:	0e23      	lsrs	r3, r4, #24
 801d770:	930e      	str	r3, [sp, #56]	; 0x38
 801d772:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801d776:	fa1f f38c 	uxth.w	r3, ip
 801d77a:	ee01 3a10 	vmov	s2, r3
 801d77e:	ee07 6a90 	vmov	s15, r6
 801d782:	ee02 8a10 	vmov	s4, r8
 801d786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d78a:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801d78e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d792:	ee21 1a23 	vmul.f32	s2, s2, s7
 801d796:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d79a:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 801d79e:	eee1 7a02 	vfma.f32	s15, s2, s4
 801d7a2:	fa1f f38a 	uxth.w	r3, sl
 801d7a6:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 801d7aa:	ee00 ea10 	vmov	s0, lr
 801d7ae:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d7b2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d7b6:	ee00 3a90 	vmov	s1, r3
 801d7ba:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d7be:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801d7c2:	eea1 2a00 	vfma.f32	s4, s2, s0
 801d7c6:	ee60 0aa3 	vmul.f32	s1, s1, s7
 801d7ca:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d7ce:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d7d2:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801d7d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d7da:	ee17 2a90 	vmov	r2, s15
 801d7de:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801d7e2:	f000 8121 	beq.w	801da28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801d7e6:	f001 19ff 	and.w	r9, r1, #16711935	; 0xff00ff
 801d7ea:	fb06 f909 	mul.w	r9, r6, r9
 801d7ee:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801d7f2:	434e      	muls	r6, r1
 801d7f4:	ea4f 2119 	mov.w	r1, r9, lsr #8
 801d7f8:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801d7fc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d800:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801d804:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801d808:	4449      	add	r1, r9
 801d80a:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801d80e:	0a09      	lsrs	r1, r1, #8
 801d810:	0a1b      	lsrs	r3, r3, #8
 801d812:	fb08 f606 	mul.w	r6, r8, r6
 801d816:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d81a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801d81e:	4319      	orrs	r1, r3
 801d820:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d824:	0a33      	lsrs	r3, r6, #8
 801d826:	fb08 f805 	mul.w	r8, r8, r5
 801d82a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d82e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801d832:	441e      	add	r6, r3
 801d834:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801d838:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801d83c:	0a36      	lsrs	r6, r6, #8
 801d83e:	0a1b      	lsrs	r3, r3, #8
 801d840:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d844:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801d848:	431e      	orrs	r6, r3
 801d84a:	0e25      	lsrs	r5, r4, #24
 801d84c:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801d850:	436b      	muls	r3, r5
 801d852:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801d856:	fb05 f804 	mul.w	r8, r5, r4
 801d85a:	0a1c      	lsrs	r4, r3, #8
 801d85c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801d860:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801d864:	f508 7580 	add.w	r5, r8, #256	; 0x100
 801d868:	4423      	add	r3, r4
 801d86a:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801d86e:	0a1b      	lsrs	r3, r3, #8
 801d870:	0a2d      	lsrs	r5, r5, #8
 801d872:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801d876:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d87a:	432b      	orrs	r3, r5
 801d87c:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801d880:	fb0e f505 	mul.w	r5, lr, r5
 801d884:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801d888:	fb0e fe00 	mul.w	lr, lr, r0
 801d88c:	0a28      	lsrs	r0, r5, #8
 801d88e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801d892:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801d896:	4405      	add	r5, r0
 801d898:	0c08      	lsrs	r0, r1, #16
 801d89a:	ee07 0a90 	vmov	s15, r0
 801d89e:	0c30      	lsrs	r0, r6, #16
 801d8a0:	ee02 0a10 	vmov	s4, r0
 801d8a4:	f50e 7480 	add.w	r4, lr, #256	; 0x100
 801d8a8:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801d8ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8b0:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d8b4:	0a2d      	lsrs	r5, r5, #8
 801d8b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d8ba:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d8be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d8c2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801d8c6:	ea45 0e0e 	orr.w	lr, r5, lr
 801d8ca:	0c18      	lsrs	r0, r3, #16
 801d8cc:	eee1 7a02 	vfma.f32	s15, s2, s4
 801d8d0:	2aff      	cmp	r2, #255	; 0xff
 801d8d2:	ee02 0a10 	vmov	s4, r0
 801d8d6:	ea4f 401e 	mov.w	r0, lr, lsr #16
 801d8da:	ee00 0a10 	vmov	s0, r0
 801d8de:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d8e2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d8e6:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d8ea:	eea1 2a00 	vfma.f32	s4, s2, s0
 801d8ee:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d8f2:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d8f6:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801d8fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d8fe:	ee17 0a90 	vmov	r0, s15
 801d902:	f000 04f8 	and.w	r4, r0, #248	; 0xf8
 801d906:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801d90a:	ee07 0a90 	vmov	s15, r0
 801d90e:	f3c6 2007 	ubfx	r0, r6, #8, #8
 801d912:	ee02 0a10 	vmov	s4, r0
 801d916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d91a:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d91e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801d922:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d926:	b2c9      	uxtb	r1, r1
 801d928:	eee1 7a02 	vfma.f32	s15, s2, s4
 801d92c:	b2f6      	uxtb	r6, r6
 801d92e:	b2db      	uxtb	r3, r3
 801d930:	ee02 0a10 	vmov	s4, r0
 801d934:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801d938:	ee00 0a10 	vmov	s0, r0
 801d93c:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d940:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d944:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d948:	eea1 2a00 	vfma.f32	s4, s2, s0
 801d94c:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d950:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d954:	ee02 6a10 	vmov	s4, r6
 801d958:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801d95c:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d964:	ee17 0a90 	vmov	r0, s15
 801d968:	ee07 1a90 	vmov	s15, r1
 801d96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d970:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d974:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d978:	eee1 7a02 	vfma.f32	s15, s2, s4
 801d97c:	ee02 3a10 	vmov	s4, r3
 801d980:	fa5f f38e 	uxtb.w	r3, lr
 801d984:	ee00 3a10 	vmov	s0, r3
 801d988:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801d98c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801d990:	ee30 0a42 	vsub.f32	s0, s0, s4
 801d994:	eea1 2a00 	vfma.f32	s4, s2, s0
 801d998:	ee32 2a67 	vsub.f32	s4, s4, s15
 801d99c:	eee0 7a82 	vfma.f32	s15, s1, s4
 801d9a0:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801d9a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d9a8:	ee17 3a90 	vmov	r3, s15
 801d9ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d9b0:	d103      	bne.n	801d9ba <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x63e>
 801d9b2:	9906      	ldr	r1, [sp, #24]
 801d9b4:	29ff      	cmp	r1, #255	; 0xff
 801d9b6:	f001 82f6 	beq.w	801efa6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c2a>
 801d9ba:	9d00      	ldr	r5, [sp, #0]
 801d9bc:	8839      	ldrh	r1, [r7, #0]
 801d9be:	436a      	muls	r2, r5
 801d9c0:	1c55      	adds	r5, r2, #1
 801d9c2:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801d9c6:	f8bd 5000 	ldrh.w	r5, [sp]
 801d9ca:	120e      	asrs	r6, r1, #8
 801d9cc:	ea6f 2222 	mvn.w	r2, r2, asr #8
 801d9d0:	b2d2      	uxtb	r2, r2
 801d9d2:	fb14 f405 	smulbb	r4, r4, r5
 801d9d6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801d9da:	fb06 4602 	mla	r6, r6, r2, r4
 801d9de:	f8bd 4000 	ldrh.w	r4, [sp]
 801d9e2:	10cd      	asrs	r5, r1, #3
 801d9e4:	00c9      	lsls	r1, r1, #3
 801d9e6:	fb13 f304 	smulbb	r3, r3, r4
 801d9ea:	b2c9      	uxtb	r1, r1
 801d9ec:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801d9f0:	fb10 f004 	smulbb	r0, r0, r4
 801d9f4:	fb01 3102 	mla	r1, r1, r2, r3
 801d9f8:	b2b6      	uxth	r6, r6
 801d9fa:	fb05 0002 	mla	r0, r5, r2, r0
 801d9fe:	b289      	uxth	r1, r1
 801da00:	b285      	uxth	r5, r0
 801da02:	1c74      	adds	r4, r6, #1
 801da04:	1c48      	adds	r0, r1, #1
 801da06:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801da0a:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801da0e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801da12:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801da16:	4306      	orrs	r6, r0
 801da18:	1c68      	adds	r0, r5, #1
 801da1a:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 801da1e:	0940      	lsrs	r0, r0, #5
 801da20:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801da24:	4306      	orrs	r6, r0
 801da26:	803e      	strh	r6, [r7, #0]
 801da28:	9b04      	ldr	r3, [sp, #16]
 801da2a:	449c      	add	ip, r3
 801da2c:	9b05      	ldr	r3, [sp, #20]
 801da2e:	449a      	add	sl, r3
 801da30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da32:	3301      	adds	r3, #1
 801da34:	3702      	adds	r7, #2
 801da36:	930c      	str	r3, [sp, #48]	; 0x30
 801da38:	e66d      	b.n	801d716 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x39a>
 801da3a:	9b07      	ldr	r3, [sp, #28]
 801da3c:	2b2e      	cmp	r3, #46	; 0x2e
 801da3e:	f001 8188 	beq.w	801ed52 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19d6>
 801da42:	f0c0 858e 	bcc.w	801e562 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11e6>
 801da46:	2b2f      	cmp	r3, #47	; 0x2f
 801da48:	f47f add8 	bne.w	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801da4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801da4e:	685b      	ldr	r3, [r3, #4]
 801da50:	781b      	ldrb	r3, [r3, #0]
 801da52:	2b00      	cmp	r3, #0
 801da54:	f47f add2 	bne.w	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801da58:	465f      	mov	r7, fp
 801da5a:	930c      	str	r3, [sp, #48]	; 0x30
 801da5c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 801da60:	9b01      	ldr	r3, [sp, #4]
 801da62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801da64:	4293      	cmp	r3, r2
 801da66:	f340 8657 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801da6a:	9a03      	ldr	r2, [sp, #12]
 801da6c:	ea4f 432c 	mov.w	r3, ip, asr #16
 801da70:	ea4f 412a 	mov.w	r1, sl, asr #16
 801da74:	b17a      	cbz	r2, 801da96 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x71a>
 801da76:	2b00      	cmp	r3, #0
 801da78:	f2c0 8185 	blt.w	801dd86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801da7c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801da80:	4293      	cmp	r3, r2
 801da82:	f280 8180 	bge.w	801dd86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801da86:	2900      	cmp	r1, #0
 801da88:	f2c0 817d 	blt.w	801dd86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801da8c:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801da90:	4291      	cmp	r1, r2
 801da92:	f280 8178 	bge.w	801dd86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801da96:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801da9a:	9802      	ldr	r0, [sp, #8]
 801da9c:	fb01 3102 	mla	r1, r1, r2, r3
 801daa0:	9b02      	ldr	r3, [sp, #8]
 801daa2:	185c      	adds	r4, r3, r1
 801daa4:	5c41      	ldrb	r1, [r0, r1]
 801daa6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801daa8:	7860      	ldrb	r0, [r4, #1]
 801daaa:	685b      	ldr	r3, [r3, #4]
 801daac:	3001      	adds	r0, #1
 801daae:	3101      	adds	r1, #1
 801dab0:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 801dab4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 801dab8:	18a0      	adds	r0, r4, r2
 801daba:	5ca2      	ldrb	r2, [r4, r2]
 801dabc:	3201      	adds	r2, #1
 801dabe:	0e0e      	lsrs	r6, r1, #24
 801dac0:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801dac4:	7842      	ldrb	r2, [r0, #1]
 801dac6:	3201      	adds	r2, #1
 801dac8:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801dacc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801dad0:	0e23      	lsrs	r3, r4, #24
 801dad2:	930e      	str	r3, [sp, #56]	; 0x38
 801dad4:	fa1f f38c 	uxth.w	r3, ip
 801dad8:	ee01 3a10 	vmov	s2, r3
 801dadc:	ee07 6a90 	vmov	s15, r6
 801dae0:	ee02 8a10 	vmov	s4, r8
 801dae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dae8:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801daec:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801daf0:	ee21 1a23 	vmul.f32	s2, s2, s7
 801daf4:	ee32 2a67 	vsub.f32	s4, s4, s15
 801daf8:	ea4f 6e10 	mov.w	lr, r0, lsr #24
 801dafc:	eee1 7a02 	vfma.f32	s15, s2, s4
 801db00:	fa1f f38a 	uxth.w	r3, sl
 801db04:	ed9d 2a0e 	vldr	s4, [sp, #56]	; 0x38
 801db08:	ee00 ea10 	vmov	s0, lr
 801db0c:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801db10:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801db14:	ee00 3a90 	vmov	s1, r3
 801db18:	ee30 0a42 	vsub.f32	s0, s0, s4
 801db1c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801db20:	eea1 2a00 	vfma.f32	s4, s2, s0
 801db24:	ee60 0aa3 	vmul.f32	s1, s1, s7
 801db28:	ee32 2a67 	vsub.f32	s4, s4, s15
 801db2c:	eee0 7a82 	vfma.f32	s15, s1, s4
 801db30:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801db34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db38:	ee17 2a90 	vmov	r2, s15
 801db3c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801db40:	f000 8121 	beq.w	801dd86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801db44:	f001 19ff 	and.w	r9, r1, #16711935	; 0xff00ff
 801db48:	fb06 f909 	mul.w	r9, r6, r9
 801db4c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801db50:	434e      	muls	r6, r1
 801db52:	ea4f 2119 	mov.w	r1, r9, lsr #8
 801db56:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801db5a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801db5e:	f109 1901 	add.w	r9, r9, #65537	; 0x10001
 801db62:	eb03 2316 	add.w	r3, r3, r6, lsr #8
 801db66:	4449      	add	r1, r9
 801db68:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801db6c:	0a09      	lsrs	r1, r1, #8
 801db6e:	0a1b      	lsrs	r3, r3, #8
 801db70:	fb08 f606 	mul.w	r6, r8, r6
 801db74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801db78:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801db7c:	4319      	orrs	r1, r3
 801db7e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801db82:	0a33      	lsrs	r3, r6, #8
 801db84:	fb08 f805 	mul.w	r8, r8, r5
 801db88:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801db8c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801db90:	441e      	add	r6, r3
 801db92:	f508 7380 	add.w	r3, r8, #256	; 0x100
 801db96:	eb03 2318 	add.w	r3, r3, r8, lsr #8
 801db9a:	0a36      	lsrs	r6, r6, #8
 801db9c:	0a1b      	lsrs	r3, r3, #8
 801db9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801dba2:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 801dba6:	431e      	orrs	r6, r3
 801dba8:	0e25      	lsrs	r5, r4, #24
 801dbaa:	f004 13ff 	and.w	r3, r4, #16711935	; 0xff00ff
 801dbae:	436b      	muls	r3, r5
 801dbb0:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801dbb4:	fb05 f804 	mul.w	r8, r5, r4
 801dbb8:	0a1c      	lsrs	r4, r3, #8
 801dbba:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801dbbe:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801dbc2:	f508 7580 	add.w	r5, r8, #256	; 0x100
 801dbc6:	4423      	add	r3, r4
 801dbc8:	eb05 2518 	add.w	r5, r5, r8, lsr #8
 801dbcc:	0a1b      	lsrs	r3, r3, #8
 801dbce:	0a2d      	lsrs	r5, r5, #8
 801dbd0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dbd4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801dbd8:	432b      	orrs	r3, r5
 801dbda:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801dbde:	fb0e f505 	mul.w	r5, lr, r5
 801dbe2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801dbe6:	fb0e fe00 	mul.w	lr, lr, r0
 801dbea:	0a28      	lsrs	r0, r5, #8
 801dbec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801dbf0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801dbf4:	4405      	add	r5, r0
 801dbf6:	0c08      	lsrs	r0, r1, #16
 801dbf8:	ee07 0a90 	vmov	s15, r0
 801dbfc:	0c30      	lsrs	r0, r6, #16
 801dbfe:	ee02 0a10 	vmov	s4, r0
 801dc02:	f50e 7480 	add.w	r4, lr, #256	; 0x100
 801dc06:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801dc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc0e:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801dc12:	0a2d      	lsrs	r5, r5, #8
 801dc14:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc18:	ee32 2a67 	vsub.f32	s4, s4, s15
 801dc1c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dc20:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801dc24:	ea45 0e0e 	orr.w	lr, r5, lr
 801dc28:	0c18      	lsrs	r0, r3, #16
 801dc2a:	eee1 7a02 	vfma.f32	s15, s2, s4
 801dc2e:	2aff      	cmp	r2, #255	; 0xff
 801dc30:	ee02 0a10 	vmov	s4, r0
 801dc34:	ea4f 401e 	mov.w	r0, lr, lsr #16
 801dc38:	ee00 0a10 	vmov	s0, r0
 801dc3c:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801dc40:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801dc44:	ee30 0a42 	vsub.f32	s0, s0, s4
 801dc48:	eea1 2a00 	vfma.f32	s4, s2, s0
 801dc4c:	ee32 2a67 	vsub.f32	s4, s4, s15
 801dc50:	eee0 7a82 	vfma.f32	s15, s1, s4
 801dc54:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801dc58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dc5c:	ee17 0a90 	vmov	r0, s15
 801dc60:	f000 04f8 	and.w	r4, r0, #248	; 0xf8
 801dc64:	f3c1 2007 	ubfx	r0, r1, #8, #8
 801dc68:	ee07 0a90 	vmov	s15, r0
 801dc6c:	f3c6 2007 	ubfx	r0, r6, #8, #8
 801dc70:	ee02 0a10 	vmov	s4, r0
 801dc74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc78:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801dc7c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801dc80:	ee32 2a67 	vsub.f32	s4, s4, s15
 801dc84:	b2c9      	uxtb	r1, r1
 801dc86:	eee1 7a02 	vfma.f32	s15, s2, s4
 801dc8a:	b2f6      	uxtb	r6, r6
 801dc8c:	b2db      	uxtb	r3, r3
 801dc8e:	ee02 0a10 	vmov	s4, r0
 801dc92:	f3ce 2007 	ubfx	r0, lr, #8, #8
 801dc96:	ee00 0a10 	vmov	s0, r0
 801dc9a:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801dc9e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801dca2:	ee30 0a42 	vsub.f32	s0, s0, s4
 801dca6:	eea1 2a00 	vfma.f32	s4, s2, s0
 801dcaa:	ee32 2a67 	vsub.f32	s4, s4, s15
 801dcae:	eee0 7a82 	vfma.f32	s15, s1, s4
 801dcb2:	ee02 6a10 	vmov	s4, r6
 801dcb6:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801dcba:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801dcbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dcc2:	ee17 0a90 	vmov	r0, s15
 801dcc6:	ee07 1a90 	vmov	s15, r1
 801dcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcce:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801dcd2:	ee32 2a67 	vsub.f32	s4, s4, s15
 801dcd6:	eee1 7a02 	vfma.f32	s15, s2, s4
 801dcda:	ee02 3a10 	vmov	s4, r3
 801dcde:	fa5f f38e 	uxtb.w	r3, lr
 801dce2:	ee00 3a10 	vmov	s0, r3
 801dce6:	eeb8 2a42 	vcvt.f32.u32	s4, s4
 801dcea:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801dcee:	ee30 0a42 	vsub.f32	s0, s0, s4
 801dcf2:	eea1 2a00 	vfma.f32	s4, s2, s0
 801dcf6:	ee32 2a67 	vsub.f32	s4, s4, s15
 801dcfa:	eee0 7a82 	vfma.f32	s15, s1, s4
 801dcfe:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801dd02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd06:	ee17 3a90 	vmov	r3, s15
 801dd0a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801dd0e:	d103      	bne.n	801dd18 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x99c>
 801dd10:	9906      	ldr	r1, [sp, #24]
 801dd12:	29ff      	cmp	r1, #255	; 0xff
 801dd14:	f001 8015 	beq.w	801ed42 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19c6>
 801dd18:	9d00      	ldr	r5, [sp, #0]
 801dd1a:	8839      	ldrh	r1, [r7, #0]
 801dd1c:	436a      	muls	r2, r5
 801dd1e:	1c55      	adds	r5, r2, #1
 801dd20:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801dd24:	f8bd 5000 	ldrh.w	r5, [sp]
 801dd28:	120e      	asrs	r6, r1, #8
 801dd2a:	ea6f 2222 	mvn.w	r2, r2, asr #8
 801dd2e:	b2d2      	uxtb	r2, r2
 801dd30:	fb14 f405 	smulbb	r4, r4, r5
 801dd34:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801dd38:	fb06 4602 	mla	r6, r6, r2, r4
 801dd3c:	f8bd 4000 	ldrh.w	r4, [sp]
 801dd40:	10cd      	asrs	r5, r1, #3
 801dd42:	00c9      	lsls	r1, r1, #3
 801dd44:	fb13 f304 	smulbb	r3, r3, r4
 801dd48:	b2c9      	uxtb	r1, r1
 801dd4a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801dd4e:	fb10 f004 	smulbb	r0, r0, r4
 801dd52:	fb01 3102 	mla	r1, r1, r2, r3
 801dd56:	b2b6      	uxth	r6, r6
 801dd58:	fb05 0002 	mla	r0, r5, r2, r0
 801dd5c:	b289      	uxth	r1, r1
 801dd5e:	b285      	uxth	r5, r0
 801dd60:	1c74      	adds	r4, r6, #1
 801dd62:	1c48      	adds	r0, r1, #1
 801dd64:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801dd68:	eb00 2011 	add.w	r0, r0, r1, lsr #8
 801dd6c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 801dd70:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801dd74:	4306      	orrs	r6, r0
 801dd76:	1c68      	adds	r0, r5, #1
 801dd78:	eb00 2015 	add.w	r0, r0, r5, lsr #8
 801dd7c:	0940      	lsrs	r0, r0, #5
 801dd7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dd82:	4306      	orrs	r6, r0
 801dd84:	803e      	strh	r6, [r7, #0]
 801dd86:	9b04      	ldr	r3, [sp, #16]
 801dd88:	449c      	add	ip, r3
 801dd8a:	9b05      	ldr	r3, [sp, #20]
 801dd8c:	449a      	add	sl, r3
 801dd8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dd90:	3301      	adds	r3, #1
 801dd92:	3702      	adds	r7, #2
 801dd94:	930c      	str	r3, [sp, #48]	; 0x30
 801dd96:	e663      	b.n	801da60 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6e4>
 801dd98:	465d      	mov	r5, fp
 801dd9a:	2600      	movs	r6, #0
 801dd9c:	9b01      	ldr	r3, [sp, #4]
 801dd9e:	42b3      	cmp	r3, r6
 801dda0:	f340 84ba 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801dda4:	9b03      	ldr	r3, [sp, #12]
 801dda6:	ea4f 422c 	mov.w	r2, ip, asr #16
 801ddaa:	ea4f 412a 	mov.w	r1, sl, asr #16
 801ddae:	b15b      	cbz	r3, 801ddc8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa4c>
 801ddb0:	2a00      	cmp	r2, #0
 801ddb2:	db56      	blt.n	801de62 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801ddb4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801ddb8:	429a      	cmp	r2, r3
 801ddba:	da52      	bge.n	801de62 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801ddbc:	2900      	cmp	r1, #0
 801ddbe:	db50      	blt.n	801de62 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801ddc0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ddc4:	4299      	cmp	r1, r3
 801ddc6:	da4c      	bge.n	801de62 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801ddc8:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801ddcc:	fb01 2303 	mla	r3, r1, r3, r2
 801ddd0:	9a02      	ldr	r2, [sp, #8]
 801ddd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ddd6:	0e11      	lsrs	r1, r2, #24
 801ddd8:	d043      	beq.n	801de62 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801ddda:	29ff      	cmp	r1, #255	; 0xff
 801dddc:	d103      	bne.n	801dde6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa6a>
 801ddde:	9b06      	ldr	r3, [sp, #24]
 801dde0:	2bff      	cmp	r3, #255	; 0xff
 801dde2:	f001 80c6 	beq.w	801ef72 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bf6>
 801dde6:	9b06      	ldr	r3, [sp, #24]
 801dde8:	882c      	ldrh	r4, [r5, #0]
 801ddea:	4359      	muls	r1, r3
 801ddec:	1c4b      	adds	r3, r1, #1
 801ddee:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801ddf2:	121b      	asrs	r3, r3, #8
 801ddf4:	b29f      	uxth	r7, r3
 801ddf6:	1220      	asrs	r0, r4, #8
 801ddf8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801ddfc:	43db      	mvns	r3, r3
 801ddfe:	b2db      	uxtb	r3, r3
 801de00:	fb11 f107 	smulbb	r1, r1, r7
 801de04:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801de08:	fb00 1003 	mla	r0, r0, r3, r1
 801de0c:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 801de10:	10e1      	asrs	r1, r4, #3
 801de12:	b2d2      	uxtb	r2, r2
 801de14:	00e4      	lsls	r4, r4, #3
 801de16:	b2e4      	uxtb	r4, r4
 801de18:	fb12 f207 	smulbb	r2, r2, r7
 801de1c:	fb04 2203 	mla	r2, r4, r3, r2
 801de20:	b280      	uxth	r0, r0
 801de22:	fb1e fe07 	smulbb	lr, lr, r7
 801de26:	b292      	uxth	r2, r2
 801de28:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801de2c:	fb01 e103 	mla	r1, r1, r3, lr
 801de30:	1c43      	adds	r3, r0, #1
 801de32:	f102 0e01 	add.w	lr, r2, #1
 801de36:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801de3a:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801de3e:	b289      	uxth	r1, r1
 801de40:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801de44:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801de48:	ea40 000e 	orr.w	r0, r0, lr
 801de4c:	f101 0e01 	add.w	lr, r1, #1
 801de50:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 801de54:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801de58:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801de5c:	ea40 000e 	orr.w	r0, r0, lr
 801de60:	8028      	strh	r0, [r5, #0]
 801de62:	9b04      	ldr	r3, [sp, #16]
 801de64:	449c      	add	ip, r3
 801de66:	9b05      	ldr	r3, [sp, #20]
 801de68:	3502      	adds	r5, #2
 801de6a:	449a      	add	sl, r3
 801de6c:	3601      	adds	r6, #1
 801de6e:	e795      	b.n	801dd9c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa20>
 801de70:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801de74:	465f      	mov	r7, fp
 801de76:	f04f 0800 	mov.w	r8, #0
 801de7a:	9b01      	ldr	r3, [sp, #4]
 801de7c:	4543      	cmp	r3, r8
 801de7e:	f340 844b 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801de82:	9903      	ldr	r1, [sp, #12]
 801de84:	ea4f 422c 	mov.w	r2, ip, asr #16
 801de88:	ea4f 432a 	mov.w	r3, sl, asr #16
 801de8c:	b179      	cbz	r1, 801deae <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xb32>
 801de8e:	2a00      	cmp	r2, #0
 801de90:	f2c0 8092 	blt.w	801dfb8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801de94:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801de98:	428a      	cmp	r2, r1
 801de9a:	f280 808d 	bge.w	801dfb8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	f2c0 808a 	blt.w	801dfb8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801dea4:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801dea8:	428b      	cmp	r3, r1
 801deaa:	f280 8085 	bge.w	801dfb8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801deae:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801deb2:	9802      	ldr	r0, [sp, #8]
 801deb4:	fb03 2301 	mla	r3, r3, r1, r2
 801deb8:	9a02      	ldr	r2, [sp, #8]
 801deba:	f850 e023 	ldr.w	lr, [r0, r3, lsl #2]
 801debe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801dec2:	f3ca 2407 	ubfx	r4, sl, #8, #8
 801dec6:	6853      	ldr	r3, [r2, #4]
 801dec8:	930c      	str	r3, [sp, #48]	; 0x30
 801deca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dece:	930e      	str	r3, [sp, #56]	; 0x38
 801ded0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801ded4:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ded8:	fb04 f001 	mul.w	r0, r4, r1
 801dedc:	0a00      	lsrs	r0, r0, #8
 801dede:	6855      	ldr	r5, [r2, #4]
 801dee0:	1a22      	subs	r2, r4, r0
 801dee2:	920f      	str	r2, [sp, #60]	; 0x3c
 801dee4:	190a      	adds	r2, r1, r4
 801dee6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dee8:	1a0e      	subs	r6, r1, r0
 801deea:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801deee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801def2:	4402      	add	r2, r0
 801def4:	f00e 11ff 	and.w	r1, lr, #16711935	; 0xff00ff
 801def8:	4374      	muls	r4, r6
 801defa:	fb02 4401 	mla	r4, r2, r1, r4
 801defe:	f005 11ff 	and.w	r1, r5, #16711935	; 0xff00ff
 801df02:	fb00 4301 	mla	r3, r0, r1, r4
 801df06:	990e      	ldr	r1, [sp, #56]	; 0x38
 801df08:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801df0c:	460c      	mov	r4, r1
 801df0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801df10:	fb01 3104 	mla	r1, r1, r4, r3
 801df14:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801df16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801df18:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801df1c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801df20:	4374      	muls	r4, r6
 801df22:	fb02 4e0e 	mla	lr, r2, lr, r4
 801df26:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801df2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801df2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801df30:	fb00 ee05 	mla	lr, r0, r5, lr
 801df34:	fb02 ee03 	mla	lr, r2, r3, lr
 801df38:	9b06      	ldr	r3, [sp, #24]
 801df3a:	0a09      	lsrs	r1, r1, #8
 801df3c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801df40:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801df44:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801df48:	2bff      	cmp	r3, #255	; 0xff
 801df4a:	ea41 010e 	orr.w	r1, r1, lr
 801df4e:	f001 8032 	beq.w	801efb6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c3a>
 801df52:	883b      	ldrh	r3, [r7, #0]
 801df54:	f8bd 4000 	ldrh.w	r4, [sp]
 801df58:	f8bd 5000 	ldrh.w	r5, [sp]
 801df5c:	1218      	asrs	r0, r3, #8
 801df5e:	0c0a      	lsrs	r2, r1, #16
 801df60:	fb12 f204 	smulbb	r2, r2, r4
 801df64:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801df68:	fb00 2009 	mla	r0, r0, r9, r2
 801df6c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801df70:	10da      	asrs	r2, r3, #3
 801df72:	b2c9      	uxtb	r1, r1
 801df74:	00db      	lsls	r3, r3, #3
 801df76:	fb14 f405 	smulbb	r4, r4, r5
 801df7a:	b2db      	uxtb	r3, r3
 801df7c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801df80:	fb11 f105 	smulbb	r1, r1, r5
 801df84:	b280      	uxth	r0, r0
 801df86:	fb02 4209 	mla	r2, r2, r9, r4
 801df8a:	fb03 1109 	mla	r1, r3, r9, r1
 801df8e:	b292      	uxth	r2, r2
 801df90:	b289      	uxth	r1, r1
 801df92:	1c43      	adds	r3, r0, #1
 801df94:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801df98:	1c54      	adds	r4, r2, #1
 801df9a:	1c4b      	adds	r3, r1, #1
 801df9c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801dfa0:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801dfa4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801dfa8:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801dfac:	0964      	lsrs	r4, r4, #5
 801dfae:	4308      	orrs	r0, r1
 801dfb0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801dfb4:	4320      	orrs	r0, r4
 801dfb6:	8038      	strh	r0, [r7, #0]
 801dfb8:	9b04      	ldr	r3, [sp, #16]
 801dfba:	449c      	add	ip, r3
 801dfbc:	9b05      	ldr	r3, [sp, #20]
 801dfbe:	3702      	adds	r7, #2
 801dfc0:	449a      	add	sl, r3
 801dfc2:	f108 0801 	add.w	r8, r8, #1
 801dfc6:	e758      	b.n	801de7a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xafe>
 801dfc8:	2300      	movs	r3, #0
 801dfca:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 801dfce:	930e      	str	r3, [sp, #56]	; 0x38
 801dfd0:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 801dfd4:	9b01      	ldr	r3, [sp, #4]
 801dfd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801dfd8:	4293      	cmp	r3, r2
 801dfda:	f340 839d 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801dfde:	9903      	ldr	r1, [sp, #12]
 801dfe0:	ea4f 432c 	mov.w	r3, ip, asr #16
 801dfe4:	ea4f 422a 	mov.w	r2, sl, asr #16
 801dfe8:	b179      	cbz	r1, 801e00a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8e>
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	f2c0 8191 	blt.w	801e312 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801dff0:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801dff4:	428b      	cmp	r3, r1
 801dff6:	f280 818c 	bge.w	801e312 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801dffa:	2a00      	cmp	r2, #0
 801dffc:	f2c0 8189 	blt.w	801e312 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801e000:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801e004:	428a      	cmp	r2, r1
 801e006:	f280 8184 	bge.w	801e312 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801e00a:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801e00e:	fb02 3301 	mla	r3, r2, r1, r3
 801e012:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e014:	6850      	ldr	r0, [r2, #4]
 801e016:	18c2      	adds	r2, r0, r3
 801e018:	5cc0      	ldrb	r0, [r0, r3]
 801e01a:	f892 e001 	ldrb.w	lr, [r2, #1]
 801e01e:	5c57      	ldrb	r7, [r2, r1]
 801e020:	440a      	add	r2, r1
 801e022:	ee07 0a90 	vmov	s15, r0
 801e026:	7856      	ldrb	r6, [r2, #1]
 801e028:	fa1f f28c 	uxth.w	r2, ip
 801e02c:	ee02 2a10 	vmov	s4, r2
 801e030:	ee00 ea90 	vmov	s1, lr
 801e034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e038:	eeb8 2ac2 	vcvt.f32.s32	s4, s4
 801e03c:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e040:	ee22 2a23 	vmul.f32	s4, s4, s7
 801e044:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e048:	ee00 6a10 	vmov	s0, r6
 801e04c:	eee2 7a20 	vfma.f32	s15, s4, s1
 801e050:	fa1f f28a 	uxth.w	r2, sl
 801e054:	ee00 7a90 	vmov	s1, r7
 801e058:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801e05c:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e060:	ee01 2a10 	vmov	s2, r2
 801e064:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e068:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 801e06c:	eee2 0a00 	vfma.f32	s1, s4, s0
 801e070:	ee21 1a23 	vmul.f32	s2, s2, s7
 801e074:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e078:	eee1 7a20 	vfma.f32	s15, s2, s1
 801e07c:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801e080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e084:	ee17 2a90 	vmov	r2, s15
 801e088:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801e08c:	9211      	str	r2, [sp, #68]	; 0x44
 801e08e:	f000 8140 	beq.w	801e312 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801e092:	9c02      	ldr	r4, [sp, #8]
 801e094:	9a02      	ldr	r2, [sp, #8]
 801e096:	f834 5013 	ldrh.w	r5, [r4, r3, lsl #1]
 801e09a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801e09e:	b283      	uxth	r3, r0
 801e0a0:	930f      	str	r3, [sp, #60]	; 0x3c
 801e0a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e0a4:	8854      	ldrh	r4, [r2, #2]
 801e0a6:	122b      	asrs	r3, r5, #8
 801e0a8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e0ac:	4343      	muls	r3, r0
 801e0ae:	ea4f 2924 	mov.w	r9, r4, asr #8
 801e0b2:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
 801e0b6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 801e0ba:	1c59      	adds	r1, r3, #1
 801e0bc:	fa1f fe8e 	uxth.w	lr, lr
 801e0c0:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801e0c4:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 801e0c8:	fb09 f90e 	mul.w	r9, r9, lr
 801e0cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e0d0:	ee07 3a90 	vmov	s15, r3
 801e0d4:	f109 0301 	add.w	r3, r9, #1
 801e0d8:	8852      	ldrh	r2, [r2, #2]
 801e0da:	9210      	str	r2, [sp, #64]	; 0x40
 801e0dc:	eb03 2929 	add.w	r9, r3, r9, asr #8
 801e0e0:	ea4f 2820 	mov.w	r8, r0, asr #8
 801e0e4:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e0e8:	b2bf      	uxth	r7, r7
 801e0ea:	ee00 9a90 	vmov	s1, r9
 801e0ee:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e0f2:	1212      	asrs	r2, r2, #8
 801e0f4:	fb08 f807 	mul.w	r8, r8, r7
 801e0f8:	b2b6      	uxth	r6, r6
 801e0fa:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e0fe:	4372      	muls	r2, r6
 801e100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e104:	f108 0301 	add.w	r3, r8, #1
 801e108:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e10c:	eb03 2828 	add.w	r8, r3, r8, asr #8
 801e110:	1c53      	adds	r3, r2, #1
 801e112:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e116:	eb03 2222 	add.w	r2, r3, r2, asr #8
 801e11a:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e11e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e122:	eee2 7a20 	vfma.f32	s15, s4, s1
 801e126:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e128:	ee00 8a90 	vmov	s1, r8
 801e12c:	ee00 2a10 	vmov	s0, r2
 801e130:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e134:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801e138:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e13c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e140:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e144:	eee2 0a00 	vfma.f32	s1, s4, s0
 801e148:	ea4f 09e0 	mov.w	r9, r0, asr #3
 801e14c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e150:	fb09 f907 	mul.w	r9, r9, r7
 801e154:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e158:	00e4      	lsls	r4, r4, #3
 801e15a:	eee1 7a20 	vfma.f32	s15, s2, s1
 801e15e:	b2e4      	uxtb	r4, r4
 801e160:	fb04 f40e 	mul.w	r4, r4, lr
 801e164:	00c0      	lsls	r0, r0, #3
 801e166:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801e16a:	b2c0      	uxtb	r0, r0
 801e16c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e170:	4378      	muls	r0, r7
 801e172:	ee17 3a90 	vmov	r3, s15
 801e176:	f003 02f8 	and.w	r2, r3, #248	; 0xf8
 801e17a:	10eb      	asrs	r3, r5, #3
 801e17c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e180:	434b      	muls	r3, r1
 801e182:	fb08 f10e 	mul.w	r1, r8, lr
 801e186:	9112      	str	r1, [sp, #72]	; 0x48
 801e188:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e18a:	ea4f 08e1 	mov.w	r8, r1, asr #3
 801e18e:	1c59      	adds	r1, r3, #1
 801e190:	eb01 2323 	add.w	r3, r1, r3, asr #8
 801e194:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e198:	ee07 3a90 	vmov	s15, r3
 801e19c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e19e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e1a0:	3301      	adds	r3, #1
 801e1a2:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801e1a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e1aa:	ee00 3a90 	vmov	s1, r3
 801e1ae:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e1b2:	fb08 f806 	mul.w	r8, r8, r6
 801e1b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1ba:	f109 0301 	add.w	r3, r9, #1
 801e1be:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e1c2:	eb03 2929 	add.w	r9, r3, r9, asr #8
 801e1c6:	f108 0301 	add.w	r3, r8, #1
 801e1ca:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e1ce:	eb03 2828 	add.w	r8, r3, r8, asr #8
 801e1d2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e1d6:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801e1da:	eee2 7a20 	vfma.f32	s15, s4, s1
 801e1de:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e1e0:	ee00 9a90 	vmov	s1, r9
 801e1e4:	ee00 8a10 	vmov	s0, r8
 801e1e8:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e1ec:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801e1f0:	00ed      	lsls	r5, r5, #3
 801e1f2:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e1f6:	b2ed      	uxtb	r5, r5
 801e1f8:	eee2 0a00 	vfma.f32	s1, s4, s0
 801e1fc:	434d      	muls	r5, r1
 801e1fe:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e200:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e204:	00c9      	lsls	r1, r1, #3
 801e206:	eee1 7a20 	vfma.f32	s15, s2, s1
 801e20a:	b2c9      	uxtb	r1, r1
 801e20c:	434e      	muls	r6, r1
 801e20e:	f104 0e01 	add.w	lr, r4, #1
 801e212:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801e216:	1c69      	adds	r1, r5, #1
 801e218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e21c:	eb01 2525 	add.w	r5, r1, r5, asr #8
 801e220:	eb0e 2424 	add.w	r4, lr, r4, asr #8
 801e224:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801e228:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801e22c:	ee17 3a90 	vmov	r3, s15
 801e230:	ee00 4a90 	vmov	s1, r4
 801e234:	ee07 5a90 	vmov	s15, r5
 801e238:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e240:	1c71      	adds	r1, r6, #1
 801e242:	1c47      	adds	r7, r0, #1
 801e244:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e248:	eb01 2626 	add.w	r6, r1, r6, asr #8
 801e24c:	eb07 2020 	add.w	r0, r7, r0, asr #8
 801e250:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e254:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801e258:	eee2 7a20 	vfma.f32	s15, s4, s1
 801e25c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e260:	ee00 0a90 	vmov	s1, r0
 801e264:	ee00 6a10 	vmov	s0, r6
 801e268:	eef8 0a60 	vcvt.f32.u32	s1, s1
 801e26c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801e270:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e272:	ee30 0a60 	vsub.f32	s0, s0, s1
 801e276:	28ff      	cmp	r0, #255	; 0xff
 801e278:	eee2 0a00 	vfma.f32	s1, s4, s0
 801e27c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801e280:	eee1 7a20 	vfma.f32	s15, s2, s1
 801e284:	ee77 7aa1 	vadd.f32	s15, s15, s3
 801e288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e28c:	ee17 1a90 	vmov	r1, s15
 801e290:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e294:	d103      	bne.n	801e29e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf22>
 801e296:	9806      	ldr	r0, [sp, #24]
 801e298:	28ff      	cmp	r0, #255	; 0xff
 801e29a:	f000 85da 	beq.w	801ee52 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ad6>
 801e29e:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e2a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801e2a2:	8804      	ldrh	r4, [r0, #0]
 801e2a4:	9800      	ldr	r0, [sp, #0]
 801e2a6:	4345      	muls	r5, r0
 801e2a8:	1c68      	adds	r0, r5, #1
 801e2aa:	eb00 2025 	add.w	r0, r0, r5, asr #8
 801e2ae:	f8bd 5000 	ldrh.w	r5, [sp]
 801e2b2:	1226      	asrs	r6, r4, #8
 801e2b4:	ea6f 2020 	mvn.w	r0, r0, asr #8
 801e2b8:	b2c0      	uxtb	r0, r0
 801e2ba:	fb12 f205 	smulbb	r2, r2, r5
 801e2be:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e2c2:	fb06 2600 	mla	r6, r6, r0, r2
 801e2c6:	f8bd 2000 	ldrh.w	r2, [sp]
 801e2ca:	10e5      	asrs	r5, r4, #3
 801e2cc:	00e4      	lsls	r4, r4, #3
 801e2ce:	fb11 f102 	smulbb	r1, r1, r2
 801e2d2:	b2e4      	uxtb	r4, r4
 801e2d4:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e2d8:	fb13 f302 	smulbb	r3, r3, r2
 801e2dc:	fb04 1400 	mla	r4, r4, r0, r1
 801e2e0:	b2b6      	uxth	r6, r6
 801e2e2:	fb05 3300 	mla	r3, r5, r0, r3
 801e2e6:	b2a4      	uxth	r4, r4
 801e2e8:	b29d      	uxth	r5, r3
 801e2ea:	1c72      	adds	r2, r6, #1
 801e2ec:	1c63      	adds	r3, r4, #1
 801e2ee:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801e2f2:	eb03 2314 	add.w	r3, r3, r4, lsr #8
 801e2f6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e2fa:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801e2fe:	431e      	orrs	r6, r3
 801e300:	1c6b      	adds	r3, r5, #1
 801e302:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 801e306:	095b      	lsrs	r3, r3, #5
 801e308:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e30c:	431e      	orrs	r6, r3
 801e30e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e310:	801e      	strh	r6, [r3, #0]
 801e312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e314:	3302      	adds	r3, #2
 801e316:	930c      	str	r3, [sp, #48]	; 0x30
 801e318:	9b04      	ldr	r3, [sp, #16]
 801e31a:	449c      	add	ip, r3
 801e31c:	9b05      	ldr	r3, [sp, #20]
 801e31e:	449a      	add	sl, r3
 801e320:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e322:	3301      	adds	r3, #1
 801e324:	930e      	str	r3, [sp, #56]	; 0x38
 801e326:	e655      	b.n	801dfd4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc58>
 801e328:	2500      	movs	r5, #0
 801e32a:	9b01      	ldr	r3, [sp, #4]
 801e32c:	42ab      	cmp	r3, r5
 801e32e:	f340 81f3 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801e332:	9903      	ldr	r1, [sp, #12]
 801e334:	ea4f 432c 	mov.w	r3, ip, asr #16
 801e338:	ea4f 422a 	mov.w	r2, sl, asr #16
 801e33c:	b159      	cbz	r1, 801e356 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfda>
 801e33e:	2b00      	cmp	r3, #0
 801e340:	db55      	blt.n	801e3ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801e342:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801e346:	428b      	cmp	r3, r1
 801e348:	da51      	bge.n	801e3ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801e34a:	2a00      	cmp	r2, #0
 801e34c:	db4f      	blt.n	801e3ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801e34e:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801e352:	428a      	cmp	r2, r1
 801e354:	da4b      	bge.n	801e3ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801e356:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801e35a:	fb02 3101 	mla	r1, r2, r1, r3
 801e35e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e360:	685b      	ldr	r3, [r3, #4]
 801e362:	5c5a      	ldrb	r2, [r3, r1]
 801e364:	2a00      	cmp	r2, #0
 801e366:	d042      	beq.n	801e3ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1072>
 801e368:	9b02      	ldr	r3, [sp, #8]
 801e36a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801e36e:	9906      	ldr	r1, [sp, #24]
 801e370:	434a      	muls	r2, r1
 801e372:	1c51      	adds	r1, r2, #1
 801e374:	eb01 2222 	add.w	r2, r1, r2, asr #8
 801e378:	1212      	asrs	r2, r2, #8
 801e37a:	2aff      	cmp	r2, #255	; 0xff
 801e37c:	d035      	beq.n	801e3ea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x106e>
 801e37e:	f83b 4015 	ldrh.w	r4, [fp, r5, lsl #1]
 801e382:	1219      	asrs	r1, r3, #8
 801e384:	b297      	uxth	r7, r2
 801e386:	1220      	asrs	r0, r4, #8
 801e388:	43d2      	mvns	r2, r2
 801e38a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e38e:	b2d2      	uxtb	r2, r2
 801e390:	fb11 f107 	smulbb	r1, r1, r7
 801e394:	10de      	asrs	r6, r3, #3
 801e396:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e39a:	00db      	lsls	r3, r3, #3
 801e39c:	fb00 1002 	mla	r0, r0, r2, r1
 801e3a0:	b2db      	uxtb	r3, r3
 801e3a2:	10e1      	asrs	r1, r4, #3
 801e3a4:	00e4      	lsls	r4, r4, #3
 801e3a6:	b2e4      	uxtb	r4, r4
 801e3a8:	fb13 f307 	smulbb	r3, r3, r7
 801e3ac:	fb04 3302 	mla	r3, r4, r2, r3
 801e3b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e3b4:	b280      	uxth	r0, r0
 801e3b6:	fb16 f607 	smulbb	r6, r6, r7
 801e3ba:	b29b      	uxth	r3, r3
 801e3bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e3c0:	fb01 6102 	mla	r1, r1, r2, r6
 801e3c4:	1c5c      	adds	r4, r3, #1
 801e3c6:	1c42      	adds	r2, r0, #1
 801e3c8:	b289      	uxth	r1, r1
 801e3ca:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e3ce:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801e3d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e3d6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e3da:	1c4e      	adds	r6, r1, #1
 801e3dc:	4318      	orrs	r0, r3
 801e3de:	eb06 2311 	add.w	r3, r6, r1, lsr #8
 801e3e2:	095b      	lsrs	r3, r3, #5
 801e3e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e3e8:	4303      	orrs	r3, r0
 801e3ea:	f82b 3015 	strh.w	r3, [fp, r5, lsl #1]
 801e3ee:	9b04      	ldr	r3, [sp, #16]
 801e3f0:	449c      	add	ip, r3
 801e3f2:	9b05      	ldr	r3, [sp, #20]
 801e3f4:	3501      	adds	r5, #1
 801e3f6:	449a      	add	sl, r3
 801e3f8:	e797      	b.n	801e32a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfae>
 801e3fa:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e3fe:	930c      	str	r3, [sp, #48]	; 0x30
 801e400:	2000      	movs	r0, #0
 801e402:	9b01      	ldr	r3, [sp, #4]
 801e404:	4283      	cmp	r3, r0
 801e406:	f340 8187 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801e40a:	9b03      	ldr	r3, [sp, #12]
 801e40c:	ea4f 422c 	mov.w	r2, ip, asr #16
 801e410:	ea4f 412a 	mov.w	r1, sl, asr #16
 801e414:	b17b      	cbz	r3, 801e436 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x10ba>
 801e416:	2a00      	cmp	r2, #0
 801e418:	f2c0 809d 	blt.w	801e556 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801e41c:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801e420:	429a      	cmp	r2, r3
 801e422:	f280 8098 	bge.w	801e556 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801e426:	2900      	cmp	r1, #0
 801e428:	f2c0 8095 	blt.w	801e556 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801e42c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e430:	4299      	cmp	r1, r3
 801e432:	f280 8090 	bge.w	801e556 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11da>
 801e436:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801e43a:	9d02      	ldr	r5, [sp, #8]
 801e43c:	fb01 2103 	mla	r1, r1, r3, r2
 801e440:	9a02      	ldr	r2, [sp, #8]
 801e442:	f835 5011 	ldrh.w	r5, [r5, r1, lsl #1]
 801e446:	eb02 0641 	add.w	r6, r2, r1, lsl #1
 801e44a:	f3ca 3403 	ubfx	r4, sl, #12, #4
 801e44e:	f836 7013 	ldrh.w	r7, [r6, r3, lsl #1]
 801e452:	8871      	ldrh	r1, [r6, #2]
 801e454:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801e458:	f3cc 3203 	ubfx	r2, ip, #12, #4
 801e45c:	f8b6 e002 	ldrh.w	lr, [r6, #2]
 801e460:	042e      	lsls	r6, r5, #16
 801e462:	fb04 f302 	mul.w	r3, r4, r2
 801e466:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 801e46a:	ea4f 4801 	mov.w	r8, r1, lsl #16
 801e46e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e472:	10db      	asrs	r3, r3, #3
 801e474:	4335      	orrs	r5, r6
 801e476:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801e47a:	f1c4 0610 	rsb	r6, r4, #16
 801e47e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e482:	1ab6      	subs	r6, r6, r2
 801e484:	ea48 0101 	orr.w	r1, r8, r1
 801e488:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e48c:	ea4f 490e 	mov.w	r9, lr, lsl #16
 801e490:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 801e494:	4351      	muls	r1, r2
 801e496:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 801e49a:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e49e:	ea49 0e0e 	orr.w	lr, r9, lr
 801e4a2:	fb06 1105 	mla	r1, r6, r5, r1
 801e4a6:	fb03 110e 	mla	r1, r3, lr, r1
 801e4aa:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801e4ae:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e4b2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e4b6:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 801e4ba:	ea4e 0707 	orr.w	r7, lr, r7
 801e4be:	fb03 1107 	mla	r1, r3, r7, r1
 801e4c2:	ea4f 5851 	mov.w	r8, r1, lsr #21
 801e4c6:	094b      	lsrs	r3, r1, #5
 801e4c8:	9a06      	ldr	r2, [sp, #24]
 801e4ca:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e4ce:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e4d2:	ea48 0303 	orr.w	r3, r8, r3
 801e4d6:	2aff      	cmp	r2, #255	; 0xff
 801e4d8:	b29b      	uxth	r3, r3
 801e4da:	d03a      	beq.n	801e552 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x11d6>
 801e4dc:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]
 801e4e0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801e4e4:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801e4e8:	1211      	asrs	r1, r2, #8
 801e4ea:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e4ee:	fb11 f105 	smulbb	r1, r1, r5
 801e4f2:	121c      	asrs	r4, r3, #8
 801e4f4:	9d00      	ldr	r5, [sp, #0]
 801e4f6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e4fa:	fb04 1405 	mla	r4, r4, r5, r1
 801e4fe:	10d5      	asrs	r5, r2, #3
 801e500:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e504:	fb15 f506 	smulbb	r5, r5, r6
 801e508:	10d9      	asrs	r1, r3, #3
 801e50a:	9e00      	ldr	r6, [sp, #0]
 801e50c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e510:	fb01 5106 	mla	r1, r1, r6, r5
 801e514:	00d2      	lsls	r2, r2, #3
 801e516:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801e51a:	00db      	lsls	r3, r3, #3
 801e51c:	b2d2      	uxtb	r2, r2
 801e51e:	fb12 f205 	smulbb	r2, r2, r5
 801e522:	b2db      	uxtb	r3, r3
 801e524:	fb03 2306 	mla	r3, r3, r6, r2
 801e528:	b2a4      	uxth	r4, r4
 801e52a:	b29b      	uxth	r3, r3
 801e52c:	1c62      	adds	r2, r4, #1
 801e52e:	1c5d      	adds	r5, r3, #1
 801e530:	b289      	uxth	r1, r1
 801e532:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801e536:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e53a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e53e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e542:	1c4a      	adds	r2, r1, #1
 801e544:	431c      	orrs	r4, r3
 801e546:	eb02 2311 	add.w	r3, r2, r1, lsr #8
 801e54a:	095b      	lsrs	r3, r3, #5
 801e54c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e550:	4323      	orrs	r3, r4
 801e552:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 801e556:	9b04      	ldr	r3, [sp, #16]
 801e558:	449c      	add	ip, r3
 801e55a:	9b05      	ldr	r3, [sp, #20]
 801e55c:	3001      	adds	r0, #1
 801e55e:	449a      	add	sl, r3
 801e560:	e74f      	b.n	801e402 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1086>
 801e562:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e564:	685b      	ldr	r3, [r3, #4]
 801e566:	781b      	ldrb	r3, [r3, #0]
 801e568:	2b01      	cmp	r3, #1
 801e56a:	f000 80c6 	beq.w	801e6fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x137e>
 801e56e:	f0c0 80d9 	bcc.w	801e724 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a8>
 801e572:	2b02      	cmp	r3, #2
 801e574:	f47f a842 	bne.w	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801e578:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e57c:	930c      	str	r3, [sp, #48]	; 0x30
 801e57e:	2000      	movs	r0, #0
 801e580:	9b01      	ldr	r3, [sp, #4]
 801e582:	4283      	cmp	r3, r0
 801e584:	f340 80c8 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801e588:	9a03      	ldr	r2, [sp, #12]
 801e58a:	ea4f 432c 	mov.w	r3, ip, asr #16
 801e58e:	ea4f 412a 	mov.w	r1, sl, asr #16
 801e592:	b17a      	cbz	r2, 801e5b4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1238>
 801e594:	2b00      	cmp	r3, #0
 801e596:	f2c0 80aa 	blt.w	801e6ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801e59a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e59e:	4293      	cmp	r3, r2
 801e5a0:	f280 80a5 	bge.w	801e6ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801e5a4:	2900      	cmp	r1, #0
 801e5a6:	f2c0 80a2 	blt.w	801e6ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801e5aa:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801e5ae:	4291      	cmp	r1, r2
 801e5b0:	f280 809d 	bge.w	801e6ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1372>
 801e5b4:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 801e5b8:	9e02      	ldr	r6, [sp, #8]
 801e5ba:	fb01 3107 	mla	r1, r1, r7, r3
 801e5be:	9b02      	ldr	r3, [sp, #8]
 801e5c0:	eb03 0e01 	add.w	lr, r3, r1
 801e5c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801e5c6:	5c71      	ldrb	r1, [r6, r1]
 801e5c8:	685d      	ldr	r5, [r3, #4]
 801e5ca:	3102      	adds	r1, #2
 801e5cc:	eb0e 0307 	add.w	r3, lr, r7
 801e5d0:	f835 6011 	ldrh.w	r6, [r5, r1, lsl #1]
 801e5d4:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e5d8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801e5dc:	785b      	ldrb	r3, [r3, #1]
 801e5de:	3102      	adds	r1, #2
 801e5e0:	3302      	adds	r3, #2
 801e5e2:	3702      	adds	r7, #2
 801e5e4:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
 801e5e8:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
 801e5ec:	f835 7017 	ldrh.w	r7, [r5, r7, lsl #1]
 801e5f0:	f3cc 3203 	ubfx	r2, ip, #12, #4
 801e5f4:	f3ca 3403 	ubfx	r4, sl, #12, #4
 801e5f8:	0435      	lsls	r5, r6, #16
 801e5fa:	fb04 f302 	mul.w	r3, r4, r2
 801e5fe:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 801e602:	ea4f 4801 	mov.w	r8, r1, lsl #16
 801e606:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 801e60a:	10db      	asrs	r3, r3, #3
 801e60c:	4335      	orrs	r5, r6
 801e60e:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 801e612:	f1c4 0610 	rsb	r6, r4, #16
 801e616:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e61a:	1ab6      	subs	r6, r6, r2
 801e61c:	ea48 0101 	orr.w	r1, r8, r1
 801e620:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801e624:	ea4f 490e 	mov.w	r9, lr, lsl #16
 801e628:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 801e62c:	4351      	muls	r1, r2
 801e62e:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 801e632:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e636:	ea49 0e0e 	orr.w	lr, r9, lr
 801e63a:	fb06 1105 	mla	r1, r6, r5, r1
 801e63e:	fb03 110e 	mla	r1, r3, lr, r1
 801e642:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801e646:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e64a:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e64e:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 801e652:	ea4e 0707 	orr.w	r7, lr, r7
 801e656:	fb03 1107 	mla	r1, r3, r7, r1
 801e65a:	ea4f 5851 	mov.w	r8, r1, lsr #21
 801e65e:	094b      	lsrs	r3, r1, #5
 801e660:	9a06      	ldr	r2, [sp, #24]
 801e662:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e666:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801e66a:	ea48 0303 	orr.w	r3, r8, r3
 801e66e:	2aff      	cmp	r2, #255	; 0xff
 801e670:	b29b      	uxth	r3, r3
 801e672:	d03a      	beq.n	801e6ea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x136e>
 801e674:	f83b 2010 	ldrh.w	r2, [fp, r0, lsl #1]
 801e678:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801e67c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801e680:	1211      	asrs	r1, r2, #8
 801e682:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e686:	fb11 f105 	smulbb	r1, r1, r5
 801e68a:	121c      	asrs	r4, r3, #8
 801e68c:	9d00      	ldr	r5, [sp, #0]
 801e68e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801e692:	fb04 1405 	mla	r4, r4, r5, r1
 801e696:	10d5      	asrs	r5, r2, #3
 801e698:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e69c:	fb15 f506 	smulbb	r5, r5, r6
 801e6a0:	10d9      	asrs	r1, r3, #3
 801e6a2:	9e00      	ldr	r6, [sp, #0]
 801e6a4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801e6a8:	fb01 5106 	mla	r1, r1, r6, r5
 801e6ac:	00d2      	lsls	r2, r2, #3
 801e6ae:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 801e6b2:	00db      	lsls	r3, r3, #3
 801e6b4:	b2d2      	uxtb	r2, r2
 801e6b6:	fb12 f205 	smulbb	r2, r2, r5
 801e6ba:	b2db      	uxtb	r3, r3
 801e6bc:	fb03 2306 	mla	r3, r3, r6, r2
 801e6c0:	b2a4      	uxth	r4, r4
 801e6c2:	b29b      	uxth	r3, r3
 801e6c4:	1c62      	adds	r2, r4, #1
 801e6c6:	1c5d      	adds	r5, r3, #1
 801e6c8:	b289      	uxth	r1, r1
 801e6ca:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801e6ce:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801e6d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e6d6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801e6da:	1c4a      	adds	r2, r1, #1
 801e6dc:	431c      	orrs	r4, r3
 801e6de:	eb02 2311 	add.w	r3, r2, r1, lsr #8
 801e6e2:	095b      	lsrs	r3, r3, #5
 801e6e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e6e8:	4323      	orrs	r3, r4
 801e6ea:	f82b 3010 	strh.w	r3, [fp, r0, lsl #1]
 801e6ee:	9b04      	ldr	r3, [sp, #16]
 801e6f0:	449c      	add	ip, r3
 801e6f2:	9b05      	ldr	r3, [sp, #20]
 801e6f4:	3001      	adds	r0, #1
 801e6f6:	449a      	add	sl, r3
 801e6f8:	e742      	b.n	801e580 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1204>
 801e6fa:	2300      	movs	r3, #0
 801e6fc:	930c      	str	r3, [sp, #48]	; 0x30
 801e6fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801e702:	930e      	str	r3, [sp, #56]	; 0x38
 801e704:	465d      	mov	r5, fp
 801e706:	f04f 0903 	mov.w	r9, #3
 801e70a:	f04f 0804 	mov.w	r8, #4
 801e70e:	9b01      	ldr	r3, [sp, #4]
 801e710:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e712:	4293      	cmp	r3, r2
 801e714:	f300 80bb 	bgt.w	801e88e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1512>
 801e718:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e71c:	eb0b 0b43 	add.w	fp, fp, r3, lsl #1
 801e720:	f7fe bf6c 	b.w	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801e724:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801e728:	465f      	mov	r7, fp
 801e72a:	f04f 0800 	mov.w	r8, #0
 801e72e:	9b01      	ldr	r3, [sp, #4]
 801e730:	4543      	cmp	r3, r8
 801e732:	ddf1      	ble.n	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801e734:	9b03      	ldr	r3, [sp, #12]
 801e736:	ea4f 422c 	mov.w	r2, ip, asr #16
 801e73a:	ea4f 412a 	mov.w	r1, sl, asr #16
 801e73e:	b17b      	cbz	r3, 801e760 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13e4>
 801e740:	2a00      	cmp	r2, #0
 801e742:	f2c0 809c 	blt.w	801e87e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801e746:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801e74a:	429a      	cmp	r2, r3
 801e74c:	f280 8097 	bge.w	801e87e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801e750:	2900      	cmp	r1, #0
 801e752:	f2c0 8094 	blt.w	801e87e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801e756:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801e75a:	4299      	cmp	r1, r3
 801e75c:	f280 808f 	bge.w	801e87e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801e760:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801e764:	9c02      	ldr	r4, [sp, #8]
 801e766:	fb01 2103 	mla	r1, r1, r3, r2
 801e76a:	9a02      	ldr	r2, [sp, #8]
 801e76c:	1850      	adds	r0, r2, r1
 801e76e:	5c61      	ldrb	r1, [r4, r1]
 801e770:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e772:	3101      	adds	r1, #1
 801e774:	6852      	ldr	r2, [r2, #4]
 801e776:	f852 e021 	ldr.w	lr, [r2, r1, lsl #2]
 801e77a:	7841      	ldrb	r1, [r0, #1]
 801e77c:	3101      	adds	r1, #1
 801e77e:	f3ca 2407 	ubfx	r4, sl, #8, #8
 801e782:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801e786:	910e      	str	r1, [sp, #56]	; 0x38
 801e788:	18c1      	adds	r1, r0, r3
 801e78a:	5cc3      	ldrb	r3, [r0, r3]
 801e78c:	7849      	ldrb	r1, [r1, #1]
 801e78e:	3101      	adds	r1, #1
 801e790:	3301      	adds	r3, #1
 801e792:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801e796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e79a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e79c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801e7a0:	fb04 f001 	mul.w	r0, r4, r1
 801e7a4:	0a00      	lsrs	r0, r0, #8
 801e7a6:	1a22      	subs	r2, r4, r0
 801e7a8:	920c      	str	r2, [sp, #48]	; 0x30
 801e7aa:	190a      	adds	r2, r1, r4
 801e7ac:	1a0e      	subs	r6, r1, r0
 801e7ae:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e7b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 801e7b4:	4402      	add	r2, r0
 801e7b6:	f00e 14ff 	and.w	r4, lr, #16711935	; 0xff00ff
 801e7ba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801e7be:	4354      	muls	r4, r2
 801e7c0:	fb06 4401 	mla	r4, r6, r1, r4
 801e7c4:	f005 11ff 	and.w	r1, r5, #16711935	; 0xff00ff
 801e7c8:	fb00 4301 	mla	r3, r0, r1, r4
 801e7cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801e7ce:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801e7d2:	460c      	mov	r4, r1
 801e7d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e7d6:	fb01 3104 	mla	r1, r1, r4, r3
 801e7da:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e7dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e7de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801e7e2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e7e6:	4374      	muls	r4, r6
 801e7e8:	fb02 4e0e 	mla	lr, r2, lr, r4
 801e7ec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801e7f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e7f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e7f6:	fb00 ee05 	mla	lr, r0, r5, lr
 801e7fa:	fb02 ee03 	mla	lr, r2, r3, lr
 801e7fe:	9b06      	ldr	r3, [sp, #24]
 801e800:	0a09      	lsrs	r1, r1, #8
 801e802:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e806:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801e80a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801e80e:	2bff      	cmp	r3, #255	; 0xff
 801e810:	ea41 010e 	orr.w	r1, r1, lr
 801e814:	f000 8109 	beq.w	801ea2a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16ae>
 801e818:	883b      	ldrh	r3, [r7, #0]
 801e81a:	f8bd 4000 	ldrh.w	r4, [sp]
 801e81e:	f8bd 5000 	ldrh.w	r5, [sp]
 801e822:	1218      	asrs	r0, r3, #8
 801e824:	0c0a      	lsrs	r2, r1, #16
 801e826:	fb12 f204 	smulbb	r2, r2, r4
 801e82a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e82e:	fb00 2009 	mla	r0, r0, r9, r2
 801e832:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801e836:	10da      	asrs	r2, r3, #3
 801e838:	b2c9      	uxtb	r1, r1
 801e83a:	00db      	lsls	r3, r3, #3
 801e83c:	fb14 f405 	smulbb	r4, r4, r5
 801e840:	b2db      	uxtb	r3, r3
 801e842:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e846:	fb11 f105 	smulbb	r1, r1, r5
 801e84a:	b280      	uxth	r0, r0
 801e84c:	fb02 4209 	mla	r2, r2, r9, r4
 801e850:	fb03 1109 	mla	r1, r3, r9, r1
 801e854:	b292      	uxth	r2, r2
 801e856:	b289      	uxth	r1, r1
 801e858:	1c43      	adds	r3, r0, #1
 801e85a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801e85e:	1c54      	adds	r4, r2, #1
 801e860:	1c4b      	adds	r3, r1, #1
 801e862:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e866:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801e86a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801e86e:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801e872:	0964      	lsrs	r4, r4, #5
 801e874:	4308      	orrs	r0, r1
 801e876:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801e87a:	4320      	orrs	r0, r4
 801e87c:	8038      	strh	r0, [r7, #0]
 801e87e:	9b04      	ldr	r3, [sp, #16]
 801e880:	449c      	add	ip, r3
 801e882:	9b05      	ldr	r3, [sp, #20]
 801e884:	3702      	adds	r7, #2
 801e886:	449a      	add	sl, r3
 801e888:	f108 0801 	add.w	r8, r8, #1
 801e88c:	e74f      	b.n	801e72e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13b2>
 801e88e:	9a03      	ldr	r2, [sp, #12]
 801e890:	ea4f 432c 	mov.w	r3, ip, asr #16
 801e894:	ea4f 412a 	mov.w	r1, sl, asr #16
 801e898:	b17a      	cbz	r2, 801e8ba <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x153e>
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	f2c0 80b0 	blt.w	801ea00 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801e8a0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e8a4:	4293      	cmp	r3, r2
 801e8a6:	f280 80ab 	bge.w	801ea00 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801e8aa:	2900      	cmp	r1, #0
 801e8ac:	f2c0 80a8 	blt.w	801ea00 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801e8b0:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801e8b4:	4291      	cmp	r1, r2
 801e8b6:	f280 80a3 	bge.w	801ea00 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1684>
 801e8ba:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801e8be:	9c02      	ldr	r4, [sp, #8]
 801e8c0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801e8c2:	fb01 3302 	mla	r3, r1, r2, r3
 801e8c6:	9902      	ldr	r1, [sp, #8]
 801e8c8:	5ce6      	ldrb	r6, [r4, r3]
 801e8ca:	6840      	ldr	r0, [r0, #4]
 801e8cc:	4419      	add	r1, r3
 801e8ce:	fb19 8606 	smlabb	r6, r9, r6, r8
 801e8d2:	1983      	adds	r3, r0, r6
 801e8d4:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8d6:	784b      	ldrb	r3, [r1, #1]
 801e8d8:	f811 e002 	ldrb.w	lr, [r1, r2]
 801e8dc:	5d86      	ldrb	r6, [r0, r6]
 801e8de:	fb19 8303 	smlabb	r3, r9, r3, r8
 801e8e2:	9313      	str	r3, [sp, #76]	; 0x4c
 801e8e4:	18c3      	adds	r3, r0, r3
 801e8e6:	9310      	str	r3, [sp, #64]	; 0x40
 801e8e8:	188b      	adds	r3, r1, r2
 801e8ea:	fb19 8e0e 	smlabb	lr, r9, lr, r8
 801e8ee:	785f      	ldrb	r7, [r3, #1]
 801e8f0:	eb00 020e 	add.w	r2, r0, lr
 801e8f4:	fb19 8307 	smlabb	r3, r9, r7, r8
 801e8f8:	9211      	str	r2, [sp, #68]	; 0x44
 801e8fa:	9314      	str	r3, [sp, #80]	; 0x50
 801e8fc:	f3cc 3203 	ubfx	r2, ip, #12, #4
 801e900:	18c3      	adds	r3, r0, r3
 801e902:	f3ca 3403 	ubfx	r4, sl, #12, #4
 801e906:	9312      	str	r3, [sp, #72]	; 0x48
 801e908:	fb04 f102 	mul.w	r1, r4, r2
 801e90c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801e90e:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e912:	5dc7      	ldrb	r7, [r0, r7]
 801e914:	f1c4 0310 	rsb	r3, r4, #16
 801e918:	10c9      	asrs	r1, r1, #3
 801e91a:	1a9b      	subs	r3, r3, r2
 801e91c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801e920:	ebc1 0242 	rsb	r2, r1, r2, lsl #1
 801e924:	435e      	muls	r6, r3
 801e926:	fb02 6607 	mla	r6, r2, r7, r6
 801e92a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801e92c:	ebc1 0444 	rsb	r4, r1, r4, lsl #1
 801e930:	5dc0      	ldrb	r0, [r0, r7]
 801e932:	fb04 660e 	mla	r6, r4, lr, r6
 801e936:	fb01 6000 	mla	r0, r1, r0, r6
 801e93a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801e93c:	9013      	str	r0, [sp, #76]	; 0x4c
 801e93e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801e940:	7876      	ldrb	r6, [r6, #1]
 801e942:	7840      	ldrb	r0, [r0, #1]
 801e944:	435e      	muls	r6, r3
 801e946:	fb02 6600 	mla	r6, r2, r0, r6
 801e94a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801e94c:	7840      	ldrb	r0, [r0, #1]
 801e94e:	fb04 6600 	mla	r6, r4, r0, r6
 801e952:	9812      	ldr	r0, [sp, #72]	; 0x48
 801e954:	7840      	ldrb	r0, [r0, #1]
 801e956:	fb01 6000 	mla	r0, r1, r0, r6
 801e95a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 801e95c:	78b6      	ldrb	r6, [r6, #2]
 801e95e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801e960:	78bf      	ldrb	r7, [r7, #2]
 801e962:	437b      	muls	r3, r7
 801e964:	fb02 3306 	mla	r3, r2, r6, r3
 801e968:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e96a:	7897      	ldrb	r7, [r2, #2]
 801e96c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e96e:	fb04 3307 	mla	r3, r4, r7, r3
 801e972:	7897      	ldrb	r7, [r2, #2]
 801e974:	fb01 3307 	mla	r3, r1, r7, r3
 801e978:	1159      	asrs	r1, r3, #5
 801e97a:	9b06      	ldr	r3, [sp, #24]
 801e97c:	2bff      	cmp	r3, #255	; 0xff
 801e97e:	ea4f 1060 	mov.w	r0, r0, asr #5
 801e982:	d046      	beq.n	801ea12 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1696>
 801e984:	f8b5 e000 	ldrh.w	lr, [r5]
 801e988:	f8bd 2000 	ldrh.w	r2, [sp]
 801e98c:	b2c9      	uxtb	r1, r1
 801e98e:	ea4f 232e 	mov.w	r3, lr, asr #8
 801e992:	fb11 f102 	smulbb	r1, r1, r2
 801e996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e998:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e99c:	fb03 1102 	mla	r1, r3, r2, r1
 801e9a0:	f8bd 2000 	ldrh.w	r2, [sp]
 801e9a4:	b2c0      	uxtb	r0, r0
 801e9a6:	fb10 f002 	smulbb	r0, r0, r2
 801e9aa:	ea4f 03ee 	mov.w	r3, lr, asr #3
 801e9ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e9b0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e9b4:	fb03 0302 	mla	r3, r3, r2, r0
 801e9b8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801e9bc:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801e9c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e9c2:	fa5f fe8e 	uxtb.w	lr, lr
 801e9c6:	fb1e fe00 	smulbb	lr, lr, r0
 801e9ca:	9800      	ldr	r0, [sp, #0]
 801e9cc:	f3c2 1247 	ubfx	r2, r2, #5, #8
 801e9d0:	b289      	uxth	r1, r1
 801e9d2:	fb02 e200 	mla	r2, r2, r0, lr
 801e9d6:	b290      	uxth	r0, r2
 801e9d8:	1c4a      	adds	r2, r1, #1
 801e9da:	b29b      	uxth	r3, r3
 801e9dc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e9e0:	1c42      	adds	r2, r0, #1
 801e9e2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e9e6:	1c58      	adds	r0, r3, #1
 801e9e8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e9ec:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e9f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e9f4:	0940      	lsrs	r0, r0, #5
 801e9f6:	4311      	orrs	r1, r2
 801e9f8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e9fc:	4301      	orrs	r1, r0
 801e9fe:	8029      	strh	r1, [r5, #0]
 801ea00:	9b04      	ldr	r3, [sp, #16]
 801ea02:	449c      	add	ip, r3
 801ea04:	9b05      	ldr	r3, [sp, #20]
 801ea06:	449a      	add	sl, r3
 801ea08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ea0a:	3301      	adds	r3, #1
 801ea0c:	3502      	adds	r5, #2
 801ea0e:	930c      	str	r3, [sp, #48]	; 0x30
 801ea10:	e67d      	b.n	801e70e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1392>
 801ea12:	4b9a      	ldr	r3, [pc, #616]	; (801ec7c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801ea14:	ea03 2101 	and.w	r1, r3, r1, lsl #8
 801ea18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ea1a:	00c0      	lsls	r0, r0, #3
 801ea1c:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801ea20:	4319      	orrs	r1, r3
 801ea22:	f400 63fc 	and.w	r3, r0, #2016	; 0x7e0
 801ea26:	4319      	orrs	r1, r3
 801ea28:	e7e9      	b.n	801e9fe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1682>
 801ea2a:	4b94      	ldr	r3, [pc, #592]	; (801ec7c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801ea2c:	ea03 2211 	and.w	r2, r3, r1, lsr #8
 801ea30:	094b      	lsrs	r3, r1, #5
 801ea32:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ea36:	4313      	orrs	r3, r2
 801ea38:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ea3c:	4319      	orrs	r1, r3
 801ea3e:	8039      	strh	r1, [r7, #0]
 801ea40:	e71d      	b.n	801e87e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1502>
 801ea42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea44:	685b      	ldr	r3, [r3, #4]
 801ea46:	781b      	ldrb	r3, [r3, #0]
 801ea48:	2b01      	cmp	r3, #1
 801ea4a:	d032      	beq.n	801eab2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1736>
 801ea4c:	f0c0 8098 	bcc.w	801eb80 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1804>
 801ea50:	2b02      	cmp	r3, #2
 801ea52:	f47e add3 	bne.w	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801ea56:	9b06      	ldr	r3, [sp, #24]
 801ea58:	2bff      	cmp	r3, #255	; 0xff
 801ea5a:	f040 8111 	bne.w	801ec80 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1904>
 801ea5e:	2200      	movs	r2, #0
 801ea60:	9b01      	ldr	r3, [sp, #4]
 801ea62:	4293      	cmp	r3, r2
 801ea64:	f77f ae58 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801ea68:	9903      	ldr	r1, [sp, #12]
 801ea6a:	ea4f 432c 	mov.w	r3, ip, asr #16
 801ea6e:	ea4f 402a 	mov.w	r0, sl, asr #16
 801ea72:	b159      	cbz	r1, 801ea8c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1710>
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	db16      	blt.n	801eaa6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801ea78:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801ea7c:	428b      	cmp	r3, r1
 801ea7e:	da12      	bge.n	801eaa6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801ea80:	2800      	cmp	r0, #0
 801ea82:	db10      	blt.n	801eaa6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801ea84:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 801ea88:	4288      	cmp	r0, r1
 801ea8a:	da0c      	bge.n	801eaa6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x172a>
 801ea8c:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801ea90:	9c02      	ldr	r4, [sp, #8]
 801ea92:	fb00 4101 	mla	r1, r0, r1, r4
 801ea96:	5cc9      	ldrb	r1, [r1, r3]
 801ea98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ea9a:	3102      	adds	r1, #2
 801ea9c:	685b      	ldr	r3, [r3, #4]
 801ea9e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801eaa2:	f82b 3012 	strh.w	r3, [fp, r2, lsl #1]
 801eaa6:	9b04      	ldr	r3, [sp, #16]
 801eaa8:	449c      	add	ip, r3
 801eaaa:	9b05      	ldr	r3, [sp, #20]
 801eaac:	3201      	adds	r2, #1
 801eaae:	449a      	add	sl, r3
 801eab0:	e7d6      	b.n	801ea60 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x16e4>
 801eab2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
 801eab6:	4658      	mov	r0, fp
 801eab8:	2600      	movs	r6, #0
 801eaba:	f04f 0903 	mov.w	r9, #3
 801eabe:	9b01      	ldr	r3, [sp, #4]
 801eac0:	42b3      	cmp	r3, r6
 801eac2:	f77f ae29 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801eac6:	9a03      	ldr	r2, [sp, #12]
 801eac8:	ea4f 432c 	mov.w	r3, ip, asr #16
 801eacc:	ea4f 412a 	mov.w	r1, sl, asr #16
 801ead0:	b15a      	cbz	r2, 801eaea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x176e>
 801ead2:	2b00      	cmp	r3, #0
 801ead4:	db4d      	blt.n	801eb72 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801ead6:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801eada:	4293      	cmp	r3, r2
 801eadc:	da49      	bge.n	801eb72 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801eade:	2900      	cmp	r1, #0
 801eae0:	db47      	blt.n	801eb72 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801eae2:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801eae6:	4291      	cmp	r1, r2
 801eae8:	da43      	bge.n	801eb72 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801eaea:	9c02      	ldr	r4, [sp, #8]
 801eaec:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801eaf0:	fb01 4202 	mla	r2, r1, r2, r4
 801eaf4:	5cd4      	ldrb	r4, [r2, r3]
 801eaf6:	2304      	movs	r3, #4
 801eaf8:	fb19 3404 	smlabb	r4, r9, r4, r3
 801eafc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801eafe:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801eb02:	9b06      	ldr	r3, [sp, #24]
 801eb04:	2bff      	cmp	r3, #255	; 0xff
 801eb06:	eb0e 0504 	add.w	r5, lr, r4
 801eb0a:	f000 809c 	beq.w	801ec46 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18ca>
 801eb0e:	8801      	ldrh	r1, [r0, #0]
 801eb10:	78ab      	ldrb	r3, [r5, #2]
 801eb12:	f8bd 8000 	ldrh.w	r8, [sp]
 801eb16:	786d      	ldrb	r5, [r5, #1]
 801eb18:	f81e 4004 	ldrb.w	r4, [lr, r4]
 801eb1c:	120a      	asrs	r2, r1, #8
 801eb1e:	fb13 f308 	smulbb	r3, r3, r8
 801eb22:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801eb26:	fb02 3207 	mla	r2, r2, r7, r3
 801eb2a:	10cb      	asrs	r3, r1, #3
 801eb2c:	fb15 f508 	smulbb	r5, r5, r8
 801eb30:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801eb34:	00c9      	lsls	r1, r1, #3
 801eb36:	fb03 5307 	mla	r3, r3, r7, r5
 801eb3a:	b2c9      	uxtb	r1, r1
 801eb3c:	9d00      	ldr	r5, [sp, #0]
 801eb3e:	fb11 f107 	smulbb	r1, r1, r7
 801eb42:	fb04 1405 	mla	r4, r4, r5, r1
 801eb46:	b292      	uxth	r2, r2
 801eb48:	b29b      	uxth	r3, r3
 801eb4a:	b2a4      	uxth	r4, r4
 801eb4c:	1c51      	adds	r1, r2, #1
 801eb4e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801eb52:	1c5d      	adds	r5, r3, #1
 801eb54:	1c61      	adds	r1, r4, #1
 801eb56:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 801eb5a:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 801eb5e:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801eb62:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801eb66:	096d      	lsrs	r5, r5, #5
 801eb68:	430a      	orrs	r2, r1
 801eb6a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801eb6e:	432a      	orrs	r2, r5
 801eb70:	8002      	strh	r2, [r0, #0]
 801eb72:	9b04      	ldr	r3, [sp, #16]
 801eb74:	449c      	add	ip, r3
 801eb76:	9b05      	ldr	r3, [sp, #20]
 801eb78:	3002      	adds	r0, #2
 801eb7a:	449a      	add	sl, r3
 801eb7c:	3601      	adds	r6, #1
 801eb7e:	e79e      	b.n	801eabe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1742>
 801eb80:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801eb84:	465c      	mov	r4, fp
 801eb86:	2500      	movs	r5, #0
 801eb88:	9b01      	ldr	r3, [sp, #4]
 801eb8a:	42ab      	cmp	r3, r5
 801eb8c:	f77f adc4 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801eb90:	9a03      	ldr	r2, [sp, #12]
 801eb92:	ea4f 432c 	mov.w	r3, ip, asr #16
 801eb96:	ea4f 412a 	mov.w	r1, sl, asr #16
 801eb9a:	b15a      	cbz	r2, 801ebb4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1838>
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	db4b      	blt.n	801ec38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801eba0:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801eba4:	4293      	cmp	r3, r2
 801eba6:	da47      	bge.n	801ec38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801eba8:	2900      	cmp	r1, #0
 801ebaa:	db45      	blt.n	801ec38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801ebac:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801ebb0:	4291      	cmp	r1, r2
 801ebb2:	da41      	bge.n	801ec38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801ebb4:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ebb8:	9802      	ldr	r0, [sp, #8]
 801ebba:	fb01 0202 	mla	r2, r1, r2, r0
 801ebbe:	5cd2      	ldrb	r2, [r2, r3]
 801ebc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ebc2:	3201      	adds	r2, #1
 801ebc4:	685b      	ldr	r3, [r3, #4]
 801ebc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ebca:	9a06      	ldr	r2, [sp, #24]
 801ebcc:	2aff      	cmp	r2, #255	; 0xff
 801ebce:	d049      	beq.n	801ec64 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18e8>
 801ebd0:	8822      	ldrh	r2, [r4, #0]
 801ebd2:	f8bd 7000 	ldrh.w	r7, [sp]
 801ebd6:	f8bd e000 	ldrh.w	lr, [sp]
 801ebda:	1210      	asrs	r0, r2, #8
 801ebdc:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801ebe0:	fb11 f107 	smulbb	r1, r1, r7
 801ebe4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ebe8:	fb00 1006 	mla	r0, r0, r6, r1
 801ebec:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801ebf0:	10d1      	asrs	r1, r2, #3
 801ebf2:	b2db      	uxtb	r3, r3
 801ebf4:	00d2      	lsls	r2, r2, #3
 801ebf6:	fb17 f70e 	smulbb	r7, r7, lr
 801ebfa:	b2d2      	uxtb	r2, r2
 801ebfc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ec00:	fb13 f30e 	smulbb	r3, r3, lr
 801ec04:	b280      	uxth	r0, r0
 801ec06:	fb01 7106 	mla	r1, r1, r6, r7
 801ec0a:	fb02 3306 	mla	r3, r2, r6, r3
 801ec0e:	b289      	uxth	r1, r1
 801ec10:	b29b      	uxth	r3, r3
 801ec12:	1c42      	adds	r2, r0, #1
 801ec14:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ec18:	1c4f      	adds	r7, r1, #1
 801ec1a:	1c5a      	adds	r2, r3, #1
 801ec1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ec20:	eb07 2711 	add.w	r7, r7, r1, lsr #8
 801ec24:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ec28:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ec2c:	097f      	lsrs	r7, r7, #5
 801ec2e:	4318      	orrs	r0, r3
 801ec30:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ec34:	4338      	orrs	r0, r7
 801ec36:	8020      	strh	r0, [r4, #0]
 801ec38:	9b04      	ldr	r3, [sp, #16]
 801ec3a:	449c      	add	ip, r3
 801ec3c:	9b05      	ldr	r3, [sp, #20]
 801ec3e:	3402      	adds	r4, #2
 801ec40:	449a      	add	sl, r3
 801ec42:	3501      	adds	r5, #1
 801ec44:	e7a0      	b.n	801eb88 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x180c>
 801ec46:	78ab      	ldrb	r3, [r5, #2]
 801ec48:	4a0c      	ldr	r2, [pc, #48]	; (801ec7c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801ec4a:	ea02 2303 	and.w	r3, r2, r3, lsl #8
 801ec4e:	786a      	ldrb	r2, [r5, #1]
 801ec50:	00d2      	lsls	r2, r2, #3
 801ec52:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec56:	4313      	orrs	r3, r2
 801ec58:	f81e 2004 	ldrb.w	r2, [lr, r4]
 801ec5c:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801ec60:	8003      	strh	r3, [r0, #0]
 801ec62:	e786      	b.n	801eb72 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17f6>
 801ec64:	4a05      	ldr	r2, [pc, #20]	; (801ec7c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1900>)
 801ec66:	ea02 2113 	and.w	r1, r2, r3, lsr #8
 801ec6a:	095a      	lsrs	r2, r3, #5
 801ec6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ec70:	430a      	orrs	r2, r1
 801ec72:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ec76:	431a      	orrs	r2, r3
 801ec78:	8022      	strh	r2, [r4, #0]
 801ec7a:	e7dd      	b.n	801ec38 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x18bc>
 801ec7c:	fffff800 	.word	0xfffff800
 801ec80:	f8bd 5020 	ldrh.w	r5, [sp, #32]
 801ec84:	2400      	movs	r4, #0
 801ec86:	9b01      	ldr	r3, [sp, #4]
 801ec88:	42a3      	cmp	r3, r4
 801ec8a:	f77f ad45 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801ec8e:	9a03      	ldr	r2, [sp, #12]
 801ec90:	ea4f 432c 	mov.w	r3, ip, asr #16
 801ec94:	ea4f 402a 	mov.w	r0, sl, asr #16
 801ec98:	b15a      	cbz	r2, 801ecb2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1936>
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	db4b      	blt.n	801ed36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801ec9e:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801eca2:	4293      	cmp	r3, r2
 801eca4:	da47      	bge.n	801ed36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801eca6:	2800      	cmp	r0, #0
 801eca8:	db45      	blt.n	801ed36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801ecaa:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801ecae:	4290      	cmp	r0, r2
 801ecb0:	da41      	bge.n	801ed36 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19ba>
 801ecb2:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
 801ecb6:	9e02      	ldr	r6, [sp, #8]
 801ecb8:	f83b 2014 	ldrh.w	r2, [fp, r4, lsl #1]
 801ecbc:	9f00      	ldr	r7, [sp, #0]
 801ecbe:	fb00 6101 	mla	r1, r0, r1, r6
 801ecc2:	9e00      	ldr	r6, [sp, #0]
 801ecc4:	5cc9      	ldrb	r1, [r1, r3]
 801ecc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ecc8:	3102      	adds	r1, #2
 801ecca:	685b      	ldr	r3, [r3, #4]
 801eccc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 801ecd0:	1211      	asrs	r1, r2, #8
 801ecd2:	1218      	asrs	r0, r3, #8
 801ecd4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ecd8:	fb11 f105 	smulbb	r1, r1, r5
 801ecdc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ece0:	fb00 1006 	mla	r0, r0, r6, r1
 801ece4:	10d6      	asrs	r6, r2, #3
 801ece6:	00d2      	lsls	r2, r2, #3
 801ece8:	10d9      	asrs	r1, r3, #3
 801ecea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ecee:	00db      	lsls	r3, r3, #3
 801ecf0:	b2d2      	uxtb	r2, r2
 801ecf2:	fb16 f605 	smulbb	r6, r6, r5
 801ecf6:	fb12 f205 	smulbb	r2, r2, r5
 801ecfa:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ecfe:	b2db      	uxtb	r3, r3
 801ed00:	b280      	uxth	r0, r0
 801ed02:	fb01 6107 	mla	r1, r1, r7, r6
 801ed06:	fb03 2307 	mla	r3, r3, r7, r2
 801ed0a:	b289      	uxth	r1, r1
 801ed0c:	b29b      	uxth	r3, r3
 801ed0e:	1c42      	adds	r2, r0, #1
 801ed10:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ed14:	1c4e      	adds	r6, r1, #1
 801ed16:	1c5a      	adds	r2, r3, #1
 801ed18:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ed1c:	eb06 2611 	add.w	r6, r6, r1, lsr #8
 801ed20:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ed24:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ed28:	0976      	lsrs	r6, r6, #5
 801ed2a:	4310      	orrs	r0, r2
 801ed2c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801ed30:	4330      	orrs	r0, r6
 801ed32:	f82b 0014 	strh.w	r0, [fp, r4, lsl #1]
 801ed36:	9b04      	ldr	r3, [sp, #16]
 801ed38:	449c      	add	ip, r3
 801ed3a:	9b05      	ldr	r3, [sp, #20]
 801ed3c:	3401      	adds	r4, #1
 801ed3e:	449a      	add	sl, r3
 801ed40:	e7a1      	b.n	801ec86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190a>
 801ed42:	00c0      	lsls	r0, r0, #3
 801ed44:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 801ed48:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801ed4c:	8038      	strh	r0, [r7, #0]
 801ed4e:	f7ff b81a 	b.w	801dd86 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa0a>
 801ed52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ed54:	685b      	ldr	r3, [r3, #4]
 801ed56:	781d      	ldrb	r5, [r3, #0]
 801ed58:	2d00      	cmp	r5, #0
 801ed5a:	f47e ac4f 	bne.w	801d5fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x280>
 801ed5e:	465e      	mov	r6, fp
 801ed60:	9b01      	ldr	r3, [sp, #4]
 801ed62:	42ab      	cmp	r3, r5
 801ed64:	f77f acd8 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801ed68:	9a03      	ldr	r2, [sp, #12]
 801ed6a:	ea4f 432c 	mov.w	r3, ip, asr #16
 801ed6e:	ea4f 412a 	mov.w	r1, sl, asr #16
 801ed72:	b15a      	cbz	r2, 801ed8c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a10>
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	db59      	blt.n	801ee2c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801ed78:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ed7c:	4293      	cmp	r3, r2
 801ed7e:	da55      	bge.n	801ee2c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801ed80:	2900      	cmp	r1, #0
 801ed82:	db53      	blt.n	801ee2c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801ed84:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801ed88:	4291      	cmp	r1, r2
 801ed8a:	da4f      	bge.n	801ee2c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801ed8c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ed90:	9802      	ldr	r0, [sp, #8]
 801ed92:	fb01 0202 	mla	r2, r1, r2, r0
 801ed96:	5cd2      	ldrb	r2, [r2, r3]
 801ed98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ed9a:	3201      	adds	r2, #1
 801ed9c:	685b      	ldr	r3, [r3, #4]
 801ed9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801eda2:	0e11      	lsrs	r1, r2, #24
 801eda4:	d042      	beq.n	801ee2c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801eda6:	29ff      	cmp	r1, #255	; 0xff
 801eda8:	d102      	bne.n	801edb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1a34>
 801edaa:	9b06      	ldr	r3, [sp, #24]
 801edac:	2bff      	cmp	r3, #255	; 0xff
 801edae:	d044      	beq.n	801ee3a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1abe>
 801edb0:	9b06      	ldr	r3, [sp, #24]
 801edb2:	8834      	ldrh	r4, [r6, #0]
 801edb4:	4359      	muls	r1, r3
 801edb6:	1c4b      	adds	r3, r1, #1
 801edb8:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801edbc:	121b      	asrs	r3, r3, #8
 801edbe:	b29f      	uxth	r7, r3
 801edc0:	1220      	asrs	r0, r4, #8
 801edc2:	f3c2 4107 	ubfx	r1, r2, #16, #8
 801edc6:	43db      	mvns	r3, r3
 801edc8:	b2db      	uxtb	r3, r3
 801edca:	fb11 f107 	smulbb	r1, r1, r7
 801edce:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801edd2:	fb00 1003 	mla	r0, r0, r3, r1
 801edd6:	f3c2 2e07 	ubfx	lr, r2, #8, #8
 801edda:	10e1      	asrs	r1, r4, #3
 801eddc:	b2d2      	uxtb	r2, r2
 801edde:	00e4      	lsls	r4, r4, #3
 801ede0:	b2e4      	uxtb	r4, r4
 801ede2:	fb12 f207 	smulbb	r2, r2, r7
 801ede6:	fb04 2203 	mla	r2, r4, r3, r2
 801edea:	b280      	uxth	r0, r0
 801edec:	fb1e fe07 	smulbb	lr, lr, r7
 801edf0:	b292      	uxth	r2, r2
 801edf2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801edf6:	fb01 e103 	mla	r1, r1, r3, lr
 801edfa:	1c43      	adds	r3, r0, #1
 801edfc:	f102 0e01 	add.w	lr, r2, #1
 801ee00:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ee04:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 801ee08:	b289      	uxth	r1, r1
 801ee0a:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801ee0e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ee12:	ea40 000e 	orr.w	r0, r0, lr
 801ee16:	f101 0e01 	add.w	lr, r1, #1
 801ee1a:	eb0e 2e11 	add.w	lr, lr, r1, lsr #8
 801ee1e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801ee22:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801ee26:	ea40 000e 	orr.w	r0, r0, lr
 801ee2a:	8030      	strh	r0, [r6, #0]
 801ee2c:	9b04      	ldr	r3, [sp, #16]
 801ee2e:	449c      	add	ip, r3
 801ee30:	9b05      	ldr	r3, [sp, #20]
 801ee32:	3602      	adds	r6, #2
 801ee34:	449a      	add	sl, r3
 801ee36:	3501      	adds	r5, #1
 801ee38:	e792      	b.n	801ed60 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x19e4>
 801ee3a:	4b67      	ldr	r3, [pc, #412]	; (801efd8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801ee3c:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 801ee40:	0953      	lsrs	r3, r2, #5
 801ee42:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee46:	430b      	orrs	r3, r1
 801ee48:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ee4c:	4313      	orrs	r3, r2
 801ee4e:	8033      	strh	r3, [r6, #0]
 801ee50:	e7ec      	b.n	801ee2c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ab0>
 801ee52:	00db      	lsls	r3, r3, #3
 801ee54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801ee58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ee5a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ee5e:	8013      	strh	r3, [r2, #0]
 801ee60:	f7ff ba57 	b.w	801e312 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xf96>
 801ee64:	9b06      	ldr	r3, [sp, #24]
 801ee66:	2bff      	cmp	r3, #255	; 0xff
 801ee68:	d105      	bne.n	801ee76 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1afa>
 801ee6a:	9b07      	ldr	r3, [sp, #28]
 801ee6c:	9a01      	ldr	r2, [sp, #4]
 801ee6e:	429a      	cmp	r2, r3
 801ee70:	dc5e      	bgt.n	801ef30 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bb4>
 801ee72:	4613      	mov	r3, r2
 801ee74:	e450      	b.n	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801ee76:	9c07      	ldr	r4, [sp, #28]
 801ee78:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 801ee7c:	9b01      	ldr	r3, [sp, #4]
 801ee7e:	42a3      	cmp	r3, r4
 801ee80:	f77f ac4a 	ble.w	801e718 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x139c>
 801ee84:	9b03      	ldr	r3, [sp, #12]
 801ee86:	ea4f 422c 	mov.w	r2, ip, asr #16
 801ee8a:	ea4f 412a 	mov.w	r1, sl, asr #16
 801ee8e:	b15b      	cbz	r3, 801eea8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b2c>
 801ee90:	2a00      	cmp	r2, #0
 801ee92:	db47      	blt.n	801ef24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801ee94:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801ee98:	429a      	cmp	r2, r3
 801ee9a:	da43      	bge.n	801ef24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801ee9c:	2900      	cmp	r1, #0
 801ee9e:	db41      	blt.n	801ef24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801eea0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801eea4:	4299      	cmp	r1, r3
 801eea6:	da3d      	bge.n	801ef24 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1ba8>
 801eea8:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 801eeac:	9d00      	ldr	r5, [sp, #0]
 801eeae:	9f00      	ldr	r7, [sp, #0]
 801eeb0:	fb01 2303 	mla	r3, r1, r3, r2
 801eeb4:	9a02      	ldr	r2, [sp, #8]
 801eeb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801eeba:	f83b 2014 	ldrh.w	r2, [fp, r4, lsl #1]
 801eebe:	1211      	asrs	r1, r2, #8
 801eec0:	1218      	asrs	r0, r3, #8
 801eec2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801eec6:	fb11 f106 	smulbb	r1, r1, r6
 801eeca:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801eece:	fb00 1005 	mla	r0, r0, r5, r1
 801eed2:	10d5      	asrs	r5, r2, #3
 801eed4:	00d2      	lsls	r2, r2, #3
 801eed6:	10d9      	asrs	r1, r3, #3
 801eed8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801eedc:	00db      	lsls	r3, r3, #3
 801eede:	b2d2      	uxtb	r2, r2
 801eee0:	fb15 f506 	smulbb	r5, r5, r6
 801eee4:	fb12 f206 	smulbb	r2, r2, r6
 801eee8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801eeec:	b2db      	uxtb	r3, r3
 801eeee:	b280      	uxth	r0, r0
 801eef0:	fb01 5107 	mla	r1, r1, r7, r5
 801eef4:	fb03 2307 	mla	r3, r3, r7, r2
 801eef8:	b289      	uxth	r1, r1
 801eefa:	b29b      	uxth	r3, r3
 801eefc:	1c42      	adds	r2, r0, #1
 801eefe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ef02:	1c4d      	adds	r5, r1, #1
 801ef04:	1c5a      	adds	r2, r3, #1
 801ef06:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ef0a:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801ef0e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801ef12:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801ef16:	096d      	lsrs	r5, r5, #5
 801ef18:	4310      	orrs	r0, r2
 801ef1a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ef1e:	4328      	orrs	r0, r5
 801ef20:	f82b 0014 	strh.w	r0, [fp, r4, lsl #1]
 801ef24:	9b04      	ldr	r3, [sp, #16]
 801ef26:	449c      	add	ip, r3
 801ef28:	9b05      	ldr	r3, [sp, #20]
 801ef2a:	3401      	adds	r4, #1
 801ef2c:	449a      	add	sl, r3
 801ef2e:	e7a5      	b.n	801ee7c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1b00>
 801ef30:	9a03      	ldr	r2, [sp, #12]
 801ef32:	ea4f 412c 	mov.w	r1, ip, asr #16
 801ef36:	ea4f 402a 	mov.w	r0, sl, asr #16
 801ef3a:	b15a      	cbz	r2, 801ef54 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bd8>
 801ef3c:	2900      	cmp	r1, #0
 801ef3e:	db12      	blt.n	801ef66 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801ef40:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ef44:	4291      	cmp	r1, r2
 801ef46:	da0e      	bge.n	801ef66 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801ef48:	2800      	cmp	r0, #0
 801ef4a:	db0c      	blt.n	801ef66 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801ef4c:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
 801ef50:	4290      	cmp	r0, r2
 801ef52:	da08      	bge.n	801ef66 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1bea>
 801ef54:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801ef58:	fb00 1202 	mla	r2, r0, r2, r1
 801ef5c:	9902      	ldr	r1, [sp, #8]
 801ef5e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 801ef62:	f82b 2013 	strh.w	r2, [fp, r3, lsl #1]
 801ef66:	9a04      	ldr	r2, [sp, #16]
 801ef68:	4494      	add	ip, r2
 801ef6a:	9a05      	ldr	r2, [sp, #20]
 801ef6c:	3301      	adds	r3, #1
 801ef6e:	4492      	add	sl, r2
 801ef70:	e77c      	b.n	801ee6c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1af0>
 801ef72:	4b19      	ldr	r3, [pc, #100]	; (801efd8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801ef74:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 801ef78:	0953      	lsrs	r3, r2, #5
 801ef7a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ef7e:	430b      	orrs	r3, r1
 801ef80:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ef84:	4313      	orrs	r3, r2
 801ef86:	802b      	strh	r3, [r5, #0]
 801ef88:	f7fe bf6b 	b.w	801de62 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xae6>
 801ef8c:	4a12      	ldr	r2, [pc, #72]	; (801efd8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801ef8e:	ea02 2113 	and.w	r1, r2, r3, lsr #8
 801ef92:	095a      	lsrs	r2, r3, #5
 801ef94:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ef98:	430a      	orrs	r2, r1
 801ef9a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ef9e:	431a      	orrs	r2, r3
 801efa0:	8022      	strh	r2, [r4, #0]
 801efa2:	f7fe bb9d 	b.w	801d6e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x364>
 801efa6:	00c0      	lsls	r0, r0, #3
 801efa8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 801efac:	ea40 00d3 	orr.w	r0, r0, r3, lsr #3
 801efb0:	8038      	strh	r0, [r7, #0]
 801efb2:	f7fe bd39 	b.w	801da28 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x6ac>
 801efb6:	4b08      	ldr	r3, [pc, #32]	; (801efd8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x1c5c>)
 801efb8:	ea03 2211 	and.w	r2, r3, r1, lsr #8
 801efbc:	094b      	lsrs	r3, r1, #5
 801efbe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801efc2:	4313      	orrs	r3, r2
 801efc4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801efc8:	4319      	orrs	r1, r3
 801efca:	8039      	strh	r1, [r7, #0]
 801efcc:	f7fe bff4 	b.w	801dfb8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc3c>
 801efd0:	b019      	add	sp, #100	; 0x64
 801efd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efd6:	bf00      	nop
 801efd8:	fffff800 	.word	0xfffff800

0801efdc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe0:	b08d      	sub	sp, #52	; 0x34
 801efe2:	460f      	mov	r7, r1
 801efe4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801efe8:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801efec:	4616      	mov	r6, r2
 801efee:	f1b9 0f00 	cmp.w	r9, #0
 801eff2:	d047      	beq.n	801f084 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa8>
 801eff4:	6810      	ldr	r0, [r2, #0]
 801eff6:	6851      	ldr	r1, [r2, #4]
 801eff8:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 801f1c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801effc:	ad08      	add	r5, sp, #32
 801effe:	c503      	stmia	r5!, {r0, r1}
 801f000:	6818      	ldr	r0, [r3, #0]
 801f002:	6859      	ldr	r1, [r3, #4]
 801f004:	ad0a      	add	r5, sp, #40	; 0x28
 801f006:	c503      	stmia	r5!, {r0, r1}
 801f008:	a808      	add	r0, sp, #32
 801f00a:	f7fb fc4d 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f00e:	4631      	mov	r1, r6
 801f010:	a80a      	add	r0, sp, #40	; 0x28
 801f012:	f7fb fc31 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f016:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f01a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f01e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
 801f022:	f8d8 0000 	ldr.w	r0, [r8]
 801f026:	f9bd 502c 	ldrsh.w	r5, [sp, #44]	; 0x2c
 801f02a:	fb16 2103 	smlabb	r1, r6, r3, r2
 801f02e:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801f032:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f036:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	; 0x2e
 801f03a:	440a      	add	r2, r1
 801f03c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f040:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f044:	4413      	add	r3, r2
 801f046:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f04a:	6803      	ldr	r3, [r0, #0]
 801f04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f04e:	4798      	blx	r3
 801f050:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f054:	d019      	beq.n	801f08a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 801f056:	f010 0f04 	tst.w	r0, #4
 801f05a:	d01a      	beq.n	801f092 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb6>
 801f05c:	f8d8 0000 	ldr.w	r0, [r8]
 801f060:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f064:	6801      	ldr	r1, [r0, #0]
 801f066:	9404      	str	r4, [sp, #16]
 801f068:	b2bf      	uxth	r7, r7
 801f06a:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801f06e:	f8cd 900c 	str.w	r9, [sp, #12]
 801f072:	b2ad      	uxth	r5, r5
 801f074:	9402      	str	r4, [sp, #8]
 801f076:	9701      	str	r7, [sp, #4]
 801f078:	9500      	str	r5, [sp, #0]
 801f07a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801f07c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f080:	4631      	mov	r1, r6
 801f082:	47a0      	blx	r4
 801f084:	b00d      	add	sp, #52	; 0x34
 801f086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f08a:	b914      	cbnz	r4, 801f092 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb6>
 801f08c:	f010 0f01 	tst.w	r0, #1
 801f090:	e7e3      	b.n	801f05a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 801f092:	f8d8 0000 	ldr.w	r0, [r8]
 801f096:	6803      	ldr	r3, [r0, #0]
 801f098:	6a1b      	ldr	r3, [r3, #32]
 801f09a:	4798      	blx	r3
 801f09c:	4a48      	ldr	r2, [pc, #288]	; (801f1c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>)
 801f09e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801f0a2:	8814      	ldrh	r4, [r2, #0]
 801f0a4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801f0a8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f0ac:	fb01 3404 	mla	r4, r1, r4, r3
 801f0b0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801f0b4:	4692      	mov	sl, r2
 801f0b6:	d064      	beq.n	801f182 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a6>
 801f0b8:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 801f0bc:	005b      	lsls	r3, r3, #1
 801f0be:	f1c9 0cff 	rsb	ip, r9, #255	; 0xff
 801f0c2:	9306      	str	r3, [sp, #24]
 801f0c4:	f04f 0a00 	mov.w	sl, #0
 801f0c8:	fa1f f389 	uxth.w	r3, r9
 801f0cc:	fa1f fc8c 	uxth.w	ip, ip
 801f0d0:	9207      	str	r2, [sp, #28]
 801f0d2:	45ba      	cmp	sl, r7
 801f0d4:	da6e      	bge.n	801f1b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>
 801f0d6:	46a3      	mov	fp, r4
 801f0d8:	f04f 0900 	mov.w	r9, #0
 801f0dc:	45a9      	cmp	r9, r5
 801f0de:	da40      	bge.n	801f162 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x186>
 801f0e0:	f8bb 1000 	ldrh.w	r1, [fp]
 801f0e4:	f836 2019 	ldrh.w	r2, [r6, r9, lsl #1]
 801f0e8:	1208      	asrs	r0, r1, #8
 801f0ea:	ea4f 2e22 	mov.w	lr, r2, asr #8
 801f0ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f0f2:	fb10 f00c 	smulbb	r0, r0, ip
 801f0f6:	ea4f 08e1 	mov.w	r8, r1, asr #3
 801f0fa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f0fe:	00c9      	lsls	r1, r1, #3
 801f100:	fb0e 0e03 	mla	lr, lr, r3, r0
 801f104:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f108:	10d0      	asrs	r0, r2, #3
 801f10a:	b2c9      	uxtb	r1, r1
 801f10c:	00d2      	lsls	r2, r2, #3
 801f10e:	fb18 f80c 	smulbb	r8, r8, ip
 801f112:	fb11 f10c 	smulbb	r1, r1, ip
 801f116:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801f11a:	b2d2      	uxtb	r2, r2
 801f11c:	fa1f fe8e 	uxth.w	lr, lr
 801f120:	fb00 8003 	mla	r0, r0, r3, r8
 801f124:	fb02 1203 	mla	r2, r2, r3, r1
 801f128:	b280      	uxth	r0, r0
 801f12a:	b292      	uxth	r2, r2
 801f12c:	f10e 0101 	add.w	r1, lr, #1
 801f130:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 801f134:	f100 0801 	add.w	r8, r0, #1
 801f138:	1c51      	adds	r1, r2, #1
 801f13a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801f13e:	eb08 2010 	add.w	r0, r8, r0, lsr #8
 801f142:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f146:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801f14a:	0940      	lsrs	r0, r0, #5
 801f14c:	ea4e 0e01 	orr.w	lr, lr, r1
 801f150:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f154:	ea4e 0e00 	orr.w	lr, lr, r0
 801f158:	f82b eb02 	strh.w	lr, [fp], #2
 801f15c:	f109 0901 	add.w	r9, r9, #1
 801f160:	e7bc      	b.n	801f0dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x100>
 801f162:	9a07      	ldr	r2, [sp, #28]
 801f164:	9906      	ldr	r1, [sp, #24]
 801f166:	8812      	ldrh	r2, [r2, #0]
 801f168:	1b52      	subs	r2, r2, r5
 801f16a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801f16e:	4414      	add	r4, r2
 801f170:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 801f174:	1b52      	subs	r2, r2, r5
 801f176:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801f17a:	4416      	add	r6, r2
 801f17c:	f10a 0a01 	add.w	sl, sl, #1
 801f180:	e7a7      	b.n	801f0d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf6>
 801f182:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801f186:	f04f 0900 	mov.w	r9, #0
 801f18a:	45b9      	cmp	r9, r7
 801f18c:	da12      	bge.n	801f1b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>
 801f18e:	f8d8 0000 	ldr.w	r0, [r8]
 801f192:	6803      	ldr	r3, [r0, #0]
 801f194:	4632      	mov	r2, r6
 801f196:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 801f198:	4621      	mov	r1, r4
 801f19a:	465b      	mov	r3, fp
 801f19c:	47a8      	blx	r5
 801f19e:	f8ba 3000 	ldrh.w	r3, [sl]
 801f1a2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f1a6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f1aa:	f109 0901 	add.w	r9, r9, #1
 801f1ae:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801f1b2:	e7ea      	b.n	801f18a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 801f1b4:	4b03      	ldr	r3, [pc, #12]	; (801f1c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>)
 801f1b6:	6818      	ldr	r0, [r3, #0]
 801f1b8:	6803      	ldr	r3, [r0, #0]
 801f1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1bc:	4798      	blx	r3
 801f1be:	e761      	b.n	801f084 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa8>
 801f1c0:	2001a8a6 	.word	0x2001a8a6
 801f1c4:	2001a8ac 	.word	0x2001a8ac

0801f1c8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801f1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1cc:	4615      	mov	r5, r2
 801f1ce:	b08b      	sub	sp, #44	; 0x2c
 801f1d0:	461c      	mov	r4, r3
 801f1d2:	b13b      	cbz	r3, 801f1e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801f1d4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f1d8:	b123      	cbz	r3, 801f1e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801f1da:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	f040 809d 	bne.w	801f31e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x156>
 801f1e4:	b00b      	add	sp, #44	; 0x2c
 801f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1ea:	f010 0f08 	tst.w	r0, #8
 801f1ee:	d010      	beq.n	801f212 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4a>
 801f1f0:	6830      	ldr	r0, [r6, #0]
 801f1f2:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f1f6:	6801      	ldr	r1, [r0, #0]
 801f1f8:	9402      	str	r4, [sp, #8]
 801f1fa:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 801f1fe:	9401      	str	r4, [sp, #4]
 801f200:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801f204:	9400      	str	r4, [sp, #0]
 801f206:	6d4c      	ldr	r4, [r1, #84]	; 0x54
 801f208:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801f20c:	4629      	mov	r1, r5
 801f20e:	47a0      	blx	r4
 801f210:	e7e8      	b.n	801f1e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801f212:	6830      	ldr	r0, [r6, #0]
 801f214:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801f218:	6803      	ldr	r3, [r0, #0]
 801f21a:	f9bd 9026 	ldrsh.w	r9, [sp, #38]	; 0x26
 801f21e:	6a1b      	ldr	r3, [r3, #32]
 801f220:	4798      	blx	r3
 801f222:	4a48      	ldr	r2, [pc, #288]	; (801f344 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x17c>)
 801f224:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f228:	8816      	ldrh	r6, [r2, #0]
 801f22a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801f22e:	2cff      	cmp	r4, #255	; 0xff
 801f230:	fb06 1303 	mla	r3, r6, r3, r1
 801f234:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f238:	4616      	mov	r6, r2
 801f23a:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 801f23e:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 801f242:	d054      	beq.n	801f2ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x126>
 801f244:	122b      	asrs	r3, r5, #8
 801f246:	f1c4 07ff 	rsb	r7, r4, #255	; 0xff
 801f24a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f24e:	b2a4      	uxth	r4, r4
 801f250:	4363      	muls	r3, r4
 801f252:	9305      	str	r3, [sp, #20]
 801f254:	f3c5 06cc 	ubfx	r6, r5, #3, #13
 801f258:	00eb      	lsls	r3, r5, #3
 801f25a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f25e:	b2db      	uxtb	r3, r3
 801f260:	0049      	lsls	r1, r1, #1
 801f262:	4366      	muls	r6, r4
 801f264:	4363      	muls	r3, r4
 801f266:	9106      	str	r1, [sp, #24]
 801f268:	f04f 0e00 	mov.w	lr, #0
 801f26c:	b2bf      	uxth	r7, r7
 801f26e:	9207      	str	r2, [sp, #28]
 801f270:	45ce      	cmp	lr, r9
 801f272:	da4e      	bge.n	801f312 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801f274:	4682      	mov	sl, r0
 801f276:	f04f 0c00 	mov.w	ip, #0
 801f27a:	45c4      	cmp	ip, r8
 801f27c:	da2d      	bge.n	801f2da <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x112>
 801f27e:	f8ba 2000 	ldrh.w	r2, [sl]
 801f282:	9905      	ldr	r1, [sp, #20]
 801f284:	1214      	asrs	r4, r2, #8
 801f286:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801f28a:	fb14 f407 	smulbb	r4, r4, r7
 801f28e:	440c      	add	r4, r1
 801f290:	10d1      	asrs	r1, r2, #3
 801f292:	00d2      	lsls	r2, r2, #3
 801f294:	b2d2      	uxtb	r2, r2
 801f296:	fb12 f207 	smulbb	r2, r2, r7
 801f29a:	b2a4      	uxth	r4, r4
 801f29c:	441a      	add	r2, r3
 801f29e:	b292      	uxth	r2, r2
 801f2a0:	1c65      	adds	r5, r4, #1
 801f2a2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f2a6:	eb05 2414 	add.w	r4, r5, r4, lsr #8
 801f2aa:	fb11 f107 	smulbb	r1, r1, r7
 801f2ae:	1c55      	adds	r5, r2, #1
 801f2b0:	4431      	add	r1, r6
 801f2b2:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f2b6:	b289      	uxth	r1, r1
 801f2b8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f2bc:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801f2c0:	4314      	orrs	r4, r2
 801f2c2:	1c4a      	adds	r2, r1, #1
 801f2c4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f2c8:	0949      	lsrs	r1, r1, #5
 801f2ca:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f2ce:	430c      	orrs	r4, r1
 801f2d0:	f82a 4b02 	strh.w	r4, [sl], #2
 801f2d4:	f10c 0c01 	add.w	ip, ip, #1
 801f2d8:	e7cf      	b.n	801f27a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb2>
 801f2da:	9a07      	ldr	r2, [sp, #28]
 801f2dc:	9906      	ldr	r1, [sp, #24]
 801f2de:	8812      	ldrh	r2, [r2, #0]
 801f2e0:	ebcb 0242 	rsb	r2, fp, r2, lsl #1
 801f2e4:	440a      	add	r2, r1
 801f2e6:	4410      	add	r0, r2
 801f2e8:	f10e 0e01 	add.w	lr, lr, #1
 801f2ec:	e7c0      	b.n	801f270 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xa8>
 801f2ee:	0049      	lsls	r1, r1, #1
 801f2f0:	2200      	movs	r2, #0
 801f2f2:	454a      	cmp	r2, r9
 801f2f4:	da0d      	bge.n	801f312 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x14a>
 801f2f6:	2300      	movs	r3, #0
 801f2f8:	4543      	cmp	r3, r8
 801f2fa:	da03      	bge.n	801f304 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x13c>
 801f2fc:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 801f300:	3301      	adds	r3, #1
 801f302:	e7f9      	b.n	801f2f8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x130>
 801f304:	8833      	ldrh	r3, [r6, #0]
 801f306:	ebcb 0343 	rsb	r3, fp, r3, lsl #1
 801f30a:	440b      	add	r3, r1
 801f30c:	4418      	add	r0, r3
 801f30e:	3201      	adds	r2, #1
 801f310:	e7ef      	b.n	801f2f2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x12a>
 801f312:	4b0d      	ldr	r3, [pc, #52]	; (801f348 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>)
 801f314:	6818      	ldr	r0, [r3, #0]
 801f316:	6803      	ldr	r3, [r0, #0]
 801f318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f31a:	4798      	blx	r3
 801f31c:	e762      	b.n	801f1e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 801f31e:	6808      	ldr	r0, [r1, #0]
 801f320:	6849      	ldr	r1, [r1, #4]
 801f322:	4e09      	ldr	r6, [pc, #36]	; (801f348 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x180>)
 801f324:	ab08      	add	r3, sp, #32
 801f326:	c303      	stmia	r3!, {r0, r1}
 801f328:	a808      	add	r0, sp, #32
 801f32a:	f7fb fabd 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f32e:	6830      	ldr	r0, [r6, #0]
 801f330:	6803      	ldr	r3, [r0, #0]
 801f332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f334:	4798      	blx	r3
 801f336:	2cff      	cmp	r4, #255	; 0xff
 801f338:	f47f af57 	bne.w	801f1ea <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 801f33c:	f010 0f02 	tst.w	r0, #2
 801f340:	e755      	b.n	801f1ee <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 801f342:	bf00      	nop
 801f344:	2001a8a6 	.word	0x2001a8a6
 801f348:	2001a8ac 	.word	0x2001a8ac

0801f34c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801f34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f350:	4ea1      	ldr	r6, [pc, #644]	; (801f5d8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x28c>)
 801f352:	4690      	mov	r8, r2
 801f354:	6832      	ldr	r2, [r6, #0]
 801f356:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801f35a:	2a02      	cmp	r2, #2
 801f35c:	b08f      	sub	sp, #60	; 0x3c
 801f35e:	4605      	mov	r5, r0
 801f360:	4689      	mov	r9, r1
 801f362:	d106      	bne.n	801f372 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x26>
 801f364:	4b9d      	ldr	r3, [pc, #628]	; (801f5dc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x290>)
 801f366:	4a9e      	ldr	r2, [pc, #632]	; (801f5e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801f368:	f240 21a2 	movw	r1, #674	; 0x2a2
 801f36c:	489d      	ldr	r0, [pc, #628]	; (801f5e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x298>)
 801f36e:	f001 fb45 	bl	80209fc <__assert_func>
 801f372:	af0e      	add	r7, sp, #56	; 0x38
 801f374:	f827 3d24 	strh.w	r3, [r7, #-36]!
 801f378:	4638      	mov	r0, r7
 801f37a:	f7fd ff91 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801f37e:	682b      	ldr	r3, [r5, #0]
 801f380:	4604      	mov	r4, r0
 801f382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f384:	4628      	mov	r0, r5
 801f386:	4798      	blx	r3
 801f388:	4284      	cmp	r4, r0
 801f38a:	d004      	beq.n	801f396 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x4a>
 801f38c:	4b96      	ldr	r3, [pc, #600]	; (801f5e8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x29c>)
 801f38e:	4a94      	ldr	r2, [pc, #592]	; (801f5e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801f390:	f44f 7129 	mov.w	r1, #676	; 0x2a4
 801f394:	e7ea      	b.n	801f36c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f396:	4638      	mov	r0, r7
 801f398:	f7fd ff00 	bl	801d19c <_ZNK8touchgfx6Bitmap7getDataEv>
 801f39c:	4604      	mov	r4, r0
 801f39e:	b920      	cbnz	r0, 801f3aa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x5e>
 801f3a0:	4b92      	ldr	r3, [pc, #584]	; (801f5ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a0>)
 801f3a2:	4a8f      	ldr	r2, [pc, #572]	; (801f5e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801f3a4:	f240 21a6 	movw	r1, #678	; 0x2a6
 801f3a8:	e7e0      	b.n	801f36c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f3aa:	f8d8 0000 	ldr.w	r0, [r8]
 801f3ae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f3b2:	f9b8 a000 	ldrsh.w	sl, [r8]
 801f3b6:	ab06      	add	r3, sp, #24
 801f3b8:	c303      	stmia	r3!, {r0, r1}
 801f3ba:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f3be:	f8d9 0000 	ldr.w	r0, [r9]
 801f3c2:	f9b8 9002 	ldrsh.w	r9, [r8, #2]
 801f3c6:	ab08      	add	r3, sp, #32
 801f3c8:	c303      	stmia	r3!, {r0, r1}
 801f3ca:	4638      	mov	r0, r7
 801f3cc:	f7fd fdde 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801f3d0:	4680      	mov	r8, r0
 801f3d2:	4638      	mov	r0, r7
 801f3d4:	f7fd fe14 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801f3d8:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 801f3dc:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
 801f3e0:	f10d 0a20 	add.w	sl, sp, #32
 801f3e4:	a806      	add	r0, sp, #24
 801f3e6:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 801f3ea:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 801f3ee:	f7fb fa5b 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3f2:	4650      	mov	r0, sl
 801f3f4:	f7fb fa58 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3f8:	4f7d      	ldr	r7, [pc, #500]	; (801f5f0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a4>)
 801f3fa:	a80a      	add	r0, sp, #40	; 0x28
 801f3fc:	f7fb fa54 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f400:	4b7c      	ldr	r3, [pc, #496]	; (801f5f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a8>)
 801f402:	f9b7 1000 	ldrsh.w	r1, [r7]
 801f406:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f40a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
 801f40e:	2300      	movs	r3, #0
 801f410:	a90c      	add	r1, sp, #48	; 0x30
 801f412:	4650      	mov	r0, sl
 801f414:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801f418:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801f41c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801f420:	f7ea faee 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 801f424:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801f428:	f1bc 0f00 	cmp.w	ip, #0
 801f42c:	d005      	beq.n	801f43a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801f42e:	f9bd e026 	ldrsh.w	lr, [sp, #38]	; 0x26
 801f432:	f1be 0f00 	cmp.w	lr, #0
 801f436:	f040 80c2 	bne.w	801f5be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x272>
 801f43a:	4620      	mov	r0, r4
 801f43c:	b00f      	add	sp, #60	; 0x3c
 801f43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f442:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
 801f446:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801f44a:	429a      	cmp	r2, r3
 801f44c:	f2c0 80be 	blt.w	801f5cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801f450:	4460      	add	r0, ip
 801f452:	f8bd c01c 	ldrh.w	ip, [sp, #28]
 801f456:	4461      	add	r1, ip
 801f458:	b200      	sxth	r0, r0
 801f45a:	b209      	sxth	r1, r1
 801f45c:	4288      	cmp	r0, r1
 801f45e:	f300 80b5 	bgt.w	801f5cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801f462:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 801f466:	4472      	add	r2, lr
 801f468:	440b      	add	r3, r1
 801f46a:	b212      	sxth	r2, r2
 801f46c:	b21b      	sxth	r3, r3
 801f46e:	429a      	cmp	r2, r3
 801f470:	f300 80ac 	bgt.w	801f5cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x280>
 801f474:	682b      	ldr	r3, [r5, #0]
 801f476:	4628      	mov	r0, r5
 801f478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f47a:	4798      	blx	r3
 801f47c:	4681      	mov	r9, r0
 801f47e:	6830      	ldr	r0, [r6, #0]
 801f480:	6803      	ldr	r3, [r0, #0]
 801f482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f484:	4798      	blx	r3
 801f486:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f48a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f48e:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	; 0x2c
 801f492:	1a9b      	subs	r3, r3, r2
 801f494:	b29b      	uxth	r3, r3
 801f496:	b21d      	sxth	r5, r3
 801f498:	2d00      	cmp	r5, #0
 801f49a:	dc09      	bgt.n	801f4b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x164>
 801f49c:	b135      	cbz	r5, 801f4ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x160>
 801f49e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f4a2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801f4a6:	4413      	add	r3, r2
 801f4a8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801f4ac:	4625      	mov	r5, r4
 801f4ae:	e005      	b.n	801f4bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x170>
 801f4b0:	ebab 0303 	sub.w	r3, fp, r3
 801f4b4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801f4b8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801f4bc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801f4c0:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801f4c4:	1a5b      	subs	r3, r3, r1
 801f4c6:	b29b      	uxth	r3, r3
 801f4c8:	b21a      	sxth	r2, r3
 801f4ca:	2a00      	cmp	r2, #0
 801f4cc:	dd4d      	ble.n	801f56a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x21e>
 801f4ce:	fb0b f202 	mul.w	r2, fp, r2
 801f4d2:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801f4d6:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801f4da:	1ad3      	subs	r3, r2, r3
 801f4dc:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f4e0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	dda8      	ble.n	801f43a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801f4e8:	f9bd e02e 	ldrsh.w	lr, [sp, #46]	; 0x2e
 801f4ec:	f1be 0f00 	cmp.w	lr, #0
 801f4f0:	dda3      	ble.n	801f43a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801f4f2:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801f4f6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f4fa:	fb09 f801 	mul.w	r8, r9, r1
 801f4fe:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 801f502:	4480      	add	r8, r0
 801f504:	8838      	ldrh	r0, [r7, #0]
 801f506:	f9bd 7024 	ldrsh.w	r7, [sp, #36]	; 0x24
 801f50a:	42bb      	cmp	r3, r7
 801f50c:	bfa8      	it	ge
 801f50e:	463b      	movge	r3, r7
 801f510:	1a82      	subs	r2, r0, r2
 801f512:	4293      	cmp	r3, r2
 801f514:	bfa8      	it	ge
 801f516:	4613      	movge	r3, r2
 801f518:	4a36      	ldr	r2, [pc, #216]	; (801f5f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2a8>)
 801f51a:	f9bd 7026 	ldrsh.w	r7, [sp, #38]	; 0x26
 801f51e:	8812      	ldrh	r2, [r2, #0]
 801f520:	4577      	cmp	r7, lr
 801f522:	eba2 0101 	sub.w	r1, r2, r1
 801f526:	bfa8      	it	ge
 801f528:	4677      	movge	r7, lr
 801f52a:	428f      	cmp	r7, r1
 801f52c:	463a      	mov	r2, r7
 801f52e:	bfa8      	it	ge
 801f530:	460a      	movge	r2, r1
 801f532:	4298      	cmp	r0, r3
 801f534:	9202      	str	r2, [sp, #8]
 801f536:	d12b      	bne.n	801f590 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x244>
 801f538:	4583      	cmp	fp, r0
 801f53a:	d129      	bne.n	801f590 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x244>
 801f53c:	6830      	ldr	r0, [r6, #0]
 801f53e:	6803      	ldr	r3, [r0, #0]
 801f540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f542:	4798      	blx	r3
 801f544:	07c3      	lsls	r3, r0, #31
 801f546:	d519      	bpl.n	801f57c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x230>
 801f548:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f54c:	6830      	ldr	r0, [r6, #0]
 801f54e:	f8ad b024 	strh.w	fp, [sp, #36]	; 0x24
 801f552:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801f556:	6803      	ldr	r3, [r0, #0]
 801f558:	f8cd b000 	str.w	fp, [sp]
 801f55c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801f55e:	e89a 0006 	ldmia.w	sl, {r1, r2}
 801f562:	462b      	mov	r3, r5
 801f564:	47a0      	blx	r4
 801f566:	4604      	mov	r4, r0
 801f568:	e767      	b.n	801f43a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801f56a:	bf1f      	itttt	ne
 801f56c:	f8bd 2026 	ldrhne.w	r2, [sp, #38]	; 0x26
 801f570:	f8ad 1022 	strhne.w	r1, [sp, #34]	; 0x22
 801f574:	189b      	addne	r3, r3, r2
 801f576:	f8ad 3026 	strhne.w	r3, [sp, #38]	; 0x26
 801f57a:	e7b1      	b.n	801f4e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x194>
 801f57c:	6830      	ldr	r0, [r6, #0]
 801f57e:	6803      	ldr	r3, [r0, #0]
 801f580:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801f582:	9b02      	ldr	r3, [sp, #8]
 801f584:	4642      	mov	r2, r8
 801f586:	fb03 f309 	mul.w	r3, r3, r9
 801f58a:	4629      	mov	r1, r5
 801f58c:	47b0      	blx	r6
 801f58e:	e754      	b.n	801f43a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801f590:	005b      	lsls	r3, r3, #1
 801f592:	9303      	str	r3, [sp, #12]
 801f594:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 801f598:	f04f 0a00 	mov.w	sl, #0
 801f59c:	9b02      	ldr	r3, [sp, #8]
 801f59e:	459a      	cmp	sl, r3
 801f5a0:	f6bf af4b 	bge.w	801f43a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xee>
 801f5a4:	6830      	ldr	r0, [r6, #0]
 801f5a6:	6803      	ldr	r3, [r0, #0]
 801f5a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f5aa:	4642      	mov	r2, r8
 801f5ac:	461f      	mov	r7, r3
 801f5ae:	4629      	mov	r1, r5
 801f5b0:	9b03      	ldr	r3, [sp, #12]
 801f5b2:	47b8      	blx	r7
 801f5b4:	44c8      	add	r8, r9
 801f5b6:	445d      	add	r5, fp
 801f5b8:	f10a 0a01 	add.w	sl, sl, #1
 801f5bc:	e7ee      	b.n	801f59c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x250>
 801f5be:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 801f5c2:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801f5c6:	4288      	cmp	r0, r1
 801f5c8:	f6bf af3b 	bge.w	801f442 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0xf6>
 801f5cc:	4b0a      	ldr	r3, [pc, #40]	; (801f5f8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x2ac>)
 801f5ce:	4a04      	ldr	r2, [pc, #16]	; (801f5e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x294>)
 801f5d0:	f44f 712d 	mov.w	r1, #692	; 0x2b4
 801f5d4:	e6ca      	b.n	801f36c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t+0x20>
 801f5d6:	bf00      	nop
 801f5d8:	2001a8ac 	.word	0x2001a8ac
 801f5dc:	08025db9 	.word	0x08025db9
 801f5e0:	080262d4 	.word	0x080262d4
 801f5e4:	08025e6d 	.word	0x08025e6d
 801f5e8:	08025e9f 	.word	0x08025e9f
 801f5ec:	08025ef4 	.word	0x08025ef4
 801f5f0:	2001a8a6 	.word	0x2001a8a6
 801f5f4:	2001a8a8 	.word	0x2001a8a8
 801f5f8:	08025f32 	.word	0x08025f32

0801f5fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801f5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f600:	460c      	mov	r4, r1
 801f602:	b08d      	sub	sp, #52	; 0x34
 801f604:	4680      	mov	r8, r0
 801f606:	6808      	ldr	r0, [r1, #0]
 801f608:	6849      	ldr	r1, [r1, #4]
 801f60a:	4699      	mov	r9, r3
 801f60c:	ab08      	add	r3, sp, #32
 801f60e:	c303      	stmia	r3!, {r0, r1}
 801f610:	6810      	ldr	r0, [r2, #0]
 801f612:	6851      	ldr	r1, [r2, #4]
 801f614:	ab0a      	add	r3, sp, #40	; 0x28
 801f616:	c303      	stmia	r3!, {r0, r1}
 801f618:	a808      	add	r0, sp, #32
 801f61a:	f7fb f945 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f61e:	4621      	mov	r1, r4
 801f620:	a80a      	add	r0, sp, #40	; 0x28
 801f622:	f7fb f929 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f626:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801f62a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801f62e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801f632:	4c63      	ldr	r4, [pc, #396]	; (801f7c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801f634:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 801f638:	6820      	ldr	r0, [r4, #0]
 801f63a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f63e:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 801f642:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801f646:	440a      	add	r2, r1
 801f648:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801f64c:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801f650:	4413      	add	r3, r2
 801f652:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801f656:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801f65a:	9304      	str	r3, [sp, #16]
 801f65c:	6803      	ldr	r3, [r0, #0]
 801f65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f660:	4798      	blx	r3
 801f662:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f666:	d118      	bne.n	801f69a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801f668:	f010 0f20 	tst.w	r0, #32
 801f66c:	6820      	ldr	r0, [r4, #0]
 801f66e:	d017      	beq.n	801f6a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801f670:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 801f674:	6801      	ldr	r1, [r0, #0]
 801f676:	9402      	str	r4, [sp, #8]
 801f678:	b2bf      	uxth	r7, r7
 801f67a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801f67e:	f8cd 900c 	str.w	r9, [sp, #12]
 801f682:	9401      	str	r4, [sp, #4]
 801f684:	9700      	str	r7, [sp, #0]
 801f686:	6c8c      	ldr	r4, [r1, #72]	; 0x48
 801f688:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801f68c:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801f690:	4641      	mov	r1, r8
 801f692:	47a0      	blx	r4
 801f694:	b00d      	add	sp, #52	; 0x34
 801f696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f69a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f69e:	e7e5      	b.n	801f66c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 801f6a0:	6803      	ldr	r3, [r0, #0]
 801f6a2:	6a1b      	ldr	r3, [r3, #32]
 801f6a4:	4798      	blx	r3
 801f6a6:	4a47      	ldr	r2, [pc, #284]	; (801f7c4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801f6a8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801f6ac:	8813      	ldrh	r3, [r2, #0]
 801f6ae:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	; 0x2a
 801f6b2:	9207      	str	r2, [sp, #28]
 801f6b4:	fb04 1303 	mla	r3, r4, r3, r1
 801f6b8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f6bc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801f6c0:	0099      	lsls	r1, r3, #2
 801f6c2:	005b      	lsls	r3, r3, #1
 801f6c4:	9106      	str	r1, [sp, #24]
 801f6c6:	9305      	str	r3, [sp, #20]
 801f6c8:	f04f 0c00 	mov.w	ip, #0
 801f6cc:	9b04      	ldr	r3, [sp, #16]
 801f6ce:	459c      	cmp	ip, r3
 801f6d0:	da70      	bge.n	801f7b4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b8>
 801f6d2:	4601      	mov	r1, r0
 801f6d4:	2300      	movs	r3, #0
 801f6d6:	42bb      	cmp	r3, r7
 801f6d8:	da5b      	bge.n	801f792 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x196>
 801f6da:	f858 4023 	ldr.w	r4, [r8, r3, lsl #2]
 801f6de:	0e25      	lsrs	r5, r4, #24
 801f6e0:	d00f      	beq.n	801f702 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f6e2:	2dff      	cmp	r5, #255	; 0xff
 801f6e4:	d110      	bne.n	801f708 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801f6e6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f6ea:	d10d      	bne.n	801f708 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 801f6ec:	4a36      	ldr	r2, [pc, #216]	; (801f7c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1cc>)
 801f6ee:	ea02 2514 	and.w	r5, r2, r4, lsr #8
 801f6f2:	0962      	lsrs	r2, r4, #5
 801f6f4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f6f8:	432a      	orrs	r2, r5
 801f6fa:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f6fe:	4322      	orrs	r2, r4
 801f700:	800a      	strh	r2, [r1, #0]
 801f702:	3102      	adds	r1, #2
 801f704:	3301      	adds	r3, #1
 801f706:	e7e6      	b.n	801f6d6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xda>
 801f708:	fb09 f505 	mul.w	r5, r9, r5
 801f70c:	1c6a      	adds	r2, r5, #1
 801f70e:	f8b1 e000 	ldrh.w	lr, [r1]
 801f712:	eb02 2225 	add.w	r2, r2, r5, asr #8
 801f716:	1212      	asrs	r2, r2, #8
 801f718:	fa1f fa82 	uxth.w	sl, r2
 801f71c:	ea4f 262e 	mov.w	r6, lr, asr #8
 801f720:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801f724:	43d2      	mvns	r2, r2
 801f726:	b2d2      	uxtb	r2, r2
 801f728:	fb15 f50a 	smulbb	r5, r5, sl
 801f72c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f730:	fb06 5602 	mla	r6, r6, r2, r5
 801f734:	f3c4 2b07 	ubfx	fp, r4, #8, #8
 801f738:	ea4f 05ee 	mov.w	r5, lr, asr #3
 801f73c:	b2e4      	uxtb	r4, r4
 801f73e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f742:	fa5f fe8e 	uxtb.w	lr, lr
 801f746:	fb14 f40a 	smulbb	r4, r4, sl
 801f74a:	fb0e 4402 	mla	r4, lr, r2, r4
 801f74e:	b2b6      	uxth	r6, r6
 801f750:	fb1b fb0a 	smulbb	fp, fp, sl
 801f754:	b2a4      	uxth	r4, r4
 801f756:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801f75a:	fb05 b502 	mla	r5, r5, r2, fp
 801f75e:	1c72      	adds	r2, r6, #1
 801f760:	f104 0b01 	add.w	fp, r4, #1
 801f764:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801f768:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 801f76c:	b2ad      	uxth	r5, r5
 801f76e:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801f772:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801f776:	ea46 060b 	orr.w	r6, r6, fp
 801f77a:	f105 0b01 	add.w	fp, r5, #1
 801f77e:	eb0b 2b15 	add.w	fp, fp, r5, lsr #8
 801f782:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f786:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f78a:	ea46 060b 	orr.w	r6, r6, fp
 801f78e:	800e      	strh	r6, [r1, #0]
 801f790:	e7b7      	b.n	801f702 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x106>
 801f792:	9b07      	ldr	r3, [sp, #28]
 801f794:	9a05      	ldr	r2, [sp, #20]
 801f796:	881b      	ldrh	r3, [r3, #0]
 801f798:	1bdb      	subs	r3, r3, r7
 801f79a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f79e:	4418      	add	r0, r3
 801f7a0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801f7a4:	9a06      	ldr	r2, [sp, #24]
 801f7a6:	1bdb      	subs	r3, r3, r7
 801f7a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f7ac:	4498      	add	r8, r3
 801f7ae:	f10c 0c01 	add.w	ip, ip, #1
 801f7b2:	e78b      	b.n	801f6cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd0>
 801f7b4:	4b02      	ldr	r3, [pc, #8]	; (801f7c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801f7b6:	6818      	ldr	r0, [r3, #0]
 801f7b8:	6803      	ldr	r3, [r0, #0]
 801f7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f7bc:	4798      	blx	r3
 801f7be:	e769      	b.n	801f694 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801f7c0:	2001a8ac 	.word	0x2001a8ac
 801f7c4:	2001a8a6 	.word	0x2001a8a6
 801f7c8:	fffff800 	.word	0xfffff800

0801f7cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801f7cc:	b570      	push	{r4, r5, r6, lr}
 801f7ce:	9d04      	ldr	r5, [sp, #16]
 801f7d0:	f89d 6018 	ldrb.w	r6, [sp, #24]
 801f7d4:	460c      	mov	r4, r1
 801f7d6:	4619      	mov	r1, r3
 801f7d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f7dc:	2a0b      	cmp	r2, #11
 801f7de:	d81f      	bhi.n	801f820 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x54>
 801f7e0:	e8df f002 	tbb	[pc, r2]
 801f7e4:	17111706 	.word	0x17111706
 801f7e8:	17171717 	.word	0x17171717
 801f7ec:	17171717 	.word	0x17171717
 801f7f0:	6802      	ldr	r2, [r0, #0]
 801f7f2:	9304      	str	r3, [sp, #16]
 801f7f4:	9605      	str	r6, [sp, #20]
 801f7f6:	6916      	ldr	r6, [r2, #16]
 801f7f8:	462b      	mov	r3, r5
 801f7fa:	460a      	mov	r2, r1
 801f7fc:	46b4      	mov	ip, r6
 801f7fe:	4621      	mov	r1, r4
 801f800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f804:	4760      	bx	ip
 801f806:	462a      	mov	r2, r5
 801f808:	4620      	mov	r0, r4
 801f80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f80e:	f7ff bef5 	b.w	801f5fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801f812:	4b04      	ldr	r3, [pc, #16]	; (801f824 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x58>)
 801f814:	4a04      	ldr	r2, [pc, #16]	; (801f828 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x5c>)
 801f816:	4805      	ldr	r0, [pc, #20]	; (801f82c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x60>)
 801f818:	f240 219b 	movw	r1, #667	; 0x29b
 801f81c:	f001 f8ee 	bl	80209fc <__assert_func>
 801f820:	bd70      	pop	{r4, r5, r6, pc}
 801f822:	bf00      	nop
 801f824:	08025f81 	.word	0x08025f81
 801f828:	0802635a 	.word	0x0802635a
 801f82c:	08025e6d 	.word	0x08025e6d

0801f830 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801f830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f834:	b095      	sub	sp, #84	; 0x54
 801f836:	880d      	ldrh	r5, [r1, #0]
 801f838:	4617      	mov	r7, r2
 801f83a:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 801f83e:	920b      	str	r2, [sp, #44]	; 0x2c
 801f840:	4606      	mov	r6, r0
 801f842:	4688      	mov	r8, r1
 801f844:	b12d      	cbz	r5, 801f852 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x22>
 801f846:	4b75      	ldr	r3, [pc, #468]	; (801fa1c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ec>)
 801f848:	4a75      	ldr	r2, [pc, #468]	; (801fa20 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f0>)
 801f84a:	4876      	ldr	r0, [pc, #472]	; (801fa24 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f4>)
 801f84c:	21cc      	movs	r1, #204	; 0xcc
 801f84e:	f001 f8d5 	bl	80209fc <__assert_func>
 801f852:	6838      	ldr	r0, [r7, #0]
 801f854:	6879      	ldr	r1, [r7, #4]
 801f856:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801fa2c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1fc>
 801f85a:	ac10      	add	r4, sp, #64	; 0x40
 801f85c:	c403      	stmia	r4!, {r0, r1}
 801f85e:	6818      	ldr	r0, [r3, #0]
 801f860:	6859      	ldr	r1, [r3, #4]
 801f862:	ac12      	add	r4, sp, #72	; 0x48
 801f864:	c403      	stmia	r4!, {r0, r1}
 801f866:	a810      	add	r0, sp, #64	; 0x40
 801f868:	f7fb f81e 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f86c:	4639      	mov	r1, r7
 801f86e:	a812      	add	r0, sp, #72	; 0x48
 801f870:	f7fb f802 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f874:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801f878:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 801f87c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 801f880:	f8da 0000 	ldr.w	r0, [sl]
 801f884:	f9bd 704c 	ldrsh.w	r7, [sp, #76]	; 0x4c
 801f888:	4c67      	ldr	r4, [pc, #412]	; (801fa28 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801f88a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801f88e:	440e      	add	r6, r1
 801f890:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801f894:	440a      	add	r2, r1
 801f896:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 801f89a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801f89e:	4413      	add	r3, r2
 801f8a0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801f8a4:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801f8a8:	930c      	str	r3, [sp, #48]	; 0x30
 801f8aa:	6803      	ldr	r3, [r0, #0]
 801f8ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f8b0:	4798      	blx	r3
 801f8b2:	2801      	cmp	r0, #1
 801f8b4:	d11d      	bne.n	801f8f2 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xc2>
 801f8b6:	220b      	movs	r2, #11
 801f8b8:	9508      	str	r5, [sp, #32]
 801f8ba:	9207      	str	r2, [sp, #28]
 801f8bc:	8822      	ldrh	r2, [r4, #0]
 801f8be:	9206      	str	r2, [sp, #24]
 801f8c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f8c2:	9204      	str	r2, [sp, #16]
 801f8c4:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801f8c8:	9203      	str	r2, [sp, #12]
 801f8ca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801f8ce:	9202      	str	r2, [sp, #8]
 801f8d0:	b2bf      	uxth	r7, r7
 801f8d2:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 801f8d6:	9200      	str	r2, [sp, #0]
 801f8d8:	9005      	str	r0, [sp, #20]
 801f8da:	9701      	str	r7, [sp, #4]
 801f8dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801f8e0:	f8da 0000 	ldr.w	r0, [sl]
 801f8e4:	4642      	mov	r2, r8
 801f8e6:	4631      	mov	r1, r6
 801f8e8:	f7f9 fed0 	bl	801968c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801f8ec:	b015      	add	sp, #84	; 0x54
 801f8ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8f2:	f8da 0000 	ldr.w	r0, [sl]
 801f8f6:	6803      	ldr	r3, [r0, #0]
 801f8f8:	6a1b      	ldr	r3, [r3, #32]
 801f8fa:	4798      	blx	r3
 801f8fc:	8823      	ldrh	r3, [r4, #0]
 801f8fe:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 801f902:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801f906:	940f      	str	r4, [sp, #60]	; 0x3c
 801f908:	fb01 2303 	mla	r3, r1, r3, r2
 801f90c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f910:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 801f914:	930d      	str	r3, [sp, #52]	; 0x34
 801f916:	005b      	lsls	r3, r3, #1
 801f918:	930e      	str	r3, [sp, #56]	; 0x38
 801f91a:	46a9      	mov	r9, r5
 801f91c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f91e:	4599      	cmp	r9, r3
 801f920:	da76      	bge.n	801fa10 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1e0>
 801f922:	46b4      	mov	ip, r6
 801f924:	4686      	mov	lr, r0
 801f926:	ebac 0306 	sub.w	r3, ip, r6
 801f92a:	429f      	cmp	r7, r3
 801f92c:	dd60      	ble.n	801f9f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>
 801f92e:	f81c 3b01 	ldrb.w	r3, [ip], #1
 801f932:	2204      	movs	r2, #4
 801f934:	2104      	movs	r1, #4
 801f936:	fb12 1303 	smlabb	r3, r2, r3, r1
 801f93a:	f858 2003 	ldr.w	r2, [r8, r3]
 801f93e:	0e14      	lsrs	r4, r2, #24
 801f940:	d011      	beq.n	801f966 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x136>
 801f942:	2cff      	cmp	r4, #255	; 0xff
 801f944:	d112      	bne.n	801f96c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801f946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f948:	2bff      	cmp	r3, #255	; 0xff
 801f94a:	d10f      	bne.n	801f96c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13c>
 801f94c:	f6a3 03ff 	subw	r3, r3, #2303	; 0x8ff
 801f950:	ea03 2112 	and.w	r1, r3, r2, lsr #8
 801f954:	0953      	lsrs	r3, r2, #5
 801f956:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f95a:	430b      	orrs	r3, r1
 801f95c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801f960:	4313      	orrs	r3, r2
 801f962:	f8ae 3000 	strh.w	r3, [lr]
 801f966:	f10e 0e02 	add.w	lr, lr, #2
 801f96a:	e7dc      	b.n	801f926 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 801f96c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f96e:	f8be 1000 	ldrh.w	r1, [lr]
 801f972:	435c      	muls	r4, r3
 801f974:	1c63      	adds	r3, r4, #1
 801f976:	eb03 2324 	add.w	r3, r3, r4, asr #8
 801f97a:	121b      	asrs	r3, r3, #8
 801f97c:	fa1f fa83 	uxth.w	sl, r3
 801f980:	120d      	asrs	r5, r1, #8
 801f982:	f3c2 4407 	ubfx	r4, r2, #16, #8
 801f986:	43db      	mvns	r3, r3
 801f988:	b2db      	uxtb	r3, r3
 801f98a:	fb14 f40a 	smulbb	r4, r4, sl
 801f98e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f992:	fb05 4503 	mla	r5, r5, r3, r4
 801f996:	f3c2 2b07 	ubfx	fp, r2, #8, #8
 801f99a:	10cc      	asrs	r4, r1, #3
 801f99c:	b2d2      	uxtb	r2, r2
 801f99e:	00c9      	lsls	r1, r1, #3
 801f9a0:	b2c9      	uxtb	r1, r1
 801f9a2:	fb12 f20a 	smulbb	r2, r2, sl
 801f9a6:	fb01 2203 	mla	r2, r1, r3, r2
 801f9aa:	b2ad      	uxth	r5, r5
 801f9ac:	fb1b fb0a 	smulbb	fp, fp, sl
 801f9b0:	b292      	uxth	r2, r2
 801f9b2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f9b6:	fb04 b403 	mla	r4, r4, r3, fp
 801f9ba:	1c6b      	adds	r3, r5, #1
 801f9bc:	f102 0b01 	add.w	fp, r2, #1
 801f9c0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f9c4:	eb0b 2b12 	add.w	fp, fp, r2, lsr #8
 801f9c8:	b2a4      	uxth	r4, r4
 801f9ca:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 801f9ce:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f9d2:	ea45 050b 	orr.w	r5, r5, fp
 801f9d6:	f104 0b01 	add.w	fp, r4, #1
 801f9da:	eb0b 2b14 	add.w	fp, fp, r4, lsr #8
 801f9de:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801f9e2:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f9e6:	ea45 050b 	orr.w	r5, r5, fp
 801f9ea:	f8ae 5000 	strh.w	r5, [lr]
 801f9ee:	e7ba      	b.n	801f966 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x136>
 801f9f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f9f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f9f4:	881b      	ldrh	r3, [r3, #0]
 801f9f6:	1bdb      	subs	r3, r3, r7
 801f9f8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f9fc:	4418      	add	r0, r3
 801f9fe:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801fa02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fa04:	1bdb      	subs	r3, r3, r7
 801fa06:	4413      	add	r3, r2
 801fa08:	441e      	add	r6, r3
 801fa0a:	f109 0901 	add.w	r9, r9, #1
 801fa0e:	e785      	b.n	801f91c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801fa10:	4b06      	ldr	r3, [pc, #24]	; (801fa2c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801fa12:	6818      	ldr	r0, [r3, #0]
 801fa14:	6803      	ldr	r3, [r0, #0]
 801fa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa18:	4798      	blx	r3
 801fa1a:	e767      	b.n	801f8ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xbc>
 801fa1c:	08025d69 	.word	0x08025d69
 801fa20:	0802620e 	.word	0x0802620e
 801fa24:	08025e6d 	.word	0x08025e6d
 801fa28:	2001a8a6 	.word	0x2001a8a6
 801fa2c:	2001a8ac 	.word	0x2001a8ac

0801fa30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801fa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa34:	4614      	mov	r4, r2
 801fa36:	880a      	ldrh	r2, [r1, #0]
 801fa38:	b093      	sub	sp, #76	; 0x4c
 801fa3a:	2a02      	cmp	r2, #2
 801fa3c:	4606      	mov	r6, r0
 801fa3e:	4689      	mov	r9, r1
 801fa40:	f89d 7070 	ldrb.w	r7, [sp, #112]	; 0x70
 801fa44:	d006      	beq.n	801fa54 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x24>
 801fa46:	4b7a      	ldr	r3, [pc, #488]	; (801fc30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x200>)
 801fa48:	4a7a      	ldr	r2, [pc, #488]	; (801fc34 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x204>)
 801fa4a:	487b      	ldr	r0, [pc, #492]	; (801fc38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x208>)
 801fa4c:	f240 1127 	movw	r1, #295	; 0x127
 801fa50:	f000 ffd4 	bl	80209fc <__assert_func>
 801fa54:	2f00      	cmp	r7, #0
 801fa56:	d04b      	beq.n	801faf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801fa58:	6820      	ldr	r0, [r4, #0]
 801fa5a:	6861      	ldr	r1, [r4, #4]
 801fa5c:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 801fc40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>
 801fa60:	ad0e      	add	r5, sp, #56	; 0x38
 801fa62:	c503      	stmia	r5!, {r0, r1}
 801fa64:	6818      	ldr	r0, [r3, #0]
 801fa66:	6859      	ldr	r1, [r3, #4]
 801fa68:	ad10      	add	r5, sp, #64	; 0x40
 801fa6a:	c503      	stmia	r5!, {r0, r1}
 801fa6c:	a80e      	add	r0, sp, #56	; 0x38
 801fa6e:	f7fa ff1b 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fa72:	4621      	mov	r1, r4
 801fa74:	a810      	add	r0, sp, #64	; 0x40
 801fa76:	f7fa feff 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fa7a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fa7e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801fa82:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801fa86:	f8da 0000 	ldr.w	r0, [sl]
 801fa8a:	f9bd 5044 	ldrsh.w	r5, [sp, #68]	; 0x44
 801fa8e:	f9bd 8046 	ldrsh.w	r8, [sp, #70]	; 0x46
 801fa92:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fa96:	1874      	adds	r4, r6, r1
 801fa98:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801fa9c:	4e67      	ldr	r6, [pc, #412]	; (801fc3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x20c>)
 801fa9e:	440a      	add	r2, r1
 801faa0:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801faa4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801faa8:	4413      	add	r3, r2
 801faaa:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801faae:	6803      	ldr	r3, [r0, #0]
 801fab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fab4:	4798      	blx	r3
 801fab6:	2801      	cmp	r0, #1
 801fab8:	d11d      	bne.n	801faf6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc6>
 801faba:	2200      	movs	r2, #0
 801fabc:	210b      	movs	r1, #11
 801fabe:	9208      	str	r2, [sp, #32]
 801fac0:	9107      	str	r1, [sp, #28]
 801fac2:	8831      	ldrh	r1, [r6, #0]
 801fac4:	9205      	str	r2, [sp, #20]
 801fac6:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801faca:	9203      	str	r2, [sp, #12]
 801facc:	fa1f f288 	uxth.w	r2, r8
 801fad0:	9202      	str	r2, [sp, #8]
 801fad2:	b2ad      	uxth	r5, r5
 801fad4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801fad8:	9106      	str	r1, [sp, #24]
 801fada:	9200      	str	r2, [sp, #0]
 801fadc:	9704      	str	r7, [sp, #16]
 801fade:	9501      	str	r5, [sp, #4]
 801fae0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801fae4:	f8da 0000 	ldr.w	r0, [sl]
 801fae8:	464a      	mov	r2, r9
 801faea:	4621      	mov	r1, r4
 801faec:	f7f9 fdce 	bl	801968c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801faf0:	b013      	add	sp, #76	; 0x4c
 801faf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faf6:	f8da 0000 	ldr.w	r0, [sl]
 801fafa:	6803      	ldr	r3, [r0, #0]
 801fafc:	6a1b      	ldr	r3, [r3, #32]
 801fafe:	4798      	blx	r3
 801fb00:	8833      	ldrh	r3, [r6, #0]
 801fb02:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801fb06:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801fb0a:	fb01 2303 	mla	r3, r1, r3, r2
 801fb0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fb12:	2fff      	cmp	r7, #255	; 0xff
 801fb14:	f109 0304 	add.w	r3, r9, #4
 801fb18:	930a      	str	r3, [sp, #40]	; 0x28
 801fb1a:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 801fb1e:	d062      	beq.n	801fbe6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1b6>
 801fb20:	b21b      	sxth	r3, r3
 801fb22:	f1c7 0eff 	rsb	lr, r7, #255	; 0xff
 801fb26:	930b      	str	r3, [sp, #44]	; 0x2c
 801fb28:	005b      	lsls	r3, r3, #1
 801fb2a:	930c      	str	r3, [sp, #48]	; 0x30
 801fb2c:	f04f 0900 	mov.w	r9, #0
 801fb30:	b2ba      	uxth	r2, r7
 801fb32:	fa1f fe8e 	uxth.w	lr, lr
 801fb36:	960d      	str	r6, [sp, #52]	; 0x34
 801fb38:	45c1      	cmp	r9, r8
 801fb3a:	da72      	bge.n	801fc22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801fb3c:	46a3      	mov	fp, r4
 801fb3e:	4682      	mov	sl, r0
 801fb40:	ebab 0304 	sub.w	r3, fp, r4
 801fb44:	429d      	cmp	r5, r3
 801fb46:	dd3e      	ble.n	801fbc6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x196>
 801fb48:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801fb4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801fb4e:	f8ba 1000 	ldrh.w	r1, [sl]
 801fb52:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801fb56:	120e      	asrs	r6, r1, #8
 801fb58:	121f      	asrs	r7, r3, #8
 801fb5a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fb5e:	fb16 f60e 	smulbb	r6, r6, lr
 801fb62:	ea4f 0ce1 	mov.w	ip, r1, asr #3
 801fb66:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fb6a:	00c9      	lsls	r1, r1, #3
 801fb6c:	fb07 6702 	mla	r7, r7, r2, r6
 801fb70:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fb74:	10de      	asrs	r6, r3, #3
 801fb76:	b2c9      	uxtb	r1, r1
 801fb78:	00db      	lsls	r3, r3, #3
 801fb7a:	fb1c fc0e 	smulbb	ip, ip, lr
 801fb7e:	fb11 f10e 	smulbb	r1, r1, lr
 801fb82:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fb86:	b2db      	uxtb	r3, r3
 801fb88:	b2bf      	uxth	r7, r7
 801fb8a:	fb06 c602 	mla	r6, r6, r2, ip
 801fb8e:	fb03 1302 	mla	r3, r3, r2, r1
 801fb92:	b2b6      	uxth	r6, r6
 801fb94:	b29b      	uxth	r3, r3
 801fb96:	1c79      	adds	r1, r7, #1
 801fb98:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fb9c:	f106 0c01 	add.w	ip, r6, #1
 801fba0:	1c59      	adds	r1, r3, #1
 801fba2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fba6:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 801fbaa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fbae:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 801fbb2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801fbb6:	430f      	orrs	r7, r1
 801fbb8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801fbbc:	ea47 070c 	orr.w	r7, r7, ip
 801fbc0:	f82a 7b02 	strh.w	r7, [sl], #2
 801fbc4:	e7bc      	b.n	801fb40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x110>
 801fbc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fbc8:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fbca:	881b      	ldrh	r3, [r3, #0]
 801fbcc:	1b5b      	subs	r3, r3, r5
 801fbce:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801fbd2:	4418      	add	r0, r3
 801fbd4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801fbd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801fbda:	1b5b      	subs	r3, r3, r5
 801fbdc:	440b      	add	r3, r1
 801fbde:	441c      	add	r4, r3
 801fbe0:	f109 0901 	add.w	r9, r9, #1
 801fbe4:	e7a8      	b.n	801fb38 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x108>
 801fbe6:	b21b      	sxth	r3, r3
 801fbe8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 801fbec:	2100      	movs	r1, #0
 801fbee:	4541      	cmp	r1, r8
 801fbf0:	da17      	bge.n	801fc22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1f2>
 801fbf2:	2200      	movs	r2, #0
 801fbf4:	42aa      	cmp	r2, r5
 801fbf6:	da08      	bge.n	801fc0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1da>
 801fbf8:	f814 e002 	ldrb.w	lr, [r4, r2]
 801fbfc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fbfe:	f837 e01e 	ldrh.w	lr, [r7, lr, lsl #1]
 801fc02:	f820 e012 	strh.w	lr, [r0, r2, lsl #1]
 801fc06:	3201      	adds	r2, #1
 801fc08:	e7f4      	b.n	801fbf4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>
 801fc0a:	8832      	ldrh	r2, [r6, #0]
 801fc0c:	1b52      	subs	r2, r2, r5
 801fc0e:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 801fc12:	4410      	add	r0, r2
 801fc14:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801fc18:	1b52      	subs	r2, r2, r5
 801fc1a:	441a      	add	r2, r3
 801fc1c:	4414      	add	r4, r2
 801fc1e:	3101      	adds	r1, #1
 801fc20:	e7e5      	b.n	801fbee <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1be>
 801fc22:	4b07      	ldr	r3, [pc, #28]	; (801fc40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x210>)
 801fc24:	6818      	ldr	r0, [r3, #0]
 801fc26:	6803      	ldr	r3, [r0, #0]
 801fc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc2a:	4798      	blx	r3
 801fc2c:	e760      	b.n	801faf0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xc0>
 801fc2e:	bf00      	nop
 801fc30:	08025c27 	.word	0x08025c27
 801fc34:	08026078 	.word	0x08026078
 801fc38:	08025e6d 	.word	0x08025e6d
 801fc3c:	2001a8a6 	.word	0x2001a8a6
 801fc40:	2001a8ac 	.word	0x2001a8ac

0801fc44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801fc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc48:	4615      	mov	r5, r2
 801fc4a:	880a      	ldrh	r2, [r1, #0]
 801fc4c:	b095      	sub	sp, #84	; 0x54
 801fc4e:	2a01      	cmp	r2, #1
 801fc50:	4606      	mov	r6, r0
 801fc52:	460f      	mov	r7, r1
 801fc54:	f89d 8078 	ldrb.w	r8, [sp, #120]	; 0x78
 801fc58:	d006      	beq.n	801fc68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x24>
 801fc5a:	4b78      	ldr	r3, [pc, #480]	; (801fe3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 801fc5c:	4a78      	ldr	r2, [pc, #480]	; (801fe40 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>)
 801fc5e:	4879      	ldr	r0, [pc, #484]	; (801fe44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x200>)
 801fc60:	f44f 71c1 	mov.w	r1, #386	; 0x182
 801fc64:	f000 feca 	bl	80209fc <__assert_func>
 801fc68:	f1b8 0f00 	cmp.w	r8, #0
 801fc6c:	d04d      	beq.n	801fd0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801fc6e:	6828      	ldr	r0, [r5, #0]
 801fc70:	6869      	ldr	r1, [r5, #4]
 801fc72:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801fe4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>
 801fc76:	ac10      	add	r4, sp, #64	; 0x40
 801fc78:	c403      	stmia	r4!, {r0, r1}
 801fc7a:	6818      	ldr	r0, [r3, #0]
 801fc7c:	6859      	ldr	r1, [r3, #4]
 801fc7e:	ac12      	add	r4, sp, #72	; 0x48
 801fc80:	c403      	stmia	r4!, {r0, r1}
 801fc82:	a810      	add	r0, sp, #64	; 0x40
 801fc84:	f7fa fe10 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc88:	4629      	mov	r1, r5
 801fc8a:	a812      	add	r0, sp, #72	; 0x48
 801fc8c:	f7fa fdf4 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc90:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801fc94:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
 801fc98:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 801fc9c:	f8d9 0000 	ldr.w	r0, [r9]
 801fca0:	4c69      	ldr	r4, [pc, #420]	; (801fe48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x204>)
 801fca2:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fca6:	1875      	adds	r5, r6, r1
 801fca8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801fcac:	f9bd 604c 	ldrsh.w	r6, [sp, #76]	; 0x4c
 801fcb0:	440a      	add	r2, r1
 801fcb2:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
 801fcb6:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801fcba:	4413      	add	r3, r2
 801fcbc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801fcc0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 801fcc4:	930c      	str	r3, [sp, #48]	; 0x30
 801fcc6:	6803      	ldr	r3, [r0, #0]
 801fcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801fccc:	4798      	blx	r3
 801fcce:	2801      	cmp	r0, #1
 801fcd0:	d11e      	bne.n	801fd10 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xcc>
 801fcd2:	2200      	movs	r2, #0
 801fcd4:	9208      	str	r2, [sp, #32]
 801fcd6:	220b      	movs	r2, #11
 801fcd8:	9207      	str	r2, [sp, #28]
 801fcda:	8822      	ldrh	r2, [r4, #0]
 801fcdc:	9206      	str	r2, [sp, #24]
 801fcde:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 801fce2:	9203      	str	r2, [sp, #12]
 801fce4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801fce8:	9202      	str	r2, [sp, #8]
 801fcea:	b2b6      	uxth	r6, r6
 801fcec:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 801fcf0:	9200      	str	r2, [sp, #0]
 801fcf2:	9005      	str	r0, [sp, #20]
 801fcf4:	f8cd 8010 	str.w	r8, [sp, #16]
 801fcf8:	9601      	str	r6, [sp, #4]
 801fcfa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801fcfe:	f8d9 0000 	ldr.w	r0, [r9]
 801fd02:	463a      	mov	r2, r7
 801fd04:	4629      	mov	r1, r5
 801fd06:	f7f9 fcc1 	bl	801968c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_>
 801fd0a:	b015      	add	sp, #84	; 0x54
 801fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd10:	f8d9 0000 	ldr.w	r0, [r9]
 801fd14:	6803      	ldr	r3, [r0, #0]
 801fd16:	6a1b      	ldr	r3, [r3, #32]
 801fd18:	4798      	blx	r3
 801fd1a:	f9bd 104a 	ldrsh.w	r1, [sp, #74]	; 0x4a
 801fd1e:	8823      	ldrh	r3, [r4, #0]
 801fd20:	f9bd 2048 	ldrsh.w	r2, [sp, #72]	; 0x48
 801fd24:	940f      	str	r4, [sp, #60]	; 0x3c
 801fd26:	fb01 2303 	mla	r3, r1, r3, r2
 801fd2a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fd2e:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 801fd32:	930d      	str	r3, [sp, #52]	; 0x34
 801fd34:	ea6f 0108 	mvn.w	r1, r8
 801fd38:	005b      	lsls	r3, r3, #1
 801fd3a:	930e      	str	r3, [sp, #56]	; 0x38
 801fd3c:	f04f 0a00 	mov.w	sl, #0
 801fd40:	b2c9      	uxtb	r1, r1
 801fd42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fd44:	459a      	cmp	sl, r3
 801fd46:	da72      	bge.n	801fe2e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 801fd48:	950b      	str	r5, [sp, #44]	; 0x2c
 801fd4a:	4686      	mov	lr, r0
 801fd4c:	fa1f fb88 	uxth.w	fp, r8
 801fd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd52:	1b5b      	subs	r3, r3, r5
 801fd54:	429e      	cmp	r6, r3
 801fd56:	dd5a      	ble.n	801fe0e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ca>
 801fd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd5a:	f813 cb01 	ldrb.w	ip, [r3], #1
 801fd5e:	930b      	str	r3, [sp, #44]	; 0x2c
 801fd60:	2204      	movs	r2, #4
 801fd62:	2303      	movs	r3, #3
 801fd64:	fb13 2c0c 	smlabb	ip, r3, ip, r2
 801fd68:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fd6c:	eb07 090c 	add.w	r9, r7, ip
 801fd70:	d114      	bne.n	801fd9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x158>
 801fd72:	f899 3002 	ldrb.w	r3, [r9, #2]
 801fd76:	f6a2 0204 	subw	r2, r2, #2052	; 0x804
 801fd7a:	ea02 2303 	and.w	r3, r2, r3, lsl #8
 801fd7e:	f899 2001 	ldrb.w	r2, [r9, #1]
 801fd82:	00d2      	lsls	r2, r2, #3
 801fd84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd88:	4313      	orrs	r3, r2
 801fd8a:	f817 200c 	ldrb.w	r2, [r7, ip]
 801fd8e:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 801fd92:	f8ae 3000 	strh.w	r3, [lr]
 801fd96:	f10e 0e02 	add.w	lr, lr, #2
 801fd9a:	e7d9      	b.n	801fd50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x10c>
 801fd9c:	f8be 3000 	ldrh.w	r3, [lr]
 801fda0:	f899 2002 	ldrb.w	r2, [r9, #2]
 801fda4:	f899 9001 	ldrb.w	r9, [r9, #1]
 801fda8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801fdac:	121c      	asrs	r4, r3, #8
 801fdae:	fb12 f20b 	smulbb	r2, r2, fp
 801fdb2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801fdb6:	fb04 2401 	mla	r4, r4, r1, r2
 801fdba:	10da      	asrs	r2, r3, #3
 801fdbc:	00db      	lsls	r3, r3, #3
 801fdbe:	b2db      	uxtb	r3, r3
 801fdc0:	fb19 f90b 	smulbb	r9, r9, fp
 801fdc4:	fb13 f301 	smulbb	r3, r3, r1
 801fdc8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fdcc:	b2a4      	uxth	r4, r4
 801fdce:	fb02 9201 	mla	r2, r2, r1, r9
 801fdd2:	fb0c 3c0b 	mla	ip, ip, fp, r3
 801fdd6:	b292      	uxth	r2, r2
 801fdd8:	fa1f fc8c 	uxth.w	ip, ip
 801fddc:	1c63      	adds	r3, r4, #1
 801fdde:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801fde2:	f102 0901 	add.w	r9, r2, #1
 801fde6:	f10c 0301 	add.w	r3, ip, #1
 801fdea:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801fdee:	eb09 2912 	add.w	r9, r9, r2, lsr #8
 801fdf2:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801fdf6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fdfa:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801fdfe:	431c      	orrs	r4, r3
 801fe00:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801fe04:	ea44 0409 	orr.w	r4, r4, r9
 801fe08:	f8ae 4000 	strh.w	r4, [lr]
 801fe0c:	e7c3      	b.n	801fd96 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x152>
 801fe0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fe12:	881b      	ldrh	r3, [r3, #0]
 801fe14:	1b9b      	subs	r3, r3, r6
 801fe16:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fe1a:	4418      	add	r0, r3
 801fe1c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 801fe20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fe22:	1b9b      	subs	r3, r3, r6
 801fe24:	4413      	add	r3, r2
 801fe26:	441d      	add	r5, r3
 801fe28:	f10a 0a01 	add.w	sl, sl, #1
 801fe2c:	e789      	b.n	801fd42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfe>
 801fe2e:	4b07      	ldr	r3, [pc, #28]	; (801fe4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x208>)
 801fe30:	6818      	ldr	r0, [r3, #0]
 801fe32:	6803      	ldr	r3, [r0, #0]
 801fe34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fe36:	4798      	blx	r3
 801fe38:	e767      	b.n	801fd0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc6>
 801fe3a:	bf00      	nop
 801fe3c:	08025c75 	.word	0x08025c75
 801fe40:	08026101 	.word	0x08026101
 801fe44:	08025e6d 	.word	0x08025e6d
 801fe48:	2001a8a6 	.word	0x2001a8a6
 801fe4c:	2001a8ac 	.word	0x2001a8ac

0801fe50 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801fe50:	b430      	push	{r4, r5}
 801fe52:	780d      	ldrb	r5, [r1, #0]
 801fe54:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801fe58:	2d01      	cmp	r5, #1
 801fe5a:	d00a      	beq.n	801fe72 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801fe5c:	d305      	bcc.n	801fe6a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801fe5e:	2d02      	cmp	r5, #2
 801fe60:	d10b      	bne.n	801fe7a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801fe62:	9402      	str	r4, [sp, #8]
 801fe64:	bc30      	pop	{r4, r5}
 801fe66:	f7ff bde3 	b.w	801fa30 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801fe6a:	9402      	str	r4, [sp, #8]
 801fe6c:	bc30      	pop	{r4, r5}
 801fe6e:	f7ff bcdf 	b.w	801f830 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801fe72:	9402      	str	r4, [sp, #8]
 801fe74:	bc30      	pop	{r4, r5}
 801fe76:	f7ff bee5 	b.w	801fc44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801fe7a:	bc30      	pop	{r4, r5}
 801fe7c:	4770      	bx	lr
	...

0801fe80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801fe80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe84:	4605      	mov	r5, r0
 801fe86:	b089      	sub	sp, #36	; 0x24
 801fe88:	6810      	ldr	r0, [r2, #0]
 801fe8a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 801fe8e:	460c      	mov	r4, r1
 801fe90:	6851      	ldr	r1, [r2, #4]
 801fe92:	ae04      	add	r6, sp, #16
 801fe94:	c603      	stmia	r6!, {r0, r1}
 801fe96:	6818      	ldr	r0, [r3, #0]
 801fe98:	6859      	ldr	r1, [r3, #4]
 801fe9a:	ae06      	add	r6, sp, #24
 801fe9c:	4617      	mov	r7, r2
 801fe9e:	c603      	stmia	r6!, {r0, r1}
 801fea0:	a804      	add	r0, sp, #16
 801fea2:	f7fa fd01 	bl	801a8a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fea6:	4639      	mov	r1, r7
 801fea8:	a806      	add	r0, sp, #24
 801feaa:	f7fa fce5 	bl	801a878 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801feae:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 801feb2:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801feb6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801feba:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 801febe:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fec2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801fec6:	440c      	add	r4, r1
 801fec8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 801fecc:	440a      	add	r2, r1
 801fece:	f8ad 2018 	strh.w	r2, [sp, #24]
 801fed2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801fed6:	4413      	add	r3, r2
 801fed8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801fedc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 801fee0:	9300      	str	r3, [sp, #0]
 801fee2:	4b81      	ldr	r3, [pc, #516]	; (80200e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 801fee4:	6818      	ldr	r0, [r3, #0]
 801fee6:	6803      	ldr	r3, [r0, #0]
 801fee8:	6a1b      	ldr	r3, [r3, #32]
 801feea:	4798      	blx	r3
 801feec:	4b7f      	ldr	r3, [pc, #508]	; (80200ec <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x26c>)
 801feee:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 801fef2:	881a      	ldrh	r2, [r3, #0]
 801fef4:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 801fef8:	fb06 1202 	mla	r2, r6, r2, r1
 801fefc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ff00:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ff04:	ea27 72e7 	bic.w	r2, r7, r7, asr #31
 801ff08:	b212      	sxth	r2, r2
 801ff0a:	d071      	beq.n	801fff0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x170>
 801ff0c:	9201      	str	r2, [sp, #4]
 801ff0e:	0052      	lsls	r2, r2, #1
 801ff10:	9202      	str	r2, [sp, #8]
 801ff12:	f04f 0a00 	mov.w	sl, #0
 801ff16:	9303      	str	r3, [sp, #12]
 801ff18:	9b00      	ldr	r3, [sp, #0]
 801ff1a:	459a      	cmp	sl, r3
 801ff1c:	f280 80db 	bge.w	80200d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x256>
 801ff20:	f04f 0e00 	mov.w	lr, #0
 801ff24:	45be      	cmp	lr, r7
 801ff26:	da50      	bge.n	801ffca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801ff28:	f814 300e 	ldrb.w	r3, [r4, lr]
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	d049      	beq.n	801ffc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ff30:	fb08 f303 	mul.w	r3, r8, r3
 801ff34:	1c5a      	adds	r2, r3, #1
 801ff36:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801ff3a:	121b      	asrs	r3, r3, #8
 801ff3c:	d042      	beq.n	801ffc4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801ff3e:	f835 201e 	ldrh.w	r2, [r5, lr, lsl #1]
 801ff42:	f830 c01e 	ldrh.w	ip, [r0, lr, lsl #1]
 801ff46:	1211      	asrs	r1, r2, #8
 801ff48:	fa1f fb83 	uxth.w	fp, r3
 801ff4c:	ea4f 262c 	mov.w	r6, ip, asr #8
 801ff50:	43db      	mvns	r3, r3
 801ff52:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801ff56:	b2db      	uxtb	r3, r3
 801ff58:	fb11 f10b 	smulbb	r1, r1, fp
 801ff5c:	ea4f 09e2 	mov.w	r9, r2, asr #3
 801ff60:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ff64:	00d2      	lsls	r2, r2, #3
 801ff66:	fb06 1603 	mla	r6, r6, r3, r1
 801ff6a:	b2d2      	uxtb	r2, r2
 801ff6c:	ea4f 01ec 	mov.w	r1, ip, asr #3
 801ff70:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ff74:	fb12 f20b 	smulbb	r2, r2, fp
 801ff78:	fa5f fc8c 	uxtb.w	ip, ip
 801ff7c:	fb0c 2203 	mla	r2, ip, r3, r2
 801ff80:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801ff84:	b2b6      	uxth	r6, r6
 801ff86:	fb19 f90b 	smulbb	r9, r9, fp
 801ff8a:	b292      	uxth	r2, r2
 801ff8c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ff90:	fb01 9103 	mla	r1, r1, r3, r9
 801ff94:	1c73      	adds	r3, r6, #1
 801ff96:	f102 0901 	add.w	r9, r2, #1
 801ff9a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801ff9e:	eb09 2912 	add.w	r9, r9, r2, lsr #8
 801ffa2:	b289      	uxth	r1, r1
 801ffa4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801ffa8:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801ffac:	ea46 0609 	orr.w	r6, r6, r9
 801ffb0:	f101 0901 	add.w	r9, r1, #1
 801ffb4:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801ffb8:	0949      	lsrs	r1, r1, #5
 801ffba:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ffbe:	430e      	orrs	r6, r1
 801ffc0:	f820 601e 	strh.w	r6, [r0, lr, lsl #1]
 801ffc4:	f10e 0e01 	add.w	lr, lr, #1
 801ffc8:	e7ac      	b.n	801ff24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801ffca:	9b03      	ldr	r3, [sp, #12]
 801ffcc:	9a02      	ldr	r2, [sp, #8]
 801ffce:	881b      	ldrh	r3, [r3, #0]
 801ffd0:	1bdb      	subs	r3, r3, r7
 801ffd2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801ffd6:	4418      	add	r0, r3
 801ffd8:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801ffdc:	1bdb      	subs	r3, r3, r7
 801ffde:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 801ffe2:	4415      	add	r5, r2
 801ffe4:	9a01      	ldr	r2, [sp, #4]
 801ffe6:	4413      	add	r3, r2
 801ffe8:	441c      	add	r4, r3
 801ffea:	f10a 0a01 	add.w	sl, sl, #1
 801ffee:	e793      	b.n	801ff18 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x98>
 801fff0:	9202      	str	r2, [sp, #8]
 801fff2:	0052      	lsls	r2, r2, #1
 801fff4:	9201      	str	r2, [sp, #4]
 801fff6:	f04f 0b00 	mov.w	fp, #0
 801fffa:	9303      	str	r3, [sp, #12]
 801fffc:	9b00      	ldr	r3, [sp, #0]
 801fffe:	459b      	cmp	fp, r3
 8020000:	da69      	bge.n	80200d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x256>
 8020002:	4681      	mov	r9, r0
 8020004:	f04f 0800 	mov.w	r8, #0
 8020008:	45b8      	cmp	r8, r7
 802000a:	da51      	bge.n	80200b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x230>
 802000c:	f814 3008 	ldrb.w	r3, [r4, r8]
 8020010:	b12b      	cbz	r3, 802001e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x19e>
 8020012:	2bff      	cmp	r3, #255	; 0xff
 8020014:	f835 c018 	ldrh.w	ip, [r5, r8, lsl #1]
 8020018:	d106      	bne.n	8020028 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1a8>
 802001a:	f8a9 c000 	strh.w	ip, [r9]
 802001e:	f109 0902 	add.w	r9, r9, #2
 8020022:	f108 0801 	add.w	r8, r8, #1
 8020026:	e7ef      	b.n	8020008 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x188>
 8020028:	f8b9 2000 	ldrh.w	r2, [r9]
 802002c:	b29e      	uxth	r6, r3
 802002e:	1211      	asrs	r1, r2, #8
 8020030:	43db      	mvns	r3, r3
 8020032:	b2db      	uxtb	r3, r3
 8020034:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8020038:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802003c:	fb11 f103 	smulbb	r1, r1, r3
 8020040:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8020044:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020048:	00d2      	lsls	r2, r2, #3
 802004a:	fb0e 1e06 	mla	lr, lr, r6, r1
 802004e:	b2d2      	uxtb	r2, r2
 8020050:	ea4f 01ec 	mov.w	r1, ip, asr #3
 8020054:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020058:	fb12 f203 	smulbb	r2, r2, r3
 802005c:	fa5f fc8c 	uxtb.w	ip, ip
 8020060:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8020064:	fb0c 2206 	mla	r2, ip, r6, r2
 8020068:	fb1a fa03 	smulbb	sl, sl, r3
 802006c:	fa1f fe8e 	uxth.w	lr, lr
 8020070:	b292      	uxth	r2, r2
 8020072:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020076:	fb01 a106 	mla	r1, r1, r6, sl
 802007a:	f10e 0301 	add.w	r3, lr, #1
 802007e:	f102 0a01 	add.w	sl, r2, #1
 8020082:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8020086:	eb0a 2a12 	add.w	sl, sl, r2, lsr #8
 802008a:	b289      	uxth	r1, r1
 802008c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020090:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8020094:	ea4e 0e0a 	orr.w	lr, lr, sl
 8020098:	f101 0a01 	add.w	sl, r1, #1
 802009c:	eb0a 2111 	add.w	r1, sl, r1, lsr #8
 80200a0:	0949      	lsrs	r1, r1, #5
 80200a2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80200a6:	ea4e 0e01 	orr.w	lr, lr, r1
 80200aa:	f8a9 e000 	strh.w	lr, [r9]
 80200ae:	e7b6      	b.n	802001e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x19e>
 80200b0:	9b03      	ldr	r3, [sp, #12]
 80200b2:	9a01      	ldr	r2, [sp, #4]
 80200b4:	881b      	ldrh	r3, [r3, #0]
 80200b6:	1bdb      	subs	r3, r3, r7
 80200b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80200bc:	4418      	add	r0, r3
 80200be:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80200c2:	1bdb      	subs	r3, r3, r7
 80200c4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80200c8:	4415      	add	r5, r2
 80200ca:	9a02      	ldr	r2, [sp, #8]
 80200cc:	4413      	add	r3, r2
 80200ce:	441c      	add	r4, r3
 80200d0:	f10b 0b01 	add.w	fp, fp, #1
 80200d4:	e792      	b.n	801fffc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x17c>
 80200d6:	4b04      	ldr	r3, [pc, #16]	; (80200e8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x268>)
 80200d8:	6818      	ldr	r0, [r3, #0]
 80200da:	6803      	ldr	r3, [r0, #0]
 80200dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200de:	4798      	blx	r3
 80200e0:	b009      	add	sp, #36	; 0x24
 80200e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80200e6:	bf00      	nop
 80200e8:	2001a8ac 	.word	0x2001a8ac
 80200ec:	2001a8a6 	.word	0x2001a8a6

080200f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80200f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200f4:	b089      	sub	sp, #36	; 0x24
 80200f6:	4682      	mov	sl, r0
 80200f8:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80200fc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80200fe:	460d      	mov	r5, r1
 8020100:	4691      	mov	r9, r2
 8020102:	4698      	mov	r8, r3
 8020104:	b3ae      	cbz	r6, 8020172 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8020106:	4608      	mov	r0, r1
 8020108:	f7fc ff40 	bl	801cf8c <_ZNK8touchgfx6Bitmap8getWidthEv>
 802010c:	4607      	mov	r7, r0
 802010e:	4628      	mov	r0, r5
 8020110:	f7fc ff76 	bl	801d000 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020114:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020118:	4628      	mov	r0, r5
 802011a:	f8ad 9008 	strh.w	r9, [sp, #8]
 802011e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020122:	f8ad 700c 	strh.w	r7, [sp, #12]
 8020126:	f7fd f8bb 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802012a:	b178      	cbz	r0, 802014c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 802012c:	4628      	mov	r0, r5
 802012e:	f7fd f8b7 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020132:	2802      	cmp	r0, #2
 8020134:	d00a      	beq.n	802014c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020136:	4628      	mov	r0, r5
 8020138:	f7fd f8b2 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802013c:	280b      	cmp	r0, #11
 802013e:	d005      	beq.n	802014c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8020140:	4b6a      	ldr	r3, [pc, #424]	; (80202ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1fc>)
 8020142:	4a6b      	ldr	r2, [pc, #428]	; (80202f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x200>)
 8020144:	486b      	ldr	r0, [pc, #428]	; (80202f4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>)
 8020146:	212e      	movs	r1, #46	; 0x2e
 8020148:	f000 fc58 	bl	80209fc <__assert_func>
 802014c:	4628      	mov	r0, r5
 802014e:	f7fd f825 	bl	801d19c <_ZNK8touchgfx6Bitmap7getDataEv>
 8020152:	4607      	mov	r7, r0
 8020154:	4628      	mov	r0, r5
 8020156:	f7fd f851 	bl	801d1fc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 802015a:	4681      	mov	r9, r0
 802015c:	4628      	mov	r0, r5
 802015e:	f7fd f89f 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020162:	2802      	cmp	r0, #2
 8020164:	d108      	bne.n	8020178 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8020166:	4633      	mov	r3, r6
 8020168:	4622      	mov	r2, r4
 802016a:	a902      	add	r1, sp, #8
 802016c:	4638      	mov	r0, r7
 802016e:	f7ff fa45 	bl	801f5fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8020172:	b009      	add	sp, #36	; 0x24
 8020174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020178:	4628      	mov	r0, r5
 802017a:	f7fd f891 	bl	801d2a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 802017e:	280b      	cmp	r0, #11
 8020180:	d107      	bne.n	8020192 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xa2>
 8020182:	9600      	str	r6, [sp, #0]
 8020184:	4623      	mov	r3, r4
 8020186:	aa02      	add	r2, sp, #8
 8020188:	4649      	mov	r1, r9
 802018a:	4638      	mov	r0, r7
 802018c:	f7ff fe60 	bl	801fe50 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020190:	e7ef      	b.n	8020172 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 8020192:	4628      	mov	r0, r5
 8020194:	f7fc ffc8 	bl	801d128 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020198:	b950      	cbnz	r0, 80201b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 802019a:	f8da 3000 	ldr.w	r3, [sl]
 802019e:	9001      	str	r0, [sp, #4]
 80201a0:	9600      	str	r6, [sp, #0]
 80201a2:	691d      	ldr	r5, [r3, #16]
 80201a4:	aa02      	add	r2, sp, #8
 80201a6:	4623      	mov	r3, r4
 80201a8:	4639      	mov	r1, r7
 80201aa:	4650      	mov	r0, sl
 80201ac:	47a8      	blx	r5
 80201ae:	e7e0      	b.n	8020172 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80201b0:	f10d 0818 	add.w	r8, sp, #24
 80201b4:	4629      	mov	r1, r5
 80201b6:	4640      	mov	r0, r8
 80201b8:	f7fc ff5c 	bl	801d074 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80201bc:	e898 0003 	ldmia.w	r8, {r0, r1}
 80201c0:	ad04      	add	r5, sp, #16
 80201c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80201c6:	4621      	mov	r1, r4
 80201c8:	4628      	mov	r0, r5
 80201ca:	f7e9 fc19 	bl	8009a00 <_ZN8touchgfx4RectaNERKS0_>
 80201ce:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80201d2:	b113      	cbz	r3, 80201da <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xea>
 80201d4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80201d8:	b913      	cbnz	r3, 80201e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf0>
 80201da:	9600      	str	r6, [sp, #0]
 80201dc:	4623      	mov	r3, r4
 80201de:	e07f      	b.n	80202e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1f0>
 80201e0:	f8da 3000 	ldr.w	r3, [sl]
 80201e4:	9600      	str	r6, [sp, #0]
 80201e6:	2200      	movs	r2, #0
 80201e8:	9201      	str	r2, [sp, #4]
 80201ea:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80201ee:	aa02      	add	r2, sp, #8
 80201f0:	462b      	mov	r3, r5
 80201f2:	4639      	mov	r1, r7
 80201f4:	4650      	mov	r0, sl
 80201f6:	47d8      	blx	fp
 80201f8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80201fc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8020200:	4293      	cmp	r3, r2
 8020202:	dd13      	ble.n	802022c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13c>
 8020204:	f9b4 0000 	ldrsh.w	r0, [r4]
 8020208:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802020c:	f8ad 0018 	strh.w	r0, [sp, #24]
 8020210:	1a9b      	subs	r3, r3, r2
 8020212:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020216:	f8ad 101c 	strh.w	r1, [sp, #28]
 802021a:	f8ad 301e 	strh.w	r3, [sp, #30]
 802021e:	9600      	str	r6, [sp, #0]
 8020220:	4643      	mov	r3, r8
 8020222:	aa02      	add	r2, sp, #8
 8020224:	4649      	mov	r1, r9
 8020226:	4638      	mov	r0, r7
 8020228:	f7ff fe2a 	bl	801fe80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 802022c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8020230:	f9b4 2000 	ldrsh.w	r2, [r4]
 8020234:	4293      	cmp	r3, r2
 8020236:	dd13      	ble.n	8020260 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x170>
 8020238:	1a9b      	subs	r3, r3, r2
 802023a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 802023e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8020242:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020246:	f8ad 001a 	strh.w	r0, [sp, #26]
 802024a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802024e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8020252:	9600      	str	r6, [sp, #0]
 8020254:	4643      	mov	r3, r8
 8020256:	aa02      	add	r2, sp, #8
 8020258:	4649      	mov	r1, r9
 802025a:	4638      	mov	r0, r7
 802025c:	f7ff fe10 	bl	801fe80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8020260:	88a2      	ldrh	r2, [r4, #4]
 8020262:	8823      	ldrh	r3, [r4, #0]
 8020264:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8020268:	4413      	add	r3, r2
 802026a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 802026e:	440a      	add	r2, r1
 8020270:	b29b      	uxth	r3, r3
 8020272:	b292      	uxth	r2, r2
 8020274:	b211      	sxth	r1, r2
 8020276:	b218      	sxth	r0, r3
 8020278:	4288      	cmp	r0, r1
 802027a:	dd13      	ble.n	80202a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1b4>
 802027c:	1a9b      	subs	r3, r3, r2
 802027e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8020282:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 8020286:	f8ad 1018 	strh.w	r1, [sp, #24]
 802028a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802028e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8020292:	9600      	str	r6, [sp, #0]
 8020294:	4643      	mov	r3, r8
 8020296:	aa02      	add	r2, sp, #8
 8020298:	4649      	mov	r1, r9
 802029a:	4638      	mov	r0, r7
 802029c:	f8ad 501a 	strh.w	r5, [sp, #26]
 80202a0:	f7ff fdee 	bl	801fe80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80202a4:	88e2      	ldrh	r2, [r4, #6]
 80202a6:	8863      	ldrh	r3, [r4, #2]
 80202a8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80202ac:	4413      	add	r3, r2
 80202ae:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80202b2:	440a      	add	r2, r1
 80202b4:	b29b      	uxth	r3, r3
 80202b6:	b292      	uxth	r2, r2
 80202b8:	b211      	sxth	r1, r2
 80202ba:	b218      	sxth	r0, r3
 80202bc:	4288      	cmp	r0, r1
 80202be:	f77f af58 	ble.w	8020172 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80202c2:	f9b4 5000 	ldrsh.w	r5, [r4]
 80202c6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80202ca:	f8ad 5018 	strh.w	r5, [sp, #24]
 80202ce:	1a9b      	subs	r3, r3, r2
 80202d0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80202d4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80202d8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80202dc:	9600      	str	r6, [sp, #0]
 80202de:	4643      	mov	r3, r8
 80202e0:	aa02      	add	r2, sp, #8
 80202e2:	4649      	mov	r1, r9
 80202e4:	4638      	mov	r0, r7
 80202e6:	f7ff fdcb 	bl	801fe80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80202ea:	e742      	b.n	8020172 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x82>
 80202ec:	08025cc3 	.word	0x08025cc3
 80202f0:	0802618a 	.word	0x0802618a
 80202f4:	08025e6d 	.word	0x08025e6d

080202f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80202f8:	b508      	push	{r3, lr}
 80202fa:	b180      	cbz	r0, 802031e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x26>
 80202fc:	2902      	cmp	r1, #2
 80202fe:	d014      	beq.n	802032a <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x32>
 8020300:	2903      	cmp	r1, #3
 8020302:	d019      	beq.n	8020338 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020304:	2901      	cmp	r1, #1
 8020306:	d101      	bne.n	802030c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8020308:	2001      	movs	r0, #1
 802030a:	bd08      	pop	{r3, pc}
 802030c:	4b0e      	ldr	r3, [pc, #56]	; (8020348 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802030e:	8818      	ldrh	r0, [r3, #0]
 8020310:	b9a8      	cbnz	r0, 802033e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x46>
 8020312:	4b0e      	ldr	r3, [pc, #56]	; (802034c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x54>)
 8020314:	4a0e      	ldr	r2, [pc, #56]	; (8020350 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x58>)
 8020316:	480f      	ldr	r0, [pc, #60]	; (8020354 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x5c>)
 8020318:	21d5      	movs	r1, #213	; 0xd5
 802031a:	f000 fb6f 	bl	80209fc <__assert_func>
 802031e:	2902      	cmp	r1, #2
 8020320:	d00a      	beq.n	8020338 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8020322:	2903      	cmp	r1, #3
 8020324:	d0f2      	beq.n	802030c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x14>
 8020326:	2901      	cmp	r1, #1
 8020328:	d1ee      	bne.n	8020308 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x10>
 802032a:	4b07      	ldr	r3, [pc, #28]	; (8020348 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 802032c:	8818      	ldrh	r0, [r3, #0]
 802032e:	2800      	cmp	r0, #0
 8020330:	d0ef      	beq.n	8020312 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1a>
 8020332:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020336:	bd08      	pop	{r3, pc}
 8020338:	f04f 30ff 	mov.w	r0, #4294967295
 802033c:	bd08      	pop	{r3, pc}
 802033e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020342:	4240      	negs	r0, r0
 8020344:	bd08      	pop	{r3, pc}
 8020346:	bf00      	nop
 8020348:	2001a8a6 	.word	0x2001a8a6
 802034c:	08025fb6 	.word	0x08025fb6
 8020350:	08026299 	.word	0x08026299
 8020354:	08025ff8 	.word	0x08025ff8

08020358 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8020358:	b508      	push	{r3, lr}
 802035a:	b170      	cbz	r0, 802037a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x22>
 802035c:	2902      	cmp	r1, #2
 802035e:	d012      	beq.n	8020386 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 8020360:	2903      	cmp	r1, #3
 8020362:	d016      	beq.n	8020392 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3a>
 8020364:	2901      	cmp	r1, #1
 8020366:	d11c      	bne.n	80203a2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x4a>
 8020368:	4b0f      	ldr	r3, [pc, #60]	; (80203a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802036a:	8818      	ldrh	r0, [r3, #0]
 802036c:	b970      	cbnz	r0, 802038c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>
 802036e:	4b0f      	ldr	r3, [pc, #60]	; (80203ac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x54>)
 8020370:	4a0f      	ldr	r2, [pc, #60]	; (80203b0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x58>)
 8020372:	4810      	ldr	r0, [pc, #64]	; (80203b4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x5c>)
 8020374:	21d5      	movs	r1, #213	; 0xd5
 8020376:	f000 fb41 	bl	80209fc <__assert_func>
 802037a:	2902      	cmp	r1, #2
 802037c:	d009      	beq.n	8020392 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x3a>
 802037e:	2903      	cmp	r1, #3
 8020380:	d00f      	beq.n	80203a2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x4a>
 8020382:	2901      	cmp	r1, #1
 8020384:	d1f0      	bne.n	8020368 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x10>
 8020386:	f04f 30ff 	mov.w	r0, #4294967295
 802038a:	bd08      	pop	{r3, pc}
 802038c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8020390:	bd08      	pop	{r3, pc}
 8020392:	4b05      	ldr	r3, [pc, #20]	; (80203a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8020394:	8818      	ldrh	r0, [r3, #0]
 8020396:	2800      	cmp	r0, #0
 8020398:	d0e9      	beq.n	802036e <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x16>
 802039a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 802039e:	4240      	negs	r0, r0
 80203a0:	bd08      	pop	{r3, pc}
 80203a2:	2001      	movs	r0, #1
 80203a4:	bd08      	pop	{r3, pc}
 80203a6:	bf00      	nop
 80203a8:	2001a8a6 	.word	0x2001a8a6
 80203ac:	08025fb6 	.word	0x08025fb6
 80203b0:	08026299 	.word	0x08026299
 80203b4:	08025ff8 	.word	0x08025ff8

080203b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80203b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203bc:	b097      	sub	sp, #92	; 0x5c
 80203be:	910b      	str	r1, [sp, #44]	; 0x2c
 80203c0:	a912      	add	r1, sp, #72	; 0x48
 80203c2:	e881 000c 	stmia.w	r1, {r2, r3}
 80203c6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80203c8:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
 80203cc:	7b56      	ldrb	r6, [r2, #13]
 80203ce:	9110      	str	r1, [sp, #64]	; 0x40
 80203d0:	f89d 10a8 	ldrb.w	r1, [sp, #168]	; 0xa8
 80203d4:	910c      	str	r1, [sp, #48]	; 0x30
 80203d6:	f016 0f08 	tst.w	r6, #8
 80203da:	7991      	ldrb	r1, [r2, #6]
 80203dc:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80203e0:	9308      	str	r3, [sp, #32]
 80203e2:	bf14      	ite	ne
 80203e4:	f44f 7080 	movne.w	r0, #256	; 0x100
 80203e8:	2000      	moveq	r0, #0
 80203ea:	f016 0f10 	tst.w	r6, #16
 80203ee:	bf14      	ite	ne
 80203f0:	f44f 7680 	movne.w	r6, #256	; 0x100
 80203f4:	2600      	moveq	r6, #0
 80203f6:	4301      	orrs	r1, r0
 80203f8:	f9bd 9080 	ldrsh.w	r9, [sp, #128]	; 0x80
 80203fc:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8020400:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8020404:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020406:	f89d 50a4 	ldrb.w	r5, [sp, #164]	; 0xa4
 802040a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 802040e:	910a      	str	r1, [sp, #40]	; 0x28
 8020410:	f000 814d 	beq.w	80206ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 8020414:	79d1      	ldrb	r1, [r2, #7]
 8020416:	430e      	orrs	r6, r1
 8020418:	f000 8149 	beq.w	80206ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802041c:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8020420:	2f00      	cmp	r7, #0
 8020422:	f000 80ec 	beq.w	80205fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x246>
 8020426:	1a79      	subs	r1, r7, r1
 8020428:	b28f      	uxth	r7, r1
 802042a:	043a      	lsls	r2, r7, #16
 802042c:	d504      	bpl.n	8020438 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 802042e:	eba9 0707 	sub.w	r7, r9, r7
 8020432:	fa0f f987 	sxth.w	r9, r7
 8020436:	2700      	movs	r7, #0
 8020438:	f9b3 0000 	ldrsh.w	r0, [r3]
 802043c:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8020440:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
 8020444:	4581      	cmp	r9, r0
 8020446:	b282      	uxth	r2, r0
 8020448:	bfbe      	ittt	lt
 802044a:	18b9      	addlt	r1, r7, r2
 802044c:	eba1 0109 	sublt.w	r1, r1, r9
 8020450:	b28f      	uxthlt	r7, r1
 8020452:	8899      	ldrh	r1, [r3, #4]
 8020454:	88db      	ldrh	r3, [r3, #6]
 8020456:	449c      	add	ip, r3
 8020458:	fa0f f38c 	sxth.w	r3, ip
 802045c:	930e      	str	r3, [sp, #56]	; 0x38
 802045e:	b2b3      	uxth	r3, r6
 8020460:	9307      	str	r3, [sp, #28]
 8020462:	4bbc      	ldr	r3, [pc, #752]	; (8020754 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8020464:	f893 a000 	ldrb.w	sl, [r3]
 8020468:	f10a 3eff 	add.w	lr, sl, #4294967295
 802046c:	bfb8      	it	lt
 802046e:	4681      	movlt	r9, r0
 8020470:	440a      	add	r2, r1
 8020472:	f1de 0300 	rsbs	r3, lr, #0
 8020476:	eb43 030e 	adc.w	r3, r3, lr
 802047a:	b212      	sxth	r2, r2
 802047c:	920f      	str	r2, [sp, #60]	; 0x3c
 802047e:	930d      	str	r3, [sp, #52]	; 0x34
 8020480:	9a08      	ldr	r2, [sp, #32]
 8020482:	465b      	mov	r3, fp
 8020484:	4649      	mov	r1, r9
 8020486:	a812      	add	r0, sp, #72	; 0x48
 8020488:	f7fa f8fe 	bl	801a688 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 802048c:	4649      	mov	r1, r9
 802048e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8020492:	465b      	mov	r3, fp
 8020494:	9a08      	ldr	r2, [sp, #32]
 8020496:	a812      	add	r0, sp, #72	; 0x48
 8020498:	f7fa f911 	bl	801a6be <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 802049c:	a916      	add	r1, sp, #88	; 0x58
 802049e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80204a2:	a815      	add	r0, sp, #84	; 0x54
 80204a4:	f7fa f9ce 	bl	801a844 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80204a8:	f1bb 0f00 	cmp.w	fp, #0
 80204ac:	f040 80ab 	bne.w	8020606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24e>
 80204b0:	f1ba 0f01 	cmp.w	sl, #1
 80204b4:	f040 80af 	bne.w	8020616 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x25e>
 80204b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204ba:	2b00      	cmp	r3, #0
 80204bc:	f040 80fc 	bne.w	80206b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 80204c0:	4ba5      	ldr	r3, [pc, #660]	; (8020758 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80204c2:	6818      	ldr	r0, [r3, #0]
 80204c4:	6803      	ldr	r3, [r0, #0]
 80204c6:	6a1b      	ldr	r3, [r3, #32]
 80204c8:	4798      	blx	r3
 80204ca:	4aa4      	ldr	r2, [pc, #656]	; (802075c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 80204cc:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80204d0:	8811      	ldrh	r1, [r2, #0]
 80204d2:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80204d6:	fb01 2303 	mla	r3, r1, r3, r2
 80204da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80204de:	2601      	movs	r6, #1
 80204e0:	9309      	str	r3, [sp, #36]	; 0x24
 80204e2:	fa06 f305 	lsl.w	r3, r6, r5
 80204e6:	3b01      	subs	r3, #1
 80204e8:	b2db      	uxtb	r3, r3
 80204ea:	42b5      	cmp	r5, r6
 80204ec:	9311      	str	r3, [sp, #68]	; 0x44
 80204ee:	f000 80e5 	beq.w	80206bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 80204f2:	2d02      	cmp	r5, #2
 80204f4:	f000 8161 	beq.w	80207ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x402>
 80204f8:	2d04      	cmp	r5, #4
 80204fa:	f000 8153 	beq.w	80207a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>
 80204fe:	b907      	cbnz	r7, 8020502 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x14a>
 8020500:	b184      	cbz	r4, 8020524 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x16c>
 8020502:	fb18 7304 	smlabb	r3, r8, r4, r7
 8020506:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8020508:	fb13 f305 	smulbb	r3, r3, r5
 802050c:	b29b      	uxth	r3, r3
 802050e:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8020512:	9226      	str	r2, [sp, #152]	; 0x98
 8020514:	9a07      	ldr	r2, [sp, #28]
 8020516:	eba2 0c04 	sub.w	ip, r2, r4
 802051a:	fa1f f28c 	uxth.w	r2, ip
 802051e:	9207      	str	r2, [sp, #28]
 8020520:	f003 0407 	and.w	r4, r3, #7
 8020524:	4659      	mov	r1, fp
 8020526:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020528:	f7ff fee6 	bl	80202f8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 802052c:	4659      	mov	r1, fp
 802052e:	4682      	mov	sl, r0
 8020530:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020532:	f7ff ff11 	bl	8020358 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8020536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020538:	9a08      	ldr	r2, [sp, #32]
 802053a:	eba3 0c02 	sub.w	ip, r3, r2
 802053e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020540:	eba9 0107 	sub.w	r1, r9, r7
 8020544:	1a59      	subs	r1, r3, r1
 8020546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020548:	4299      	cmp	r1, r3
 802054a:	bfd4      	ite	le
 802054c:	ebc7 0101 	rsble	r1, r7, r1
 8020550:	ebc7 0103 	rsbgt	r1, r7, r3
 8020554:	eba8 0801 	sub.w	r8, r8, r1
 8020558:	fb05 f308 	mul.w	r3, r5, r8
 802055c:	9308      	str	r3, [sp, #32]
 802055e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020560:	781a      	ldrb	r2, [r3, #0]
 8020562:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020564:	121b      	asrs	r3, r3, #8
 8020566:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802056a:	930d      	str	r3, [sp, #52]	; 0x34
 802056c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802056e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8020572:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020576:	930e      	str	r3, [sp, #56]	; 0x38
 8020578:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802057a:	00db      	lsls	r3, r3, #3
 802057c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8020580:	fb0a 0011 	mls	r0, sl, r1, r0
 8020584:	930f      	str	r3, [sp, #60]	; 0x3c
 8020586:	ea4f 034a 	mov.w	r3, sl, lsl #1
 802058a:	ea21 7ae1 	bic.w	sl, r1, r1, asr #31
 802058e:	fb03 fa0a 	mul.w	sl, r3, sl
 8020592:	930a      	str	r3, [sp, #40]	; 0x28
 8020594:	9b07      	ldr	r3, [sp, #28]
 8020596:	459c      	cmp	ip, r3
 8020598:	bfa8      	it	ge
 802059a:	469c      	movge	ip, r3
 802059c:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 80205a0:	9307      	str	r3, [sp, #28]
 80205a2:	4122      	asrs	r2, r4
 80205a4:	eb0a 0340 	add.w	r3, sl, r0, lsl #1
 80205a8:	b2d2      	uxtb	r2, r2
 80205aa:	9310      	str	r3, [sp, #64]	; 0x40
 80205ac:	f1bc 0f00 	cmp.w	ip, #0
 80205b0:	f340 80ea 	ble.w	8020788 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d0>
 80205b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80205b8:	468a      	mov	sl, r1
 80205ba:	f1ba 0f00 	cmp.w	sl, #0
 80205be:	f340 80cf 	ble.w	8020760 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>
 80205c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80205c4:	4013      	ands	r3, r2
 80205c6:	d009      	beq.n	80205dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x224>
 80205c8:	fb13 f306 	smulbb	r3, r3, r6
 80205cc:	2bfe      	cmp	r3, #254	; 0xfe
 80205ce:	dd77      	ble.n	80206c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 80205d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80205d2:	28ff      	cmp	r0, #255	; 0xff
 80205d4:	d174      	bne.n	80206c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x308>
 80205d6:	9f07      	ldr	r7, [sp, #28]
 80205d8:	f8a9 7000 	strh.w	r7, [r9]
 80205dc:	442c      	add	r4, r5
 80205de:	b2a4      	uxth	r4, r4
 80205e0:	2c07      	cmp	r4, #7
 80205e2:	bf81      	itttt	hi
 80205e4:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80205e6:	785a      	ldrbhi	r2, [r3, #1]
 80205e8:	3301      	addhi	r3, #1
 80205ea:	9326      	strhi	r3, [sp, #152]	; 0x98
 80205ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205ee:	bf9a      	itte	ls
 80205f0:	412a      	asrls	r2, r5
 80205f2:	b2d2      	uxtbls	r2, r2
 80205f4:	2400      	movhi	r4, #0
 80205f6:	4499      	add	r9, r3
 80205f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80205fc:	e7dd      	b.n	80205ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x202>
 80205fe:	4489      	add	r9, r1
 8020600:	fa0f f989 	sxth.w	r9, r9
 8020604:	e718      	b.n	8020438 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x80>
 8020606:	f1bb 0f01 	cmp.w	fp, #1
 802060a:	f47f af55 	bne.w	80204b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802060e:	f1ba 0f01 	cmp.w	sl, #1
 8020612:	f47f af51 	bne.w	80204b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 8020616:	f8df a140 	ldr.w	sl, [pc, #320]	; 8020758 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 802061a:	f8da 0000 	ldr.w	r0, [sl]
 802061e:	6803      	ldr	r3, [r0, #0]
 8020620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020622:	4798      	blx	r3
 8020624:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8020628:	4652      	mov	r2, sl
 802062a:	d005      	beq.n	8020638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x280>
 802062c:	2d04      	cmp	r5, #4
 802062e:	d141      	bne.n	80206b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2fc>
 8020630:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020632:	3300      	adds	r3, #0
 8020634:	bf18      	it	ne
 8020636:	2301      	movne	r3, #1
 8020638:	05c0      	lsls	r0, r0, #23
 802063a:	f140 80ae 	bpl.w	802079a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e2>
 802063e:	2d08      	cmp	r5, #8
 8020640:	f040 80ab 	bne.w	802079a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e2>
 8020644:	2b00      	cmp	r3, #0
 8020646:	bf14      	ite	ne
 8020648:	2180      	movne	r1, #128	; 0x80
 802064a:	f44f 7180 	moveq.w	r1, #256	; 0x100
 802064e:	2f00      	cmp	r7, #0
 8020650:	f47f af32 	bne.w	80204b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 8020654:	2c00      	cmp	r4, #0
 8020656:	f47f af2f 	bne.w	80204b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 802065a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802065c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802065e:	444b      	add	r3, r9
 8020660:	4298      	cmp	r0, r3
 8020662:	f6ff af29 	blt.w	80204b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 8020666:	9b08      	ldr	r3, [sp, #32]
 8020668:	441e      	add	r6, r3
 802066a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802066c:	42b3      	cmp	r3, r6
 802066e:	f6ff af23 	blt.w	80204b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 8020672:	6810      	ldr	r0, [r2, #0]
 8020674:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8020678:	6804      	ldr	r4, [r0, #0]
 802067a:	9105      	str	r1, [sp, #20]
 802067c:	2d08      	cmp	r5, #8
 802067e:	bf18      	it	ne
 8020680:	f108 0801 	addne.w	r8, r8, #1
 8020684:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020686:	9104      	str	r1, [sp, #16]
 8020688:	bf18      	it	ne
 802068a:	f028 0801 	bicne.w	r8, r8, #1
 802068e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8020690:	9103      	str	r1, [sp, #12]
 8020692:	bf18      	it	ne
 8020694:	fa1f f888 	uxthne.w	r8, r8
 8020698:	9907      	ldr	r1, [sp, #28]
 802069a:	9101      	str	r1, [sp, #4]
 802069c:	f8cd 8008 	str.w	r8, [sp, #8]
 80206a0:	f8cd 8000 	str.w	r8, [sp]
 80206a4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80206a8:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
 80206aa:	9926      	ldr	r1, [sp, #152]	; 0x98
 80206ac:	47a0      	blx	r4
 80206ae:	b017      	add	sp, #92	; 0x5c
 80206b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206b4:	2300      	movs	r3, #0
 80206b6:	e7bf      	b.n	8020638 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x280>
 80206b8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80206ba:	e706      	b.n	80204ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x112>
 80206bc:	26ff      	movs	r6, #255	; 0xff
 80206be:	e71e      	b.n	80204fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x146>
 80206c0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80206c4:	f8b9 e000 	ldrh.w	lr, [r9]
 80206c8:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 80206cc:	fb10 f303 	smulbb	r3, r0, r3
 80206d0:	b29b      	uxth	r3, r3
 80206d2:	1c58      	adds	r0, r3, #1
 80206d4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80206d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80206dc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80206e0:	fa1f f883 	uxth.w	r8, r3
 80206e4:	ea4f 272e 	mov.w	r7, lr, asr #8
 80206e8:	43db      	mvns	r3, r3
 80206ea:	b2db      	uxtb	r3, r3
 80206ec:	fb10 f008 	smulbb	r0, r0, r8
 80206f0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80206f4:	fb07 0703 	mla	r7, r7, r3, r0
 80206f8:	ea4f 00ee 	mov.w	r0, lr, asr #3
 80206fc:	fb18 fb0b 	smulbb	fp, r8, fp
 8020700:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020704:	fb00 b003 	mla	r0, r0, r3, fp
 8020708:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 802070c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020710:	fb18 f80b 	smulbb	r8, r8, fp
 8020714:	fa5f fe8e 	uxtb.w	lr, lr
 8020718:	fb0e 8803 	mla	r8, lr, r3, r8
 802071c:	b2bf      	uxth	r7, r7
 802071e:	fa1f f888 	uxth.w	r8, r8
 8020722:	1c7b      	adds	r3, r7, #1
 8020724:	f108 0b01 	add.w	fp, r8, #1
 8020728:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802072c:	eb0b 2b18 	add.w	fp, fp, r8, lsr #8
 8020730:	b280      	uxth	r0, r0
 8020732:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8020736:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802073a:	ea47 070b 	orr.w	r7, r7, fp
 802073e:	f100 0b01 	add.w	fp, r0, #1
 8020742:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8020746:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 802074a:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802074e:	ea47 070b 	orr.w	r7, r7, fp
 8020752:	e741      	b.n	80205d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 8020754:	2001a8a4 	.word	0x2001a8a4
 8020758:	2001a8ac 	.word	0x2001a8ac
 802075c:	2001a8a6 	.word	0x2001a8a6
 8020760:	9b08      	ldr	r3, [sp, #32]
 8020762:	b153      	cbz	r3, 802077a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c2>
 8020764:	441c      	add	r4, r3
 8020766:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8020768:	b2a4      	uxth	r4, r4
 802076a:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802076e:	f004 0407 	and.w	r4, r4, #7
 8020772:	781a      	ldrb	r2, [r3, #0]
 8020774:	9326      	str	r3, [sp, #152]	; 0x98
 8020776:	4122      	asrs	r2, r4
 8020778:	b2d2      	uxtb	r2, r2
 802077a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802077c:	9810      	ldr	r0, [sp, #64]	; 0x40
 802077e:	4403      	add	r3, r0
 8020780:	9309      	str	r3, [sp, #36]	; 0x24
 8020782:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020786:	e711      	b.n	80205ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 8020788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802078a:	2b00      	cmp	r3, #0
 802078c:	d18f      	bne.n	80206ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802078e:	4b0c      	ldr	r3, [pc, #48]	; (80207c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x408>)
 8020790:	6818      	ldr	r0, [r3, #0]
 8020792:	6803      	ldr	r3, [r0, #0]
 8020794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020796:	4798      	blx	r3
 8020798:	e789      	b.n	80206ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2f6>
 802079a:	2b00      	cmp	r3, #0
 802079c:	f43f ae8c 	beq.w	80204b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x100>
 80207a0:	2180      	movs	r1, #128	; 0x80
 80207a2:	e754      	b.n	802064e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x296>
 80207a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80207a6:	b133      	cbz	r3, 80207b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fe>
 80207a8:	f018 0f01 	tst.w	r8, #1
 80207ac:	d003      	beq.n	80207b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3fe>
 80207ae:	f108 0801 	add.w	r8, r8, #1
 80207b2:	fa1f f888 	uxth.w	r8, r8
 80207b6:	2611      	movs	r6, #17
 80207b8:	e6a1      	b.n	80204fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x146>
 80207ba:	2655      	movs	r6, #85	; 0x55
 80207bc:	e69f      	b.n	80204fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x146>
 80207be:	bf00      	nop
 80207c0:	2001a8ac 	.word	0x2001a8ac

080207c4 <CRC_Lock>:
 80207c4:	b530      	push	{r4, r5, lr}
 80207c6:	4a1f      	ldr	r2, [pc, #124]	; (8020844 <CRC_Lock+0x80>)
 80207c8:	6813      	ldr	r3, [r2, #0]
 80207ca:	f023 0301 	bic.w	r3, r3, #1
 80207ce:	6013      	str	r3, [r2, #0]
 80207d0:	4b1d      	ldr	r3, [pc, #116]	; (8020848 <CRC_Lock+0x84>)
 80207d2:	681a      	ldr	r2, [r3, #0]
 80207d4:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80207d8:	4022      	ands	r2, r4
 80207da:	f24c 2540 	movw	r5, #49728	; 0xc240
 80207de:	42aa      	cmp	r2, r5
 80207e0:	d005      	beq.n	80207ee <CRC_Lock+0x2a>
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80207e8:	4023      	ands	r3, r4
 80207ea:	4293      	cmp	r3, r2
 80207ec:	d11e      	bne.n	802082c <CRC_Lock+0x68>
 80207ee:	4b17      	ldr	r3, [pc, #92]	; (802084c <CRC_Lock+0x88>)
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	b9db      	cbnz	r3, 802082c <CRC_Lock+0x68>
 80207f4:	4a16      	ldr	r2, [pc, #88]	; (8020850 <CRC_Lock+0x8c>)
 80207f6:	6813      	ldr	r3, [r2, #0]
 80207f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80207fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8020800:	d006      	beq.n	8020810 <CRC_Lock+0x4c>
 8020802:	6813      	ldr	r3, [r2, #0]
 8020804:	f240 4283 	movw	r2, #1155	; 0x483
 8020808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802080c:	4293      	cmp	r3, r2
 802080e:	d10d      	bne.n	802082c <CRC_Lock+0x68>
 8020810:	4b10      	ldr	r3, [pc, #64]	; (8020854 <CRC_Lock+0x90>)
 8020812:	2201      	movs	r2, #1
 8020814:	601a      	str	r2, [r3, #0]
 8020816:	681a      	ldr	r2, [r3, #0]
 8020818:	2a00      	cmp	r2, #0
 802081a:	d1fc      	bne.n	8020816 <CRC_Lock+0x52>
 802081c:	4b0e      	ldr	r3, [pc, #56]	; (8020858 <CRC_Lock+0x94>)
 802081e:	6018      	str	r0, [r3, #0]
 8020820:	6818      	ldr	r0, [r3, #0]
 8020822:	4288      	cmp	r0, r1
 8020824:	bf14      	ite	ne
 8020826:	2000      	movne	r0, #0
 8020828:	2001      	moveq	r0, #1
 802082a:	bd30      	pop	{r4, r5, pc}
 802082c:	4b0b      	ldr	r3, [pc, #44]	; (802085c <CRC_Lock+0x98>)
 802082e:	2201      	movs	r2, #1
 8020830:	601a      	str	r2, [r3, #0]
 8020832:	681a      	ldr	r2, [r3, #0]
 8020834:	2a00      	cmp	r2, #0
 8020836:	d1fc      	bne.n	8020832 <CRC_Lock+0x6e>
 8020838:	4b09      	ldr	r3, [pc, #36]	; (8020860 <CRC_Lock+0x9c>)
 802083a:	6018      	str	r0, [r3, #0]
 802083c:	6818      	ldr	r0, [r3, #0]
 802083e:	4281      	cmp	r1, r0
 8020840:	e7f0      	b.n	8020824 <CRC_Lock+0x60>
 8020842:	bf00      	nop
 8020844:	e0002000 	.word	0xe0002000
 8020848:	e000ed00 	.word	0xe000ed00
 802084c:	e0042000 	.word	0xe0042000
 8020850:	5c001000 	.word	0x5c001000
 8020854:	58024c08 	.word	0x58024c08
 8020858:	58024c00 	.word	0x58024c00
 802085c:	40023008 	.word	0x40023008
 8020860:	40023000 	.word	0x40023000

08020864 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020864:	6101      	str	r1, [r0, #16]
 8020866:	4770      	bx	lr

08020868 <_ZN8touchgfx8Gestures4tickEv>:
 8020868:	7b83      	ldrb	r3, [r0, #14]
 802086a:	b14b      	cbz	r3, 8020880 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802086c:	8903      	ldrh	r3, [r0, #8]
 802086e:	3301      	adds	r3, #1
 8020870:	b29b      	uxth	r3, r3
 8020872:	2b07      	cmp	r3, #7
 8020874:	8103      	strh	r3, [r0, #8]
 8020876:	bf81      	itttt	hi
 8020878:	2300      	movhi	r3, #0
 802087a:	8143      	strhhi	r3, [r0, #10]
 802087c:	8183      	strhhi	r3, [r0, #12]
 802087e:	7383      	strbhi	r3, [r0, #14]
 8020880:	4770      	bx	lr
	...

08020884 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020884:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020888:	4604      	mov	r4, r0
 802088a:	8880      	ldrh	r0, [r0, #4]
 802088c:	f8ad 0006 	strh.w	r0, [sp, #6]
 8020890:	4698      	mov	r8, r3
 8020892:	eba8 0000 	sub.w	r0, r8, r0
 8020896:	4b1c      	ldr	r3, [pc, #112]	; (8020908 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8020898:	9300      	str	r3, [sp, #0]
 802089a:	b280      	uxth	r0, r0
 802089c:	2300      	movs	r3, #0
 802089e:	f88d 3004 	strb.w	r3, [sp, #4]
 80208a2:	b203      	sxth	r3, r0
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	bfb8      	it	lt
 80208a8:	4240      	neglt	r0, r0
 80208aa:	4617      	mov	r7, r2
 80208ac:	8aa2      	ldrh	r2, [r4, #20]
 80208ae:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80208b2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80208b6:	bfb8      	it	lt
 80208b8:	b203      	sxthlt	r3, r0
 80208ba:	460e      	mov	r6, r1
 80208bc:	4293      	cmp	r3, r2
 80208be:	88e1      	ldrh	r1, [r4, #6]
 80208c0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80208c4:	f8ad 500c 	strh.w	r5, [sp, #12]
 80208c8:	dc0c      	bgt.n	80208e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 80208ca:	1a69      	subs	r1, r5, r1
 80208cc:	b289      	uxth	r1, r1
 80208ce:	b20b      	sxth	r3, r1
 80208d0:	2b00      	cmp	r3, #0
 80208d2:	bfbc      	itt	lt
 80208d4:	4249      	neglt	r1, r1
 80208d6:	b20b      	sxthlt	r3, r1
 80208d8:	429a      	cmp	r2, r3
 80208da:	db03      	blt.n	80208e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 80208dc:	2000      	movs	r0, #0
 80208de:	b004      	add	sp, #16
 80208e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80208e4:	6920      	ldr	r0, [r4, #16]
 80208e6:	6803      	ldr	r3, [r0, #0]
 80208e8:	4669      	mov	r1, sp
 80208ea:	685b      	ldr	r3, [r3, #4]
 80208ec:	4798      	blx	r3
 80208ee:	eba8 0606 	sub.w	r6, r8, r6
 80208f2:	2300      	movs	r3, #0
 80208f4:	1bef      	subs	r7, r5, r7
 80208f6:	2001      	movs	r0, #1
 80208f8:	8123      	strh	r3, [r4, #8]
 80208fa:	8166      	strh	r6, [r4, #10]
 80208fc:	81a7      	strh	r7, [r4, #12]
 80208fe:	f8a4 8004 	strh.w	r8, [r4, #4]
 8020902:	80e5      	strh	r5, [r4, #6]
 8020904:	73a0      	strb	r0, [r4, #14]
 8020906:	e7ea      	b.n	80208de <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 8020908:	0802305c 	.word	0x0802305c

0802090c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802090c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802090e:	461e      	mov	r6, r3
 8020910:	1e4b      	subs	r3, r1, #1
 8020912:	2b01      	cmp	r3, #1
 8020914:	b085      	sub	sp, #20
 8020916:	4604      	mov	r4, r0
 8020918:	460d      	mov	r5, r1
 802091a:	4617      	mov	r7, r2
 802091c:	d845      	bhi.n	80209aa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 802091e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8020922:	1cd3      	adds	r3, r2, #3
 8020924:	b29b      	uxth	r3, r3
 8020926:	2b06      	cmp	r3, #6
 8020928:	d913      	bls.n	8020952 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 802092a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 802092e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8020932:	4820      	ldr	r0, [pc, #128]	; (80209b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 8020934:	9001      	str	r0, [sp, #4]
 8020936:	2000      	movs	r0, #0
 8020938:	f88d 0008 	strb.w	r0, [sp, #8]
 802093c:	6920      	ldr	r0, [r4, #16]
 802093e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020942:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020946:	f8ad 300e 	strh.w	r3, [sp, #14]
 802094a:	6803      	ldr	r3, [r0, #0]
 802094c:	a901      	add	r1, sp, #4
 802094e:	689b      	ldr	r3, [r3, #8]
 8020950:	4798      	blx	r3
 8020952:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020956:	1cd3      	adds	r3, r2, #3
 8020958:	b29b      	uxth	r3, r3
 802095a:	2b06      	cmp	r3, #6
 802095c:	d913      	bls.n	8020986 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802095e:	4815      	ldr	r0, [pc, #84]	; (80209b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 8020960:	9001      	str	r0, [sp, #4]
 8020962:	2001      	movs	r0, #1
 8020964:	f88d 0008 	strb.w	r0, [sp, #8]
 8020968:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802096c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020970:	6920      	ldr	r0, [r4, #16]
 8020972:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020976:	f8ad 200a 	strh.w	r2, [sp, #10]
 802097a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802097e:	6803      	ldr	r3, [r0, #0]
 8020980:	a901      	add	r1, sp, #4
 8020982:	689b      	ldr	r3, [r3, #8]
 8020984:	4798      	blx	r3
 8020986:	4b0c      	ldr	r3, [pc, #48]	; (80209b8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 8020988:	9301      	str	r3, [sp, #4]
 802098a:	6920      	ldr	r0, [r4, #16]
 802098c:	f88d 5008 	strb.w	r5, [sp, #8]
 8020990:	2300      	movs	r3, #0
 8020992:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020996:	f8ad 600c 	strh.w	r6, [sp, #12]
 802099a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802099e:	6803      	ldr	r3, [r0, #0]
 80209a0:	a901      	add	r1, sp, #4
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	4798      	blx	r3
 80209a6:	b005      	add	sp, #20
 80209a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209aa:	2900      	cmp	r1, #0
 80209ac:	d1eb      	bne.n	8020986 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 80209ae:	80a2      	strh	r2, [r4, #4]
 80209b0:	80c6      	strh	r6, [r0, #6]
 80209b2:	e7e8      	b.n	8020986 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 80209b4:	080251c4 	.word	0x080251c4
 80209b8:	08023070 	.word	0x08023070

080209bc <__cxa_pure_virtual>:
 80209bc:	b508      	push	{r3, lr}
 80209be:	f000 f811 	bl	80209e4 <_ZSt9terminatev>

080209c2 <_ZdlPvj>:
 80209c2:	f000 b800 	b.w	80209c6 <_ZdlPv>

080209c6 <_ZdlPv>:
 80209c6:	f000 b881 	b.w	8020acc <free>

080209ca <_ZN10__cxxabiv111__terminateEPFvvE>:
 80209ca:	b508      	push	{r3, lr}
 80209cc:	4780      	blx	r0
 80209ce:	f000 f80e 	bl	80209ee <abort>
	...

080209d4 <_ZSt13get_terminatev>:
 80209d4:	4b02      	ldr	r3, [pc, #8]	; (80209e0 <_ZSt13get_terminatev+0xc>)
 80209d6:	6818      	ldr	r0, [r3, #0]
 80209d8:	f3bf 8f5b 	dmb	ish
 80209dc:	4770      	bx	lr
 80209de:	bf00      	nop
 80209e0:	20000064 	.word	0x20000064

080209e4 <_ZSt9terminatev>:
 80209e4:	b508      	push	{r3, lr}
 80209e6:	f7ff fff5 	bl	80209d4 <_ZSt13get_terminatev>
 80209ea:	f7ff ffee 	bl	80209ca <_ZN10__cxxabiv111__terminateEPFvvE>

080209ee <abort>:
 80209ee:	b508      	push	{r3, lr}
 80209f0:	2006      	movs	r0, #6
 80209f2:	f000 fc2f 	bl	8021254 <raise>
 80209f6:	2001      	movs	r0, #1
 80209f8:	f7e1 fcaa 	bl	8002350 <_exit>

080209fc <__assert_func>:
 80209fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80209fe:	461c      	mov	r4, r3
 8020a00:	4b09      	ldr	r3, [pc, #36]	; (8020a28 <__assert_func+0x2c>)
 8020a02:	681b      	ldr	r3, [r3, #0]
 8020a04:	4605      	mov	r5, r0
 8020a06:	68d8      	ldr	r0, [r3, #12]
 8020a08:	b152      	cbz	r2, 8020a20 <__assert_func+0x24>
 8020a0a:	4b08      	ldr	r3, [pc, #32]	; (8020a2c <__assert_func+0x30>)
 8020a0c:	9100      	str	r1, [sp, #0]
 8020a0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8020a12:	4907      	ldr	r1, [pc, #28]	; (8020a30 <__assert_func+0x34>)
 8020a14:	462b      	mov	r3, r5
 8020a16:	4622      	mov	r2, r4
 8020a18:	f000 f81a 	bl	8020a50 <fiprintf>
 8020a1c:	f7ff ffe7 	bl	80209ee <abort>
 8020a20:	4b04      	ldr	r3, [pc, #16]	; (8020a34 <__assert_func+0x38>)
 8020a22:	461a      	mov	r2, r3
 8020a24:	e7f2      	b.n	8020a0c <__assert_func+0x10>
 8020a26:	bf00      	nop
 8020a28:	20000068 	.word	0x20000068
 8020a2c:	080263f1 	.word	0x080263f1
 8020a30:	080263fe 	.word	0x080263fe
 8020a34:	0802642c 	.word	0x0802642c

08020a38 <atexit>:
 8020a38:	2300      	movs	r3, #0
 8020a3a:	4601      	mov	r1, r0
 8020a3c:	461a      	mov	r2, r3
 8020a3e:	4618      	mov	r0, r3
 8020a40:	f000 bd1e 	b.w	8021480 <__register_exitproc>

08020a44 <__errno>:
 8020a44:	4b01      	ldr	r3, [pc, #4]	; (8020a4c <__errno+0x8>)
 8020a46:	6818      	ldr	r0, [r3, #0]
 8020a48:	4770      	bx	lr
 8020a4a:	bf00      	nop
 8020a4c:	20000068 	.word	0x20000068

08020a50 <fiprintf>:
 8020a50:	b40e      	push	{r1, r2, r3}
 8020a52:	b503      	push	{r0, r1, lr}
 8020a54:	4601      	mov	r1, r0
 8020a56:	ab03      	add	r3, sp, #12
 8020a58:	4805      	ldr	r0, [pc, #20]	; (8020a70 <fiprintf+0x20>)
 8020a5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8020a5e:	6800      	ldr	r0, [r0, #0]
 8020a60:	9301      	str	r3, [sp, #4]
 8020a62:	f000 f921 	bl	8020ca8 <_vfiprintf_r>
 8020a66:	b002      	add	sp, #8
 8020a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8020a6c:	b003      	add	sp, #12
 8020a6e:	4770      	bx	lr
 8020a70:	20000068 	.word	0x20000068

08020a74 <__libc_init_array>:
 8020a74:	b570      	push	{r4, r5, r6, lr}
 8020a76:	4e0d      	ldr	r6, [pc, #52]	; (8020aac <__libc_init_array+0x38>)
 8020a78:	4c0d      	ldr	r4, [pc, #52]	; (8020ab0 <__libc_init_array+0x3c>)
 8020a7a:	1ba4      	subs	r4, r4, r6
 8020a7c:	10a4      	asrs	r4, r4, #2
 8020a7e:	2500      	movs	r5, #0
 8020a80:	42a5      	cmp	r5, r4
 8020a82:	d109      	bne.n	8020a98 <__libc_init_array+0x24>
 8020a84:	4e0b      	ldr	r6, [pc, #44]	; (8020ab4 <__libc_init_array+0x40>)
 8020a86:	4c0c      	ldr	r4, [pc, #48]	; (8020ab8 <__libc_init_array+0x44>)
 8020a88:	f001 f984 	bl	8021d94 <_init>
 8020a8c:	1ba4      	subs	r4, r4, r6
 8020a8e:	10a4      	asrs	r4, r4, #2
 8020a90:	2500      	movs	r5, #0
 8020a92:	42a5      	cmp	r5, r4
 8020a94:	d105      	bne.n	8020aa2 <__libc_init_array+0x2e>
 8020a96:	bd70      	pop	{r4, r5, r6, pc}
 8020a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020a9c:	4798      	blx	r3
 8020a9e:	3501      	adds	r5, #1
 8020aa0:	e7ee      	b.n	8020a80 <__libc_init_array+0xc>
 8020aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020aa6:	4798      	blx	r3
 8020aa8:	3501      	adds	r5, #1
 8020aaa:	e7f2      	b.n	8020a92 <__libc_init_array+0x1e>
 8020aac:	0807dca8 	.word	0x0807dca8
 8020ab0:	0807dca8 	.word	0x0807dca8
 8020ab4:	0807dca8 	.word	0x0807dca8
 8020ab8:	0807dcb4 	.word	0x0807dcb4

08020abc <malloc>:
 8020abc:	4b02      	ldr	r3, [pc, #8]	; (8020ac8 <malloc+0xc>)
 8020abe:	4601      	mov	r1, r0
 8020ac0:	6818      	ldr	r0, [r3, #0]
 8020ac2:	f000 b86d 	b.w	8020ba0 <_malloc_r>
 8020ac6:	bf00      	nop
 8020ac8:	20000068 	.word	0x20000068

08020acc <free>:
 8020acc:	4b02      	ldr	r3, [pc, #8]	; (8020ad8 <free+0xc>)
 8020ace:	4601      	mov	r1, r0
 8020ad0:	6818      	ldr	r0, [r3, #0]
 8020ad2:	f000 b817 	b.w	8020b04 <_free_r>
 8020ad6:	bf00      	nop
 8020ad8:	20000068 	.word	0x20000068

08020adc <memcpy>:
 8020adc:	b510      	push	{r4, lr}
 8020ade:	1e43      	subs	r3, r0, #1
 8020ae0:	440a      	add	r2, r1
 8020ae2:	4291      	cmp	r1, r2
 8020ae4:	d100      	bne.n	8020ae8 <memcpy+0xc>
 8020ae6:	bd10      	pop	{r4, pc}
 8020ae8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020aec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020af0:	e7f7      	b.n	8020ae2 <memcpy+0x6>

08020af2 <memset>:
 8020af2:	4402      	add	r2, r0
 8020af4:	4603      	mov	r3, r0
 8020af6:	4293      	cmp	r3, r2
 8020af8:	d100      	bne.n	8020afc <memset+0xa>
 8020afa:	4770      	bx	lr
 8020afc:	f803 1b01 	strb.w	r1, [r3], #1
 8020b00:	e7f9      	b.n	8020af6 <memset+0x4>
	...

08020b04 <_free_r>:
 8020b04:	b538      	push	{r3, r4, r5, lr}
 8020b06:	4605      	mov	r5, r0
 8020b08:	2900      	cmp	r1, #0
 8020b0a:	d045      	beq.n	8020b98 <_free_r+0x94>
 8020b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020b10:	1f0c      	subs	r4, r1, #4
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	bfb8      	it	lt
 8020b16:	18e4      	addlt	r4, r4, r3
 8020b18:	f000 ff0d 	bl	8021936 <__malloc_lock>
 8020b1c:	4a1f      	ldr	r2, [pc, #124]	; (8020b9c <_free_r+0x98>)
 8020b1e:	6813      	ldr	r3, [r2, #0]
 8020b20:	4610      	mov	r0, r2
 8020b22:	b933      	cbnz	r3, 8020b32 <_free_r+0x2e>
 8020b24:	6063      	str	r3, [r4, #4]
 8020b26:	6014      	str	r4, [r2, #0]
 8020b28:	4628      	mov	r0, r5
 8020b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020b2e:	f000 bf03 	b.w	8021938 <__malloc_unlock>
 8020b32:	42a3      	cmp	r3, r4
 8020b34:	d90c      	bls.n	8020b50 <_free_r+0x4c>
 8020b36:	6821      	ldr	r1, [r4, #0]
 8020b38:	1862      	adds	r2, r4, r1
 8020b3a:	4293      	cmp	r3, r2
 8020b3c:	bf04      	itt	eq
 8020b3e:	681a      	ldreq	r2, [r3, #0]
 8020b40:	685b      	ldreq	r3, [r3, #4]
 8020b42:	6063      	str	r3, [r4, #4]
 8020b44:	bf04      	itt	eq
 8020b46:	1852      	addeq	r2, r2, r1
 8020b48:	6022      	streq	r2, [r4, #0]
 8020b4a:	6004      	str	r4, [r0, #0]
 8020b4c:	e7ec      	b.n	8020b28 <_free_r+0x24>
 8020b4e:	4613      	mov	r3, r2
 8020b50:	685a      	ldr	r2, [r3, #4]
 8020b52:	b10a      	cbz	r2, 8020b58 <_free_r+0x54>
 8020b54:	42a2      	cmp	r2, r4
 8020b56:	d9fa      	bls.n	8020b4e <_free_r+0x4a>
 8020b58:	6819      	ldr	r1, [r3, #0]
 8020b5a:	1858      	adds	r0, r3, r1
 8020b5c:	42a0      	cmp	r0, r4
 8020b5e:	d10b      	bne.n	8020b78 <_free_r+0x74>
 8020b60:	6820      	ldr	r0, [r4, #0]
 8020b62:	4401      	add	r1, r0
 8020b64:	1858      	adds	r0, r3, r1
 8020b66:	4282      	cmp	r2, r0
 8020b68:	6019      	str	r1, [r3, #0]
 8020b6a:	d1dd      	bne.n	8020b28 <_free_r+0x24>
 8020b6c:	6810      	ldr	r0, [r2, #0]
 8020b6e:	6852      	ldr	r2, [r2, #4]
 8020b70:	605a      	str	r2, [r3, #4]
 8020b72:	4401      	add	r1, r0
 8020b74:	6019      	str	r1, [r3, #0]
 8020b76:	e7d7      	b.n	8020b28 <_free_r+0x24>
 8020b78:	d902      	bls.n	8020b80 <_free_r+0x7c>
 8020b7a:	230c      	movs	r3, #12
 8020b7c:	602b      	str	r3, [r5, #0]
 8020b7e:	e7d3      	b.n	8020b28 <_free_r+0x24>
 8020b80:	6820      	ldr	r0, [r4, #0]
 8020b82:	1821      	adds	r1, r4, r0
 8020b84:	428a      	cmp	r2, r1
 8020b86:	bf04      	itt	eq
 8020b88:	6811      	ldreq	r1, [r2, #0]
 8020b8a:	6852      	ldreq	r2, [r2, #4]
 8020b8c:	6062      	str	r2, [r4, #4]
 8020b8e:	bf04      	itt	eq
 8020b90:	1809      	addeq	r1, r1, r0
 8020b92:	6021      	streq	r1, [r4, #0]
 8020b94:	605c      	str	r4, [r3, #4]
 8020b96:	e7c7      	b.n	8020b28 <_free_r+0x24>
 8020b98:	bd38      	pop	{r3, r4, r5, pc}
 8020b9a:	bf00      	nop
 8020b9c:	2001a94c 	.word	0x2001a94c

08020ba0 <_malloc_r>:
 8020ba0:	b570      	push	{r4, r5, r6, lr}
 8020ba2:	1ccd      	adds	r5, r1, #3
 8020ba4:	f025 0503 	bic.w	r5, r5, #3
 8020ba8:	3508      	adds	r5, #8
 8020baa:	2d0c      	cmp	r5, #12
 8020bac:	bf38      	it	cc
 8020bae:	250c      	movcc	r5, #12
 8020bb0:	2d00      	cmp	r5, #0
 8020bb2:	4606      	mov	r6, r0
 8020bb4:	db01      	blt.n	8020bba <_malloc_r+0x1a>
 8020bb6:	42a9      	cmp	r1, r5
 8020bb8:	d903      	bls.n	8020bc2 <_malloc_r+0x22>
 8020bba:	230c      	movs	r3, #12
 8020bbc:	6033      	str	r3, [r6, #0]
 8020bbe:	2000      	movs	r0, #0
 8020bc0:	bd70      	pop	{r4, r5, r6, pc}
 8020bc2:	f000 feb8 	bl	8021936 <__malloc_lock>
 8020bc6:	4a21      	ldr	r2, [pc, #132]	; (8020c4c <_malloc_r+0xac>)
 8020bc8:	6814      	ldr	r4, [r2, #0]
 8020bca:	4621      	mov	r1, r4
 8020bcc:	b991      	cbnz	r1, 8020bf4 <_malloc_r+0x54>
 8020bce:	4c20      	ldr	r4, [pc, #128]	; (8020c50 <_malloc_r+0xb0>)
 8020bd0:	6823      	ldr	r3, [r4, #0]
 8020bd2:	b91b      	cbnz	r3, 8020bdc <_malloc_r+0x3c>
 8020bd4:	4630      	mov	r0, r6
 8020bd6:	f000 fb05 	bl	80211e4 <_sbrk_r>
 8020bda:	6020      	str	r0, [r4, #0]
 8020bdc:	4629      	mov	r1, r5
 8020bde:	4630      	mov	r0, r6
 8020be0:	f000 fb00 	bl	80211e4 <_sbrk_r>
 8020be4:	1c43      	adds	r3, r0, #1
 8020be6:	d124      	bne.n	8020c32 <_malloc_r+0x92>
 8020be8:	230c      	movs	r3, #12
 8020bea:	6033      	str	r3, [r6, #0]
 8020bec:	4630      	mov	r0, r6
 8020bee:	f000 fea3 	bl	8021938 <__malloc_unlock>
 8020bf2:	e7e4      	b.n	8020bbe <_malloc_r+0x1e>
 8020bf4:	680b      	ldr	r3, [r1, #0]
 8020bf6:	1b5b      	subs	r3, r3, r5
 8020bf8:	d418      	bmi.n	8020c2c <_malloc_r+0x8c>
 8020bfa:	2b0b      	cmp	r3, #11
 8020bfc:	d90f      	bls.n	8020c1e <_malloc_r+0x7e>
 8020bfe:	600b      	str	r3, [r1, #0]
 8020c00:	50cd      	str	r5, [r1, r3]
 8020c02:	18cc      	adds	r4, r1, r3
 8020c04:	4630      	mov	r0, r6
 8020c06:	f000 fe97 	bl	8021938 <__malloc_unlock>
 8020c0a:	f104 000b 	add.w	r0, r4, #11
 8020c0e:	1d23      	adds	r3, r4, #4
 8020c10:	f020 0007 	bic.w	r0, r0, #7
 8020c14:	1ac3      	subs	r3, r0, r3
 8020c16:	d0d3      	beq.n	8020bc0 <_malloc_r+0x20>
 8020c18:	425a      	negs	r2, r3
 8020c1a:	50e2      	str	r2, [r4, r3]
 8020c1c:	e7d0      	b.n	8020bc0 <_malloc_r+0x20>
 8020c1e:	428c      	cmp	r4, r1
 8020c20:	684b      	ldr	r3, [r1, #4]
 8020c22:	bf16      	itet	ne
 8020c24:	6063      	strne	r3, [r4, #4]
 8020c26:	6013      	streq	r3, [r2, #0]
 8020c28:	460c      	movne	r4, r1
 8020c2a:	e7eb      	b.n	8020c04 <_malloc_r+0x64>
 8020c2c:	460c      	mov	r4, r1
 8020c2e:	6849      	ldr	r1, [r1, #4]
 8020c30:	e7cc      	b.n	8020bcc <_malloc_r+0x2c>
 8020c32:	1cc4      	adds	r4, r0, #3
 8020c34:	f024 0403 	bic.w	r4, r4, #3
 8020c38:	42a0      	cmp	r0, r4
 8020c3a:	d005      	beq.n	8020c48 <_malloc_r+0xa8>
 8020c3c:	1a21      	subs	r1, r4, r0
 8020c3e:	4630      	mov	r0, r6
 8020c40:	f000 fad0 	bl	80211e4 <_sbrk_r>
 8020c44:	3001      	adds	r0, #1
 8020c46:	d0cf      	beq.n	8020be8 <_malloc_r+0x48>
 8020c48:	6025      	str	r5, [r4, #0]
 8020c4a:	e7db      	b.n	8020c04 <_malloc_r+0x64>
 8020c4c:	2001a94c 	.word	0x2001a94c
 8020c50:	2001a950 	.word	0x2001a950

08020c54 <__sfputc_r>:
 8020c54:	6893      	ldr	r3, [r2, #8]
 8020c56:	3b01      	subs	r3, #1
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	b410      	push	{r4}
 8020c5c:	6093      	str	r3, [r2, #8]
 8020c5e:	da08      	bge.n	8020c72 <__sfputc_r+0x1e>
 8020c60:	6994      	ldr	r4, [r2, #24]
 8020c62:	42a3      	cmp	r3, r4
 8020c64:	db01      	blt.n	8020c6a <__sfputc_r+0x16>
 8020c66:	290a      	cmp	r1, #10
 8020c68:	d103      	bne.n	8020c72 <__sfputc_r+0x1e>
 8020c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020c6e:	f000 bb47 	b.w	8021300 <__swbuf_r>
 8020c72:	6813      	ldr	r3, [r2, #0]
 8020c74:	1c58      	adds	r0, r3, #1
 8020c76:	6010      	str	r0, [r2, #0]
 8020c78:	7019      	strb	r1, [r3, #0]
 8020c7a:	4608      	mov	r0, r1
 8020c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020c80:	4770      	bx	lr

08020c82 <__sfputs_r>:
 8020c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c84:	4606      	mov	r6, r0
 8020c86:	460f      	mov	r7, r1
 8020c88:	4614      	mov	r4, r2
 8020c8a:	18d5      	adds	r5, r2, r3
 8020c8c:	42ac      	cmp	r4, r5
 8020c8e:	d101      	bne.n	8020c94 <__sfputs_r+0x12>
 8020c90:	2000      	movs	r0, #0
 8020c92:	e007      	b.n	8020ca4 <__sfputs_r+0x22>
 8020c94:	463a      	mov	r2, r7
 8020c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c9a:	4630      	mov	r0, r6
 8020c9c:	f7ff ffda 	bl	8020c54 <__sfputc_r>
 8020ca0:	1c43      	adds	r3, r0, #1
 8020ca2:	d1f3      	bne.n	8020c8c <__sfputs_r+0xa>
 8020ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020ca8 <_vfiprintf_r>:
 8020ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cac:	460c      	mov	r4, r1
 8020cae:	b09d      	sub	sp, #116	; 0x74
 8020cb0:	4617      	mov	r7, r2
 8020cb2:	461d      	mov	r5, r3
 8020cb4:	4606      	mov	r6, r0
 8020cb6:	b118      	cbz	r0, 8020cc0 <_vfiprintf_r+0x18>
 8020cb8:	6983      	ldr	r3, [r0, #24]
 8020cba:	b90b      	cbnz	r3, 8020cc0 <_vfiprintf_r+0x18>
 8020cbc:	f000 fd34 	bl	8021728 <__sinit>
 8020cc0:	4b7c      	ldr	r3, [pc, #496]	; (8020eb4 <_vfiprintf_r+0x20c>)
 8020cc2:	429c      	cmp	r4, r3
 8020cc4:	d158      	bne.n	8020d78 <_vfiprintf_r+0xd0>
 8020cc6:	6874      	ldr	r4, [r6, #4]
 8020cc8:	89a3      	ldrh	r3, [r4, #12]
 8020cca:	0718      	lsls	r0, r3, #28
 8020ccc:	d55e      	bpl.n	8020d8c <_vfiprintf_r+0xe4>
 8020cce:	6923      	ldr	r3, [r4, #16]
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	d05b      	beq.n	8020d8c <_vfiprintf_r+0xe4>
 8020cd4:	2300      	movs	r3, #0
 8020cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8020cd8:	2320      	movs	r3, #32
 8020cda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020cde:	2330      	movs	r3, #48	; 0x30
 8020ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020ce4:	9503      	str	r5, [sp, #12]
 8020ce6:	f04f 0b01 	mov.w	fp, #1
 8020cea:	46b8      	mov	r8, r7
 8020cec:	4645      	mov	r5, r8
 8020cee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8020cf2:	b10b      	cbz	r3, 8020cf8 <_vfiprintf_r+0x50>
 8020cf4:	2b25      	cmp	r3, #37	; 0x25
 8020cf6:	d154      	bne.n	8020da2 <_vfiprintf_r+0xfa>
 8020cf8:	ebb8 0a07 	subs.w	sl, r8, r7
 8020cfc:	d00b      	beq.n	8020d16 <_vfiprintf_r+0x6e>
 8020cfe:	4653      	mov	r3, sl
 8020d00:	463a      	mov	r2, r7
 8020d02:	4621      	mov	r1, r4
 8020d04:	4630      	mov	r0, r6
 8020d06:	f7ff ffbc 	bl	8020c82 <__sfputs_r>
 8020d0a:	3001      	adds	r0, #1
 8020d0c:	f000 80c2 	beq.w	8020e94 <_vfiprintf_r+0x1ec>
 8020d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d12:	4453      	add	r3, sl
 8020d14:	9309      	str	r3, [sp, #36]	; 0x24
 8020d16:	f898 3000 	ldrb.w	r3, [r8]
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	f000 80ba 	beq.w	8020e94 <_vfiprintf_r+0x1ec>
 8020d20:	2300      	movs	r3, #0
 8020d22:	f04f 32ff 	mov.w	r2, #4294967295
 8020d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020d2a:	9304      	str	r3, [sp, #16]
 8020d2c:	9307      	str	r3, [sp, #28]
 8020d2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020d32:	931a      	str	r3, [sp, #104]	; 0x68
 8020d34:	46a8      	mov	r8, r5
 8020d36:	2205      	movs	r2, #5
 8020d38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8020d3c:	485e      	ldr	r0, [pc, #376]	; (8020eb8 <_vfiprintf_r+0x210>)
 8020d3e:	f7df fa5f 	bl	8000200 <memchr>
 8020d42:	9b04      	ldr	r3, [sp, #16]
 8020d44:	bb78      	cbnz	r0, 8020da6 <_vfiprintf_r+0xfe>
 8020d46:	06d9      	lsls	r1, r3, #27
 8020d48:	bf44      	itt	mi
 8020d4a:	2220      	movmi	r2, #32
 8020d4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020d50:	071a      	lsls	r2, r3, #28
 8020d52:	bf44      	itt	mi
 8020d54:	222b      	movmi	r2, #43	; 0x2b
 8020d56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8020d5a:	782a      	ldrb	r2, [r5, #0]
 8020d5c:	2a2a      	cmp	r2, #42	; 0x2a
 8020d5e:	d02a      	beq.n	8020db6 <_vfiprintf_r+0x10e>
 8020d60:	9a07      	ldr	r2, [sp, #28]
 8020d62:	46a8      	mov	r8, r5
 8020d64:	2000      	movs	r0, #0
 8020d66:	250a      	movs	r5, #10
 8020d68:	4641      	mov	r1, r8
 8020d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020d6e:	3b30      	subs	r3, #48	; 0x30
 8020d70:	2b09      	cmp	r3, #9
 8020d72:	d969      	bls.n	8020e48 <_vfiprintf_r+0x1a0>
 8020d74:	b360      	cbz	r0, 8020dd0 <_vfiprintf_r+0x128>
 8020d76:	e024      	b.n	8020dc2 <_vfiprintf_r+0x11a>
 8020d78:	4b50      	ldr	r3, [pc, #320]	; (8020ebc <_vfiprintf_r+0x214>)
 8020d7a:	429c      	cmp	r4, r3
 8020d7c:	d101      	bne.n	8020d82 <_vfiprintf_r+0xda>
 8020d7e:	68b4      	ldr	r4, [r6, #8]
 8020d80:	e7a2      	b.n	8020cc8 <_vfiprintf_r+0x20>
 8020d82:	4b4f      	ldr	r3, [pc, #316]	; (8020ec0 <_vfiprintf_r+0x218>)
 8020d84:	429c      	cmp	r4, r3
 8020d86:	bf08      	it	eq
 8020d88:	68f4      	ldreq	r4, [r6, #12]
 8020d8a:	e79d      	b.n	8020cc8 <_vfiprintf_r+0x20>
 8020d8c:	4621      	mov	r1, r4
 8020d8e:	4630      	mov	r0, r6
 8020d90:	f000 fb08 	bl	80213a4 <__swsetup_r>
 8020d94:	2800      	cmp	r0, #0
 8020d96:	d09d      	beq.n	8020cd4 <_vfiprintf_r+0x2c>
 8020d98:	f04f 30ff 	mov.w	r0, #4294967295
 8020d9c:	b01d      	add	sp, #116	; 0x74
 8020d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020da2:	46a8      	mov	r8, r5
 8020da4:	e7a2      	b.n	8020cec <_vfiprintf_r+0x44>
 8020da6:	4a44      	ldr	r2, [pc, #272]	; (8020eb8 <_vfiprintf_r+0x210>)
 8020da8:	1a80      	subs	r0, r0, r2
 8020daa:	fa0b f000 	lsl.w	r0, fp, r0
 8020dae:	4318      	orrs	r0, r3
 8020db0:	9004      	str	r0, [sp, #16]
 8020db2:	4645      	mov	r5, r8
 8020db4:	e7be      	b.n	8020d34 <_vfiprintf_r+0x8c>
 8020db6:	9a03      	ldr	r2, [sp, #12]
 8020db8:	1d11      	adds	r1, r2, #4
 8020dba:	6812      	ldr	r2, [r2, #0]
 8020dbc:	9103      	str	r1, [sp, #12]
 8020dbe:	2a00      	cmp	r2, #0
 8020dc0:	db01      	blt.n	8020dc6 <_vfiprintf_r+0x11e>
 8020dc2:	9207      	str	r2, [sp, #28]
 8020dc4:	e004      	b.n	8020dd0 <_vfiprintf_r+0x128>
 8020dc6:	4252      	negs	r2, r2
 8020dc8:	f043 0302 	orr.w	r3, r3, #2
 8020dcc:	9207      	str	r2, [sp, #28]
 8020dce:	9304      	str	r3, [sp, #16]
 8020dd0:	f898 3000 	ldrb.w	r3, [r8]
 8020dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8020dd6:	d10e      	bne.n	8020df6 <_vfiprintf_r+0x14e>
 8020dd8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8020ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8020dde:	d138      	bne.n	8020e52 <_vfiprintf_r+0x1aa>
 8020de0:	9b03      	ldr	r3, [sp, #12]
 8020de2:	1d1a      	adds	r2, r3, #4
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	9203      	str	r2, [sp, #12]
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	bfb8      	it	lt
 8020dec:	f04f 33ff 	movlt.w	r3, #4294967295
 8020df0:	f108 0802 	add.w	r8, r8, #2
 8020df4:	9305      	str	r3, [sp, #20]
 8020df6:	4d33      	ldr	r5, [pc, #204]	; (8020ec4 <_vfiprintf_r+0x21c>)
 8020df8:	f898 1000 	ldrb.w	r1, [r8]
 8020dfc:	2203      	movs	r2, #3
 8020dfe:	4628      	mov	r0, r5
 8020e00:	f7df f9fe 	bl	8000200 <memchr>
 8020e04:	b140      	cbz	r0, 8020e18 <_vfiprintf_r+0x170>
 8020e06:	2340      	movs	r3, #64	; 0x40
 8020e08:	1b40      	subs	r0, r0, r5
 8020e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8020e0e:	9b04      	ldr	r3, [sp, #16]
 8020e10:	4303      	orrs	r3, r0
 8020e12:	f108 0801 	add.w	r8, r8, #1
 8020e16:	9304      	str	r3, [sp, #16]
 8020e18:	f898 1000 	ldrb.w	r1, [r8]
 8020e1c:	482a      	ldr	r0, [pc, #168]	; (8020ec8 <_vfiprintf_r+0x220>)
 8020e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020e22:	2206      	movs	r2, #6
 8020e24:	f108 0701 	add.w	r7, r8, #1
 8020e28:	f7df f9ea 	bl	8000200 <memchr>
 8020e2c:	2800      	cmp	r0, #0
 8020e2e:	d037      	beq.n	8020ea0 <_vfiprintf_r+0x1f8>
 8020e30:	4b26      	ldr	r3, [pc, #152]	; (8020ecc <_vfiprintf_r+0x224>)
 8020e32:	bb1b      	cbnz	r3, 8020e7c <_vfiprintf_r+0x1d4>
 8020e34:	9b03      	ldr	r3, [sp, #12]
 8020e36:	3307      	adds	r3, #7
 8020e38:	f023 0307 	bic.w	r3, r3, #7
 8020e3c:	3308      	adds	r3, #8
 8020e3e:	9303      	str	r3, [sp, #12]
 8020e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e42:	444b      	add	r3, r9
 8020e44:	9309      	str	r3, [sp, #36]	; 0x24
 8020e46:	e750      	b.n	8020cea <_vfiprintf_r+0x42>
 8020e48:	fb05 3202 	mla	r2, r5, r2, r3
 8020e4c:	2001      	movs	r0, #1
 8020e4e:	4688      	mov	r8, r1
 8020e50:	e78a      	b.n	8020d68 <_vfiprintf_r+0xc0>
 8020e52:	2300      	movs	r3, #0
 8020e54:	f108 0801 	add.w	r8, r8, #1
 8020e58:	9305      	str	r3, [sp, #20]
 8020e5a:	4619      	mov	r1, r3
 8020e5c:	250a      	movs	r5, #10
 8020e5e:	4640      	mov	r0, r8
 8020e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020e64:	3a30      	subs	r2, #48	; 0x30
 8020e66:	2a09      	cmp	r2, #9
 8020e68:	d903      	bls.n	8020e72 <_vfiprintf_r+0x1ca>
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d0c3      	beq.n	8020df6 <_vfiprintf_r+0x14e>
 8020e6e:	9105      	str	r1, [sp, #20]
 8020e70:	e7c1      	b.n	8020df6 <_vfiprintf_r+0x14e>
 8020e72:	fb05 2101 	mla	r1, r5, r1, r2
 8020e76:	2301      	movs	r3, #1
 8020e78:	4680      	mov	r8, r0
 8020e7a:	e7f0      	b.n	8020e5e <_vfiprintf_r+0x1b6>
 8020e7c:	ab03      	add	r3, sp, #12
 8020e7e:	9300      	str	r3, [sp, #0]
 8020e80:	4622      	mov	r2, r4
 8020e82:	4b13      	ldr	r3, [pc, #76]	; (8020ed0 <_vfiprintf_r+0x228>)
 8020e84:	a904      	add	r1, sp, #16
 8020e86:	4630      	mov	r0, r6
 8020e88:	f3af 8000 	nop.w
 8020e8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8020e90:	4681      	mov	r9, r0
 8020e92:	d1d5      	bne.n	8020e40 <_vfiprintf_r+0x198>
 8020e94:	89a3      	ldrh	r3, [r4, #12]
 8020e96:	065b      	lsls	r3, r3, #25
 8020e98:	f53f af7e 	bmi.w	8020d98 <_vfiprintf_r+0xf0>
 8020e9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020e9e:	e77d      	b.n	8020d9c <_vfiprintf_r+0xf4>
 8020ea0:	ab03      	add	r3, sp, #12
 8020ea2:	9300      	str	r3, [sp, #0]
 8020ea4:	4622      	mov	r2, r4
 8020ea6:	4b0a      	ldr	r3, [pc, #40]	; (8020ed0 <_vfiprintf_r+0x228>)
 8020ea8:	a904      	add	r1, sp, #16
 8020eaa:	4630      	mov	r0, r6
 8020eac:	f000 f888 	bl	8020fc0 <_printf_i>
 8020eb0:	e7ec      	b.n	8020e8c <_vfiprintf_r+0x1e4>
 8020eb2:	bf00      	nop
 8020eb4:	08026488 	.word	0x08026488
 8020eb8:	08026434 	.word	0x08026434
 8020ebc:	080264a8 	.word	0x080264a8
 8020ec0:	08026468 	.word	0x08026468
 8020ec4:	0802643a 	.word	0x0802643a
 8020ec8:	0802643e 	.word	0x0802643e
 8020ecc:	00000000 	.word	0x00000000
 8020ed0:	08020c83 	.word	0x08020c83

08020ed4 <_printf_common>:
 8020ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ed8:	4691      	mov	r9, r2
 8020eda:	461f      	mov	r7, r3
 8020edc:	688a      	ldr	r2, [r1, #8]
 8020ede:	690b      	ldr	r3, [r1, #16]
 8020ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020ee4:	4293      	cmp	r3, r2
 8020ee6:	bfb8      	it	lt
 8020ee8:	4613      	movlt	r3, r2
 8020eea:	f8c9 3000 	str.w	r3, [r9]
 8020eee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020ef2:	4606      	mov	r6, r0
 8020ef4:	460c      	mov	r4, r1
 8020ef6:	b112      	cbz	r2, 8020efe <_printf_common+0x2a>
 8020ef8:	3301      	adds	r3, #1
 8020efa:	f8c9 3000 	str.w	r3, [r9]
 8020efe:	6823      	ldr	r3, [r4, #0]
 8020f00:	0699      	lsls	r1, r3, #26
 8020f02:	bf42      	ittt	mi
 8020f04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8020f08:	3302      	addmi	r3, #2
 8020f0a:	f8c9 3000 	strmi.w	r3, [r9]
 8020f0e:	6825      	ldr	r5, [r4, #0]
 8020f10:	f015 0506 	ands.w	r5, r5, #6
 8020f14:	d107      	bne.n	8020f26 <_printf_common+0x52>
 8020f16:	f104 0a19 	add.w	sl, r4, #25
 8020f1a:	68e3      	ldr	r3, [r4, #12]
 8020f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8020f20:	1a9b      	subs	r3, r3, r2
 8020f22:	42ab      	cmp	r3, r5
 8020f24:	dc28      	bgt.n	8020f78 <_printf_common+0xa4>
 8020f26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8020f2a:	6822      	ldr	r2, [r4, #0]
 8020f2c:	3300      	adds	r3, #0
 8020f2e:	bf18      	it	ne
 8020f30:	2301      	movne	r3, #1
 8020f32:	0692      	lsls	r2, r2, #26
 8020f34:	d42d      	bmi.n	8020f92 <_printf_common+0xbe>
 8020f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020f3a:	4639      	mov	r1, r7
 8020f3c:	4630      	mov	r0, r6
 8020f3e:	47c0      	blx	r8
 8020f40:	3001      	adds	r0, #1
 8020f42:	d020      	beq.n	8020f86 <_printf_common+0xb2>
 8020f44:	6823      	ldr	r3, [r4, #0]
 8020f46:	68e5      	ldr	r5, [r4, #12]
 8020f48:	f8d9 2000 	ldr.w	r2, [r9]
 8020f4c:	f003 0306 	and.w	r3, r3, #6
 8020f50:	2b04      	cmp	r3, #4
 8020f52:	bf08      	it	eq
 8020f54:	1aad      	subeq	r5, r5, r2
 8020f56:	68a3      	ldr	r3, [r4, #8]
 8020f58:	6922      	ldr	r2, [r4, #16]
 8020f5a:	bf0c      	ite	eq
 8020f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020f60:	2500      	movne	r5, #0
 8020f62:	4293      	cmp	r3, r2
 8020f64:	bfc4      	itt	gt
 8020f66:	1a9b      	subgt	r3, r3, r2
 8020f68:	18ed      	addgt	r5, r5, r3
 8020f6a:	f04f 0900 	mov.w	r9, #0
 8020f6e:	341a      	adds	r4, #26
 8020f70:	454d      	cmp	r5, r9
 8020f72:	d11a      	bne.n	8020faa <_printf_common+0xd6>
 8020f74:	2000      	movs	r0, #0
 8020f76:	e008      	b.n	8020f8a <_printf_common+0xb6>
 8020f78:	2301      	movs	r3, #1
 8020f7a:	4652      	mov	r2, sl
 8020f7c:	4639      	mov	r1, r7
 8020f7e:	4630      	mov	r0, r6
 8020f80:	47c0      	blx	r8
 8020f82:	3001      	adds	r0, #1
 8020f84:	d103      	bne.n	8020f8e <_printf_common+0xba>
 8020f86:	f04f 30ff 	mov.w	r0, #4294967295
 8020f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f8e:	3501      	adds	r5, #1
 8020f90:	e7c3      	b.n	8020f1a <_printf_common+0x46>
 8020f92:	18e1      	adds	r1, r4, r3
 8020f94:	1c5a      	adds	r2, r3, #1
 8020f96:	2030      	movs	r0, #48	; 0x30
 8020f98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020f9c:	4422      	add	r2, r4
 8020f9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020fa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020fa6:	3302      	adds	r3, #2
 8020fa8:	e7c5      	b.n	8020f36 <_printf_common+0x62>
 8020faa:	2301      	movs	r3, #1
 8020fac:	4622      	mov	r2, r4
 8020fae:	4639      	mov	r1, r7
 8020fb0:	4630      	mov	r0, r6
 8020fb2:	47c0      	blx	r8
 8020fb4:	3001      	adds	r0, #1
 8020fb6:	d0e6      	beq.n	8020f86 <_printf_common+0xb2>
 8020fb8:	f109 0901 	add.w	r9, r9, #1
 8020fbc:	e7d8      	b.n	8020f70 <_printf_common+0x9c>
	...

08020fc0 <_printf_i>:
 8020fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020fc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8020fc8:	460c      	mov	r4, r1
 8020fca:	7e09      	ldrb	r1, [r1, #24]
 8020fcc:	b085      	sub	sp, #20
 8020fce:	296e      	cmp	r1, #110	; 0x6e
 8020fd0:	4617      	mov	r7, r2
 8020fd2:	4606      	mov	r6, r0
 8020fd4:	4698      	mov	r8, r3
 8020fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020fd8:	f000 80b3 	beq.w	8021142 <_printf_i+0x182>
 8020fdc:	d822      	bhi.n	8021024 <_printf_i+0x64>
 8020fde:	2963      	cmp	r1, #99	; 0x63
 8020fe0:	d036      	beq.n	8021050 <_printf_i+0x90>
 8020fe2:	d80a      	bhi.n	8020ffa <_printf_i+0x3a>
 8020fe4:	2900      	cmp	r1, #0
 8020fe6:	f000 80b9 	beq.w	802115c <_printf_i+0x19c>
 8020fea:	2958      	cmp	r1, #88	; 0x58
 8020fec:	f000 8083 	beq.w	80210f6 <_printf_i+0x136>
 8020ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020ff4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8020ff8:	e032      	b.n	8021060 <_printf_i+0xa0>
 8020ffa:	2964      	cmp	r1, #100	; 0x64
 8020ffc:	d001      	beq.n	8021002 <_printf_i+0x42>
 8020ffe:	2969      	cmp	r1, #105	; 0x69
 8021000:	d1f6      	bne.n	8020ff0 <_printf_i+0x30>
 8021002:	6820      	ldr	r0, [r4, #0]
 8021004:	6813      	ldr	r3, [r2, #0]
 8021006:	0605      	lsls	r5, r0, #24
 8021008:	f103 0104 	add.w	r1, r3, #4
 802100c:	d52a      	bpl.n	8021064 <_printf_i+0xa4>
 802100e:	681b      	ldr	r3, [r3, #0]
 8021010:	6011      	str	r1, [r2, #0]
 8021012:	2b00      	cmp	r3, #0
 8021014:	da03      	bge.n	802101e <_printf_i+0x5e>
 8021016:	222d      	movs	r2, #45	; 0x2d
 8021018:	425b      	negs	r3, r3
 802101a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802101e:	486f      	ldr	r0, [pc, #444]	; (80211dc <_printf_i+0x21c>)
 8021020:	220a      	movs	r2, #10
 8021022:	e039      	b.n	8021098 <_printf_i+0xd8>
 8021024:	2973      	cmp	r1, #115	; 0x73
 8021026:	f000 809d 	beq.w	8021164 <_printf_i+0x1a4>
 802102a:	d808      	bhi.n	802103e <_printf_i+0x7e>
 802102c:	296f      	cmp	r1, #111	; 0x6f
 802102e:	d020      	beq.n	8021072 <_printf_i+0xb2>
 8021030:	2970      	cmp	r1, #112	; 0x70
 8021032:	d1dd      	bne.n	8020ff0 <_printf_i+0x30>
 8021034:	6823      	ldr	r3, [r4, #0]
 8021036:	f043 0320 	orr.w	r3, r3, #32
 802103a:	6023      	str	r3, [r4, #0]
 802103c:	e003      	b.n	8021046 <_printf_i+0x86>
 802103e:	2975      	cmp	r1, #117	; 0x75
 8021040:	d017      	beq.n	8021072 <_printf_i+0xb2>
 8021042:	2978      	cmp	r1, #120	; 0x78
 8021044:	d1d4      	bne.n	8020ff0 <_printf_i+0x30>
 8021046:	2378      	movs	r3, #120	; 0x78
 8021048:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802104c:	4864      	ldr	r0, [pc, #400]	; (80211e0 <_printf_i+0x220>)
 802104e:	e055      	b.n	80210fc <_printf_i+0x13c>
 8021050:	6813      	ldr	r3, [r2, #0]
 8021052:	1d19      	adds	r1, r3, #4
 8021054:	681b      	ldr	r3, [r3, #0]
 8021056:	6011      	str	r1, [r2, #0]
 8021058:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802105c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021060:	2301      	movs	r3, #1
 8021062:	e08c      	b.n	802117e <_printf_i+0x1be>
 8021064:	681b      	ldr	r3, [r3, #0]
 8021066:	6011      	str	r1, [r2, #0]
 8021068:	f010 0f40 	tst.w	r0, #64	; 0x40
 802106c:	bf18      	it	ne
 802106e:	b21b      	sxthne	r3, r3
 8021070:	e7cf      	b.n	8021012 <_printf_i+0x52>
 8021072:	6813      	ldr	r3, [r2, #0]
 8021074:	6825      	ldr	r5, [r4, #0]
 8021076:	1d18      	adds	r0, r3, #4
 8021078:	6010      	str	r0, [r2, #0]
 802107a:	0628      	lsls	r0, r5, #24
 802107c:	d501      	bpl.n	8021082 <_printf_i+0xc2>
 802107e:	681b      	ldr	r3, [r3, #0]
 8021080:	e002      	b.n	8021088 <_printf_i+0xc8>
 8021082:	0668      	lsls	r0, r5, #25
 8021084:	d5fb      	bpl.n	802107e <_printf_i+0xbe>
 8021086:	881b      	ldrh	r3, [r3, #0]
 8021088:	4854      	ldr	r0, [pc, #336]	; (80211dc <_printf_i+0x21c>)
 802108a:	296f      	cmp	r1, #111	; 0x6f
 802108c:	bf14      	ite	ne
 802108e:	220a      	movne	r2, #10
 8021090:	2208      	moveq	r2, #8
 8021092:	2100      	movs	r1, #0
 8021094:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021098:	6865      	ldr	r5, [r4, #4]
 802109a:	60a5      	str	r5, [r4, #8]
 802109c:	2d00      	cmp	r5, #0
 802109e:	f2c0 8095 	blt.w	80211cc <_printf_i+0x20c>
 80210a2:	6821      	ldr	r1, [r4, #0]
 80210a4:	f021 0104 	bic.w	r1, r1, #4
 80210a8:	6021      	str	r1, [r4, #0]
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d13d      	bne.n	802112a <_printf_i+0x16a>
 80210ae:	2d00      	cmp	r5, #0
 80210b0:	f040 808e 	bne.w	80211d0 <_printf_i+0x210>
 80210b4:	4665      	mov	r5, ip
 80210b6:	2a08      	cmp	r2, #8
 80210b8:	d10b      	bne.n	80210d2 <_printf_i+0x112>
 80210ba:	6823      	ldr	r3, [r4, #0]
 80210bc:	07db      	lsls	r3, r3, #31
 80210be:	d508      	bpl.n	80210d2 <_printf_i+0x112>
 80210c0:	6923      	ldr	r3, [r4, #16]
 80210c2:	6862      	ldr	r2, [r4, #4]
 80210c4:	429a      	cmp	r2, r3
 80210c6:	bfde      	ittt	le
 80210c8:	2330      	movle	r3, #48	; 0x30
 80210ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80210ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80210d2:	ebac 0305 	sub.w	r3, ip, r5
 80210d6:	6123      	str	r3, [r4, #16]
 80210d8:	f8cd 8000 	str.w	r8, [sp]
 80210dc:	463b      	mov	r3, r7
 80210de:	aa03      	add	r2, sp, #12
 80210e0:	4621      	mov	r1, r4
 80210e2:	4630      	mov	r0, r6
 80210e4:	f7ff fef6 	bl	8020ed4 <_printf_common>
 80210e8:	3001      	adds	r0, #1
 80210ea:	d14d      	bne.n	8021188 <_printf_i+0x1c8>
 80210ec:	f04f 30ff 	mov.w	r0, #4294967295
 80210f0:	b005      	add	sp, #20
 80210f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80210f6:	4839      	ldr	r0, [pc, #228]	; (80211dc <_printf_i+0x21c>)
 80210f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80210fc:	6813      	ldr	r3, [r2, #0]
 80210fe:	6821      	ldr	r1, [r4, #0]
 8021100:	1d1d      	adds	r5, r3, #4
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	6015      	str	r5, [r2, #0]
 8021106:	060a      	lsls	r2, r1, #24
 8021108:	d50b      	bpl.n	8021122 <_printf_i+0x162>
 802110a:	07ca      	lsls	r2, r1, #31
 802110c:	bf44      	itt	mi
 802110e:	f041 0120 	orrmi.w	r1, r1, #32
 8021112:	6021      	strmi	r1, [r4, #0]
 8021114:	b91b      	cbnz	r3, 802111e <_printf_i+0x15e>
 8021116:	6822      	ldr	r2, [r4, #0]
 8021118:	f022 0220 	bic.w	r2, r2, #32
 802111c:	6022      	str	r2, [r4, #0]
 802111e:	2210      	movs	r2, #16
 8021120:	e7b7      	b.n	8021092 <_printf_i+0xd2>
 8021122:	064d      	lsls	r5, r1, #25
 8021124:	bf48      	it	mi
 8021126:	b29b      	uxthmi	r3, r3
 8021128:	e7ef      	b.n	802110a <_printf_i+0x14a>
 802112a:	4665      	mov	r5, ip
 802112c:	fbb3 f1f2 	udiv	r1, r3, r2
 8021130:	fb02 3311 	mls	r3, r2, r1, r3
 8021134:	5cc3      	ldrb	r3, [r0, r3]
 8021136:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802113a:	460b      	mov	r3, r1
 802113c:	2900      	cmp	r1, #0
 802113e:	d1f5      	bne.n	802112c <_printf_i+0x16c>
 8021140:	e7b9      	b.n	80210b6 <_printf_i+0xf6>
 8021142:	6813      	ldr	r3, [r2, #0]
 8021144:	6825      	ldr	r5, [r4, #0]
 8021146:	6961      	ldr	r1, [r4, #20]
 8021148:	1d18      	adds	r0, r3, #4
 802114a:	6010      	str	r0, [r2, #0]
 802114c:	0628      	lsls	r0, r5, #24
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	d501      	bpl.n	8021156 <_printf_i+0x196>
 8021152:	6019      	str	r1, [r3, #0]
 8021154:	e002      	b.n	802115c <_printf_i+0x19c>
 8021156:	066a      	lsls	r2, r5, #25
 8021158:	d5fb      	bpl.n	8021152 <_printf_i+0x192>
 802115a:	8019      	strh	r1, [r3, #0]
 802115c:	2300      	movs	r3, #0
 802115e:	6123      	str	r3, [r4, #16]
 8021160:	4665      	mov	r5, ip
 8021162:	e7b9      	b.n	80210d8 <_printf_i+0x118>
 8021164:	6813      	ldr	r3, [r2, #0]
 8021166:	1d19      	adds	r1, r3, #4
 8021168:	6011      	str	r1, [r2, #0]
 802116a:	681d      	ldr	r5, [r3, #0]
 802116c:	6862      	ldr	r2, [r4, #4]
 802116e:	2100      	movs	r1, #0
 8021170:	4628      	mov	r0, r5
 8021172:	f7df f845 	bl	8000200 <memchr>
 8021176:	b108      	cbz	r0, 802117c <_printf_i+0x1bc>
 8021178:	1b40      	subs	r0, r0, r5
 802117a:	6060      	str	r0, [r4, #4]
 802117c:	6863      	ldr	r3, [r4, #4]
 802117e:	6123      	str	r3, [r4, #16]
 8021180:	2300      	movs	r3, #0
 8021182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021186:	e7a7      	b.n	80210d8 <_printf_i+0x118>
 8021188:	6923      	ldr	r3, [r4, #16]
 802118a:	462a      	mov	r2, r5
 802118c:	4639      	mov	r1, r7
 802118e:	4630      	mov	r0, r6
 8021190:	47c0      	blx	r8
 8021192:	3001      	adds	r0, #1
 8021194:	d0aa      	beq.n	80210ec <_printf_i+0x12c>
 8021196:	6823      	ldr	r3, [r4, #0]
 8021198:	079b      	lsls	r3, r3, #30
 802119a:	d413      	bmi.n	80211c4 <_printf_i+0x204>
 802119c:	68e0      	ldr	r0, [r4, #12]
 802119e:	9b03      	ldr	r3, [sp, #12]
 80211a0:	4298      	cmp	r0, r3
 80211a2:	bfb8      	it	lt
 80211a4:	4618      	movlt	r0, r3
 80211a6:	e7a3      	b.n	80210f0 <_printf_i+0x130>
 80211a8:	2301      	movs	r3, #1
 80211aa:	464a      	mov	r2, r9
 80211ac:	4639      	mov	r1, r7
 80211ae:	4630      	mov	r0, r6
 80211b0:	47c0      	blx	r8
 80211b2:	3001      	adds	r0, #1
 80211b4:	d09a      	beq.n	80210ec <_printf_i+0x12c>
 80211b6:	3501      	adds	r5, #1
 80211b8:	68e3      	ldr	r3, [r4, #12]
 80211ba:	9a03      	ldr	r2, [sp, #12]
 80211bc:	1a9b      	subs	r3, r3, r2
 80211be:	42ab      	cmp	r3, r5
 80211c0:	dcf2      	bgt.n	80211a8 <_printf_i+0x1e8>
 80211c2:	e7eb      	b.n	802119c <_printf_i+0x1dc>
 80211c4:	2500      	movs	r5, #0
 80211c6:	f104 0919 	add.w	r9, r4, #25
 80211ca:	e7f5      	b.n	80211b8 <_printf_i+0x1f8>
 80211cc:	2b00      	cmp	r3, #0
 80211ce:	d1ac      	bne.n	802112a <_printf_i+0x16a>
 80211d0:	7803      	ldrb	r3, [r0, #0]
 80211d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80211d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80211da:	e76c      	b.n	80210b6 <_printf_i+0xf6>
 80211dc:	08026445 	.word	0x08026445
 80211e0:	08026456 	.word	0x08026456

080211e4 <_sbrk_r>:
 80211e4:	b538      	push	{r3, r4, r5, lr}
 80211e6:	4c06      	ldr	r4, [pc, #24]	; (8021200 <_sbrk_r+0x1c>)
 80211e8:	2300      	movs	r3, #0
 80211ea:	4605      	mov	r5, r0
 80211ec:	4608      	mov	r0, r1
 80211ee:	6023      	str	r3, [r4, #0]
 80211f0:	f7e1 f926 	bl	8002440 <_sbrk>
 80211f4:	1c43      	adds	r3, r0, #1
 80211f6:	d102      	bne.n	80211fe <_sbrk_r+0x1a>
 80211f8:	6823      	ldr	r3, [r4, #0]
 80211fa:	b103      	cbz	r3, 80211fe <_sbrk_r+0x1a>
 80211fc:	602b      	str	r3, [r5, #0]
 80211fe:	bd38      	pop	{r3, r4, r5, pc}
 8021200:	2001aa7c 	.word	0x2001aa7c

08021204 <_raise_r>:
 8021204:	291f      	cmp	r1, #31
 8021206:	b538      	push	{r3, r4, r5, lr}
 8021208:	4604      	mov	r4, r0
 802120a:	460d      	mov	r5, r1
 802120c:	d904      	bls.n	8021218 <_raise_r+0x14>
 802120e:	2316      	movs	r3, #22
 8021210:	6003      	str	r3, [r0, #0]
 8021212:	f04f 30ff 	mov.w	r0, #4294967295
 8021216:	bd38      	pop	{r3, r4, r5, pc}
 8021218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802121a:	b112      	cbz	r2, 8021222 <_raise_r+0x1e>
 802121c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021220:	b94b      	cbnz	r3, 8021236 <_raise_r+0x32>
 8021222:	4620      	mov	r0, r4
 8021224:	f000 f830 	bl	8021288 <_getpid_r>
 8021228:	462a      	mov	r2, r5
 802122a:	4601      	mov	r1, r0
 802122c:	4620      	mov	r0, r4
 802122e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021232:	f000 b817 	b.w	8021264 <_kill_r>
 8021236:	2b01      	cmp	r3, #1
 8021238:	d00a      	beq.n	8021250 <_raise_r+0x4c>
 802123a:	1c59      	adds	r1, r3, #1
 802123c:	d103      	bne.n	8021246 <_raise_r+0x42>
 802123e:	2316      	movs	r3, #22
 8021240:	6003      	str	r3, [r0, #0]
 8021242:	2001      	movs	r0, #1
 8021244:	e7e7      	b.n	8021216 <_raise_r+0x12>
 8021246:	2400      	movs	r4, #0
 8021248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802124c:	4628      	mov	r0, r5
 802124e:	4798      	blx	r3
 8021250:	2000      	movs	r0, #0
 8021252:	e7e0      	b.n	8021216 <_raise_r+0x12>

08021254 <raise>:
 8021254:	4b02      	ldr	r3, [pc, #8]	; (8021260 <raise+0xc>)
 8021256:	4601      	mov	r1, r0
 8021258:	6818      	ldr	r0, [r3, #0]
 802125a:	f7ff bfd3 	b.w	8021204 <_raise_r>
 802125e:	bf00      	nop
 8021260:	20000068 	.word	0x20000068

08021264 <_kill_r>:
 8021264:	b538      	push	{r3, r4, r5, lr}
 8021266:	4c07      	ldr	r4, [pc, #28]	; (8021284 <_kill_r+0x20>)
 8021268:	2300      	movs	r3, #0
 802126a:	4605      	mov	r5, r0
 802126c:	4608      	mov	r0, r1
 802126e:	4611      	mov	r1, r2
 8021270:	6023      	str	r3, [r4, #0]
 8021272:	f7e1 f85d 	bl	8002330 <_kill>
 8021276:	1c43      	adds	r3, r0, #1
 8021278:	d102      	bne.n	8021280 <_kill_r+0x1c>
 802127a:	6823      	ldr	r3, [r4, #0]
 802127c:	b103      	cbz	r3, 8021280 <_kill_r+0x1c>
 802127e:	602b      	str	r3, [r5, #0]
 8021280:	bd38      	pop	{r3, r4, r5, pc}
 8021282:	bf00      	nop
 8021284:	2001aa7c 	.word	0x2001aa7c

08021288 <_getpid_r>:
 8021288:	f7e1 b84a 	b.w	8002320 <_getpid>

0802128c <_vsniprintf_r>:
 802128c:	b530      	push	{r4, r5, lr}
 802128e:	1e14      	subs	r4, r2, #0
 8021290:	4605      	mov	r5, r0
 8021292:	b09b      	sub	sp, #108	; 0x6c
 8021294:	4618      	mov	r0, r3
 8021296:	da05      	bge.n	80212a4 <_vsniprintf_r+0x18>
 8021298:	238b      	movs	r3, #139	; 0x8b
 802129a:	602b      	str	r3, [r5, #0]
 802129c:	f04f 30ff 	mov.w	r0, #4294967295
 80212a0:	b01b      	add	sp, #108	; 0x6c
 80212a2:	bd30      	pop	{r4, r5, pc}
 80212a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80212a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80212ac:	bf14      	ite	ne
 80212ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 80212b2:	4623      	moveq	r3, r4
 80212b4:	9302      	str	r3, [sp, #8]
 80212b6:	9305      	str	r3, [sp, #20]
 80212b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80212bc:	9100      	str	r1, [sp, #0]
 80212be:	9104      	str	r1, [sp, #16]
 80212c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80212c4:	4602      	mov	r2, r0
 80212c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80212c8:	4669      	mov	r1, sp
 80212ca:	4628      	mov	r0, r5
 80212cc:	f000 fbb6 	bl	8021a3c <_svfiprintf_r>
 80212d0:	1c43      	adds	r3, r0, #1
 80212d2:	bfbc      	itt	lt
 80212d4:	238b      	movlt	r3, #139	; 0x8b
 80212d6:	602b      	strlt	r3, [r5, #0]
 80212d8:	2c00      	cmp	r4, #0
 80212da:	d0e1      	beq.n	80212a0 <_vsniprintf_r+0x14>
 80212dc:	9b00      	ldr	r3, [sp, #0]
 80212de:	2200      	movs	r2, #0
 80212e0:	701a      	strb	r2, [r3, #0]
 80212e2:	e7dd      	b.n	80212a0 <_vsniprintf_r+0x14>

080212e4 <vsniprintf>:
 80212e4:	b507      	push	{r0, r1, r2, lr}
 80212e6:	9300      	str	r3, [sp, #0]
 80212e8:	4613      	mov	r3, r2
 80212ea:	460a      	mov	r2, r1
 80212ec:	4601      	mov	r1, r0
 80212ee:	4803      	ldr	r0, [pc, #12]	; (80212fc <vsniprintf+0x18>)
 80212f0:	6800      	ldr	r0, [r0, #0]
 80212f2:	f7ff ffcb 	bl	802128c <_vsniprintf_r>
 80212f6:	b003      	add	sp, #12
 80212f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80212fc:	20000068 	.word	0x20000068

08021300 <__swbuf_r>:
 8021300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021302:	460e      	mov	r6, r1
 8021304:	4614      	mov	r4, r2
 8021306:	4605      	mov	r5, r0
 8021308:	b118      	cbz	r0, 8021312 <__swbuf_r+0x12>
 802130a:	6983      	ldr	r3, [r0, #24]
 802130c:	b90b      	cbnz	r3, 8021312 <__swbuf_r+0x12>
 802130e:	f000 fa0b 	bl	8021728 <__sinit>
 8021312:	4b21      	ldr	r3, [pc, #132]	; (8021398 <__swbuf_r+0x98>)
 8021314:	429c      	cmp	r4, r3
 8021316:	d12a      	bne.n	802136e <__swbuf_r+0x6e>
 8021318:	686c      	ldr	r4, [r5, #4]
 802131a:	69a3      	ldr	r3, [r4, #24]
 802131c:	60a3      	str	r3, [r4, #8]
 802131e:	89a3      	ldrh	r3, [r4, #12]
 8021320:	071a      	lsls	r2, r3, #28
 8021322:	d52e      	bpl.n	8021382 <__swbuf_r+0x82>
 8021324:	6923      	ldr	r3, [r4, #16]
 8021326:	b363      	cbz	r3, 8021382 <__swbuf_r+0x82>
 8021328:	6923      	ldr	r3, [r4, #16]
 802132a:	6820      	ldr	r0, [r4, #0]
 802132c:	1ac0      	subs	r0, r0, r3
 802132e:	6963      	ldr	r3, [r4, #20]
 8021330:	b2f6      	uxtb	r6, r6
 8021332:	4283      	cmp	r3, r0
 8021334:	4637      	mov	r7, r6
 8021336:	dc04      	bgt.n	8021342 <__swbuf_r+0x42>
 8021338:	4621      	mov	r1, r4
 802133a:	4628      	mov	r0, r5
 802133c:	f000 f98a 	bl	8021654 <_fflush_r>
 8021340:	bb28      	cbnz	r0, 802138e <__swbuf_r+0x8e>
 8021342:	68a3      	ldr	r3, [r4, #8]
 8021344:	3b01      	subs	r3, #1
 8021346:	60a3      	str	r3, [r4, #8]
 8021348:	6823      	ldr	r3, [r4, #0]
 802134a:	1c5a      	adds	r2, r3, #1
 802134c:	6022      	str	r2, [r4, #0]
 802134e:	701e      	strb	r6, [r3, #0]
 8021350:	6963      	ldr	r3, [r4, #20]
 8021352:	3001      	adds	r0, #1
 8021354:	4283      	cmp	r3, r0
 8021356:	d004      	beq.n	8021362 <__swbuf_r+0x62>
 8021358:	89a3      	ldrh	r3, [r4, #12]
 802135a:	07db      	lsls	r3, r3, #31
 802135c:	d519      	bpl.n	8021392 <__swbuf_r+0x92>
 802135e:	2e0a      	cmp	r6, #10
 8021360:	d117      	bne.n	8021392 <__swbuf_r+0x92>
 8021362:	4621      	mov	r1, r4
 8021364:	4628      	mov	r0, r5
 8021366:	f000 f975 	bl	8021654 <_fflush_r>
 802136a:	b190      	cbz	r0, 8021392 <__swbuf_r+0x92>
 802136c:	e00f      	b.n	802138e <__swbuf_r+0x8e>
 802136e:	4b0b      	ldr	r3, [pc, #44]	; (802139c <__swbuf_r+0x9c>)
 8021370:	429c      	cmp	r4, r3
 8021372:	d101      	bne.n	8021378 <__swbuf_r+0x78>
 8021374:	68ac      	ldr	r4, [r5, #8]
 8021376:	e7d0      	b.n	802131a <__swbuf_r+0x1a>
 8021378:	4b09      	ldr	r3, [pc, #36]	; (80213a0 <__swbuf_r+0xa0>)
 802137a:	429c      	cmp	r4, r3
 802137c:	bf08      	it	eq
 802137e:	68ec      	ldreq	r4, [r5, #12]
 8021380:	e7cb      	b.n	802131a <__swbuf_r+0x1a>
 8021382:	4621      	mov	r1, r4
 8021384:	4628      	mov	r0, r5
 8021386:	f000 f80d 	bl	80213a4 <__swsetup_r>
 802138a:	2800      	cmp	r0, #0
 802138c:	d0cc      	beq.n	8021328 <__swbuf_r+0x28>
 802138e:	f04f 37ff 	mov.w	r7, #4294967295
 8021392:	4638      	mov	r0, r7
 8021394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021396:	bf00      	nop
 8021398:	08026488 	.word	0x08026488
 802139c:	080264a8 	.word	0x080264a8
 80213a0:	08026468 	.word	0x08026468

080213a4 <__swsetup_r>:
 80213a4:	4b32      	ldr	r3, [pc, #200]	; (8021470 <__swsetup_r+0xcc>)
 80213a6:	b570      	push	{r4, r5, r6, lr}
 80213a8:	681d      	ldr	r5, [r3, #0]
 80213aa:	4606      	mov	r6, r0
 80213ac:	460c      	mov	r4, r1
 80213ae:	b125      	cbz	r5, 80213ba <__swsetup_r+0x16>
 80213b0:	69ab      	ldr	r3, [r5, #24]
 80213b2:	b913      	cbnz	r3, 80213ba <__swsetup_r+0x16>
 80213b4:	4628      	mov	r0, r5
 80213b6:	f000 f9b7 	bl	8021728 <__sinit>
 80213ba:	4b2e      	ldr	r3, [pc, #184]	; (8021474 <__swsetup_r+0xd0>)
 80213bc:	429c      	cmp	r4, r3
 80213be:	d10f      	bne.n	80213e0 <__swsetup_r+0x3c>
 80213c0:	686c      	ldr	r4, [r5, #4]
 80213c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80213c6:	b29a      	uxth	r2, r3
 80213c8:	0715      	lsls	r5, r2, #28
 80213ca:	d42c      	bmi.n	8021426 <__swsetup_r+0x82>
 80213cc:	06d0      	lsls	r0, r2, #27
 80213ce:	d411      	bmi.n	80213f4 <__swsetup_r+0x50>
 80213d0:	2209      	movs	r2, #9
 80213d2:	6032      	str	r2, [r6, #0]
 80213d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80213d8:	81a3      	strh	r3, [r4, #12]
 80213da:	f04f 30ff 	mov.w	r0, #4294967295
 80213de:	e03e      	b.n	802145e <__swsetup_r+0xba>
 80213e0:	4b25      	ldr	r3, [pc, #148]	; (8021478 <__swsetup_r+0xd4>)
 80213e2:	429c      	cmp	r4, r3
 80213e4:	d101      	bne.n	80213ea <__swsetup_r+0x46>
 80213e6:	68ac      	ldr	r4, [r5, #8]
 80213e8:	e7eb      	b.n	80213c2 <__swsetup_r+0x1e>
 80213ea:	4b24      	ldr	r3, [pc, #144]	; (802147c <__swsetup_r+0xd8>)
 80213ec:	429c      	cmp	r4, r3
 80213ee:	bf08      	it	eq
 80213f0:	68ec      	ldreq	r4, [r5, #12]
 80213f2:	e7e6      	b.n	80213c2 <__swsetup_r+0x1e>
 80213f4:	0751      	lsls	r1, r2, #29
 80213f6:	d512      	bpl.n	802141e <__swsetup_r+0x7a>
 80213f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80213fa:	b141      	cbz	r1, 802140e <__swsetup_r+0x6a>
 80213fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021400:	4299      	cmp	r1, r3
 8021402:	d002      	beq.n	802140a <__swsetup_r+0x66>
 8021404:	4630      	mov	r0, r6
 8021406:	f7ff fb7d 	bl	8020b04 <_free_r>
 802140a:	2300      	movs	r3, #0
 802140c:	6363      	str	r3, [r4, #52]	; 0x34
 802140e:	89a3      	ldrh	r3, [r4, #12]
 8021410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021414:	81a3      	strh	r3, [r4, #12]
 8021416:	2300      	movs	r3, #0
 8021418:	6063      	str	r3, [r4, #4]
 802141a:	6923      	ldr	r3, [r4, #16]
 802141c:	6023      	str	r3, [r4, #0]
 802141e:	89a3      	ldrh	r3, [r4, #12]
 8021420:	f043 0308 	orr.w	r3, r3, #8
 8021424:	81a3      	strh	r3, [r4, #12]
 8021426:	6923      	ldr	r3, [r4, #16]
 8021428:	b94b      	cbnz	r3, 802143e <__swsetup_r+0x9a>
 802142a:	89a3      	ldrh	r3, [r4, #12]
 802142c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021434:	d003      	beq.n	802143e <__swsetup_r+0x9a>
 8021436:	4621      	mov	r1, r4
 8021438:	4630      	mov	r0, r6
 802143a:	f000 fa23 	bl	8021884 <__smakebuf_r>
 802143e:	89a2      	ldrh	r2, [r4, #12]
 8021440:	f012 0301 	ands.w	r3, r2, #1
 8021444:	d00c      	beq.n	8021460 <__swsetup_r+0xbc>
 8021446:	2300      	movs	r3, #0
 8021448:	60a3      	str	r3, [r4, #8]
 802144a:	6963      	ldr	r3, [r4, #20]
 802144c:	425b      	negs	r3, r3
 802144e:	61a3      	str	r3, [r4, #24]
 8021450:	6923      	ldr	r3, [r4, #16]
 8021452:	b953      	cbnz	r3, 802146a <__swsetup_r+0xc6>
 8021454:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021458:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802145c:	d1ba      	bne.n	80213d4 <__swsetup_r+0x30>
 802145e:	bd70      	pop	{r4, r5, r6, pc}
 8021460:	0792      	lsls	r2, r2, #30
 8021462:	bf58      	it	pl
 8021464:	6963      	ldrpl	r3, [r4, #20]
 8021466:	60a3      	str	r3, [r4, #8]
 8021468:	e7f2      	b.n	8021450 <__swsetup_r+0xac>
 802146a:	2000      	movs	r0, #0
 802146c:	e7f7      	b.n	802145e <__swsetup_r+0xba>
 802146e:	bf00      	nop
 8021470:	20000068 	.word	0x20000068
 8021474:	08026488 	.word	0x08026488
 8021478:	080264a8 	.word	0x080264a8
 802147c:	08026468 	.word	0x08026468

08021480 <__register_exitproc>:
 8021480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021484:	4d2c      	ldr	r5, [pc, #176]	; (8021538 <__register_exitproc+0xb8>)
 8021486:	682c      	ldr	r4, [r5, #0]
 8021488:	4607      	mov	r7, r0
 802148a:	460e      	mov	r6, r1
 802148c:	4691      	mov	r9, r2
 802148e:	4698      	mov	r8, r3
 8021490:	b934      	cbnz	r4, 80214a0 <__register_exitproc+0x20>
 8021492:	4b2a      	ldr	r3, [pc, #168]	; (802153c <__register_exitproc+0xbc>)
 8021494:	4c2a      	ldr	r4, [pc, #168]	; (8021540 <__register_exitproc+0xc0>)
 8021496:	602c      	str	r4, [r5, #0]
 8021498:	b113      	cbz	r3, 80214a0 <__register_exitproc+0x20>
 802149a:	681b      	ldr	r3, [r3, #0]
 802149c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80214a0:	6863      	ldr	r3, [r4, #4]
 80214a2:	2b1f      	cmp	r3, #31
 80214a4:	dd3d      	ble.n	8021522 <__register_exitproc+0xa2>
 80214a6:	4b27      	ldr	r3, [pc, #156]	; (8021544 <__register_exitproc+0xc4>)
 80214a8:	b91b      	cbnz	r3, 80214b2 <__register_exitproc+0x32>
 80214aa:	f04f 30ff 	mov.w	r0, #4294967295
 80214ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80214b2:	208c      	movs	r0, #140	; 0x8c
 80214b4:	f7ff fb02 	bl	8020abc <malloc>
 80214b8:	4604      	mov	r4, r0
 80214ba:	2800      	cmp	r0, #0
 80214bc:	d0f5      	beq.n	80214aa <__register_exitproc+0x2a>
 80214be:	2300      	movs	r3, #0
 80214c0:	682a      	ldr	r2, [r5, #0]
 80214c2:	6002      	str	r2, [r0, #0]
 80214c4:	6043      	str	r3, [r0, #4]
 80214c6:	6028      	str	r0, [r5, #0]
 80214c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 80214cc:	b30f      	cbz	r7, 8021512 <__register_exitproc+0x92>
 80214ce:	f44f 7084 	mov.w	r0, #264	; 0x108
 80214d2:	f7ff faf3 	bl	8020abc <malloc>
 80214d6:	2800      	cmp	r0, #0
 80214d8:	d0e7      	beq.n	80214aa <__register_exitproc+0x2a>
 80214da:	2300      	movs	r3, #0
 80214dc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80214e0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 80214e4:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80214e8:	6862      	ldr	r2, [r4, #4]
 80214ea:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 80214ee:	2301      	movs	r3, #1
 80214f0:	4093      	lsls	r3, r2
 80214f2:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80214f6:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 80214fa:	431a      	orrs	r2, r3
 80214fc:	2f02      	cmp	r7, #2
 80214fe:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8021502:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8021506:	bf02      	ittt	eq
 8021508:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 802150c:	4313      	orreq	r3, r2
 802150e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8021512:	6863      	ldr	r3, [r4, #4]
 8021514:	1c5a      	adds	r2, r3, #1
 8021516:	3302      	adds	r3, #2
 8021518:	6062      	str	r2, [r4, #4]
 802151a:	2000      	movs	r0, #0
 802151c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8021520:	e7c5      	b.n	80214ae <__register_exitproc+0x2e>
 8021522:	2f00      	cmp	r7, #0
 8021524:	d0f5      	beq.n	8021512 <__register_exitproc+0x92>
 8021526:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802152a:	2800      	cmp	r0, #0
 802152c:	d1dc      	bne.n	80214e8 <__register_exitproc+0x68>
 802152e:	4b05      	ldr	r3, [pc, #20]	; (8021544 <__register_exitproc+0xc4>)
 8021530:	2b00      	cmp	r3, #0
 8021532:	d0ba      	beq.n	80214aa <__register_exitproc+0x2a>
 8021534:	e7cb      	b.n	80214ce <__register_exitproc+0x4e>
 8021536:	bf00      	nop
 8021538:	2001a9e0 	.word	0x2001a9e0
 802153c:	00000000 	.word	0x00000000
 8021540:	2001a954 	.word	0x2001a954
 8021544:	08020abd 	.word	0x08020abd

08021548 <__sflush_r>:
 8021548:	898a      	ldrh	r2, [r1, #12]
 802154a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802154e:	4605      	mov	r5, r0
 8021550:	0710      	lsls	r0, r2, #28
 8021552:	460c      	mov	r4, r1
 8021554:	d458      	bmi.n	8021608 <__sflush_r+0xc0>
 8021556:	684b      	ldr	r3, [r1, #4]
 8021558:	2b00      	cmp	r3, #0
 802155a:	dc05      	bgt.n	8021568 <__sflush_r+0x20>
 802155c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802155e:	2b00      	cmp	r3, #0
 8021560:	dc02      	bgt.n	8021568 <__sflush_r+0x20>
 8021562:	2000      	movs	r0, #0
 8021564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802156a:	2e00      	cmp	r6, #0
 802156c:	d0f9      	beq.n	8021562 <__sflush_r+0x1a>
 802156e:	2300      	movs	r3, #0
 8021570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021574:	682f      	ldr	r7, [r5, #0]
 8021576:	6a21      	ldr	r1, [r4, #32]
 8021578:	602b      	str	r3, [r5, #0]
 802157a:	d032      	beq.n	80215e2 <__sflush_r+0x9a>
 802157c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802157e:	89a3      	ldrh	r3, [r4, #12]
 8021580:	075a      	lsls	r2, r3, #29
 8021582:	d505      	bpl.n	8021590 <__sflush_r+0x48>
 8021584:	6863      	ldr	r3, [r4, #4]
 8021586:	1ac0      	subs	r0, r0, r3
 8021588:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802158a:	b10b      	cbz	r3, 8021590 <__sflush_r+0x48>
 802158c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802158e:	1ac0      	subs	r0, r0, r3
 8021590:	2300      	movs	r3, #0
 8021592:	4602      	mov	r2, r0
 8021594:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021596:	6a21      	ldr	r1, [r4, #32]
 8021598:	4628      	mov	r0, r5
 802159a:	47b0      	blx	r6
 802159c:	1c43      	adds	r3, r0, #1
 802159e:	89a3      	ldrh	r3, [r4, #12]
 80215a0:	d106      	bne.n	80215b0 <__sflush_r+0x68>
 80215a2:	6829      	ldr	r1, [r5, #0]
 80215a4:	291d      	cmp	r1, #29
 80215a6:	d848      	bhi.n	802163a <__sflush_r+0xf2>
 80215a8:	4a29      	ldr	r2, [pc, #164]	; (8021650 <__sflush_r+0x108>)
 80215aa:	40ca      	lsrs	r2, r1
 80215ac:	07d6      	lsls	r6, r2, #31
 80215ae:	d544      	bpl.n	802163a <__sflush_r+0xf2>
 80215b0:	2200      	movs	r2, #0
 80215b2:	6062      	str	r2, [r4, #4]
 80215b4:	04d9      	lsls	r1, r3, #19
 80215b6:	6922      	ldr	r2, [r4, #16]
 80215b8:	6022      	str	r2, [r4, #0]
 80215ba:	d504      	bpl.n	80215c6 <__sflush_r+0x7e>
 80215bc:	1c42      	adds	r2, r0, #1
 80215be:	d101      	bne.n	80215c4 <__sflush_r+0x7c>
 80215c0:	682b      	ldr	r3, [r5, #0]
 80215c2:	b903      	cbnz	r3, 80215c6 <__sflush_r+0x7e>
 80215c4:	6560      	str	r0, [r4, #84]	; 0x54
 80215c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80215c8:	602f      	str	r7, [r5, #0]
 80215ca:	2900      	cmp	r1, #0
 80215cc:	d0c9      	beq.n	8021562 <__sflush_r+0x1a>
 80215ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80215d2:	4299      	cmp	r1, r3
 80215d4:	d002      	beq.n	80215dc <__sflush_r+0x94>
 80215d6:	4628      	mov	r0, r5
 80215d8:	f7ff fa94 	bl	8020b04 <_free_r>
 80215dc:	2000      	movs	r0, #0
 80215de:	6360      	str	r0, [r4, #52]	; 0x34
 80215e0:	e7c0      	b.n	8021564 <__sflush_r+0x1c>
 80215e2:	2301      	movs	r3, #1
 80215e4:	4628      	mov	r0, r5
 80215e6:	47b0      	blx	r6
 80215e8:	1c41      	adds	r1, r0, #1
 80215ea:	d1c8      	bne.n	802157e <__sflush_r+0x36>
 80215ec:	682b      	ldr	r3, [r5, #0]
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	d0c5      	beq.n	802157e <__sflush_r+0x36>
 80215f2:	2b1d      	cmp	r3, #29
 80215f4:	d001      	beq.n	80215fa <__sflush_r+0xb2>
 80215f6:	2b16      	cmp	r3, #22
 80215f8:	d101      	bne.n	80215fe <__sflush_r+0xb6>
 80215fa:	602f      	str	r7, [r5, #0]
 80215fc:	e7b1      	b.n	8021562 <__sflush_r+0x1a>
 80215fe:	89a3      	ldrh	r3, [r4, #12]
 8021600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021604:	81a3      	strh	r3, [r4, #12]
 8021606:	e7ad      	b.n	8021564 <__sflush_r+0x1c>
 8021608:	690f      	ldr	r7, [r1, #16]
 802160a:	2f00      	cmp	r7, #0
 802160c:	d0a9      	beq.n	8021562 <__sflush_r+0x1a>
 802160e:	0793      	lsls	r3, r2, #30
 8021610:	680e      	ldr	r6, [r1, #0]
 8021612:	bf08      	it	eq
 8021614:	694b      	ldreq	r3, [r1, #20]
 8021616:	600f      	str	r7, [r1, #0]
 8021618:	bf18      	it	ne
 802161a:	2300      	movne	r3, #0
 802161c:	eba6 0807 	sub.w	r8, r6, r7
 8021620:	608b      	str	r3, [r1, #8]
 8021622:	f1b8 0f00 	cmp.w	r8, #0
 8021626:	dd9c      	ble.n	8021562 <__sflush_r+0x1a>
 8021628:	4643      	mov	r3, r8
 802162a:	463a      	mov	r2, r7
 802162c:	6a21      	ldr	r1, [r4, #32]
 802162e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021630:	4628      	mov	r0, r5
 8021632:	47b0      	blx	r6
 8021634:	2800      	cmp	r0, #0
 8021636:	dc06      	bgt.n	8021646 <__sflush_r+0xfe>
 8021638:	89a3      	ldrh	r3, [r4, #12]
 802163a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802163e:	81a3      	strh	r3, [r4, #12]
 8021640:	f04f 30ff 	mov.w	r0, #4294967295
 8021644:	e78e      	b.n	8021564 <__sflush_r+0x1c>
 8021646:	4407      	add	r7, r0
 8021648:	eba8 0800 	sub.w	r8, r8, r0
 802164c:	e7e9      	b.n	8021622 <__sflush_r+0xda>
 802164e:	bf00      	nop
 8021650:	20400001 	.word	0x20400001

08021654 <_fflush_r>:
 8021654:	b538      	push	{r3, r4, r5, lr}
 8021656:	690b      	ldr	r3, [r1, #16]
 8021658:	4605      	mov	r5, r0
 802165a:	460c      	mov	r4, r1
 802165c:	b1db      	cbz	r3, 8021696 <_fflush_r+0x42>
 802165e:	b118      	cbz	r0, 8021668 <_fflush_r+0x14>
 8021660:	6983      	ldr	r3, [r0, #24]
 8021662:	b90b      	cbnz	r3, 8021668 <_fflush_r+0x14>
 8021664:	f000 f860 	bl	8021728 <__sinit>
 8021668:	4b0c      	ldr	r3, [pc, #48]	; (802169c <_fflush_r+0x48>)
 802166a:	429c      	cmp	r4, r3
 802166c:	d109      	bne.n	8021682 <_fflush_r+0x2e>
 802166e:	686c      	ldr	r4, [r5, #4]
 8021670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021674:	b17b      	cbz	r3, 8021696 <_fflush_r+0x42>
 8021676:	4621      	mov	r1, r4
 8021678:	4628      	mov	r0, r5
 802167a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802167e:	f7ff bf63 	b.w	8021548 <__sflush_r>
 8021682:	4b07      	ldr	r3, [pc, #28]	; (80216a0 <_fflush_r+0x4c>)
 8021684:	429c      	cmp	r4, r3
 8021686:	d101      	bne.n	802168c <_fflush_r+0x38>
 8021688:	68ac      	ldr	r4, [r5, #8]
 802168a:	e7f1      	b.n	8021670 <_fflush_r+0x1c>
 802168c:	4b05      	ldr	r3, [pc, #20]	; (80216a4 <_fflush_r+0x50>)
 802168e:	429c      	cmp	r4, r3
 8021690:	bf08      	it	eq
 8021692:	68ec      	ldreq	r4, [r5, #12]
 8021694:	e7ec      	b.n	8021670 <_fflush_r+0x1c>
 8021696:	2000      	movs	r0, #0
 8021698:	bd38      	pop	{r3, r4, r5, pc}
 802169a:	bf00      	nop
 802169c:	08026488 	.word	0x08026488
 80216a0:	080264a8 	.word	0x080264a8
 80216a4:	08026468 	.word	0x08026468

080216a8 <std>:
 80216a8:	2300      	movs	r3, #0
 80216aa:	b510      	push	{r4, lr}
 80216ac:	4604      	mov	r4, r0
 80216ae:	e9c0 3300 	strd	r3, r3, [r0]
 80216b2:	6083      	str	r3, [r0, #8]
 80216b4:	8181      	strh	r1, [r0, #12]
 80216b6:	6643      	str	r3, [r0, #100]	; 0x64
 80216b8:	81c2      	strh	r2, [r0, #14]
 80216ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80216be:	6183      	str	r3, [r0, #24]
 80216c0:	4619      	mov	r1, r3
 80216c2:	2208      	movs	r2, #8
 80216c4:	305c      	adds	r0, #92	; 0x5c
 80216c6:	f7ff fa14 	bl	8020af2 <memset>
 80216ca:	4b05      	ldr	r3, [pc, #20]	; (80216e0 <std+0x38>)
 80216cc:	6263      	str	r3, [r4, #36]	; 0x24
 80216ce:	4b05      	ldr	r3, [pc, #20]	; (80216e4 <std+0x3c>)
 80216d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80216d2:	4b05      	ldr	r3, [pc, #20]	; (80216e8 <std+0x40>)
 80216d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80216d6:	4b05      	ldr	r3, [pc, #20]	; (80216ec <std+0x44>)
 80216d8:	6224      	str	r4, [r4, #32]
 80216da:	6323      	str	r3, [r4, #48]	; 0x30
 80216dc:	bd10      	pop	{r4, pc}
 80216de:	bf00      	nop
 80216e0:	08021c2d 	.word	0x08021c2d
 80216e4:	08021c4f 	.word	0x08021c4f
 80216e8:	08021c87 	.word	0x08021c87
 80216ec:	08021cab 	.word	0x08021cab

080216f0 <_cleanup_r>:
 80216f0:	4901      	ldr	r1, [pc, #4]	; (80216f8 <_cleanup_r+0x8>)
 80216f2:	f000 b885 	b.w	8021800 <_fwalk_reent>
 80216f6:	bf00      	nop
 80216f8:	08021655 	.word	0x08021655

080216fc <__sfmoreglue>:
 80216fc:	b570      	push	{r4, r5, r6, lr}
 80216fe:	1e4a      	subs	r2, r1, #1
 8021700:	2568      	movs	r5, #104	; 0x68
 8021702:	4355      	muls	r5, r2
 8021704:	460e      	mov	r6, r1
 8021706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802170a:	f7ff fa49 	bl	8020ba0 <_malloc_r>
 802170e:	4604      	mov	r4, r0
 8021710:	b140      	cbz	r0, 8021724 <__sfmoreglue+0x28>
 8021712:	2100      	movs	r1, #0
 8021714:	e9c0 1600 	strd	r1, r6, [r0]
 8021718:	300c      	adds	r0, #12
 802171a:	60a0      	str	r0, [r4, #8]
 802171c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021720:	f7ff f9e7 	bl	8020af2 <memset>
 8021724:	4620      	mov	r0, r4
 8021726:	bd70      	pop	{r4, r5, r6, pc}

08021728 <__sinit>:
 8021728:	6983      	ldr	r3, [r0, #24]
 802172a:	b510      	push	{r4, lr}
 802172c:	4604      	mov	r4, r0
 802172e:	bb33      	cbnz	r3, 802177e <__sinit+0x56>
 8021730:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8021734:	6503      	str	r3, [r0, #80]	; 0x50
 8021736:	4b12      	ldr	r3, [pc, #72]	; (8021780 <__sinit+0x58>)
 8021738:	4a12      	ldr	r2, [pc, #72]	; (8021784 <__sinit+0x5c>)
 802173a:	681b      	ldr	r3, [r3, #0]
 802173c:	6282      	str	r2, [r0, #40]	; 0x28
 802173e:	4298      	cmp	r0, r3
 8021740:	bf04      	itt	eq
 8021742:	2301      	moveq	r3, #1
 8021744:	6183      	streq	r3, [r0, #24]
 8021746:	f000 f81f 	bl	8021788 <__sfp>
 802174a:	6060      	str	r0, [r4, #4]
 802174c:	4620      	mov	r0, r4
 802174e:	f000 f81b 	bl	8021788 <__sfp>
 8021752:	60a0      	str	r0, [r4, #8]
 8021754:	4620      	mov	r0, r4
 8021756:	f000 f817 	bl	8021788 <__sfp>
 802175a:	2200      	movs	r2, #0
 802175c:	60e0      	str	r0, [r4, #12]
 802175e:	2104      	movs	r1, #4
 8021760:	6860      	ldr	r0, [r4, #4]
 8021762:	f7ff ffa1 	bl	80216a8 <std>
 8021766:	2201      	movs	r2, #1
 8021768:	2109      	movs	r1, #9
 802176a:	68a0      	ldr	r0, [r4, #8]
 802176c:	f7ff ff9c 	bl	80216a8 <std>
 8021770:	2202      	movs	r2, #2
 8021772:	2112      	movs	r1, #18
 8021774:	68e0      	ldr	r0, [r4, #12]
 8021776:	f7ff ff97 	bl	80216a8 <std>
 802177a:	2301      	movs	r3, #1
 802177c:	61a3      	str	r3, [r4, #24]
 802177e:	bd10      	pop	{r4, pc}
 8021780:	08026430 	.word	0x08026430
 8021784:	080216f1 	.word	0x080216f1

08021788 <__sfp>:
 8021788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802178a:	4b1b      	ldr	r3, [pc, #108]	; (80217f8 <__sfp+0x70>)
 802178c:	681e      	ldr	r6, [r3, #0]
 802178e:	69b3      	ldr	r3, [r6, #24]
 8021790:	4607      	mov	r7, r0
 8021792:	b913      	cbnz	r3, 802179a <__sfp+0x12>
 8021794:	4630      	mov	r0, r6
 8021796:	f7ff ffc7 	bl	8021728 <__sinit>
 802179a:	3648      	adds	r6, #72	; 0x48
 802179c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80217a0:	3b01      	subs	r3, #1
 80217a2:	d503      	bpl.n	80217ac <__sfp+0x24>
 80217a4:	6833      	ldr	r3, [r6, #0]
 80217a6:	b133      	cbz	r3, 80217b6 <__sfp+0x2e>
 80217a8:	6836      	ldr	r6, [r6, #0]
 80217aa:	e7f7      	b.n	802179c <__sfp+0x14>
 80217ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80217b0:	b16d      	cbz	r5, 80217ce <__sfp+0x46>
 80217b2:	3468      	adds	r4, #104	; 0x68
 80217b4:	e7f4      	b.n	80217a0 <__sfp+0x18>
 80217b6:	2104      	movs	r1, #4
 80217b8:	4638      	mov	r0, r7
 80217ba:	f7ff ff9f 	bl	80216fc <__sfmoreglue>
 80217be:	6030      	str	r0, [r6, #0]
 80217c0:	2800      	cmp	r0, #0
 80217c2:	d1f1      	bne.n	80217a8 <__sfp+0x20>
 80217c4:	230c      	movs	r3, #12
 80217c6:	603b      	str	r3, [r7, #0]
 80217c8:	4604      	mov	r4, r0
 80217ca:	4620      	mov	r0, r4
 80217cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80217ce:	4b0b      	ldr	r3, [pc, #44]	; (80217fc <__sfp+0x74>)
 80217d0:	6665      	str	r5, [r4, #100]	; 0x64
 80217d2:	e9c4 5500 	strd	r5, r5, [r4]
 80217d6:	60a5      	str	r5, [r4, #8]
 80217d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80217dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80217e0:	2208      	movs	r2, #8
 80217e2:	4629      	mov	r1, r5
 80217e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80217e8:	f7ff f983 	bl	8020af2 <memset>
 80217ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80217f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80217f4:	e7e9      	b.n	80217ca <__sfp+0x42>
 80217f6:	bf00      	nop
 80217f8:	08026430 	.word	0x08026430
 80217fc:	ffff0001 	.word	0xffff0001

08021800 <_fwalk_reent>:
 8021800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021804:	4680      	mov	r8, r0
 8021806:	4689      	mov	r9, r1
 8021808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802180c:	2600      	movs	r6, #0
 802180e:	b914      	cbnz	r4, 8021816 <_fwalk_reent+0x16>
 8021810:	4630      	mov	r0, r6
 8021812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021816:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802181a:	3f01      	subs	r7, #1
 802181c:	d501      	bpl.n	8021822 <_fwalk_reent+0x22>
 802181e:	6824      	ldr	r4, [r4, #0]
 8021820:	e7f5      	b.n	802180e <_fwalk_reent+0xe>
 8021822:	89ab      	ldrh	r3, [r5, #12]
 8021824:	2b01      	cmp	r3, #1
 8021826:	d907      	bls.n	8021838 <_fwalk_reent+0x38>
 8021828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802182c:	3301      	adds	r3, #1
 802182e:	d003      	beq.n	8021838 <_fwalk_reent+0x38>
 8021830:	4629      	mov	r1, r5
 8021832:	4640      	mov	r0, r8
 8021834:	47c8      	blx	r9
 8021836:	4306      	orrs	r6, r0
 8021838:	3568      	adds	r5, #104	; 0x68
 802183a:	e7ee      	b.n	802181a <_fwalk_reent+0x1a>

0802183c <__swhatbuf_r>:
 802183c:	b570      	push	{r4, r5, r6, lr}
 802183e:	460e      	mov	r6, r1
 8021840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021844:	2900      	cmp	r1, #0
 8021846:	b096      	sub	sp, #88	; 0x58
 8021848:	4614      	mov	r4, r2
 802184a:	461d      	mov	r5, r3
 802184c:	da07      	bge.n	802185e <__swhatbuf_r+0x22>
 802184e:	2300      	movs	r3, #0
 8021850:	602b      	str	r3, [r5, #0]
 8021852:	89b3      	ldrh	r3, [r6, #12]
 8021854:	061a      	lsls	r2, r3, #24
 8021856:	d410      	bmi.n	802187a <__swhatbuf_r+0x3e>
 8021858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802185c:	e00e      	b.n	802187c <__swhatbuf_r+0x40>
 802185e:	466a      	mov	r2, sp
 8021860:	f000 fa4a 	bl	8021cf8 <_fstat_r>
 8021864:	2800      	cmp	r0, #0
 8021866:	dbf2      	blt.n	802184e <__swhatbuf_r+0x12>
 8021868:	9a01      	ldr	r2, [sp, #4]
 802186a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802186e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021872:	425a      	negs	r2, r3
 8021874:	415a      	adcs	r2, r3
 8021876:	602a      	str	r2, [r5, #0]
 8021878:	e7ee      	b.n	8021858 <__swhatbuf_r+0x1c>
 802187a:	2340      	movs	r3, #64	; 0x40
 802187c:	2000      	movs	r0, #0
 802187e:	6023      	str	r3, [r4, #0]
 8021880:	b016      	add	sp, #88	; 0x58
 8021882:	bd70      	pop	{r4, r5, r6, pc}

08021884 <__smakebuf_r>:
 8021884:	898b      	ldrh	r3, [r1, #12]
 8021886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021888:	079d      	lsls	r5, r3, #30
 802188a:	4606      	mov	r6, r0
 802188c:	460c      	mov	r4, r1
 802188e:	d507      	bpl.n	80218a0 <__smakebuf_r+0x1c>
 8021890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021894:	6023      	str	r3, [r4, #0]
 8021896:	6123      	str	r3, [r4, #16]
 8021898:	2301      	movs	r3, #1
 802189a:	6163      	str	r3, [r4, #20]
 802189c:	b002      	add	sp, #8
 802189e:	bd70      	pop	{r4, r5, r6, pc}
 80218a0:	ab01      	add	r3, sp, #4
 80218a2:	466a      	mov	r2, sp
 80218a4:	f7ff ffca 	bl	802183c <__swhatbuf_r>
 80218a8:	9900      	ldr	r1, [sp, #0]
 80218aa:	4605      	mov	r5, r0
 80218ac:	4630      	mov	r0, r6
 80218ae:	f7ff f977 	bl	8020ba0 <_malloc_r>
 80218b2:	b948      	cbnz	r0, 80218c8 <__smakebuf_r+0x44>
 80218b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80218b8:	059a      	lsls	r2, r3, #22
 80218ba:	d4ef      	bmi.n	802189c <__smakebuf_r+0x18>
 80218bc:	f023 0303 	bic.w	r3, r3, #3
 80218c0:	f043 0302 	orr.w	r3, r3, #2
 80218c4:	81a3      	strh	r3, [r4, #12]
 80218c6:	e7e3      	b.n	8021890 <__smakebuf_r+0xc>
 80218c8:	4b0d      	ldr	r3, [pc, #52]	; (8021900 <__smakebuf_r+0x7c>)
 80218ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80218cc:	89a3      	ldrh	r3, [r4, #12]
 80218ce:	6020      	str	r0, [r4, #0]
 80218d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80218d4:	81a3      	strh	r3, [r4, #12]
 80218d6:	9b00      	ldr	r3, [sp, #0]
 80218d8:	6163      	str	r3, [r4, #20]
 80218da:	9b01      	ldr	r3, [sp, #4]
 80218dc:	6120      	str	r0, [r4, #16]
 80218de:	b15b      	cbz	r3, 80218f8 <__smakebuf_r+0x74>
 80218e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80218e4:	4630      	mov	r0, r6
 80218e6:	f000 fa19 	bl	8021d1c <_isatty_r>
 80218ea:	b128      	cbz	r0, 80218f8 <__smakebuf_r+0x74>
 80218ec:	89a3      	ldrh	r3, [r4, #12]
 80218ee:	f023 0303 	bic.w	r3, r3, #3
 80218f2:	f043 0301 	orr.w	r3, r3, #1
 80218f6:	81a3      	strh	r3, [r4, #12]
 80218f8:	89a3      	ldrh	r3, [r4, #12]
 80218fa:	431d      	orrs	r5, r3
 80218fc:	81a5      	strh	r5, [r4, #12]
 80218fe:	e7cd      	b.n	802189c <__smakebuf_r+0x18>
 8021900:	080216f1 	.word	0x080216f1

08021904 <memmove>:
 8021904:	4288      	cmp	r0, r1
 8021906:	b510      	push	{r4, lr}
 8021908:	eb01 0302 	add.w	r3, r1, r2
 802190c:	d807      	bhi.n	802191e <memmove+0x1a>
 802190e:	1e42      	subs	r2, r0, #1
 8021910:	4299      	cmp	r1, r3
 8021912:	d00a      	beq.n	802192a <memmove+0x26>
 8021914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021918:	f802 4f01 	strb.w	r4, [r2, #1]!
 802191c:	e7f8      	b.n	8021910 <memmove+0xc>
 802191e:	4283      	cmp	r3, r0
 8021920:	d9f5      	bls.n	802190e <memmove+0xa>
 8021922:	1881      	adds	r1, r0, r2
 8021924:	1ad2      	subs	r2, r2, r3
 8021926:	42d3      	cmn	r3, r2
 8021928:	d100      	bne.n	802192c <memmove+0x28>
 802192a:	bd10      	pop	{r4, pc}
 802192c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021930:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8021934:	e7f7      	b.n	8021926 <memmove+0x22>

08021936 <__malloc_lock>:
 8021936:	4770      	bx	lr

08021938 <__malloc_unlock>:
 8021938:	4770      	bx	lr

0802193a <_realloc_r>:
 802193a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802193c:	4607      	mov	r7, r0
 802193e:	4614      	mov	r4, r2
 8021940:	460e      	mov	r6, r1
 8021942:	b921      	cbnz	r1, 802194e <_realloc_r+0x14>
 8021944:	4611      	mov	r1, r2
 8021946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802194a:	f7ff b929 	b.w	8020ba0 <_malloc_r>
 802194e:	b922      	cbnz	r2, 802195a <_realloc_r+0x20>
 8021950:	f7ff f8d8 	bl	8020b04 <_free_r>
 8021954:	4625      	mov	r5, r4
 8021956:	4628      	mov	r0, r5
 8021958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802195a:	f000 fa01 	bl	8021d60 <_malloc_usable_size_r>
 802195e:	42a0      	cmp	r0, r4
 8021960:	d20f      	bcs.n	8021982 <_realloc_r+0x48>
 8021962:	4621      	mov	r1, r4
 8021964:	4638      	mov	r0, r7
 8021966:	f7ff f91b 	bl	8020ba0 <_malloc_r>
 802196a:	4605      	mov	r5, r0
 802196c:	2800      	cmp	r0, #0
 802196e:	d0f2      	beq.n	8021956 <_realloc_r+0x1c>
 8021970:	4631      	mov	r1, r6
 8021972:	4622      	mov	r2, r4
 8021974:	f7ff f8b2 	bl	8020adc <memcpy>
 8021978:	4631      	mov	r1, r6
 802197a:	4638      	mov	r0, r7
 802197c:	f7ff f8c2 	bl	8020b04 <_free_r>
 8021980:	e7e9      	b.n	8021956 <_realloc_r+0x1c>
 8021982:	4635      	mov	r5, r6
 8021984:	e7e7      	b.n	8021956 <_realloc_r+0x1c>

08021986 <__ssputs_r>:
 8021986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802198a:	688e      	ldr	r6, [r1, #8]
 802198c:	429e      	cmp	r6, r3
 802198e:	4682      	mov	sl, r0
 8021990:	460c      	mov	r4, r1
 8021992:	4690      	mov	r8, r2
 8021994:	4699      	mov	r9, r3
 8021996:	d837      	bhi.n	8021a08 <__ssputs_r+0x82>
 8021998:	898a      	ldrh	r2, [r1, #12]
 802199a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802199e:	d031      	beq.n	8021a04 <__ssputs_r+0x7e>
 80219a0:	6825      	ldr	r5, [r4, #0]
 80219a2:	6909      	ldr	r1, [r1, #16]
 80219a4:	1a6f      	subs	r7, r5, r1
 80219a6:	6965      	ldr	r5, [r4, #20]
 80219a8:	2302      	movs	r3, #2
 80219aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80219ae:	fb95 f5f3 	sdiv	r5, r5, r3
 80219b2:	f109 0301 	add.w	r3, r9, #1
 80219b6:	443b      	add	r3, r7
 80219b8:	429d      	cmp	r5, r3
 80219ba:	bf38      	it	cc
 80219bc:	461d      	movcc	r5, r3
 80219be:	0553      	lsls	r3, r2, #21
 80219c0:	d530      	bpl.n	8021a24 <__ssputs_r+0x9e>
 80219c2:	4629      	mov	r1, r5
 80219c4:	f7ff f8ec 	bl	8020ba0 <_malloc_r>
 80219c8:	4606      	mov	r6, r0
 80219ca:	b950      	cbnz	r0, 80219e2 <__ssputs_r+0x5c>
 80219cc:	230c      	movs	r3, #12
 80219ce:	f8ca 3000 	str.w	r3, [sl]
 80219d2:	89a3      	ldrh	r3, [r4, #12]
 80219d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80219d8:	81a3      	strh	r3, [r4, #12]
 80219da:	f04f 30ff 	mov.w	r0, #4294967295
 80219de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80219e2:	463a      	mov	r2, r7
 80219e4:	6921      	ldr	r1, [r4, #16]
 80219e6:	f7ff f879 	bl	8020adc <memcpy>
 80219ea:	89a3      	ldrh	r3, [r4, #12]
 80219ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80219f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80219f4:	81a3      	strh	r3, [r4, #12]
 80219f6:	6126      	str	r6, [r4, #16]
 80219f8:	6165      	str	r5, [r4, #20]
 80219fa:	443e      	add	r6, r7
 80219fc:	1bed      	subs	r5, r5, r7
 80219fe:	6026      	str	r6, [r4, #0]
 8021a00:	60a5      	str	r5, [r4, #8]
 8021a02:	464e      	mov	r6, r9
 8021a04:	454e      	cmp	r6, r9
 8021a06:	d900      	bls.n	8021a0a <__ssputs_r+0x84>
 8021a08:	464e      	mov	r6, r9
 8021a0a:	4632      	mov	r2, r6
 8021a0c:	4641      	mov	r1, r8
 8021a0e:	6820      	ldr	r0, [r4, #0]
 8021a10:	f7ff ff78 	bl	8021904 <memmove>
 8021a14:	68a3      	ldr	r3, [r4, #8]
 8021a16:	1b9b      	subs	r3, r3, r6
 8021a18:	60a3      	str	r3, [r4, #8]
 8021a1a:	6823      	ldr	r3, [r4, #0]
 8021a1c:	441e      	add	r6, r3
 8021a1e:	6026      	str	r6, [r4, #0]
 8021a20:	2000      	movs	r0, #0
 8021a22:	e7dc      	b.n	80219de <__ssputs_r+0x58>
 8021a24:	462a      	mov	r2, r5
 8021a26:	f7ff ff88 	bl	802193a <_realloc_r>
 8021a2a:	4606      	mov	r6, r0
 8021a2c:	2800      	cmp	r0, #0
 8021a2e:	d1e2      	bne.n	80219f6 <__ssputs_r+0x70>
 8021a30:	6921      	ldr	r1, [r4, #16]
 8021a32:	4650      	mov	r0, sl
 8021a34:	f7ff f866 	bl	8020b04 <_free_r>
 8021a38:	e7c8      	b.n	80219cc <__ssputs_r+0x46>
	...

08021a3c <_svfiprintf_r>:
 8021a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a40:	461d      	mov	r5, r3
 8021a42:	898b      	ldrh	r3, [r1, #12]
 8021a44:	061f      	lsls	r7, r3, #24
 8021a46:	b09d      	sub	sp, #116	; 0x74
 8021a48:	4680      	mov	r8, r0
 8021a4a:	460c      	mov	r4, r1
 8021a4c:	4616      	mov	r6, r2
 8021a4e:	d50f      	bpl.n	8021a70 <_svfiprintf_r+0x34>
 8021a50:	690b      	ldr	r3, [r1, #16]
 8021a52:	b96b      	cbnz	r3, 8021a70 <_svfiprintf_r+0x34>
 8021a54:	2140      	movs	r1, #64	; 0x40
 8021a56:	f7ff f8a3 	bl	8020ba0 <_malloc_r>
 8021a5a:	6020      	str	r0, [r4, #0]
 8021a5c:	6120      	str	r0, [r4, #16]
 8021a5e:	b928      	cbnz	r0, 8021a6c <_svfiprintf_r+0x30>
 8021a60:	230c      	movs	r3, #12
 8021a62:	f8c8 3000 	str.w	r3, [r8]
 8021a66:	f04f 30ff 	mov.w	r0, #4294967295
 8021a6a:	e0c8      	b.n	8021bfe <_svfiprintf_r+0x1c2>
 8021a6c:	2340      	movs	r3, #64	; 0x40
 8021a6e:	6163      	str	r3, [r4, #20]
 8021a70:	2300      	movs	r3, #0
 8021a72:	9309      	str	r3, [sp, #36]	; 0x24
 8021a74:	2320      	movs	r3, #32
 8021a76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021a7a:	2330      	movs	r3, #48	; 0x30
 8021a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021a80:	9503      	str	r5, [sp, #12]
 8021a82:	f04f 0b01 	mov.w	fp, #1
 8021a86:	4637      	mov	r7, r6
 8021a88:	463d      	mov	r5, r7
 8021a8a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8021a8e:	b10b      	cbz	r3, 8021a94 <_svfiprintf_r+0x58>
 8021a90:	2b25      	cmp	r3, #37	; 0x25
 8021a92:	d13e      	bne.n	8021b12 <_svfiprintf_r+0xd6>
 8021a94:	ebb7 0a06 	subs.w	sl, r7, r6
 8021a98:	d00b      	beq.n	8021ab2 <_svfiprintf_r+0x76>
 8021a9a:	4653      	mov	r3, sl
 8021a9c:	4632      	mov	r2, r6
 8021a9e:	4621      	mov	r1, r4
 8021aa0:	4640      	mov	r0, r8
 8021aa2:	f7ff ff70 	bl	8021986 <__ssputs_r>
 8021aa6:	3001      	adds	r0, #1
 8021aa8:	f000 80a4 	beq.w	8021bf4 <_svfiprintf_r+0x1b8>
 8021aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021aae:	4453      	add	r3, sl
 8021ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8021ab2:	783b      	ldrb	r3, [r7, #0]
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	f000 809d 	beq.w	8021bf4 <_svfiprintf_r+0x1b8>
 8021aba:	2300      	movs	r3, #0
 8021abc:	f04f 32ff 	mov.w	r2, #4294967295
 8021ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ac4:	9304      	str	r3, [sp, #16]
 8021ac6:	9307      	str	r3, [sp, #28]
 8021ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021acc:	931a      	str	r3, [sp, #104]	; 0x68
 8021ace:	462f      	mov	r7, r5
 8021ad0:	2205      	movs	r2, #5
 8021ad2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8021ad6:	4850      	ldr	r0, [pc, #320]	; (8021c18 <_svfiprintf_r+0x1dc>)
 8021ad8:	f7de fb92 	bl	8000200 <memchr>
 8021adc:	9b04      	ldr	r3, [sp, #16]
 8021ade:	b9d0      	cbnz	r0, 8021b16 <_svfiprintf_r+0xda>
 8021ae0:	06d9      	lsls	r1, r3, #27
 8021ae2:	bf44      	itt	mi
 8021ae4:	2220      	movmi	r2, #32
 8021ae6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021aea:	071a      	lsls	r2, r3, #28
 8021aec:	bf44      	itt	mi
 8021aee:	222b      	movmi	r2, #43	; 0x2b
 8021af0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021af4:	782a      	ldrb	r2, [r5, #0]
 8021af6:	2a2a      	cmp	r2, #42	; 0x2a
 8021af8:	d015      	beq.n	8021b26 <_svfiprintf_r+0xea>
 8021afa:	9a07      	ldr	r2, [sp, #28]
 8021afc:	462f      	mov	r7, r5
 8021afe:	2000      	movs	r0, #0
 8021b00:	250a      	movs	r5, #10
 8021b02:	4639      	mov	r1, r7
 8021b04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021b08:	3b30      	subs	r3, #48	; 0x30
 8021b0a:	2b09      	cmp	r3, #9
 8021b0c:	d94d      	bls.n	8021baa <_svfiprintf_r+0x16e>
 8021b0e:	b1b8      	cbz	r0, 8021b40 <_svfiprintf_r+0x104>
 8021b10:	e00f      	b.n	8021b32 <_svfiprintf_r+0xf6>
 8021b12:	462f      	mov	r7, r5
 8021b14:	e7b8      	b.n	8021a88 <_svfiprintf_r+0x4c>
 8021b16:	4a40      	ldr	r2, [pc, #256]	; (8021c18 <_svfiprintf_r+0x1dc>)
 8021b18:	1a80      	subs	r0, r0, r2
 8021b1a:	fa0b f000 	lsl.w	r0, fp, r0
 8021b1e:	4318      	orrs	r0, r3
 8021b20:	9004      	str	r0, [sp, #16]
 8021b22:	463d      	mov	r5, r7
 8021b24:	e7d3      	b.n	8021ace <_svfiprintf_r+0x92>
 8021b26:	9a03      	ldr	r2, [sp, #12]
 8021b28:	1d11      	adds	r1, r2, #4
 8021b2a:	6812      	ldr	r2, [r2, #0]
 8021b2c:	9103      	str	r1, [sp, #12]
 8021b2e:	2a00      	cmp	r2, #0
 8021b30:	db01      	blt.n	8021b36 <_svfiprintf_r+0xfa>
 8021b32:	9207      	str	r2, [sp, #28]
 8021b34:	e004      	b.n	8021b40 <_svfiprintf_r+0x104>
 8021b36:	4252      	negs	r2, r2
 8021b38:	f043 0302 	orr.w	r3, r3, #2
 8021b3c:	9207      	str	r2, [sp, #28]
 8021b3e:	9304      	str	r3, [sp, #16]
 8021b40:	783b      	ldrb	r3, [r7, #0]
 8021b42:	2b2e      	cmp	r3, #46	; 0x2e
 8021b44:	d10c      	bne.n	8021b60 <_svfiprintf_r+0x124>
 8021b46:	787b      	ldrb	r3, [r7, #1]
 8021b48:	2b2a      	cmp	r3, #42	; 0x2a
 8021b4a:	d133      	bne.n	8021bb4 <_svfiprintf_r+0x178>
 8021b4c:	9b03      	ldr	r3, [sp, #12]
 8021b4e:	1d1a      	adds	r2, r3, #4
 8021b50:	681b      	ldr	r3, [r3, #0]
 8021b52:	9203      	str	r2, [sp, #12]
 8021b54:	2b00      	cmp	r3, #0
 8021b56:	bfb8      	it	lt
 8021b58:	f04f 33ff 	movlt.w	r3, #4294967295
 8021b5c:	3702      	adds	r7, #2
 8021b5e:	9305      	str	r3, [sp, #20]
 8021b60:	4d2e      	ldr	r5, [pc, #184]	; (8021c1c <_svfiprintf_r+0x1e0>)
 8021b62:	7839      	ldrb	r1, [r7, #0]
 8021b64:	2203      	movs	r2, #3
 8021b66:	4628      	mov	r0, r5
 8021b68:	f7de fb4a 	bl	8000200 <memchr>
 8021b6c:	b138      	cbz	r0, 8021b7e <_svfiprintf_r+0x142>
 8021b6e:	2340      	movs	r3, #64	; 0x40
 8021b70:	1b40      	subs	r0, r0, r5
 8021b72:	fa03 f000 	lsl.w	r0, r3, r0
 8021b76:	9b04      	ldr	r3, [sp, #16]
 8021b78:	4303      	orrs	r3, r0
 8021b7a:	3701      	adds	r7, #1
 8021b7c:	9304      	str	r3, [sp, #16]
 8021b7e:	7839      	ldrb	r1, [r7, #0]
 8021b80:	4827      	ldr	r0, [pc, #156]	; (8021c20 <_svfiprintf_r+0x1e4>)
 8021b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021b86:	2206      	movs	r2, #6
 8021b88:	1c7e      	adds	r6, r7, #1
 8021b8a:	f7de fb39 	bl	8000200 <memchr>
 8021b8e:	2800      	cmp	r0, #0
 8021b90:	d038      	beq.n	8021c04 <_svfiprintf_r+0x1c8>
 8021b92:	4b24      	ldr	r3, [pc, #144]	; (8021c24 <_svfiprintf_r+0x1e8>)
 8021b94:	bb13      	cbnz	r3, 8021bdc <_svfiprintf_r+0x1a0>
 8021b96:	9b03      	ldr	r3, [sp, #12]
 8021b98:	3307      	adds	r3, #7
 8021b9a:	f023 0307 	bic.w	r3, r3, #7
 8021b9e:	3308      	adds	r3, #8
 8021ba0:	9303      	str	r3, [sp, #12]
 8021ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ba4:	444b      	add	r3, r9
 8021ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8021ba8:	e76d      	b.n	8021a86 <_svfiprintf_r+0x4a>
 8021baa:	fb05 3202 	mla	r2, r5, r2, r3
 8021bae:	2001      	movs	r0, #1
 8021bb0:	460f      	mov	r7, r1
 8021bb2:	e7a6      	b.n	8021b02 <_svfiprintf_r+0xc6>
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	3701      	adds	r7, #1
 8021bb8:	9305      	str	r3, [sp, #20]
 8021bba:	4619      	mov	r1, r3
 8021bbc:	250a      	movs	r5, #10
 8021bbe:	4638      	mov	r0, r7
 8021bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021bc4:	3a30      	subs	r2, #48	; 0x30
 8021bc6:	2a09      	cmp	r2, #9
 8021bc8:	d903      	bls.n	8021bd2 <_svfiprintf_r+0x196>
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d0c8      	beq.n	8021b60 <_svfiprintf_r+0x124>
 8021bce:	9105      	str	r1, [sp, #20]
 8021bd0:	e7c6      	b.n	8021b60 <_svfiprintf_r+0x124>
 8021bd2:	fb05 2101 	mla	r1, r5, r1, r2
 8021bd6:	2301      	movs	r3, #1
 8021bd8:	4607      	mov	r7, r0
 8021bda:	e7f0      	b.n	8021bbe <_svfiprintf_r+0x182>
 8021bdc:	ab03      	add	r3, sp, #12
 8021bde:	9300      	str	r3, [sp, #0]
 8021be0:	4622      	mov	r2, r4
 8021be2:	4b11      	ldr	r3, [pc, #68]	; (8021c28 <_svfiprintf_r+0x1ec>)
 8021be4:	a904      	add	r1, sp, #16
 8021be6:	4640      	mov	r0, r8
 8021be8:	f3af 8000 	nop.w
 8021bec:	f1b0 3fff 	cmp.w	r0, #4294967295
 8021bf0:	4681      	mov	r9, r0
 8021bf2:	d1d6      	bne.n	8021ba2 <_svfiprintf_r+0x166>
 8021bf4:	89a3      	ldrh	r3, [r4, #12]
 8021bf6:	065b      	lsls	r3, r3, #25
 8021bf8:	f53f af35 	bmi.w	8021a66 <_svfiprintf_r+0x2a>
 8021bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021bfe:	b01d      	add	sp, #116	; 0x74
 8021c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c04:	ab03      	add	r3, sp, #12
 8021c06:	9300      	str	r3, [sp, #0]
 8021c08:	4622      	mov	r2, r4
 8021c0a:	4b07      	ldr	r3, [pc, #28]	; (8021c28 <_svfiprintf_r+0x1ec>)
 8021c0c:	a904      	add	r1, sp, #16
 8021c0e:	4640      	mov	r0, r8
 8021c10:	f7ff f9d6 	bl	8020fc0 <_printf_i>
 8021c14:	e7ea      	b.n	8021bec <_svfiprintf_r+0x1b0>
 8021c16:	bf00      	nop
 8021c18:	08026434 	.word	0x08026434
 8021c1c:	0802643a 	.word	0x0802643a
 8021c20:	0802643e 	.word	0x0802643e
 8021c24:	00000000 	.word	0x00000000
 8021c28:	08021987 	.word	0x08021987

08021c2c <__sread>:
 8021c2c:	b510      	push	{r4, lr}
 8021c2e:	460c      	mov	r4, r1
 8021c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c34:	f000 f89c 	bl	8021d70 <_read_r>
 8021c38:	2800      	cmp	r0, #0
 8021c3a:	bfab      	itete	ge
 8021c3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021c3e:	89a3      	ldrhlt	r3, [r4, #12]
 8021c40:	181b      	addge	r3, r3, r0
 8021c42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021c46:	bfac      	ite	ge
 8021c48:	6563      	strge	r3, [r4, #84]	; 0x54
 8021c4a:	81a3      	strhlt	r3, [r4, #12]
 8021c4c:	bd10      	pop	{r4, pc}

08021c4e <__swrite>:
 8021c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c52:	461f      	mov	r7, r3
 8021c54:	898b      	ldrh	r3, [r1, #12]
 8021c56:	05db      	lsls	r3, r3, #23
 8021c58:	4605      	mov	r5, r0
 8021c5a:	460c      	mov	r4, r1
 8021c5c:	4616      	mov	r6, r2
 8021c5e:	d505      	bpl.n	8021c6c <__swrite+0x1e>
 8021c60:	2302      	movs	r3, #2
 8021c62:	2200      	movs	r2, #0
 8021c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c68:	f000 f868 	bl	8021d3c <_lseek_r>
 8021c6c:	89a3      	ldrh	r3, [r4, #12]
 8021c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021c76:	81a3      	strh	r3, [r4, #12]
 8021c78:	4632      	mov	r2, r6
 8021c7a:	463b      	mov	r3, r7
 8021c7c:	4628      	mov	r0, r5
 8021c7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021c82:	f000 b817 	b.w	8021cb4 <_write_r>

08021c86 <__sseek>:
 8021c86:	b510      	push	{r4, lr}
 8021c88:	460c      	mov	r4, r1
 8021c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021c8e:	f000 f855 	bl	8021d3c <_lseek_r>
 8021c92:	1c43      	adds	r3, r0, #1
 8021c94:	89a3      	ldrh	r3, [r4, #12]
 8021c96:	bf15      	itete	ne
 8021c98:	6560      	strne	r0, [r4, #84]	; 0x54
 8021c9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021c9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021ca2:	81a3      	strheq	r3, [r4, #12]
 8021ca4:	bf18      	it	ne
 8021ca6:	81a3      	strhne	r3, [r4, #12]
 8021ca8:	bd10      	pop	{r4, pc}

08021caa <__sclose>:
 8021caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021cae:	f000 b813 	b.w	8021cd8 <_close_r>
	...

08021cb4 <_write_r>:
 8021cb4:	b538      	push	{r3, r4, r5, lr}
 8021cb6:	4c07      	ldr	r4, [pc, #28]	; (8021cd4 <_write_r+0x20>)
 8021cb8:	4605      	mov	r5, r0
 8021cba:	4608      	mov	r0, r1
 8021cbc:	4611      	mov	r1, r2
 8021cbe:	2200      	movs	r2, #0
 8021cc0:	6022      	str	r2, [r4, #0]
 8021cc2:	461a      	mov	r2, r3
 8021cc4:	f7e0 fb6b 	bl	800239e <_write>
 8021cc8:	1c43      	adds	r3, r0, #1
 8021cca:	d102      	bne.n	8021cd2 <_write_r+0x1e>
 8021ccc:	6823      	ldr	r3, [r4, #0]
 8021cce:	b103      	cbz	r3, 8021cd2 <_write_r+0x1e>
 8021cd0:	602b      	str	r3, [r5, #0]
 8021cd2:	bd38      	pop	{r3, r4, r5, pc}
 8021cd4:	2001aa7c 	.word	0x2001aa7c

08021cd8 <_close_r>:
 8021cd8:	b538      	push	{r3, r4, r5, lr}
 8021cda:	4c06      	ldr	r4, [pc, #24]	; (8021cf4 <_close_r+0x1c>)
 8021cdc:	2300      	movs	r3, #0
 8021cde:	4605      	mov	r5, r0
 8021ce0:	4608      	mov	r0, r1
 8021ce2:	6023      	str	r3, [r4, #0]
 8021ce4:	f7e0 fb77 	bl	80023d6 <_close>
 8021ce8:	1c43      	adds	r3, r0, #1
 8021cea:	d102      	bne.n	8021cf2 <_close_r+0x1a>
 8021cec:	6823      	ldr	r3, [r4, #0]
 8021cee:	b103      	cbz	r3, 8021cf2 <_close_r+0x1a>
 8021cf0:	602b      	str	r3, [r5, #0]
 8021cf2:	bd38      	pop	{r3, r4, r5, pc}
 8021cf4:	2001aa7c 	.word	0x2001aa7c

08021cf8 <_fstat_r>:
 8021cf8:	b538      	push	{r3, r4, r5, lr}
 8021cfa:	4c07      	ldr	r4, [pc, #28]	; (8021d18 <_fstat_r+0x20>)
 8021cfc:	2300      	movs	r3, #0
 8021cfe:	4605      	mov	r5, r0
 8021d00:	4608      	mov	r0, r1
 8021d02:	4611      	mov	r1, r2
 8021d04:	6023      	str	r3, [r4, #0]
 8021d06:	f7e0 fb72 	bl	80023ee <_fstat>
 8021d0a:	1c43      	adds	r3, r0, #1
 8021d0c:	d102      	bne.n	8021d14 <_fstat_r+0x1c>
 8021d0e:	6823      	ldr	r3, [r4, #0]
 8021d10:	b103      	cbz	r3, 8021d14 <_fstat_r+0x1c>
 8021d12:	602b      	str	r3, [r5, #0]
 8021d14:	bd38      	pop	{r3, r4, r5, pc}
 8021d16:	bf00      	nop
 8021d18:	2001aa7c 	.word	0x2001aa7c

08021d1c <_isatty_r>:
 8021d1c:	b538      	push	{r3, r4, r5, lr}
 8021d1e:	4c06      	ldr	r4, [pc, #24]	; (8021d38 <_isatty_r+0x1c>)
 8021d20:	2300      	movs	r3, #0
 8021d22:	4605      	mov	r5, r0
 8021d24:	4608      	mov	r0, r1
 8021d26:	6023      	str	r3, [r4, #0]
 8021d28:	f7e0 fb71 	bl	800240e <_isatty>
 8021d2c:	1c43      	adds	r3, r0, #1
 8021d2e:	d102      	bne.n	8021d36 <_isatty_r+0x1a>
 8021d30:	6823      	ldr	r3, [r4, #0]
 8021d32:	b103      	cbz	r3, 8021d36 <_isatty_r+0x1a>
 8021d34:	602b      	str	r3, [r5, #0]
 8021d36:	bd38      	pop	{r3, r4, r5, pc}
 8021d38:	2001aa7c 	.word	0x2001aa7c

08021d3c <_lseek_r>:
 8021d3c:	b538      	push	{r3, r4, r5, lr}
 8021d3e:	4c07      	ldr	r4, [pc, #28]	; (8021d5c <_lseek_r+0x20>)
 8021d40:	4605      	mov	r5, r0
 8021d42:	4608      	mov	r0, r1
 8021d44:	4611      	mov	r1, r2
 8021d46:	2200      	movs	r2, #0
 8021d48:	6022      	str	r2, [r4, #0]
 8021d4a:	461a      	mov	r2, r3
 8021d4c:	f7e0 fb6a 	bl	8002424 <_lseek>
 8021d50:	1c43      	adds	r3, r0, #1
 8021d52:	d102      	bne.n	8021d5a <_lseek_r+0x1e>
 8021d54:	6823      	ldr	r3, [r4, #0]
 8021d56:	b103      	cbz	r3, 8021d5a <_lseek_r+0x1e>
 8021d58:	602b      	str	r3, [r5, #0]
 8021d5a:	bd38      	pop	{r3, r4, r5, pc}
 8021d5c:	2001aa7c 	.word	0x2001aa7c

08021d60 <_malloc_usable_size_r>:
 8021d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021d64:	1f18      	subs	r0, r3, #4
 8021d66:	2b00      	cmp	r3, #0
 8021d68:	bfbc      	itt	lt
 8021d6a:	580b      	ldrlt	r3, [r1, r0]
 8021d6c:	18c0      	addlt	r0, r0, r3
 8021d6e:	4770      	bx	lr

08021d70 <_read_r>:
 8021d70:	b538      	push	{r3, r4, r5, lr}
 8021d72:	4c07      	ldr	r4, [pc, #28]	; (8021d90 <_read_r+0x20>)
 8021d74:	4605      	mov	r5, r0
 8021d76:	4608      	mov	r0, r1
 8021d78:	4611      	mov	r1, r2
 8021d7a:	2200      	movs	r2, #0
 8021d7c:	6022      	str	r2, [r4, #0]
 8021d7e:	461a      	mov	r2, r3
 8021d80:	f7e0 faf0 	bl	8002364 <_read>
 8021d84:	1c43      	adds	r3, r0, #1
 8021d86:	d102      	bne.n	8021d8e <_read_r+0x1e>
 8021d88:	6823      	ldr	r3, [r4, #0]
 8021d8a:	b103      	cbz	r3, 8021d8e <_read_r+0x1e>
 8021d8c:	602b      	str	r3, [r5, #0]
 8021d8e:	bd38      	pop	{r3, r4, r5, pc}
 8021d90:	2001aa7c 	.word	0x2001aa7c

08021d94 <_init>:
 8021d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d96:	bf00      	nop
 8021d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021d9a:	bc08      	pop	{r3}
 8021d9c:	469e      	mov	lr, r3
 8021d9e:	4770      	bx	lr

08021da0 <_fini>:
 8021da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021da2:	bf00      	nop
 8021da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021da6:	bc08      	pop	{r3}
 8021da8:	469e      	mov	lr, r3
 8021daa:	4770      	bx	lr
